=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class SecurityProfilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete CPU and memory thresholds profile
    # Delete CPU and memory thresholds profile.
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_cpu_mem_thresholds_profile(profile_id, opts = {})
      delete_cpu_mem_thresholds_profile_with_http_info(profile_id, opts)
      nil
    end

    # Delete CPU and memory thresholds profile
    # Delete CPU and memory thresholds profile.
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_cpu_mem_thresholds_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.delete_cpu_mem_thresholds_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityProfilesApi.delete_cpu_mem_thresholds_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/cpu-mem-thresholds-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#delete_cpu_mem_thresholds_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DNS security profile
    # Delete DNS security profile
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_dns_security_profile(profile_id, opts = {})
      delete_dns_security_profile_with_http_info(profile_id, opts)
      nil
    end

    # Delete DNS security profile
    # Delete DNS security profile
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dns_security_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.delete_dns_security_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityProfilesApi.delete_dns_security_profile"
      end
      # resource path
      local_var_path = '/infra/dns-security-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#delete_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DNS security profile binding map
    # API will delete DNS security profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dns_security_profile_binding(domain_id, group_id, dns_security_profile_binding_map_id, opts = {})
      delete_dns_security_profile_binding_with_http_info(domain_id, group_id, dns_security_profile_binding_map_id, opts)
      nil
    end

    # Delete DNS security profile binding map
    # API will delete DNS security profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dns_security_profile_binding_with_http_info(domain_id, group_id, dns_security_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.delete_dns_security_profile_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.delete_dns_security_profile_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.delete_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map_id' when calling SecurityProfilesApi.delete_dns_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps/{dns-security-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'dns-security-profile-binding-map-id' + '}', dns_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#delete_dns_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile
    # API will delete Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_flood_protection_profile(flood_protection_profile_id, opts = {})
      delete_flood_protection_profile_with_http_info(flood_protection_profile_id, opts)
      nil
    end

    # Delete Flood Protection Profile
    # API will delete Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_flood_protection_profile_with_http_info(flood_protection_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.delete_flood_protection_profile ...'
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityProfilesApi.delete_flood_protection_profile"
      end
      # resource path
      local_var_path = '/infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#delete_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Group Monitoring Profile Binding
    # API will delete Group Monitoring Profile Binding
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_group_monitoring_binding(domain_id, group_id, group_monitoring_profile_binding_map_id, opts = {})
      delete_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, opts)
      nil
    end

    # Delete Group Monitoring Profile Binding
    # API will delete Group Monitoring Profile Binding
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.delete_group_monitoring_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.delete_group_monitoring_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.delete_group_monitoring_binding"
      end
      # verify the required parameter 'group_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && group_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_monitoring_profile_binding_map_id' when calling SecurityProfilesApi.delete_group_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/group-monitoring-profile-binding-maps/{group-monitoring-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'group-monitoring-profile-binding-map-id' + '}', group_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#delete_group_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Firewall CPU Memory Thresholds Profile Binding
    # API will delete Firewall CPU Memory Thresholds Profile Binding.
    # @param cpu_mem_thresholds_profile_binding_map_id Firewall CPU Memory Thresholds Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_firewall_cpu_mem_thresholds_profile_binding_map(cpu_mem_thresholds_profile_binding_map_id, opts = {})
      delete_policy_firewall_cpu_mem_thresholds_profile_binding_map_with_http_info(cpu_mem_thresholds_profile_binding_map_id, opts)
      nil
    end

    # Delete Firewall CPU Memory Thresholds Profile Binding
    # API will delete Firewall CPU Memory Thresholds Profile Binding.
    # @param cpu_mem_thresholds_profile_binding_map_id Firewall CPU Memory Thresholds Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_firewall_cpu_mem_thresholds_profile_binding_map_with_http_info(cpu_mem_thresholds_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.delete_policy_firewall_cpu_mem_thresholds_profile_binding_map ...'
      end
      # verify the required parameter 'cpu_mem_thresholds_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && cpu_mem_thresholds_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'cpu_mem_thresholds_profile_binding_map_id' when calling SecurityProfilesApi.delete_policy_firewall_cpu_mem_thresholds_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/cpu-mem-thresholds-profile-binding-maps/{cpu-mem-thresholds-profile-binding-map-id}'.sub('{' + 'cpu-mem-thresholds-profile-binding-map-id' + '}', cpu_mem_thresholds_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#delete_policy_firewall_cpu_mem_thresholds_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Firewall Flood Protection Profile Binding
    # API will delete Firewall Flood Protection Profile Binding
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_firewall_flood_protection_binding(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      delete_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts)
      nil
    end

    # Delete Firewall Flood Protection Profile Binding
    # API will delete Firewall Flood Protection Profile Binding
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.delete_policy_firewall_flood_protection_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.delete_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.delete_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling SecurityProfilesApi.delete_policy_firewall_flood_protection_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#delete_policy_firewall_flood_protection_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Firewall Session Timer Profile Binding
    # API will delete Firewall Session Timer Profile Binding
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_firewall_session_timer_binding(domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts = {})
      delete_policy_firewall_session_timer_binding_with_http_info(domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts)
      nil
    end

    # Delete Firewall Session Timer Profile Binding
    # API will delete Firewall Session Timer Profile Binding
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_firewall_session_timer_binding_with_http_info(domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.delete_policy_firewall_session_timer_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.delete_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.delete_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'firewall_session_timer_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_binding_map_id' when calling SecurityProfilesApi.delete_policy_firewall_session_timer_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps/{firewall-session-timer-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-session-timer-profile-binding-map-id' + '}', firewall_session_timer_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#delete_policy_firewall_session_timer_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Firewall Session Timer Profile
    # API will delete Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_policy_firewall_session_timer_profile(firewall_session_timer_profile_id, opts = {})
      delete_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, opts)
      nil
    end

    # Delete Firewall Session Timer Profile
    # API will delete Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.delete_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityProfilesApi.delete_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#delete_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile Binding for Tier-0 Logical Router
    # API will delete Flood Protection Profile Binding for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_flood_protection_profile_binding(tier0_id, flood_protection_profile_binding_id, opts = {})
      delete_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, opts)
      nil
    end

    # Delete Flood Protection Profile Binding for Tier-0 Logical Router
    # API will delete Flood Protection Profile Binding for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.delete_tier0_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityProfilesApi.delete_tier0_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.delete_tier0_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#delete_tier0_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile Binding for Tier-0 Logical Router LocaleServices
    # API will delete Flood Protection Profile Binding for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_locale_services_flood_protection_profile_binding(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      delete_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts)
      nil
    end

    # Delete Flood Protection Profile Binding for Tier-0 Logical Router LocaleServices
    # API will delete Flood Protection Profile Binding for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.delete_tier0_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityProfilesApi.delete_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.delete_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.delete_tier0_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#delete_tier0_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Session Timer Profile Binding for Tier-0 Logical Router LocaleServices
    # API will delete Session Timer Profile Binding for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_locale_services_session_timer_profile_binding(tier0_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      delete_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, opts)
      nil
    end

    # Delete Session Timer Profile Binding for Tier-0 Logical Router LocaleServices
    # API will delete Session Timer Profile Binding for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.delete_tier0_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityProfilesApi.delete_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.delete_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.delete_tier0_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#delete_tier0_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Session Timer Profile Binding for Tier-0 Logical Router
    # API will delete Session Timer Profile Binding for Tier-0 Logical Router.
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_session_timer_profile_binding(tier0_id, session_timer_profile_binding_id, opts = {})
      delete_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, opts)
      nil
    end

    # Delete Session Timer Profile Binding for Tier-0 Logical Router
    # API will delete Session Timer Profile Binding for Tier-0 Logical Router.
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.delete_tier0_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityProfilesApi.delete_tier0_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.delete_tier0_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#delete_tier0_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile Binding for Tier-1 Logical Router
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_flood_protection_profile_binding(tier1_id, flood_protection_profile_binding_id, opts = {})
      delete_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, opts)
      nil
    end

    # Delete Flood Protection Profile Binding for Tier-1 Logical Router
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.delete_tier1_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.delete_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.delete_tier1_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#delete_tier1_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_locale_services_flood_protection_profile_binding(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      delete_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts)
      nil
    end

    # Delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.delete_tier1_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.delete_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.delete_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.delete_tier1_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#delete_tier1_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_locale_services_session_timer_profile_binding(tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      delete_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, opts)
      nil
    end

    # Delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.delete_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.delete_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.delete_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.delete_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#delete_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Session Timer Profile Binding for Tier-1 Logical Router
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router.
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_session_timer_profile_binding(tier1_id, session_timer_profile_binding_id, opts = {})
      delete_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, opts)
      nil
    end

    # Delete Session Timer Profile Binding for Tier-1 Logical Router
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router.
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.delete_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.delete_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.delete_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#delete_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param [Hash] opts the optional parameters
    # @return [DnsSecurityProfileBindingMap]
    def get_dns_security_profile_binding(domain_id, group_id, dns_security_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_dns_security_profile_binding_with_http_info(domain_id, group_id, dns_security_profile_binding_map_id, opts)
      data
    end

    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DnsSecurityProfileBindingMap, Fixnum, Hash)>] DnsSecurityProfileBindingMap data, response status code and response headers
    def get_dns_security_profile_binding_with_http_info(domain_id, group_id, dns_security_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.get_dns_security_profile_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.get_dns_security_profile_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.get_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map_id' when calling SecurityProfilesApi.get_dns_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps/{dns-security-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'dns-security-profile-binding-map-id' + '}', dns_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#get_dns_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile
    # API will get Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfile]
    def get_flood_protection_profile(flood_protection_profile_id, opts = {})
      data, _status_code, _headers = get_flood_protection_profile_with_http_info(flood_protection_profile_id, opts)
      data
    end

    # Get Flood Protection Profile
    # API will get Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfile, Fixnum, Hash)>] FloodProtectionProfile data, response status code and response headers
    def get_flood_protection_profile_with_http_info(flood_protection_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.get_flood_protection_profile ...'
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityProfilesApi.get_flood_protection_profile"
      end
      # resource path
      local_var_path = '/infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#get_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Group Monitoring Profile Binding Map
    # API will get Group Monitoring Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [GroupMonitoringProfileBindingMap]
    def get_group_monitoring_binding(domain_id, group_id, group_monitoring_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, opts)
      data
    end

    # Get Group Monitoring Profile Binding Map
    # API will get Group Monitoring Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupMonitoringProfileBindingMap, Fixnum, Hash)>] GroupMonitoringProfileBindingMap data, response status code and response headers
    def get_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.get_group_monitoring_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.get_group_monitoring_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.get_group_monitoring_binding"
      end
      # verify the required parameter 'group_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && group_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_monitoring_profile_binding_map_id' when calling SecurityProfilesApi.get_group_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/group-monitoring-profile-binding-maps/{group-monitoring-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'group-monitoring-profile-binding-map-id' + '}', group_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupMonitoringProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#get_group_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall CPU Memory Thresholds Profile Binding Map
    # API will get Firewall CPU Memory Thresholds Profile Binding Map. 
    # @param cpu_mem_thresholds_profile_binding_map_id Firewall CPU Memory Thresholds Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallCPUMemThresholdsProfileBindingMap]
    def get_policy_firewall_cpu_mem_thresholds_profile_binding_map(cpu_mem_thresholds_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_policy_firewall_cpu_mem_thresholds_profile_binding_map_with_http_info(cpu_mem_thresholds_profile_binding_map_id, opts)
      data
    end

    # Get Firewall CPU Memory Thresholds Profile Binding Map
    # API will get Firewall CPU Memory Thresholds Profile Binding Map. 
    # @param cpu_mem_thresholds_profile_binding_map_id Firewall CPU Memory Thresholds Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallCPUMemThresholdsProfileBindingMap, Fixnum, Hash)>] PolicyFirewallCPUMemThresholdsProfileBindingMap data, response status code and response headers
    def get_policy_firewall_cpu_mem_thresholds_profile_binding_map_with_http_info(cpu_mem_thresholds_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.get_policy_firewall_cpu_mem_thresholds_profile_binding_map ...'
      end
      # verify the required parameter 'cpu_mem_thresholds_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && cpu_mem_thresholds_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'cpu_mem_thresholds_profile_binding_map_id' when calling SecurityProfilesApi.get_policy_firewall_cpu_mem_thresholds_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/cpu-mem-thresholds-profile-binding-maps/{cpu-mem-thresholds-profile-binding-map-id}'.sub('{' + 'cpu-mem-thresholds-profile-binding-map-id' + '}', cpu_mem_thresholds_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallCPUMemThresholdsProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#get_policy_firewall_cpu_mem_thresholds_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall Flood Protection Profile Binding Map
    # API will get Firewall Flood Protection Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallFloodProtectionProfileBindingMap]
    def get_policy_firewall_flood_protection_binding(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts)
      data
    end

    # Get Firewall Flood Protection Profile Binding Map
    # API will get Firewall Flood Protection Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMap, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMap data, response status code and response headers
    def get_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.get_policy_firewall_flood_protection_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.get_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.get_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling SecurityProfilesApi.get_policy_firewall_flood_protection_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#get_policy_firewall_flood_protection_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall Session Timer Profile Binding Map
    # API will get Firewall Session Timer Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallSessionTimerProfileBindingMap]
    def get_policy_firewall_session_timer_binding(domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_policy_firewall_session_timer_binding_with_http_info(domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts)
      data
    end

    # Get Firewall Session Timer Profile Binding Map
    # API will get Firewall Session Timer Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMap, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMap data, response status code and response headers
    def get_policy_firewall_session_timer_binding_with_http_info(domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.get_policy_firewall_session_timer_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.get_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.get_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'firewall_session_timer_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_binding_map_id' when calling SecurityProfilesApi.get_policy_firewall_session_timer_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps/{firewall-session-timer-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-session-timer-profile-binding-map-id' + '}', firewall_session_timer_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#get_policy_firewall_session_timer_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall Session Timer Profile
    # API will get Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallSessionTimerProfile]
    def get_policy_firewall_session_timer_profile(firewall_session_timer_profile_id, opts = {})
      data, _status_code, _headers = get_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, opts)
      data
    end

    # Get Firewall Session Timer Profile
    # API will get Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallSessionTimerProfile, Fixnum, Hash)>] PolicyFirewallSessionTimerProfile data, response status code and response headers
    def get_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.get_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityProfilesApi.get_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#get_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def get_tier0_flood_protection_profile_binding(tier0_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def get_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.get_tier0_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityProfilesApi.get_tier0_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.get_tier0_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#get_tier0_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def get_tier0_locale_services_flood_protection_profile_binding(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def get_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.get_tier0_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityProfilesApi.get_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.get_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.get_tier0_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#get_tier0_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def get_tier0_locale_services_session_timer_profile_binding(tier0_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def get_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.get_tier0_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityProfilesApi.get_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.get_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.get_tier0_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#get_tier0_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def get_tier0_session_timer_profile_binding(tier0_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def get_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.get_tier0_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityProfilesApi.get_tier0_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.get_tier0_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#get_tier0_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def get_tier1_flood_protection_profile_binding(tier1_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def get_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.get_tier1_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.get_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.get_tier1_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#get_tier1_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def get_tier1_locale_services_flood_protection_profile_binding(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def get_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.get_tier1_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.get_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.get_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.get_tier1_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#get_tier1_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def get_tier1_locale_services_session_timer_profile_binding(tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def get_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.get_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.get_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#get_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def get_tier1_session_timer_profile_binding(tier1_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def get_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.get_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.get_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.get_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#get_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete CPU and memory thresholds profile
    # Delete CPU and memory thresholds profile.
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_delete_cpu_mem_thresholds_profile(profile_id, opts = {})
      global_infra_delete_cpu_mem_thresholds_profile_with_http_info(profile_id, opts)
      nil
    end

    # Delete CPU and memory thresholds profile
    # Delete CPU and memory thresholds profile.
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_cpu_mem_thresholds_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_delete_cpu_mem_thresholds_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityProfilesApi.global_infra_delete_cpu_mem_thresholds_profile"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/cpu-mem-thresholds-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_delete_cpu_mem_thresholds_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DNS security profile
    # Delete DNS security profile
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_delete_dns_security_profile(profile_id, opts = {})
      global_infra_delete_dns_security_profile_with_http_info(profile_id, opts)
      nil
    end

    # Delete DNS security profile
    # Delete DNS security profile
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_dns_security_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_delete_dns_security_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityProfilesApi.global_infra_delete_dns_security_profile"
      end
      # resource path
      local_var_path = '/global-infra/dns-security-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_delete_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile
    # API will delete Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_delete_flood_protection_profile(flood_protection_profile_id, opts = {})
      global_infra_delete_flood_protection_profile_with_http_info(flood_protection_profile_id, opts)
      nil
    end

    # Delete Flood Protection Profile
    # API will delete Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_flood_protection_profile_with_http_info(flood_protection_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_delete_flood_protection_profile ...'
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityProfilesApi.global_infra_delete_flood_protection_profile"
      end
      # resource path
      local_var_path = '/global-infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_delete_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Firewall Session Timer Profile
    # API will delete Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_delete_policy_firewall_session_timer_profile(firewall_session_timer_profile_id, opts = {})
      global_infra_delete_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, opts)
      nil
    end

    # Delete Firewall Session Timer Profile
    # API will delete Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_delete_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityProfilesApi.global_infra_delete_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/global-infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_delete_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param [Hash] opts the optional parameters
    # @return [DnsSecurityProfileBindingMap]
    def global_infra_get_dns_security_profile_binding(domain_id, group_id, dns_security_profile_binding_map_id, opts = {})
      data, _status_code, _headers = global_infra_get_dns_security_profile_binding_with_http_info(domain_id, group_id, dns_security_profile_binding_map_id, opts)
      data
    end

    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DnsSecurityProfileBindingMap, Fixnum, Hash)>] DnsSecurityProfileBindingMap data, response status code and response headers
    def global_infra_get_dns_security_profile_binding_with_http_info(domain_id, group_id, dns_security_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_get_dns_security_profile_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.global_infra_get_dns_security_profile_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.global_infra_get_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map_id' when calling SecurityProfilesApi.global_infra_get_dns_security_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps/{dns-security-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'dns-security-profile-binding-map-id' + '}', dns_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_get_dns_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile
    # API will get Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfile]
    def global_infra_get_flood_protection_profile(flood_protection_profile_id, opts = {})
      data, _status_code, _headers = global_infra_get_flood_protection_profile_with_http_info(flood_protection_profile_id, opts)
      data
    end

    # Get Flood Protection Profile
    # API will get Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfile, Fixnum, Hash)>] FloodProtectionProfile data, response status code and response headers
    def global_infra_get_flood_protection_profile_with_http_info(flood_protection_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_get_flood_protection_profile ...'
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityProfilesApi.global_infra_get_flood_protection_profile"
      end
      # resource path
      local_var_path = '/global-infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_get_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall Flood Protection Profile Binding Map
    # API will get Firewall Flood Protection Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallFloodProtectionProfileBindingMap]
    def global_infra_get_policy_firewall_flood_protection_binding(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts)
      data
    end

    # Get Firewall Flood Protection Profile Binding Map
    # API will get Firewall Flood Protection Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMap, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMap data, response status code and response headers
    def global_infra_get_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_get_policy_firewall_flood_protection_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.global_infra_get_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.global_infra_get_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling SecurityProfilesApi.global_infra_get_policy_firewall_flood_protection_binding"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_get_policy_firewall_flood_protection_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall Session Timer Profile Binding Map
    # API will get Firewall Session Timer Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallSessionTimerProfileBindingMap]
    def global_infra_get_policy_firewall_session_timer_binding(domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_firewall_session_timer_binding_with_http_info(domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts)
      data
    end

    # Get Firewall Session Timer Profile Binding Map
    # API will get Firewall Session Timer Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMap, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMap data, response status code and response headers
    def global_infra_get_policy_firewall_session_timer_binding_with_http_info(domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_get_policy_firewall_session_timer_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.global_infra_get_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.global_infra_get_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'firewall_session_timer_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_binding_map_id' when calling SecurityProfilesApi.global_infra_get_policy_firewall_session_timer_binding"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps/{firewall-session-timer-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-session-timer-profile-binding-map-id' + '}', firewall_session_timer_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_get_policy_firewall_session_timer_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall Session Timer Profile
    # API will get Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallSessionTimerProfile]
    def global_infra_get_policy_firewall_session_timer_profile(firewall_session_timer_profile_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, opts)
      data
    end

    # Get Firewall Session Timer Profile
    # API will get Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallSessionTimerProfile, Fixnum, Hash)>] PolicyFirewallSessionTimerProfile data, response status code and response headers
    def global_infra_get_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_get_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityProfilesApi.global_infra_get_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/global-infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_get_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def global_infra_get_tier0_flood_protection_profile_binding(tier0_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def global_infra_get_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_get_tier0_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityProfilesApi.global_infra_get_tier0_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.global_infra_get_tier0_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier0-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_get_tier0_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def global_infra_get_tier0_locale_services_flood_protection_profile_binding(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def global_infra_get_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_get_tier0_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityProfilesApi.global_infra_get_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.global_infra_get_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.global_infra_get_tier0_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_get_tier0_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def global_infra_get_tier0_locale_services_session_timer_profile_binding(tier0_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def global_infra_get_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_get_tier0_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityProfilesApi.global_infra_get_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.global_infra_get_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.global_infra_get_tier0_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_get_tier0_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def global_infra_get_tier0_session_timer_profile_binding(tier0_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def global_infra_get_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_get_tier0_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityProfilesApi.global_infra_get_tier0_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.global_infra_get_tier0_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier0-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_get_tier0_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def global_infra_get_tier1_flood_protection_profile_binding(tier1_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def global_infra_get_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_get_tier1_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.global_infra_get_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.global_infra_get_tier1_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_get_tier1_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def global_infra_get_tier1_locale_services_flood_protection_profile_binding(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def global_infra_get_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_get_tier1_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.global_infra_get_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.global_infra_get_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.global_infra_get_tier1_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_get_tier1_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def global_infra_get_tier1_locale_services_session_timer_profile_binding(tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def global_infra_get_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_get_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.global_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.global_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.global_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_get_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def global_infra_get_tier1_session_timer_profile_binding(tier1_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def global_infra_get_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_get_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.global_infra_get_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.global_infra_get_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_get_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all CPU and memory thresholds profiles
    # List all CPU and memory thresholds profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallCpuMemThresholdsProfileListResult]
    def global_infra_list_cpu_mem_thresholds_profiles(opts = {})
      data, _status_code, _headers = global_infra_list_cpu_mem_thresholds_profiles_with_http_info(opts)
      data
    end

    # List all CPU and memory thresholds profiles
    # List all CPU and memory thresholds profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallCpuMemThresholdsProfileListResult, Fixnum, Hash)>] PolicyFirewallCpuMemThresholdsProfileListResult data, response status code and response headers
    def global_infra_list_cpu_mem_thresholds_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_list_cpu_mem_thresholds_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_cpu_mem_thresholds_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_cpu_mem_thresholds_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/cpu-mem-thresholds-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallCpuMemThresholdsProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_list_cpu_mem_thresholds_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DnsSecurityProfileBindingMapListResult]
    def global_infra_list_dns_security_profile_bindings(domain_id, group_id, opts = {})
      data, _status_code, _headers = global_infra_list_dns_security_profile_bindings_with_http_info(domain_id, group_id, opts)
      data
    end

    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DnsSecurityProfileBindingMapListResult, Fixnum, Hash)>] DnsSecurityProfileBindingMapListResult data, response status code and response headers
    def global_infra_list_dns_security_profile_bindings_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_list_dns_security_profile_bindings ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.global_infra_list_dns_security_profile_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.global_infra_list_dns_security_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_dns_security_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_dns_security_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_list_dns_security_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all DNS security profiles
    # List all DNS security profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DnsSecurityProfileListResult]
    def global_infra_list_dns_security_profiles(opts = {})
      data, _status_code, _headers = global_infra_list_dns_security_profiles_with_http_info(opts)
      data
    end

    # List all DNS security profiles
    # List all DNS security profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DnsSecurityProfileListResult, Fixnum, Hash)>] DnsSecurityProfileListResult data, response status code and response headers
    def global_infra_list_dns_security_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_list_dns_security_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_dns_security_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_dns_security_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dns-security-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_list_dns_security_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Session Timer Profile Binding Maps for all domains
    # API will list all Firewall Session Timer Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSessionTimerProfileBindingMapListResult]
    def global_infra_list_firewall_session_timer_bindings_across_domains(opts = {})
      data, _status_code, _headers = global_infra_list_firewall_session_timer_bindings_across_domains_with_http_info(opts)
      data
    end

    # List Firewall Session Timer Profile Binding Maps for all domains
    # API will list all Firewall Session Timer Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMapListResult data, response status code and response headers
    def global_infra_list_firewall_session_timer_bindings_across_domains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_list_firewall_session_timer_bindings_across_domains ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_firewall_session_timer_bindings_across_domains, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_firewall_session_timer_bindings_across_domains, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/firewall-session-timer-profile-binding-maps'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_list_firewall_session_timer_bindings_across_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles bindings.
    # @param flood_protection_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [FloodProtectionProfileBindingListResult]
    def global_infra_list_flood_protection_profile_bindings(flood_protection_profile_id, opts = {})
      data, _status_code, _headers = global_infra_list_flood_protection_profile_bindings_with_http_info(flood_protection_profile_id, opts)
      data
    end

    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles bindings.
    # @param flood_protection_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(FloodProtectionProfileBindingListResult, Fixnum, Hash)>] FloodProtectionProfileBindingListResult data, response status code and response headers
    def global_infra_list_flood_protection_profile_bindings_with_http_info(flood_protection_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_list_flood_protection_profile_bindings ...'
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityProfilesApi.global_infra_list_flood_protection_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_flood_protection_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_flood_protection_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/flood-protection-profiles/{flood-protection-profile-id}/bindings'.sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_list_flood_protection_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [FloodProtectionProfileListResult]
    def global_infra_list_flood_protection_profiles(opts = {})
      data, _status_code, _headers = global_infra_list_flood_protection_profiles_with_http_info(opts)
      data
    end

    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(FloodProtectionProfileListResult, Fixnum, Hash)>] FloodProtectionProfileListResult data, response status code and response headers
    def global_infra_list_flood_protection_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_list_flood_protection_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_flood_protection_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_flood_protection_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/flood-protection-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_list_flood_protection_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall CPU Memory Thresholds Profile Binding Maps
    # API will list all Firewall CPU Memory Thresholds Profile Binding Maps. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallCPUMemThresholdsProfileBindingMapListResult]
    def global_infra_list_policy_firewall_cpu_mem_thresholds_profile_binding_maps(opts = {})
      data, _status_code, _headers = global_infra_list_policy_firewall_cpu_mem_thresholds_profile_binding_maps_with_http_info(opts)
      data
    end

    # List Firewall CPU Memory Thresholds Profile Binding Maps
    # API will list all Firewall CPU Memory Thresholds Profile Binding Maps. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallCPUMemThresholdsProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallCPUMemThresholdsProfileBindingMapListResult data, response status code and response headers
    def global_infra_list_policy_firewall_cpu_mem_thresholds_profile_binding_maps_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_list_policy_firewall_cpu_mem_thresholds_profile_binding_maps ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_policy_firewall_cpu_mem_thresholds_profile_binding_maps, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_policy_firewall_cpu_mem_thresholds_profile_binding_maps, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/cpu-mem-thresholds-profile-binding-maps'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallCPUMemThresholdsProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_list_policy_firewall_cpu_mem_thresholds_profile_binding_maps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Flood Protection Profile Binding Maps
    # API will list all Firewall Flood Protection Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallFloodProtectionProfileBindingMapListResult]
    def global_infra_list_policy_firewall_flood_protection_bindings(domain_id, group_id, opts = {})
      data, _status_code, _headers = global_infra_list_policy_firewall_flood_protection_bindings_with_http_info(domain_id, group_id, opts)
      data
    end

    # List Firewall Flood Protection Profile Binding Maps
    # API will list all Firewall Flood Protection Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMapListResult data, response status code and response headers
    def global_infra_list_policy_firewall_flood_protection_bindings_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_list_policy_firewall_flood_protection_bindings ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.global_infra_list_policy_firewall_flood_protection_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.global_infra_list_policy_firewall_flood_protection_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_policy_firewall_flood_protection_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_policy_firewall_flood_protection_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_list_policy_firewall_flood_protection_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Session Timer Profile Binding Maps
    # API will list all Firewall Session Timer Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSessionTimerProfileBindingMapListResult]
    def global_infra_list_policy_firewall_session_timer_bindings(domain_id, group_id, opts = {})
      data, _status_code, _headers = global_infra_list_policy_firewall_session_timer_bindings_with_http_info(domain_id, group_id, opts)
      data
    end

    # List Firewall Session Timer Profile Binding Maps
    # API will list all Firewall Session Timer Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMapListResult data, response status code and response headers
    def global_infra_list_policy_firewall_session_timer_bindings_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_list_policy_firewall_session_timer_bindings ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.global_infra_list_policy_firewall_session_timer_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.global_infra_list_policy_firewall_session_timer_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_policy_firewall_session_timer_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_policy_firewall_session_timer_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_list_policy_firewall_session_timer_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Session Timer Profiles
    # API will list all Firewall Session Timer Profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSessionTimerProfileListResult]
    def global_infra_list_policy_firewall_session_timer_profiles(opts = {})
      data, _status_code, _headers = global_infra_list_policy_firewall_session_timer_profiles_with_http_info(opts)
      data
    end

    # List Firewall Session Timer Profiles
    # API will list all Firewall Session Timer Profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSessionTimerProfileListResult, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileListResult data, response status code and response headers
    def global_infra_list_policy_firewall_session_timer_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_list_policy_firewall_session_timer_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_policy_firewall_session_timer_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_policy_firewall_session_timer_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/firewall-session-timer-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_list_policy_firewall_session_timer_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Session Timer Profiles
    # API will list all Session Timer Profiles bindings.
    # @param session_timer_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SessionTimerProfileBindingListResult]
    def global_infra_list_session_timer_profile_bindings(session_timer_profile_id, opts = {})
      data, _status_code, _headers = global_infra_list_session_timer_profile_bindings_with_http_info(session_timer_profile_id, opts)
      data
    end

    # List Session Timer Profiles
    # API will list all Session Timer Profiles bindings.
    # @param session_timer_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SessionTimerProfileBindingListResult, Fixnum, Hash)>] SessionTimerProfileBindingListResult data, response status code and response headers
    def global_infra_list_session_timer_profile_bindings_with_http_info(session_timer_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_list_session_timer_profile_bindings ...'
      end
      # verify the required parameter 'session_timer_profile_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_id' when calling SecurityProfilesApi.global_infra_list_session_timer_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_session_timer_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.global_infra_list_session_timer_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/session-timer-profiles/{session-timer-profile-id}/bindings'.sub('{' + 'session-timer-profile-id' + '}', session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_list_session_timer_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update CPU and memory thresholds profile
    # Create or update CPU and memory thresholds profile.
    # @param profile_id 
    # @param policy_firewall_cpu_mem_thresholds_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_patch_cpu_mem_thresholds_profile(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts = {})
      global_infra_patch_cpu_mem_thresholds_profile_with_http_info(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts)
      nil
    end

    # Create or update CPU and memory thresholds profile
    # Create or update CPU and memory thresholds profile.
    # @param profile_id 
    # @param policy_firewall_cpu_mem_thresholds_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_cpu_mem_thresholds_profile_with_http_info(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_patch_cpu_mem_thresholds_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityProfilesApi.global_infra_patch_cpu_mem_thresholds_profile"
      end
      # verify the required parameter 'policy_firewall_cpu_mem_thresholds_profile' is set
      if @api_client.config.client_side_validation && policy_firewall_cpu_mem_thresholds_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_cpu_mem_thresholds_profile' when calling SecurityProfilesApi.global_infra_patch_cpu_mem_thresholds_profile"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/cpu-mem-thresholds-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_cpu_mem_thresholds_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_patch_cpu_mem_thresholds_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_patch_dns_security_profile(profile_id, dns_security_profile, opts = {})
      global_infra_patch_dns_security_profile_with_http_info(profile_id, dns_security_profile, opts)
      nil
    end

    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_dns_security_profile_with_http_info(profile_id, dns_security_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_patch_dns_security_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityProfilesApi.global_infra_patch_dns_security_profile"
      end
      # verify the required parameter 'dns_security_profile' is set
      if @api_client.config.client_side_validation && dns_security_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile' when calling SecurityProfilesApi.global_infra_patch_dns_security_profile"
      end
      # resource path
      local_var_path = '/global-infra/dns-security-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dns_security_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_patch_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile
    # API will create/update Flood Protection Profile
    # @param flood_protection_profile_id Firewall Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_patch_flood_protection_profile(flood_protection_profile_id, flood_protection_profile, opts = {})
      global_infra_patch_flood_protection_profile_with_http_info(flood_protection_profile_id, flood_protection_profile, opts)
      nil
    end

    # Create or update Flood Protection Profile
    # API will create/update Flood Protection Profile
    # @param flood_protection_profile_id Firewall Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_flood_protection_profile_with_http_info(flood_protection_profile_id, flood_protection_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_patch_flood_protection_profile ...'
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityProfilesApi.global_infra_patch_flood_protection_profile"
      end
      # verify the required parameter 'flood_protection_profile' is set
      if @api_client.config.client_side_validation && flood_protection_profile.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile' when calling SecurityProfilesApi.global_infra_patch_flood_protection_profile"
      end
      # resource path
      local_var_path = '/global-infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_patch_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Firewall Session Timer Profile
    # API will create/update Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_patch_policy_firewall_session_timer_profile(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      global_infra_patch_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts)
      nil
    end

    # Create or update Firewall Session Timer Profile
    # API will create/update Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_patch_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityProfilesApi.global_infra_patch_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'policy_firewall_session_timer_profile' is set
      if @api_client.config.client_side_validation && policy_firewall_session_timer_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_session_timer_profile' when calling SecurityProfilesApi.global_infra_patch_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/global-infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_session_timer_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_patch_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the CPU and memory thresholds profile
    # Read the CPU and memory thresholds profile.
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallCpuMemThresholdsProfile]
    def global_infra_read_cpu_mem_thresholds_profile(profile_id, opts = {})
      data, _status_code, _headers = global_infra_read_cpu_mem_thresholds_profile_with_http_info(profile_id, opts)
      data
    end

    # Read the CPU and memory thresholds profile
    # Read the CPU and memory thresholds profile.
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallCpuMemThresholdsProfile, Fixnum, Hash)>] PolicyFirewallCpuMemThresholdsProfile data, response status code and response headers
    def global_infra_read_cpu_mem_thresholds_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_read_cpu_mem_thresholds_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityProfilesApi.global_infra_read_cpu_mem_thresholds_profile"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/cpu-mem-thresholds-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallCpuMemThresholdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_read_cpu_mem_thresholds_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder for the given tier-0 instance
    # Read the DNS Forwarder for the given tier-0 instance
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [DnsSecurityProfile]
    def global_infra_read_dns_security_profile(profile_id, opts = {})
      data, _status_code, _headers = global_infra_read_dns_security_profile_with_http_info(profile_id, opts)
      data
    end

    # Read the DNS Forwarder for the given tier-0 instance
    # Read the DNS Forwarder for the given tier-0 instance
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DnsSecurityProfile, Fixnum, Hash)>] DnsSecurityProfile data, response status code and response headers
    def global_infra_read_dns_security_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_read_dns_security_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityProfilesApi.global_infra_read_dns_security_profile"
      end
      # resource path
      local_var_path = '/global-infra/dns-security-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_read_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update CPU and memory thresholds profile
    # Create or update CPU and memory thresholds profile.
    # @param profile_id 
    # @param policy_firewall_cpu_mem_thresholds_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [PolicyFirewallCpuMemThresholdsProfile]
    def global_infra_update_cpu_mem_thresholds_profile(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts = {})
      data, _status_code, _headers = global_infra_update_cpu_mem_thresholds_profile_with_http_info(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts)
      data
    end

    # Create or update CPU and memory thresholds profile
    # Create or update CPU and memory thresholds profile.
    # @param profile_id 
    # @param policy_firewall_cpu_mem_thresholds_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(PolicyFirewallCpuMemThresholdsProfile, Fixnum, Hash)>] PolicyFirewallCpuMemThresholdsProfile data, response status code and response headers
    def global_infra_update_cpu_mem_thresholds_profile_with_http_info(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_update_cpu_mem_thresholds_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityProfilesApi.global_infra_update_cpu_mem_thresholds_profile"
      end
      # verify the required parameter 'policy_firewall_cpu_mem_thresholds_profile' is set
      if @api_client.config.client_side_validation && policy_firewall_cpu_mem_thresholds_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_cpu_mem_thresholds_profile' when calling SecurityProfilesApi.global_infra_update_cpu_mem_thresholds_profile"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/cpu-mem-thresholds-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_cpu_mem_thresholds_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallCpuMemThresholdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_update_cpu_mem_thresholds_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [DnsSecurityProfile]
    def global_infra_update_dns_security_profile(profile_id, dns_security_profile, opts = {})
      data, _status_code, _headers = global_infra_update_dns_security_profile_with_http_info(profile_id, dns_security_profile, opts)
      data
    end

    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(DnsSecurityProfile, Fixnum, Hash)>] DnsSecurityProfile data, response status code and response headers
    def global_infra_update_dns_security_profile_with_http_info(profile_id, dns_security_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_update_dns_security_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityProfilesApi.global_infra_update_dns_security_profile"
      end
      # verify the required parameter 'dns_security_profile' is set
      if @api_client.config.client_side_validation && dns_security_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile' when calling SecurityProfilesApi.global_infra_update_dns_security_profile"
      end
      # resource path
      local_var_path = '/global-infra/dns-security-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dns_security_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_update_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Flood Protection Profile
    # API will update Firewall Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [FloodProtectionProfile]
    def global_infra_update_flood_protection_profile(flood_protection_profile_id, flood_protection_profile, opts = {})
      data, _status_code, _headers = global_infra_update_flood_protection_profile_with_http_info(flood_protection_profile_id, flood_protection_profile, opts)
      data
    end

    # Update Firewall Flood Protection Profile
    # API will update Firewall Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(FloodProtectionProfile, Fixnum, Hash)>] FloodProtectionProfile data, response status code and response headers
    def global_infra_update_flood_protection_profile_with_http_info(flood_protection_profile_id, flood_protection_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_update_flood_protection_profile ...'
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityProfilesApi.global_infra_update_flood_protection_profile"
      end
      # verify the required parameter 'flood_protection_profile' is set
      if @api_client.config.client_side_validation && flood_protection_profile.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile' when calling SecurityProfilesApi.global_infra_update_flood_protection_profile"
      end
      # resource path
      local_var_path = '/global-infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_update_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Session Timer Profile
    # API will update Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [PolicyFirewallSessionTimerProfile]
    def global_infra_update_policy_firewall_session_timer_profile(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      data, _status_code, _headers = global_infra_update_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts)
      data
    end

    # Update Firewall Session Timer Profile
    # API will update Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(PolicyFirewallSessionTimerProfile, Fixnum, Hash)>] PolicyFirewallSessionTimerProfile data, response status code and response headers
    def global_infra_update_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.global_infra_update_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityProfilesApi.global_infra_update_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'policy_firewall_session_timer_profile' is set
      if @api_client.config.client_side_validation && policy_firewall_session_timer_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_session_timer_profile' when calling SecurityProfilesApi.global_infra_update_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/global-infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_session_timer_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#global_infra_update_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all CPU and memory thresholds profiles
    # List all CPU and memory thresholds profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallCpuMemThresholdsProfileListResult]
    def list_cpu_mem_thresholds_profiles(opts = {})
      data, _status_code, _headers = list_cpu_mem_thresholds_profiles_with_http_info(opts)
      data
    end

    # List all CPU and memory thresholds profiles
    # List all CPU and memory thresholds profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallCpuMemThresholdsProfileListResult, Fixnum, Hash)>] PolicyFirewallCpuMemThresholdsProfileListResult data, response status code and response headers
    def list_cpu_mem_thresholds_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.list_cpu_mem_thresholds_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_cpu_mem_thresholds_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_cpu_mem_thresholds_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/cpu-mem-thresholds-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallCpuMemThresholdsProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#list_cpu_mem_thresholds_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DnsSecurityProfileBindingMapListResult]
    def list_dns_security_profile_bindings(domain_id, group_id, opts = {})
      data, _status_code, _headers = list_dns_security_profile_bindings_with_http_info(domain_id, group_id, opts)
      data
    end

    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DnsSecurityProfileBindingMapListResult, Fixnum, Hash)>] DnsSecurityProfileBindingMapListResult data, response status code and response headers
    def list_dns_security_profile_bindings_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.list_dns_security_profile_bindings ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.list_dns_security_profile_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.list_dns_security_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_dns_security_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_dns_security_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#list_dns_security_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all DNS security profiles
    # List all DNS security profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DnsSecurityProfileListResult]
    def list_dns_security_profiles(opts = {})
      data, _status_code, _headers = list_dns_security_profiles_with_http_info(opts)
      data
    end

    # List all DNS security profiles
    # List all DNS security profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DnsSecurityProfileListResult, Fixnum, Hash)>] DnsSecurityProfileListResult data, response status code and response headers
    def list_dns_security_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.list_dns_security_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_dns_security_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_dns_security_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dns-security-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#list_dns_security_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Flood Protection Profile Binding Maps for all domains
    # API will list all Firewall Flood Protection Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallFloodProtectionProfileBindingMapListResult]
    def list_firewall_flood_protection_bindings_across_domains(opts = {})
      data, _status_code, _headers = list_firewall_flood_protection_bindings_across_domains_with_http_info(opts)
      data
    end

    # List Firewall Flood Protection Profile Binding Maps for all domains
    # API will list all Firewall Flood Protection Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMapListResult data, response status code and response headers
    def list_firewall_flood_protection_bindings_across_domains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.list_firewall_flood_protection_bindings_across_domains ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_firewall_flood_protection_bindings_across_domains, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_firewall_flood_protection_bindings_across_domains, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/firewall-flood-protection-profile-binding-maps'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#list_firewall_flood_protection_bindings_across_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Session Timer Profile Binding Maps for all domains
    # API will list all Firewall Session Timer Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSessionTimerProfileBindingMapListResult]
    def list_firewall_session_timer_bindings_across_domains(opts = {})
      data, _status_code, _headers = list_firewall_session_timer_bindings_across_domains_with_http_info(opts)
      data
    end

    # List Firewall Session Timer Profile Binding Maps for all domains
    # API will list all Firewall Session Timer Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMapListResult data, response status code and response headers
    def list_firewall_session_timer_bindings_across_domains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.list_firewall_session_timer_bindings_across_domains ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_firewall_session_timer_bindings_across_domains, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_firewall_session_timer_bindings_across_domains, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/firewall-session-timer-profile-binding-maps'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#list_firewall_session_timer_bindings_across_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles bindings.
    # @param flood_protection_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [FloodProtectionProfileBindingListResult]
    def list_flood_protection_profile_bindings(flood_protection_profile_id, opts = {})
      data, _status_code, _headers = list_flood_protection_profile_bindings_with_http_info(flood_protection_profile_id, opts)
      data
    end

    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles bindings.
    # @param flood_protection_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(FloodProtectionProfileBindingListResult, Fixnum, Hash)>] FloodProtectionProfileBindingListResult data, response status code and response headers
    def list_flood_protection_profile_bindings_with_http_info(flood_protection_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.list_flood_protection_profile_bindings ...'
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityProfilesApi.list_flood_protection_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_flood_protection_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_flood_protection_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/flood-protection-profiles/{flood-protection-profile-id}/bindings'.sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#list_flood_protection_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [FloodProtectionProfileListResult]
    def list_flood_protection_profiles(opts = {})
      data, _status_code, _headers = list_flood_protection_profiles_with_http_info(opts)
      data
    end

    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(FloodProtectionProfileListResult, Fixnum, Hash)>] FloodProtectionProfileListResult data, response status code and response headers
    def list_flood_protection_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.list_flood_protection_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_flood_protection_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_flood_protection_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/flood-protection-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#list_flood_protection_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Group Monitoring Profile Binding Maps
    # API will list all Group Monitoring Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GroupMonitoringProfileBindingMapListResult]
    def list_group_monitoring_bindings(domain_id, group_id, opts = {})
      data, _status_code, _headers = list_group_monitoring_bindings_with_http_info(domain_id, group_id, opts)
      data
    end

    # List Group Monitoring Profile Binding Maps
    # API will list all Group Monitoring Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GroupMonitoringProfileBindingMapListResult, Fixnum, Hash)>] GroupMonitoringProfileBindingMapListResult data, response status code and response headers
    def list_group_monitoring_bindings_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.list_group_monitoring_bindings ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.list_group_monitoring_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.list_group_monitoring_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_group_monitoring_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_group_monitoring_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/group-monitoring-profile-binding-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupMonitoringProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#list_group_monitoring_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall CPU Memory Thresholds Profile Binding Maps
    # API will list all Firewall CPU Memory Thresholds Profile Binding Maps. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallCPUMemThresholdsProfileBindingMapListResult]
    def list_policy_firewall_cpu_mem_thresholds_profile_binding_maps(opts = {})
      data, _status_code, _headers = list_policy_firewall_cpu_mem_thresholds_profile_binding_maps_with_http_info(opts)
      data
    end

    # List Firewall CPU Memory Thresholds Profile Binding Maps
    # API will list all Firewall CPU Memory Thresholds Profile Binding Maps. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallCPUMemThresholdsProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallCPUMemThresholdsProfileBindingMapListResult data, response status code and response headers
    def list_policy_firewall_cpu_mem_thresholds_profile_binding_maps_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.list_policy_firewall_cpu_mem_thresholds_profile_binding_maps ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_policy_firewall_cpu_mem_thresholds_profile_binding_maps, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_policy_firewall_cpu_mem_thresholds_profile_binding_maps, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/cpu-mem-thresholds-profile-binding-maps'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallCPUMemThresholdsProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#list_policy_firewall_cpu_mem_thresholds_profile_binding_maps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Flood Protection Profile Binding Maps
    # API will list all Firewall Flood Protection Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallFloodProtectionProfileBindingMapListResult]
    def list_policy_firewall_flood_protection_bindings(domain_id, group_id, opts = {})
      data, _status_code, _headers = list_policy_firewall_flood_protection_bindings_with_http_info(domain_id, group_id, opts)
      data
    end

    # List Firewall Flood Protection Profile Binding Maps
    # API will list all Firewall Flood Protection Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMapListResult data, response status code and response headers
    def list_policy_firewall_flood_protection_bindings_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.list_policy_firewall_flood_protection_bindings ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.list_policy_firewall_flood_protection_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.list_policy_firewall_flood_protection_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_policy_firewall_flood_protection_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_policy_firewall_flood_protection_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#list_policy_firewall_flood_protection_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Session Timer Profile Binding Maps
    # API will list all Firewall Session Timer Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSessionTimerProfileBindingMapListResult]
    def list_policy_firewall_session_timer_bindings(domain_id, group_id, opts = {})
      data, _status_code, _headers = list_policy_firewall_session_timer_bindings_with_http_info(domain_id, group_id, opts)
      data
    end

    # List Firewall Session Timer Profile Binding Maps
    # API will list all Firewall Session Timer Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMapListResult data, response status code and response headers
    def list_policy_firewall_session_timer_bindings_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.list_policy_firewall_session_timer_bindings ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.list_policy_firewall_session_timer_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.list_policy_firewall_session_timer_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_policy_firewall_session_timer_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_policy_firewall_session_timer_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#list_policy_firewall_session_timer_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Session Timer Profiles
    # API will list all Firewall Session Timer Profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSessionTimerProfileListResult]
    def list_policy_firewall_session_timer_profiles(opts = {})
      data, _status_code, _headers = list_policy_firewall_session_timer_profiles_with_http_info(opts)
      data
    end

    # List Firewall Session Timer Profiles
    # API will list all Firewall Session Timer Profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSessionTimerProfileListResult, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileListResult data, response status code and response headers
    def list_policy_firewall_session_timer_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.list_policy_firewall_session_timer_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_policy_firewall_session_timer_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_policy_firewall_session_timer_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-session-timer-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#list_policy_firewall_session_timer_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Session Timer Profiles
    # API will list all Session Timer Profiles bindings.
    # @param session_timer_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SessionTimerProfileBindingListResult]
    def list_session_timer_profile_bindings(session_timer_profile_id, opts = {})
      data, _status_code, _headers = list_session_timer_profile_bindings_with_http_info(session_timer_profile_id, opts)
      data
    end

    # List Session Timer Profiles
    # API will list all Session Timer Profiles bindings.
    # @param session_timer_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SessionTimerProfileBindingListResult, Fixnum, Hash)>] SessionTimerProfileBindingListResult data, response status code and response headers
    def list_session_timer_profile_bindings_with_http_info(session_timer_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.list_session_timer_profile_bindings ...'
      end
      # verify the required parameter 'session_timer_profile_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_id' when calling SecurityProfilesApi.list_session_timer_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_session_timer_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.list_session_timer_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/session-timer-profiles/{session-timer-profile-id}/bindings'.sub('{' + 'session-timer-profile-id' + '}', session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#list_session_timer_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DNS security profile
    # Delete DNS security profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_dns_security_profile(org_id, project_id, profile_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_dns_security_profile_with_http_info(org_id, project_id, profile_id, opts)
      nil
    end

    # Delete DNS security profile
    # Delete DNS security profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_dns_security_profile_with_http_info(org_id, project_id, profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_dns_security_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_dns_security_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_dns_security_profile"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_dns_security_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dns-security-profiles/{profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_delete_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DNS security profile binding map
    # API will delete DNS security profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_dns_security_profile_binding(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_dns_security_profile_binding_with_http_info(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, opts)
      nil
    end

    # Delete DNS security profile binding map
    # API will delete DNS security profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_dns_security_profile_binding_with_http_info(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_dns_security_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_dns_security_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_dns_security_profile_binding"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_dns_security_profile_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_dns_security_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps/{dns-security-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'dns-security-profile-binding-map-id' + '}', dns_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_delete_dns_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile
    # API will delete Flood Protection Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_flood_protection_profile(org_id, project_id, flood_protection_profile_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_flood_protection_profile_with_http_info(org_id, project_id, flood_protection_profile_id, opts)
      nil
    end

    # Delete Flood Protection Profile
    # API will delete Flood Protection Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_flood_protection_profile_with_http_info(org_id, project_id, flood_protection_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_flood_protection_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_flood_protection_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_flood_protection_profile"
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_flood_protection_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_delete_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Firewall Flood Protection Profile Binding
    # API will delete Firewall Flood Protection Profile Binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_policy_firewall_flood_protection_binding(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_policy_firewall_flood_protection_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts)
      nil
    end

    # Delete Firewall Flood Protection Profile Binding
    # API will delete Firewall Flood Protection Profile Binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_policy_firewall_flood_protection_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_flood_protection_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_flood_protection_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_delete_policy_firewall_flood_protection_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Firewall Session Timer Profile Binding
    # API will delete Firewall Session Timer Profile Binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_binding(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts)
      nil
    end

    # Delete Firewall Session Timer Profile Binding
    # API will delete Firewall Session Timer Profile Binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'firewall_session_timer_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_binding_map_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps/{firewall-session-timer-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-session-timer-profile-binding-map-id' + '}', firewall_session_timer_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Firewall Session Timer Profile
    # API will delete Firewall Session Timer Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_profile(org_id, project_id, firewall_session_timer_profile_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_profile_with_http_info(org_id, project_id, firewall_session_timer_profile_id, opts)
      nil
    end

    # Delete Firewall Session Timer Profile
    # API will delete Firewall Session Timer Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_profile_with_http_info(org_id, project_id, firewall_session_timer_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile Binding for Tier-1 Logical Router
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_flood_protection_profile_binding(org_id, project_id, tier1_id, flood_protection_profile_binding_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, flood_protection_profile_binding_id, opts)
      nil
    end

    # Delete Flood Protection Profile Binding for Tier-1 Logical Router
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_delete_tier1_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_flood_protection_profile_binding(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, opts)
      nil
    end

    # Delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, opts)
      nil
    end

    # Delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Session Timer Profile Binding for Tier-1 Logical Router
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding(org_id, project_id, tier1_id, session_timer_profile_binding_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, opts)
      nil
    end

    # Delete Session Timer Profile Binding for Tier-1 Logical Router
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param [Hash] opts the optional parameters
    # @return [DnsSecurityProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_get_dns_security_profile_binding(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_dns_security_profile_binding_with_http_info(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, opts)
      data
    end

    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DnsSecurityProfileBindingMap, Fixnum, Hash)>] DnsSecurityProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_dns_security_profile_binding_with_http_info(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_dns_security_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_dns_security_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_dns_security_profile_binding"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_dns_security_profile_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_dns_security_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps/{dns-security-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'dns-security-profile-binding-map-id' + '}', dns_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_get_dns_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile
    # API will get Flood Protection Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfile]
    def orgs_org_id_projects_project_id_infra_get_flood_protection_profile(org_id, project_id, flood_protection_profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_flood_protection_profile_with_http_info(org_id, project_id, flood_protection_profile_id, opts)
      data
    end

    # Get Flood Protection Profile
    # API will get Flood Protection Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfile, Fixnum, Hash)>] FloodProtectionProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_flood_protection_profile_with_http_info(org_id, project_id, flood_protection_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_flood_protection_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_flood_protection_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_flood_protection_profile"
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_flood_protection_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_get_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall Flood Protection Profile Binding Map
    # API will get Firewall Flood Protection Profile Binding Map 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallFloodProtectionProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_get_policy_firewall_flood_protection_binding(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_firewall_flood_protection_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts)
      data
    end

    # Get Firewall Flood Protection Profile Binding Map
    # API will get Firewall Flood Protection Profile Binding Map 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMap, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_firewall_flood_protection_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_flood_protection_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_flood_protection_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_get_policy_firewall_flood_protection_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall Session Timer Profile Binding Map
    # API will get Firewall Session Timer Profile Binding Map 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallSessionTimerProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_binding(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts)
      data
    end

    # Get Firewall Session Timer Profile Binding Map
    # API will get Firewall Session Timer Profile Binding Map 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMap, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'firewall_session_timer_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_binding_map_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps/{firewall-session-timer-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-session-timer-profile-binding-map-id' + '}', firewall_session_timer_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall Session Timer Profile
    # API will get Firewall Session Timer Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallSessionTimerProfile]
    def orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_profile(org_id, project_id, firewall_session_timer_profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_profile_with_http_info(org_id, project_id, firewall_session_timer_profile_id, opts)
      data
    end

    # Get Firewall Session Timer Profile
    # API will get Firewall Session Timer Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallSessionTimerProfile, Fixnum, Hash)>] PolicyFirewallSessionTimerProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_profile_with_http_info(org_id, project_id, firewall_session_timer_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_get_tier1_flood_protection_profile_binding(org_id, project_id, tier1_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_get_tier1_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_get_tier1_locale_services_flood_protection_profile_binding(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_locale_services_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_locale_services_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_get_tier1_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding(org_id, project_id, tier1_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DnsSecurityProfileBindingMapListResult]
    def orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings(org_id, project_id, domain_id, group_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings_with_http_info(org_id, project_id, domain_id, group_id, opts)
      data
    end

    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DnsSecurityProfileBindingMapListResult, Fixnum, Hash)>] DnsSecurityProfileBindingMapListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings_with_http_info(org_id, project_id, domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all DNS security profiles
    # List all DNS security profiles
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DnsSecurityProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_dns_security_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_dns_security_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # List all DNS security profiles
    # List all DNS security profiles
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DnsSecurityProfileListResult, Fixnum, Hash)>] DnsSecurityProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_dns_security_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_dns_security_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_dns_security_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_dns_security_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_dns_security_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_dns_security_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dns-security-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_list_dns_security_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Flood Protection Profile Binding Maps for all domains
    # API will list all Firewall Flood Protection Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallFloodProtectionProfileBindingMapListResult]
    def orgs_org_id_projects_project_id_infra_list_firewall_flood_protection_bindings_across_domains(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_firewall_flood_protection_bindings_across_domains_with_http_info(org_id, project_id, opts)
      data
    end

    # List Firewall Flood Protection Profile Binding Maps for all domains
    # API will list all Firewall Flood Protection Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMapListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_firewall_flood_protection_bindings_across_domains_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_firewall_flood_protection_bindings_across_domains ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_firewall_flood_protection_bindings_across_domains"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_firewall_flood_protection_bindings_across_domains"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_firewall_flood_protection_bindings_across_domains, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_firewall_flood_protection_bindings_across_domains, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/firewall-flood-protection-profile-binding-maps'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_list_firewall_flood_protection_bindings_across_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Session Timer Profile Binding Maps for all domains
    # API will list all Firewall Session Timer Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSessionTimerProfileBindingMapListResult]
    def orgs_org_id_projects_project_id_infra_list_firewall_session_timer_bindings_across_domains(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_firewall_session_timer_bindings_across_domains_with_http_info(org_id, project_id, opts)
      data
    end

    # List Firewall Session Timer Profile Binding Maps for all domains
    # API will list all Firewall Session Timer Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMapListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_firewall_session_timer_bindings_across_domains_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_firewall_session_timer_bindings_across_domains ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_firewall_session_timer_bindings_across_domains"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_firewall_session_timer_bindings_across_domains"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_firewall_session_timer_bindings_across_domains, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_firewall_session_timer_bindings_across_domains, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/firewall-session-timer-profile-binding-maps'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_list_firewall_session_timer_bindings_across_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles bindings.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param flood_protection_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [FloodProtectionProfileBindingListResult]
    def orgs_org_id_projects_project_id_infra_list_flood_protection_profile_bindings(org_id, project_id, flood_protection_profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_flood_protection_profile_bindings_with_http_info(org_id, project_id, flood_protection_profile_id, opts)
      data
    end

    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles bindings.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param flood_protection_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(FloodProtectionProfileBindingListResult, Fixnum, Hash)>] FloodProtectionProfileBindingListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_flood_protection_profile_bindings_with_http_info(org_id, project_id, flood_protection_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profile_bindings ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profile_bindings"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profile_bindings"
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/flood-protection-profiles/{flood-protection-profile-id}/bindings'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_list_flood_protection_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [FloodProtectionProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_flood_protection_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_flood_protection_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(FloodProtectionProfileListResult, Fixnum, Hash)>] FloodProtectionProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_flood_protection_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/flood-protection-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_list_flood_protection_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Flood Protection Profile Binding Maps
    # API will list all Firewall Flood Protection Profile Binding Maps in current group id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallFloodProtectionProfileBindingMapListResult]
    def orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings(org_id, project_id, domain_id, group_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings_with_http_info(org_id, project_id, domain_id, group_id, opts)
      data
    end

    # List Firewall Flood Protection Profile Binding Maps
    # API will list all Firewall Flood Protection Profile Binding Maps in current group id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMapListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings_with_http_info(org_id, project_id, domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Session Timer Profile Binding Maps
    # API will list all Firewall Session Timer Profile Binding Maps in current group id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSessionTimerProfileBindingMapListResult]
    def orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings(org_id, project_id, domain_id, group_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings_with_http_info(org_id, project_id, domain_id, group_id, opts)
      data
    end

    # List Firewall Session Timer Profile Binding Maps
    # API will list all Firewall Session Timer Profile Binding Maps in current group id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMapListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings_with_http_info(org_id, project_id, domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Session Timer Profiles
    # API will list all Firewall Session Timer Profiles
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSessionTimerProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # List Firewall Session Timer Profiles
    # API will list all Firewall Session Timer Profiles
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSessionTimerProfileListResult, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-session-timer-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Session Timer Profiles
    # API will list all Session Timer Profiles bindings.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param session_timer_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SessionTimerProfileBindingListResult]
    def orgs_org_id_projects_project_id_infra_list_session_timer_profile_bindings(org_id, project_id, session_timer_profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_session_timer_profile_bindings_with_http_info(org_id, project_id, session_timer_profile_id, opts)
      data
    end

    # List Session Timer Profiles
    # API will list all Session Timer Profiles bindings.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param session_timer_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SessionTimerProfileBindingListResult, Fixnum, Hash)>] SessionTimerProfileBindingListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_session_timer_profile_bindings_with_http_info(org_id, project_id, session_timer_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_session_timer_profile_bindings ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_session_timer_profile_bindings"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_session_timer_profile_bindings"
      end
      # verify the required parameter 'session_timer_profile_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_session_timer_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_session_timer_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_list_session_timer_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/session-timer-profiles/{session-timer-profile-id}/bindings'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'session-timer-profile-id' + '}', session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_list_session_timer_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_dns_security_profile(org_id, project_id, profile_id, dns_security_profile, opts = {})
      orgs_org_id_projects_project_id_infra_patch_dns_security_profile_with_http_info(org_id, project_id, profile_id, dns_security_profile, opts)
      nil
    end

    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_dns_security_profile_with_http_info(org_id, project_id, profile_id, dns_security_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile"
      end
      # verify the required parameter 'dns_security_profile' is set
      if @api_client.config.client_side_validation && dns_security_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dns-security-profiles/{profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dns_security_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_patch_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DNS security profile binding map
    # API will create or update DNS security profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param dns_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts = {})
      orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding_with_http_info(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts)
      nil
    end

    # Create or update DNS security profile binding map
    # API will create or update DNS security profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param dns_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding_with_http_info(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps/{dns-security-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'dns-security-profile-binding-map-id' + '}', dns_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dns_security_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile
    # API will create/update Flood Protection Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param flood_protection_profile_id Firewall Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_flood_protection_profile(org_id, project_id, flood_protection_profile_id, flood_protection_profile, opts = {})
      orgs_org_id_projects_project_id_infra_patch_flood_protection_profile_with_http_info(org_id, project_id, flood_protection_profile_id, flood_protection_profile, opts)
      nil
    end

    # Create or update Flood Protection Profile
    # API will create/update Flood Protection Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param flood_protection_profile_id Firewall Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_flood_protection_profile_with_http_info(org_id, project_id, flood_protection_profile_id, flood_protection_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_flood_protection_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_flood_protection_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_flood_protection_profile"
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_flood_protection_profile"
      end
      # verify the required parameter 'flood_protection_profile' is set
      if @api_client.config.client_side_validation && flood_protection_profile.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_flood_protection_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_patch_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Firewall Flood Protection Profile Binding Map
    # API will create or update Firewall Flood Protection profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map_with_http_info(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Firewall Flood Protection Profile Binding Map
    # API will create or update Firewall Flood Protection profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map_with_http_info(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'policy_firewall_flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_flood_protection_profile_binding_map' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Firewall Session Timer Profile
    # API will create/update Firewall Session Timer Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile(org_id, project_id, firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_with_http_info(org_id, project_id, firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts)
      nil
    end

    # Create or update Firewall Session Timer Profile
    # API will create/update Firewall Session Timer Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_with_http_info(org_id, project_id, firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'policy_firewall_session_timer_profile' is set
      if @api_client.config.client_side_validation && policy_firewall_session_timer_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_session_timer_profile' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_session_timer_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Firewall Session Timer Profile Binding Map
    # API will create or update Firewall Session Timer profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param policy_firewall_session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts = {})
      orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map_with_http_info(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Firewall Session Timer Profile Binding Map
    # API will create or update Firewall Session Timer profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param policy_firewall_session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map_with_http_info(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map"
      end
      # verify the required parameter 'firewall_session_timer_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_binding_map_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map"
      end
      # verify the required parameter 'policy_firewall_session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_session_timer_profile_binding_map' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps/{firewall-session-timer-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-session-timer-profile-binding-map-id' + '}', firewall_session_timer_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_tier1_flood_protection_profile_binding_map(org_id, project_id, tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      orgs_org_id_projects_project_id_infra_patch_tier1_flood_protection_profile_binding_map_with_http_info(org_id, project_id, tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_tier1_flood_protection_profile_binding_map_with_http_info(org_id, project_id, tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_patch_tier1_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map_with_http_info(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map_with_http_info(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map(org_id, project_id, tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder for the given tier-0 instance
    # Read the DNS Forwarder for the given tier-0 instance
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [DnsSecurityProfile]
    def orgs_org_id_projects_project_id_infra_read_dns_security_profile(org_id, project_id, profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_dns_security_profile_with_http_info(org_id, project_id, profile_id, opts)
      data
    end

    # Read the DNS Forwarder for the given tier-0 instance
    # Read the DNS Forwarder for the given tier-0 instance
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DnsSecurityProfile, Fixnum, Hash)>] DnsSecurityProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_dns_security_profile_with_http_info(org_id, project_id, profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_read_dns_security_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_read_dns_security_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_read_dns_security_profile"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_read_dns_security_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dns-security-profiles/{profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_read_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [DnsSecurityProfile]
    def orgs_org_id_projects_project_id_infra_update_dns_security_profile(org_id, project_id, profile_id, dns_security_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_dns_security_profile_with_http_info(org_id, project_id, profile_id, dns_security_profile, opts)
      data
    end

    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(DnsSecurityProfile, Fixnum, Hash)>] DnsSecurityProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_dns_security_profile_with_http_info(org_id, project_id, profile_id, dns_security_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile"
      end
      # verify the required parameter 'dns_security_profile' is set
      if @api_client.config.client_side_validation && dns_security_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dns-security-profiles/{profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dns_security_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_update_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update DNS security profile binding map
    # API will update DNS security profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param dns_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [DnsSecurityProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding_with_http_info(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts)
      data
    end

    # Update DNS security profile binding map
    # API will update DNS security profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param dns_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DnsSecurityProfileBindingMap, Fixnum, Hash)>] DnsSecurityProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding_with_http_info(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps/{dns-security-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'dns-security-profile-binding-map-id' + '}', dns_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dns_security_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Flood Protection Profile
    # API will update Firewall Flood Protection Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [FloodProtectionProfile]
    def orgs_org_id_projects_project_id_infra_update_flood_protection_profile(org_id, project_id, flood_protection_profile_id, flood_protection_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_flood_protection_profile_with_http_info(org_id, project_id, flood_protection_profile_id, flood_protection_profile, opts)
      data
    end

    # Update Firewall Flood Protection Profile
    # API will update Firewall Flood Protection Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(FloodProtectionProfile, Fixnum, Hash)>] FloodProtectionProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_flood_protection_profile_with_http_info(org_id, project_id, flood_protection_profile_id, flood_protection_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_flood_protection_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_flood_protection_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_flood_protection_profile"
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_flood_protection_profile"
      end
      # verify the required parameter 'flood_protection_profile' is set
      if @api_client.config.client_side_validation && flood_protection_profile.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_flood_protection_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_update_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Flood Protection Profile Binding Map
    # API will update Firewall Flood Protection Profile Binding Map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallFloodProtectionProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts)
      data
    end

    # Update Firewall Flood Protection Profile Binding Map
    # API will update Firewall Flood Protection Profile Binding Map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMap, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'policy_firewall_flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_flood_protection_profile_binding_map' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Session Timer Profile Binding Map
    # API will update Firewall Session Timer Profile Binding Map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param policy_firewall_session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallSessionTimerProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts)
      data
    end

    # Update Firewall Session Timer Profile Binding Map
    # API will update Firewall Session Timer Profile Binding Map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param policy_firewall_session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMap, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'firewall_session_timer_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_binding_map_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'policy_firewall_session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_session_timer_profile_binding_map' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps/{firewall-session-timer-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-session-timer-profile-binding-map-id' + '}', firewall_session_timer_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Session Timer Profile
    # API will update Firewall Session Timer Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [PolicyFirewallSessionTimerProfile]
    def orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_profile(org_id, project_id, firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_profile_with_http_info(org_id, project_id, firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts)
      data
    end

    # Update Firewall Session Timer Profile
    # API will update Firewall Session Timer Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(PolicyFirewallSessionTimerProfile, Fixnum, Hash)>] PolicyFirewallSessionTimerProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_profile_with_http_info(org_id, project_id, firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'policy_firewall_session_timer_profile' is set
      if @api_client.config.client_side_validation && policy_firewall_session_timer_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_session_timer_profile' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_session_timer_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_update_tier1_flood_protection_profile_binding(org_id, project_id, tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_tier1_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      data
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_tier1_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_update_tier1_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      data
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      data
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding(org_id, project_id, tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      data
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityProfilesApi.orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update CPU and memory thresholds profile
    # Create or update CPU and memory thresholds profile.
    # @param profile_id 
    # @param policy_firewall_cpu_mem_thresholds_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_cpu_mem_thresholds_profile(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts = {})
      patch_cpu_mem_thresholds_profile_with_http_info(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts)
      nil
    end

    # Create or update CPU and memory thresholds profile
    # Create or update CPU and memory thresholds profile.
    # @param profile_id 
    # @param policy_firewall_cpu_mem_thresholds_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_cpu_mem_thresholds_profile_with_http_info(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.patch_cpu_mem_thresholds_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityProfilesApi.patch_cpu_mem_thresholds_profile"
      end
      # verify the required parameter 'policy_firewall_cpu_mem_thresholds_profile' is set
      if @api_client.config.client_side_validation && policy_firewall_cpu_mem_thresholds_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_cpu_mem_thresholds_profile' when calling SecurityProfilesApi.patch_cpu_mem_thresholds_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/cpu-mem-thresholds-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_cpu_mem_thresholds_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#patch_cpu_mem_thresholds_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_dns_security_profile(profile_id, dns_security_profile, opts = {})
      patch_dns_security_profile_with_http_info(profile_id, dns_security_profile, opts)
      nil
    end

    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_dns_security_profile_with_http_info(profile_id, dns_security_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.patch_dns_security_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityProfilesApi.patch_dns_security_profile"
      end
      # verify the required parameter 'dns_security_profile' is set
      if @api_client.config.client_side_validation && dns_security_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile' when calling SecurityProfilesApi.patch_dns_security_profile"
      end
      # resource path
      local_var_path = '/infra/dns-security-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dns_security_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#patch_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DNS security profile binding map
    # API will create or update DNS security profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param dns_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_dns_security_profile_binding(domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts = {})
      patch_dns_security_profile_binding_with_http_info(domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts)
      nil
    end

    # Create or update DNS security profile binding map
    # API will create or update DNS security profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param dns_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_dns_security_profile_binding_with_http_info(domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.patch_dns_security_profile_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.patch_dns_security_profile_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.patch_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map_id' when calling SecurityProfilesApi.patch_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map' when calling SecurityProfilesApi.patch_dns_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps/{dns-security-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'dns-security-profile-binding-map-id' + '}', dns_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dns_security_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#patch_dns_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile
    # API will create/update Flood Protection Profile
    # @param flood_protection_profile_id Firewall Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_flood_protection_profile(flood_protection_profile_id, flood_protection_profile, opts = {})
      patch_flood_protection_profile_with_http_info(flood_protection_profile_id, flood_protection_profile, opts)
      nil
    end

    # Create or update Flood Protection Profile
    # API will create/update Flood Protection Profile
    # @param flood_protection_profile_id Firewall Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_flood_protection_profile_with_http_info(flood_protection_profile_id, flood_protection_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.patch_flood_protection_profile ...'
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityProfilesApi.patch_flood_protection_profile"
      end
      # verify the required parameter 'flood_protection_profile' is set
      if @api_client.config.client_side_validation && flood_protection_profile.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile' when calling SecurityProfilesApi.patch_flood_protection_profile"
      end
      # resource path
      local_var_path = '/infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#patch_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Group Monitoring Profile Binding Map
    # API will create group monitoring profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param group_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_group_monitoring_binding(domain_id, group_id, group_monitoring_profile_binding_map_id, group_monitoring_profile_binding_map, opts = {})
      patch_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, group_monitoring_profile_binding_map, opts)
      nil
    end

    # Create Group Monitoring Profile Binding Map
    # API will create group monitoring profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param group_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, group_monitoring_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.patch_group_monitoring_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.patch_group_monitoring_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.patch_group_monitoring_binding"
      end
      # verify the required parameter 'group_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && group_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_monitoring_profile_binding_map_id' when calling SecurityProfilesApi.patch_group_monitoring_binding"
      end
      # verify the required parameter 'group_monitoring_profile_binding_map' is set
      if @api_client.config.client_side_validation && group_monitoring_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'group_monitoring_profile_binding_map' when calling SecurityProfilesApi.patch_group_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/group-monitoring-profile-binding-maps/{group-monitoring-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'group-monitoring-profile-binding-map-id' + '}', group_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group_monitoring_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#patch_group_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Firewall CPU Memory Thresholds Profile Binding Map
    # API will create or update Firewall CPU Memory Thresholds Profile binding map.
    # @param cpu_mem_thresholds_profile_binding_map_id Firewall CPU Memory Thresholds Profile Binding Map ID
    # @param policy_firewall_cpu_mem_thresholds_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_firewall_cpu_mem_thresholds_profile_binding_map(cpu_mem_thresholds_profile_binding_map_id, policy_firewall_cpu_mem_thresholds_profile_binding_map, opts = {})
      patch_policy_firewall_cpu_mem_thresholds_profile_binding_map_with_http_info(cpu_mem_thresholds_profile_binding_map_id, policy_firewall_cpu_mem_thresholds_profile_binding_map, opts)
      nil
    end

    # Create or update Firewall CPU Memory Thresholds Profile Binding Map
    # API will create or update Firewall CPU Memory Thresholds Profile binding map.
    # @param cpu_mem_thresholds_profile_binding_map_id Firewall CPU Memory Thresholds Profile Binding Map ID
    # @param policy_firewall_cpu_mem_thresholds_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_firewall_cpu_mem_thresholds_profile_binding_map_with_http_info(cpu_mem_thresholds_profile_binding_map_id, policy_firewall_cpu_mem_thresholds_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.patch_policy_firewall_cpu_mem_thresholds_profile_binding_map ...'
      end
      # verify the required parameter 'cpu_mem_thresholds_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && cpu_mem_thresholds_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'cpu_mem_thresholds_profile_binding_map_id' when calling SecurityProfilesApi.patch_policy_firewall_cpu_mem_thresholds_profile_binding_map"
      end
      # verify the required parameter 'policy_firewall_cpu_mem_thresholds_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_cpu_mem_thresholds_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_cpu_mem_thresholds_profile_binding_map' when calling SecurityProfilesApi.patch_policy_firewall_cpu_mem_thresholds_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/cpu-mem-thresholds-profile-binding-maps/{cpu-mem-thresholds-profile-binding-map-id}'.sub('{' + 'cpu-mem-thresholds-profile-binding-map-id' + '}', cpu_mem_thresholds_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_cpu_mem_thresholds_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#patch_policy_firewall_cpu_mem_thresholds_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Firewall Flood Protection Profile Binding Map
    # API will create or update Firewall Flood Protection profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_firewall_flood_protection_profile_binding_map(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      patch_policy_firewall_flood_protection_profile_binding_map_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Firewall Flood Protection Profile Binding Map
    # API will create or update Firewall Flood Protection profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_firewall_flood_protection_profile_binding_map_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.patch_policy_firewall_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling SecurityProfilesApi.patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'policy_firewall_flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_flood_protection_profile_binding_map' when calling SecurityProfilesApi.patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#patch_policy_firewall_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Firewall Session Timer Profile
    # API will create/update Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_policy_firewall_session_timer_profile(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      patch_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts)
      nil
    end

    # Create or update Firewall Session Timer Profile
    # API will create/update Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.patch_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityProfilesApi.patch_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'policy_firewall_session_timer_profile' is set
      if @api_client.config.client_side_validation && policy_firewall_session_timer_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_session_timer_profile' when calling SecurityProfilesApi.patch_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_session_timer_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#patch_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Firewall Session Timer Profile Binding Map
    # API will create or update Firewall Session Timer profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param policy_firewall_session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_firewall_session_timer_profile_binding_map(domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts = {})
      patch_policy_firewall_session_timer_profile_binding_map_with_http_info(domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Firewall Session Timer Profile Binding Map
    # API will create or update Firewall Session Timer profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param policy_firewall_session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_firewall_session_timer_profile_binding_map_with_http_info(domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.patch_policy_firewall_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.patch_policy_firewall_session_timer_profile_binding_map"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.patch_policy_firewall_session_timer_profile_binding_map"
      end
      # verify the required parameter 'firewall_session_timer_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_binding_map_id' when calling SecurityProfilesApi.patch_policy_firewall_session_timer_profile_binding_map"
      end
      # verify the required parameter 'policy_firewall_session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_session_timer_profile_binding_map' when calling SecurityProfilesApi.patch_policy_firewall_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps/{firewall-session-timer-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-session-timer-profile-binding-map-id' + '}', firewall_session_timer_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#patch_policy_firewall_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier0_flood_protection_profile_binding_map(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      patch_tier0_flood_protection_profile_binding_map_with_http_info(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier0_flood_protection_profile_binding_map_with_http_info(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.patch_tier0_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityProfilesApi.patch_tier0_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.patch_tier0_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityProfilesApi.patch_tier0_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#patch_tier0_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier0_local_services_session_timer_profile_binding_map(tier0_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      patch_tier0_local_services_session_timer_profile_binding_map_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier0_local_services_session_timer_profile_binding_map_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.patch_tier0_local_services_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityProfilesApi.patch_tier0_local_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.patch_tier0_local_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.patch_tier0_local_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityProfilesApi.patch_tier0_local_services_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#patch_tier0_local_services_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier0_locale_services_flood_protection_profile_binding_map(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      patch_tier0_locale_services_flood_protection_profile_binding_map_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier0_locale_services_flood_protection_profile_binding_map_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.patch_tier0_locale_services_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityProfilesApi.patch_tier0_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.patch_tier0_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.patch_tier0_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityProfilesApi.patch_tier0_locale_services_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#patch_tier0_locale_services_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier0_session_timer_profile_binding_map(tier0_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      patch_tier0_session_timer_profile_binding_map_with_http_info(tier0_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier0_session_timer_profile_binding_map_with_http_info(tier0_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.patch_tier0_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityProfilesApi.patch_tier0_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.patch_tier0_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityProfilesApi.patch_tier0_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#patch_tier0_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier1_flood_protection_profile_binding_map(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      patch_tier1_flood_protection_profile_binding_map_with_http_info(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier1_flood_protection_profile_binding_map_with_http_info(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.patch_tier1_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.patch_tier1_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.patch_tier1_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityProfilesApi.patch_tier1_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#patch_tier1_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier1_locale_services_flood_protection_profile_binding_map(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      patch_tier1_locale_services_flood_protection_profile_binding_map_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier1_locale_services_flood_protection_profile_binding_map_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.patch_tier1_locale_services_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityProfilesApi.patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#patch_tier1_locale_services_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier1_locale_services_session_timer_profile_binding_map(tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      patch_tier1_locale_services_session_timer_profile_binding_map_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier1_locale_services_session_timer_profile_binding_map_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.patch_tier1_locale_services_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityProfilesApi.patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#patch_tier1_locale_services_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier1_session_timer_profile_binding_map(tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      patch_tier1_session_timer_profile_binding_map_with_http_info(tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier1_session_timer_profile_binding_map_with_http_info(tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.patch_tier1_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.patch_tier1_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.patch_tier1_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityProfilesApi.patch_tier1_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#patch_tier1_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the CPU and memory thresholds profile
    # Read the CPU and memory thresholds profile.
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallCpuMemThresholdsProfile]
    def read_cpu_mem_thresholds_profile(profile_id, opts = {})
      data, _status_code, _headers = read_cpu_mem_thresholds_profile_with_http_info(profile_id, opts)
      data
    end

    # Read the CPU and memory thresholds profile
    # Read the CPU and memory thresholds profile.
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallCpuMemThresholdsProfile, Fixnum, Hash)>] PolicyFirewallCpuMemThresholdsProfile data, response status code and response headers
    def read_cpu_mem_thresholds_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.read_cpu_mem_thresholds_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityProfilesApi.read_cpu_mem_thresholds_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/cpu-mem-thresholds-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallCpuMemThresholdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#read_cpu_mem_thresholds_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder for the given tier-0 instance
    # Read the DNS Forwarder for the given tier-0 instance
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [DnsSecurityProfile]
    def read_dns_security_profile(profile_id, opts = {})
      data, _status_code, _headers = read_dns_security_profile_with_http_info(profile_id, opts)
      data
    end

    # Read the DNS Forwarder for the given tier-0 instance
    # Read the DNS Forwarder for the given tier-0 instance
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DnsSecurityProfile, Fixnum, Hash)>] DnsSecurityProfile data, response status code and response headers
    def read_dns_security_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.read_dns_security_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityProfilesApi.read_dns_security_profile"
      end
      # resource path
      local_var_path = '/infra/dns-security-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#read_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update CPU and memory thresholds profile
    # Create or update CPU and memory thresholds profile.
    # @param profile_id 
    # @param policy_firewall_cpu_mem_thresholds_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [PolicyFirewallCpuMemThresholdsProfile]
    def update_cpu_mem_thresholds_profile(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts = {})
      data, _status_code, _headers = update_cpu_mem_thresholds_profile_with_http_info(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts)
      data
    end

    # Create or update CPU and memory thresholds profile
    # Create or update CPU and memory thresholds profile.
    # @param profile_id 
    # @param policy_firewall_cpu_mem_thresholds_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(PolicyFirewallCpuMemThresholdsProfile, Fixnum, Hash)>] PolicyFirewallCpuMemThresholdsProfile data, response status code and response headers
    def update_cpu_mem_thresholds_profile_with_http_info(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.update_cpu_mem_thresholds_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityProfilesApi.update_cpu_mem_thresholds_profile"
      end
      # verify the required parameter 'policy_firewall_cpu_mem_thresholds_profile' is set
      if @api_client.config.client_side_validation && policy_firewall_cpu_mem_thresholds_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_cpu_mem_thresholds_profile' when calling SecurityProfilesApi.update_cpu_mem_thresholds_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/cpu-mem-thresholds-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_cpu_mem_thresholds_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallCpuMemThresholdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#update_cpu_mem_thresholds_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [DnsSecurityProfile]
    def update_dns_security_profile(profile_id, dns_security_profile, opts = {})
      data, _status_code, _headers = update_dns_security_profile_with_http_info(profile_id, dns_security_profile, opts)
      data
    end

    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(DnsSecurityProfile, Fixnum, Hash)>] DnsSecurityProfile data, response status code and response headers
    def update_dns_security_profile_with_http_info(profile_id, dns_security_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.update_dns_security_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityProfilesApi.update_dns_security_profile"
      end
      # verify the required parameter 'dns_security_profile' is set
      if @api_client.config.client_side_validation && dns_security_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile' when calling SecurityProfilesApi.update_dns_security_profile"
      end
      # resource path
      local_var_path = '/infra/dns-security-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dns_security_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#update_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update DNS security profile binding map
    # API will update DNS security profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param dns_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [DnsSecurityProfileBindingMap]
    def update_dns_security_profile_binding(domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts = {})
      data, _status_code, _headers = update_dns_security_profile_binding_with_http_info(domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts)
      data
    end

    # Update DNS security profile binding map
    # API will update DNS security profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param dns_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DnsSecurityProfileBindingMap, Fixnum, Hash)>] DnsSecurityProfileBindingMap data, response status code and response headers
    def update_dns_security_profile_binding_with_http_info(domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.update_dns_security_profile_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.update_dns_security_profile_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.update_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map_id' when calling SecurityProfilesApi.update_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map' when calling SecurityProfilesApi.update_dns_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps/{dns-security-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'dns-security-profile-binding-map-id' + '}', dns_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dns_security_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#update_dns_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Flood Protection Profile
    # API will update Firewall Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [FloodProtectionProfile]
    def update_flood_protection_profile(flood_protection_profile_id, flood_protection_profile, opts = {})
      data, _status_code, _headers = update_flood_protection_profile_with_http_info(flood_protection_profile_id, flood_protection_profile, opts)
      data
    end

    # Update Firewall Flood Protection Profile
    # API will update Firewall Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(FloodProtectionProfile, Fixnum, Hash)>] FloodProtectionProfile data, response status code and response headers
    def update_flood_protection_profile_with_http_info(flood_protection_profile_id, flood_protection_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.update_flood_protection_profile ...'
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityProfilesApi.update_flood_protection_profile"
      end
      # verify the required parameter 'flood_protection_profile' is set
      if @api_client.config.client_side_validation && flood_protection_profile.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile' when calling SecurityProfilesApi.update_flood_protection_profile"
      end
      # resource path
      local_var_path = '/infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#update_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Group Monitoring Profile Binding Map
    # API will update Group Monitoring Profile Binding Map
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param group_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [GroupMonitoringProfileBindingMap]
    def update_group_monitoring_binding(domain_id, group_id, group_monitoring_profile_binding_map_id, group_monitoring_profile_binding_map, opts = {})
      data, _status_code, _headers = update_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, group_monitoring_profile_binding_map, opts)
      data
    end

    # Update Group Monitoring Profile Binding Map
    # API will update Group Monitoring Profile Binding Map
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param group_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupMonitoringProfileBindingMap, Fixnum, Hash)>] GroupMonitoringProfileBindingMap data, response status code and response headers
    def update_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, group_monitoring_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.update_group_monitoring_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.update_group_monitoring_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.update_group_monitoring_binding"
      end
      # verify the required parameter 'group_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && group_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_monitoring_profile_binding_map_id' when calling SecurityProfilesApi.update_group_monitoring_binding"
      end
      # verify the required parameter 'group_monitoring_profile_binding_map' is set
      if @api_client.config.client_side_validation && group_monitoring_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'group_monitoring_profile_binding_map' when calling SecurityProfilesApi.update_group_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/group-monitoring-profile-binding-maps/{group-monitoring-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'group-monitoring-profile-binding-map-id' + '}', group_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group_monitoring_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupMonitoringProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#update_group_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall CPU Memory Thresholds Profile Binding Map
    # API will update Firewall CPU Memory Thresholds Profile Binding Map.
    # @param cpu_mem_thresholds_profile_binding_map_id Firewall CPU Memory Thresholds Profile Binding Map ID
    # @param policy_firewall_cpu_mem_thresholds_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallCPUMemThresholdsProfileBindingMap]
    def update_policy_firewall_cpu_mem_thresholds_profile_binding_map(cpu_mem_thresholds_profile_binding_map_id, policy_firewall_cpu_mem_thresholds_profile_binding_map, opts = {})
      data, _status_code, _headers = update_policy_firewall_cpu_mem_thresholds_profile_binding_map_with_http_info(cpu_mem_thresholds_profile_binding_map_id, policy_firewall_cpu_mem_thresholds_profile_binding_map, opts)
      data
    end

    # Update Firewall CPU Memory Thresholds Profile Binding Map
    # API will update Firewall CPU Memory Thresholds Profile Binding Map.
    # @param cpu_mem_thresholds_profile_binding_map_id Firewall CPU Memory Thresholds Profile Binding Map ID
    # @param policy_firewall_cpu_mem_thresholds_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallCPUMemThresholdsProfileBindingMap, Fixnum, Hash)>] PolicyFirewallCPUMemThresholdsProfileBindingMap data, response status code and response headers
    def update_policy_firewall_cpu_mem_thresholds_profile_binding_map_with_http_info(cpu_mem_thresholds_profile_binding_map_id, policy_firewall_cpu_mem_thresholds_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.update_policy_firewall_cpu_mem_thresholds_profile_binding_map ...'
      end
      # verify the required parameter 'cpu_mem_thresholds_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && cpu_mem_thresholds_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'cpu_mem_thresholds_profile_binding_map_id' when calling SecurityProfilesApi.update_policy_firewall_cpu_mem_thresholds_profile_binding_map"
      end
      # verify the required parameter 'policy_firewall_cpu_mem_thresholds_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_cpu_mem_thresholds_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_cpu_mem_thresholds_profile_binding_map' when calling SecurityProfilesApi.update_policy_firewall_cpu_mem_thresholds_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/cpu-mem-thresholds-profile-binding-maps/{cpu-mem-thresholds-profile-binding-map-id}'.sub('{' + 'cpu-mem-thresholds-profile-binding-map-id' + '}', cpu_mem_thresholds_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_cpu_mem_thresholds_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallCPUMemThresholdsProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#update_policy_firewall_cpu_mem_thresholds_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Flood Protection Profile Binding Map
    # API will update Firewall Flood Protection Profile Binding Map
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallFloodProtectionProfileBindingMap]
    def update_policy_firewall_flood_protection_binding(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = update_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts)
      data
    end

    # Update Firewall Flood Protection Profile Binding Map
    # API will update Firewall Flood Protection Profile Binding Map
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMap, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMap data, response status code and response headers
    def update_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.update_policy_firewall_flood_protection_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.update_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.update_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling SecurityProfilesApi.update_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'policy_firewall_flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_flood_protection_profile_binding_map' when calling SecurityProfilesApi.update_policy_firewall_flood_protection_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#update_policy_firewall_flood_protection_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Session Timer Profile Binding Map
    # API will update Firewall Session Timer Profile Binding Map
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param policy_firewall_session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallSessionTimerProfileBindingMap]
    def update_policy_firewall_session_timer_binding(domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = update_policy_firewall_session_timer_binding_with_http_info(domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts)
      data
    end

    # Update Firewall Session Timer Profile Binding Map
    # API will update Firewall Session Timer Profile Binding Map
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param policy_firewall_session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMap, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMap data, response status code and response headers
    def update_policy_firewall_session_timer_binding_with_http_info(domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.update_policy_firewall_session_timer_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityProfilesApi.update_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityProfilesApi.update_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'firewall_session_timer_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_binding_map_id' when calling SecurityProfilesApi.update_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'policy_firewall_session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_session_timer_profile_binding_map' when calling SecurityProfilesApi.update_policy_firewall_session_timer_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps/{firewall-session-timer-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-session-timer-profile-binding-map-id' + '}', firewall_session_timer_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#update_policy_firewall_session_timer_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Session Timer Profile
    # API will update Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [PolicyFirewallSessionTimerProfile]
    def update_policy_firewall_session_timer_profile(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      data, _status_code, _headers = update_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts)
      data
    end

    # Update Firewall Session Timer Profile
    # API will update Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(PolicyFirewallSessionTimerProfile, Fixnum, Hash)>] PolicyFirewallSessionTimerProfile data, response status code and response headers
    def update_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.update_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityProfilesApi.update_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'policy_firewall_session_timer_profile' is set
      if @api_client.config.client_side_validation && policy_firewall_session_timer_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_session_timer_profile' when calling SecurityProfilesApi.update_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_session_timer_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#update_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def update_tier0_flood_protection_profile_binding(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      data
    end

    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def update_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.update_tier0_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityProfilesApi.update_tier0_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.update_tier0_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityProfilesApi.update_tier0_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#update_tier0_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def update_tier0_locale_services_flood_protection_profile_binding(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      data
    end

    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def update_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.update_tier0_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityProfilesApi.update_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.update_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.update_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityProfilesApi.update_tier0_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#update_tier0_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def update_tier0_locale_services_session_timer_profile_binding(tier0_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      data
    end

    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def update_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.update_tier0_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityProfilesApi.update_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.update_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.update_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityProfilesApi.update_tier0_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#update_tier0_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def update_tier0_session_timer_profile_binding(tier0_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      data
    end

    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def update_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.update_tier0_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityProfilesApi.update_tier0_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.update_tier0_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityProfilesApi.update_tier0_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#update_tier0_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def update_tier1_flood_protection_profile_binding(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      data
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def update_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.update_tier1_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.update_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.update_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityProfilesApi.update_tier1_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#update_tier1_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def update_tier1_locale_services_flood_protection_profile_binding(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      data
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def update_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.update_tier1_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.update_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.update_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityProfilesApi.update_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityProfilesApi.update_tier1_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#update_tier1_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def update_tier1_locale_services_session_timer_profile_binding(tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      data
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def update_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.update_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityProfilesApi.update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityProfilesApi.update_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#update_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def update_tier1_session_timer_profile_binding(tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      data
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def update_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityProfilesApi.update_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityProfilesApi.update_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityProfilesApi.update_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityProfilesApi.update_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityProfilesApi#update_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
