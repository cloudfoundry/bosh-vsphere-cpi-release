=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class ProfileApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Sha dynamic plugin
    # Create Sha dynamic plugin. 
    # @param plugin_id Sha plugin id
    # @param sha_dynamic_plugin 
    # @param [Hash] opts the optional parameters
    # @return [ShaDynamicPlugin]
    def create_or_replace_sha_dynamic_plugin(plugin_id, sha_dynamic_plugin, opts = {})
      data, _status_code, _headers = create_or_replace_sha_dynamic_plugin_with_http_info(plugin_id, sha_dynamic_plugin, opts)
      data
    end

    # Create Sha dynamic plugin
    # Create Sha dynamic plugin. 
    # @param plugin_id Sha plugin id
    # @param sha_dynamic_plugin 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaDynamicPlugin, Fixnum, Hash)>] ShaDynamicPlugin data, response status code and response headers
    def create_or_replace_sha_dynamic_plugin_with_http_info(plugin_id, sha_dynamic_plugin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.create_or_replace_sha_dynamic_plugin ...'
      end
      # verify the required parameter 'plugin_id' is set
      if @api_client.config.client_side_validation && plugin_id.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_id' when calling ProfileApi.create_or_replace_sha_dynamic_plugin"
      end
      # verify the required parameter 'sha_dynamic_plugin' is set
      if @api_client.config.client_side_validation && sha_dynamic_plugin.nil?
        fail ArgumentError, "Missing the required parameter 'sha_dynamic_plugin' when calling ProfileApi.create_or_replace_sha_dynamic_plugin"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-plugins/{plugin-id}'.sub('{' + 'plugin-id' + '}', plugin_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sha_dynamic_plugin)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaDynamicPlugin')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#create_or_replace_sha_dynamic_plugin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace Sha profile
    # Create or Replace Sha profile. 
    # @param sha_profile_id Sha profile id
    # @param sha_plugin_profile 
    # @param [Hash] opts the optional parameters
    # @return [ShaPluginProfile]
    def create_or_replace_sha_plugin_profile(sha_profile_id, sha_plugin_profile, opts = {})
      data, _status_code, _headers = create_or_replace_sha_plugin_profile_with_http_info(sha_profile_id, sha_plugin_profile, opts)
      data
    end

    # Create or Replace Sha profile
    # Create or Replace Sha profile. 
    # @param sha_profile_id Sha profile id
    # @param sha_plugin_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaPluginProfile, Fixnum, Hash)>] ShaPluginProfile data, response status code and response headers
    def create_or_replace_sha_plugin_profile_with_http_info(sha_profile_id, sha_plugin_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.create_or_replace_sha_plugin_profile ...'
      end
      # verify the required parameter 'sha_profile_id' is set
      if @api_client.config.client_side_validation && sha_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'sha_profile_id' when calling ProfileApi.create_or_replace_sha_plugin_profile"
      end
      # verify the required parameter 'sha_plugin_profile' is set
      if @api_client.config.client_side_validation && sha_plugin_profile.nil?
        fail ArgumentError, "Missing the required parameter 'sha_plugin_profile' when calling ProfileApi.create_or_replace_sha_plugin_profile"
      end
      # resource path
      local_var_path = '/infra/sha/plugin-profiles/{sha-profile-id}'.sub('{' + 'sha-profile-id' + '}', sha_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sha_plugin_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaPluginProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#create_or_replace_sha_plugin_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Sha dynamic plugin
    # Delete Sha dynamic plugin. 
    # @param plugin_id Plugin filename
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_sha_dynamic_plugin(plugin_id, opts = {})
      delete_sha_dynamic_plugin_with_http_info(plugin_id, opts)
      nil
    end

    # Delete Sha dynamic plugin
    # Delete Sha dynamic plugin. 
    # @param plugin_id Plugin filename
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_sha_dynamic_plugin_with_http_info(plugin_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.delete_sha_dynamic_plugin ...'
      end
      # verify the required parameter 'plugin_id' is set
      if @api_client.config.client_side_validation && plugin_id.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_id' when calling ProfileApi.delete_sha_dynamic_plugin"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-plugins/{plugin-id}'.sub('{' + 'plugin-id' + '}', plugin_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#delete_sha_dynamic_plugin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete SHA profile
    # Delete Sha profile. 
    # @param sha_profile_id Sha profile id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_sha_plugin_profile(sha_profile_id, opts = {})
      delete_sha_plugin_profile_with_http_info(sha_profile_id, opts)
      nil
    end

    # Delete SHA profile
    # Delete Sha profile. 
    # @param sha_profile_id Sha profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_sha_plugin_profile_with_http_info(sha_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.delete_sha_plugin_profile ...'
      end
      # verify the required parameter 'sha_profile_id' is set
      if @api_client.config.client_side_validation && sha_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'sha_profile_id' when calling ProfileApi.delete_sha_plugin_profile"
      end
      # resource path
      local_var_path = '/infra/sha/plugin-profiles/{sha-profile-id}'.sub('{' + 'sha-profile-id' + '}', sha_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#delete_sha_plugin_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # API will provide list of Sha Dynamic plugins.
    # API will provide list of Sha Dynamic plugins. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ShaDynamicPluginListResult]
    def global_infra_list_sha_dynamic_plugins(opts = {})
      data, _status_code, _headers = global_infra_list_sha_dynamic_plugins_with_http_info(opts)
      data
    end

    # API will provide list of Sha Dynamic plugins.
    # API will provide list of Sha Dynamic plugins. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ShaDynamicPluginListResult, Fixnum, Hash)>] ShaDynamicPluginListResult data, response status code and response headers
    def global_infra_list_sha_dynamic_plugins_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.global_infra_list_sha_dynamic_plugins ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfileApi.global_infra_list_sha_dynamic_plugins, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfileApi.global_infra_list_sha_dynamic_plugins, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/sha/dynamic-plugins'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaDynamicPluginListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#global_infra_list_sha_dynamic_plugins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # API will provide list of SHA profiles.
    # API will provide list of SHA profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :applied_to_group_path The path of the Policy group object
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :plugin_path String path of the Sha plugin
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ShaPluginProfileListResult]
    def global_infra_list_sha_plugin_profiles(opts = {})
      data, _status_code, _headers = global_infra_list_sha_plugin_profiles_with_http_info(opts)
      data
    end

    # API will provide list of SHA profiles.
    # API will provide list of SHA profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :applied_to_group_path The path of the Policy group object
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :plugin_path String path of the Sha plugin
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ShaPluginProfileListResult, Fixnum, Hash)>] ShaPluginProfileListResult data, response status code and response headers
    def global_infra_list_sha_plugin_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.global_infra_list_sha_plugin_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfileApi.global_infra_list_sha_plugin_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfileApi.global_infra_list_sha_plugin_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/sha/plugin-profiles'

      # query parameters
      query_params = {}
      query_params[:'applied_to_group_path'] = opts[:'applied_to_group_path'] if !opts[:'applied_to_group_path'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'plugin_path'] = opts[:'plugin_path'] if !opts[:'plugin_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaPluginProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#global_infra_list_sha_plugin_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # API will provide list of Sha pre-defined list.
    # API will provide list of Sha pre-defined plugins. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ShaPreDefinedPluginListResult]
    def global_infra_list_sha_predefined_plugins(opts = {})
      data, _status_code, _headers = global_infra_list_sha_predefined_plugins_with_http_info(opts)
      data
    end

    # API will provide list of Sha pre-defined list.
    # API will provide list of Sha pre-defined plugins. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ShaPreDefinedPluginListResult, Fixnum, Hash)>] ShaPreDefinedPluginListResult data, response status code and response headers
    def global_infra_list_sha_predefined_plugins_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.global_infra_list_sha_predefined_plugins ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfileApi.global_infra_list_sha_predefined_plugins, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfileApi.global_infra_list_sha_predefined_plugins, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/sha/pre-defined-plugins'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaPreDefinedPluginListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#global_infra_list_sha_predefined_plugins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Sha dynamic plugin
    # Read Sha dynamic plugin. 
    # @param plugin_id Plugin filename
    # @param [Hash] opts the optional parameters
    # @return [ShaDynamicPlugin]
    def global_infra_read_sha_dynamic_plugin(plugin_id, opts = {})
      data, _status_code, _headers = global_infra_read_sha_dynamic_plugin_with_http_info(plugin_id, opts)
      data
    end

    # Read Sha dynamic plugin
    # Read Sha dynamic plugin. 
    # @param plugin_id Plugin filename
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaDynamicPlugin, Fixnum, Hash)>] ShaDynamicPlugin data, response status code and response headers
    def global_infra_read_sha_dynamic_plugin_with_http_info(plugin_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.global_infra_read_sha_dynamic_plugin ...'
      end
      # verify the required parameter 'plugin_id' is set
      if @api_client.config.client_side_validation && plugin_id.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_id' when calling ProfileApi.global_infra_read_sha_dynamic_plugin"
      end
      # resource path
      local_var_path = '/global-infra/sha/dynamic-plugins/{plugin-id}'.sub('{' + 'plugin-id' + '}', plugin_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaDynamicPlugin')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#global_infra_read_sha_dynamic_plugin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # API will return Sha profile
    # API will return Sha profile. 
    # @param sha_profile_id Sha profile id
    # @param [Hash] opts the optional parameters
    # @return [ShaPluginProfile]
    def global_infra_read_sha_plugin_profile(sha_profile_id, opts = {})
      data, _status_code, _headers = global_infra_read_sha_plugin_profile_with_http_info(sha_profile_id, opts)
      data
    end

    # API will return Sha profile
    # API will return Sha profile. 
    # @param sha_profile_id Sha profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaPluginProfile, Fixnum, Hash)>] ShaPluginProfile data, response status code and response headers
    def global_infra_read_sha_plugin_profile_with_http_info(sha_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.global_infra_read_sha_plugin_profile ...'
      end
      # verify the required parameter 'sha_profile_id' is set
      if @api_client.config.client_side_validation && sha_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'sha_profile_id' when calling ProfileApi.global_infra_read_sha_plugin_profile"
      end
      # resource path
      local_var_path = '/global-infra/sha/plugin-profiles/{sha-profile-id}'.sub('{' + 'sha-profile-id' + '}', sha_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaPluginProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#global_infra_read_sha_plugin_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Sha pre-defined plugin
    # Read SHA pre-defined plugin. 
    # @param plugin_id Sha pre-defined plugin
    # @param [Hash] opts the optional parameters
    # @return [ShaPredefinedPlugin]
    def global_infra_read_sha_predefined_plugin(plugin_id, opts = {})
      data, _status_code, _headers = global_infra_read_sha_predefined_plugin_with_http_info(plugin_id, opts)
      data
    end

    # Read Sha pre-defined plugin
    # Read SHA pre-defined plugin. 
    # @param plugin_id Sha pre-defined plugin
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaPredefinedPlugin, Fixnum, Hash)>] ShaPredefinedPlugin data, response status code and response headers
    def global_infra_read_sha_predefined_plugin_with_http_info(plugin_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.global_infra_read_sha_predefined_plugin ...'
      end
      # verify the required parameter 'plugin_id' is set
      if @api_client.config.client_side_validation && plugin_id.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_id' when calling ProfileApi.global_infra_read_sha_predefined_plugin"
      end
      # resource path
      local_var_path = '/global-infra/sha/pre-defined-plugins/{plugin-id}'.sub('{' + 'plugin-id' + '}', plugin_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaPredefinedPlugin')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#global_infra_read_sha_predefined_plugin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Show the plugins status on given node.
    # Show all the installed system health plugins on given node 
    # @param node_id The TN node id. 
    # @param [Hash] opts the optional parameters
    # @return [PerNodeShaPluginStatusListResult]
    def global_infra_show_plugin_status_on_node(node_id, opts = {})
      data, _status_code, _headers = global_infra_show_plugin_status_on_node_with_http_info(node_id, opts)
      data
    end

    # Show the plugins status on given node.
    # Show all the installed system health plugins on given node 
    # @param node_id The TN node id. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PerNodeShaPluginStatusListResult, Fixnum, Hash)>] PerNodeShaPluginStatusListResult data, response status code and response headers
    def global_infra_show_plugin_status_on_node_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.global_infra_show_plugin_status_on_node ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ProfileApi.global_infra_show_plugin_status_on_node"
      end
      # resource path
      local_var_path = '/global-infra/sha/plugin-status/{node-id}'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PerNodeShaPluginStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#global_infra_show_plugin_status_on_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # API will provide list of Sha Dynamic plugins.
    # API will provide list of Sha Dynamic plugins. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ShaDynamicPluginListResult]
    def list_sha_dynamic_plugins(opts = {})
      data, _status_code, _headers = list_sha_dynamic_plugins_with_http_info(opts)
      data
    end

    # API will provide list of Sha Dynamic plugins.
    # API will provide list of Sha Dynamic plugins. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ShaDynamicPluginListResult, Fixnum, Hash)>] ShaDynamicPluginListResult data, response status code and response headers
    def list_sha_dynamic_plugins_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.list_sha_dynamic_plugins ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfileApi.list_sha_dynamic_plugins, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfileApi.list_sha_dynamic_plugins, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/dynamic-plugins'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaDynamicPluginListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#list_sha_dynamic_plugins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # API will provide list of SHA profiles.
    # API will provide list of SHA profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :applied_to_group_path The path of the Policy group object
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :plugin_path String path of the Sha plugin
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ShaPluginProfileListResult]
    def list_sha_plugin_profiles(opts = {})
      data, _status_code, _headers = list_sha_plugin_profiles_with_http_info(opts)
      data
    end

    # API will provide list of SHA profiles.
    # API will provide list of SHA profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :applied_to_group_path The path of the Policy group object
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :plugin_path String path of the Sha plugin
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ShaPluginProfileListResult, Fixnum, Hash)>] ShaPluginProfileListResult data, response status code and response headers
    def list_sha_plugin_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.list_sha_plugin_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfileApi.list_sha_plugin_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfileApi.list_sha_plugin_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/plugin-profiles'

      # query parameters
      query_params = {}
      query_params[:'applied_to_group_path'] = opts[:'applied_to_group_path'] if !opts[:'applied_to_group_path'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'plugin_path'] = opts[:'plugin_path'] if !opts[:'plugin_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaPluginProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#list_sha_plugin_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # API will provide list of Sha pre-defined list.
    # API will provide list of Sha pre-defined plugins. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ShaPreDefinedPluginListResult]
    def list_sha_predefined_plugins(opts = {})
      data, _status_code, _headers = list_sha_predefined_plugins_with_http_info(opts)
      data
    end

    # API will provide list of Sha pre-defined list.
    # API will provide list of Sha pre-defined plugins. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ShaPreDefinedPluginListResult, Fixnum, Hash)>] ShaPreDefinedPluginListResult data, response status code and response headers
    def list_sha_predefined_plugins_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.list_sha_predefined_plugins ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfileApi.list_sha_predefined_plugins, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ProfileApi.list_sha_predefined_plugins, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/pre-defined-plugins'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaPreDefinedPluginListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#list_sha_predefined_plugins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace Sha dynamic plugin
    # Create or Replace Sha dynamic plugin. 
    # @param plugin_id Sha plugin id
    # @param sha_dynamic_plugin 
    # @param [Hash] opts the optional parameters
    # @return [ShaDynamicPlugin]
    def patch_sha_dynamic_plugin(plugin_id, sha_dynamic_plugin, opts = {})
      data, _status_code, _headers = patch_sha_dynamic_plugin_with_http_info(plugin_id, sha_dynamic_plugin, opts)
      data
    end

    # Create or Replace Sha dynamic plugin
    # Create or Replace Sha dynamic plugin. 
    # @param plugin_id Sha plugin id
    # @param sha_dynamic_plugin 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaDynamicPlugin, Fixnum, Hash)>] ShaDynamicPlugin data, response status code and response headers
    def patch_sha_dynamic_plugin_with_http_info(plugin_id, sha_dynamic_plugin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.patch_sha_dynamic_plugin ...'
      end
      # verify the required parameter 'plugin_id' is set
      if @api_client.config.client_side_validation && plugin_id.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_id' when calling ProfileApi.patch_sha_dynamic_plugin"
      end
      # verify the required parameter 'sha_dynamic_plugin' is set
      if @api_client.config.client_side_validation && sha_dynamic_plugin.nil?
        fail ArgumentError, "Missing the required parameter 'sha_dynamic_plugin' when calling ProfileApi.patch_sha_dynamic_plugin"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-plugins/{plugin-id}'.sub('{' + 'plugin-id' + '}', plugin_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sha_dynamic_plugin)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaDynamicPlugin')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#patch_sha_dynamic_plugin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace SHA profile
    # Create or Replace Sha profile. 
    # @param sha_profile_id Sha profile id
    # @param sha_plugin_profile 
    # @param [Hash] opts the optional parameters
    # @return [ShaPluginProfile]
    def patch_sha_plugin_profile(sha_profile_id, sha_plugin_profile, opts = {})
      data, _status_code, _headers = patch_sha_plugin_profile_with_http_info(sha_profile_id, sha_plugin_profile, opts)
      data
    end

    # Create or Replace SHA profile
    # Create or Replace Sha profile. 
    # @param sha_profile_id Sha profile id
    # @param sha_plugin_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaPluginProfile, Fixnum, Hash)>] ShaPluginProfile data, response status code and response headers
    def patch_sha_plugin_profile_with_http_info(sha_profile_id, sha_plugin_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.patch_sha_plugin_profile ...'
      end
      # verify the required parameter 'sha_profile_id' is set
      if @api_client.config.client_side_validation && sha_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'sha_profile_id' when calling ProfileApi.patch_sha_plugin_profile"
      end
      # verify the required parameter 'sha_plugin_profile' is set
      if @api_client.config.client_side_validation && sha_plugin_profile.nil?
        fail ArgumentError, "Missing the required parameter 'sha_plugin_profile' when calling ProfileApi.patch_sha_plugin_profile"
      end
      # resource path
      local_var_path = '/infra/sha/plugin-profiles/{sha-profile-id}'.sub('{' + 'sha-profile-id' + '}', sha_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sha_plugin_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaPluginProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#patch_sha_plugin_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Sha dynamic plugin
    # Read Sha dynamic plugin. 
    # @param plugin_id Plugin filename
    # @param [Hash] opts the optional parameters
    # @return [ShaDynamicPlugin]
    def read_sha_dynamic_plugin(plugin_id, opts = {})
      data, _status_code, _headers = read_sha_dynamic_plugin_with_http_info(plugin_id, opts)
      data
    end

    # Read Sha dynamic plugin
    # Read Sha dynamic plugin. 
    # @param plugin_id Plugin filename
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaDynamicPlugin, Fixnum, Hash)>] ShaDynamicPlugin data, response status code and response headers
    def read_sha_dynamic_plugin_with_http_info(plugin_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.read_sha_dynamic_plugin ...'
      end
      # verify the required parameter 'plugin_id' is set
      if @api_client.config.client_side_validation && plugin_id.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_id' when calling ProfileApi.read_sha_dynamic_plugin"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-plugins/{plugin-id}'.sub('{' + 'plugin-id' + '}', plugin_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaDynamicPlugin')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#read_sha_dynamic_plugin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # API will return Sha profile
    # API will return Sha profile. 
    # @param sha_profile_id Sha profile id
    # @param [Hash] opts the optional parameters
    # @return [ShaPluginProfile]
    def read_sha_plugin_profile(sha_profile_id, opts = {})
      data, _status_code, _headers = read_sha_plugin_profile_with_http_info(sha_profile_id, opts)
      data
    end

    # API will return Sha profile
    # API will return Sha profile. 
    # @param sha_profile_id Sha profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaPluginProfile, Fixnum, Hash)>] ShaPluginProfile data, response status code and response headers
    def read_sha_plugin_profile_with_http_info(sha_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.read_sha_plugin_profile ...'
      end
      # verify the required parameter 'sha_profile_id' is set
      if @api_client.config.client_side_validation && sha_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'sha_profile_id' when calling ProfileApi.read_sha_plugin_profile"
      end
      # resource path
      local_var_path = '/infra/sha/plugin-profiles/{sha-profile-id}'.sub('{' + 'sha-profile-id' + '}', sha_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaPluginProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#read_sha_plugin_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Sha pre-defined plugin
    # Read SHA pre-defined plugin. 
    # @param plugin_id Sha pre-defined plugin
    # @param [Hash] opts the optional parameters
    # @return [ShaPredefinedPlugin]
    def read_sha_predefined_plugin(plugin_id, opts = {})
      data, _status_code, _headers = read_sha_predefined_plugin_with_http_info(plugin_id, opts)
      data
    end

    # Read Sha pre-defined plugin
    # Read SHA pre-defined plugin. 
    # @param plugin_id Sha pre-defined plugin
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaPredefinedPlugin, Fixnum, Hash)>] ShaPredefinedPlugin data, response status code and response headers
    def read_sha_predefined_plugin_with_http_info(plugin_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.read_sha_predefined_plugin ...'
      end
      # verify the required parameter 'plugin_id' is set
      if @api_client.config.client_side_validation && plugin_id.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_id' when calling ProfileApi.read_sha_predefined_plugin"
      end
      # resource path
      local_var_path = '/infra/sha/pre-defined-plugins/{plugin-id}'.sub('{' + 'plugin-id' + '}', plugin_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaPredefinedPlugin')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#read_sha_predefined_plugin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Show the plugins status on given node.
    # Show all the installed system health plugins on given node 
    # @param node_id The TN node id. 
    # @param [Hash] opts the optional parameters
    # @return [PerNodeShaPluginStatusListResult]
    def show_plugin_status_on_node(node_id, opts = {})
      data, _status_code, _headers = show_plugin_status_on_node_with_http_info(node_id, opts)
      data
    end

    # Show the plugins status on given node.
    # Show all the installed system health plugins on given node 
    # @param node_id The TN node id. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PerNodeShaPluginStatusListResult, Fixnum, Hash)>] PerNodeShaPluginStatusListResult data, response status code and response headers
    def show_plugin_status_on_node_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.show_plugin_status_on_node ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ProfileApi.show_plugin_status_on_node"
      end
      # resource path
      local_var_path = '/infra/sha/plugin-status/{node-id}'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PerNodeShaPluginStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#show_plugin_status_on_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload Sha dynamic plugin
    # Upload Sha dynamic plugin content. 
    # @param plugin_id Sha plugin ID
    # @param file_name Plugin file name
    # @param [Hash] opts the optional parameters
    # @return [DynamicPluginFileProperties]
    def upload_sha_dynamic_plugin(plugin_id, file_name, opts = {})
      data, _status_code, _headers = upload_sha_dynamic_plugin_with_http_info(plugin_id, file_name, opts)
      data
    end

    # Upload Sha dynamic plugin
    # Upload Sha dynamic plugin content. 
    # @param plugin_id Sha plugin ID
    # @param file_name Plugin file name
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicPluginFileProperties, Fixnum, Hash)>] DynamicPluginFileProperties data, response status code and response headers
    def upload_sha_dynamic_plugin_with_http_info(plugin_id, file_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.upload_sha_dynamic_plugin ...'
      end
      # verify the required parameter 'plugin_id' is set
      if @api_client.config.client_side_validation && plugin_id.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_id' when calling ProfileApi.upload_sha_dynamic_plugin"
      end
      # verify the required parameter 'file_name' is set
      if @api_client.config.client_side_validation && file_name.nil?
        fail ArgumentError, "Missing the required parameter 'file_name' when calling ProfileApi.upload_sha_dynamic_plugin"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-plugins/{plugin-id}/files/{file-name}'.sub('{' + 'plugin-id' + '}', plugin_id.to_s).sub('{' + 'file-name' + '}', file_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DynamicPluginFileProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#upload_sha_dynamic_plugin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
