=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class ClusterConfigApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Set the cluster configuration for the Avi Load Balancer Controller node. The VIP can be set once. Attempting to change the VIP once set will return an error in case Avi Controllers are deployed.
    # Set the cluster configuration for Avi Load Balancer Controller cluster. 
    # @param alb_controller_node_vm_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [ALBControllerNodeVMClusterConfig]
    def add_alb_controller_node_cluster_config(alb_controller_node_vm_cluster_config, opts = {})
      data, _status_code, _headers = add_alb_controller_node_cluster_config_with_http_info(alb_controller_node_vm_cluster_config, opts)
      data
    end

    # Set the cluster configuration for the Avi Load Balancer Controller node. The VIP can be set once. Attempting to change the VIP once set will return an error in case Avi Controllers are deployed.
    # Set the cluster configuration for Avi Load Balancer Controller cluster. 
    # @param alb_controller_node_vm_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ALBControllerNodeVMClusterConfig, Fixnum, Hash)>] ALBControllerNodeVMClusterConfig data, response status code and response headers
    def add_alb_controller_node_cluster_config_with_http_info(alb_controller_node_vm_cluster_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterConfigApi.add_alb_controller_node_cluster_config ...'
      end
      # verify the required parameter 'alb_controller_node_vm_cluster_config' is set
      if @api_client.config.client_side_validation && alb_controller_node_vm_cluster_config.nil?
        fail ArgumentError, "Missing the required parameter 'alb_controller_node_vm_cluster_config' when calling ClusterConfigApi.add_alb_controller_node_cluster_config"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/clusterconfig'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(alb_controller_node_vm_cluster_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerNodeVMClusterConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterConfigApi#add_alb_controller_node_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the cluster configuration for the Avi Load Balancer Controller cluster configuration. If Avi Load Balancer Controllers are present delete will fail.
    # Delete the cluster configuration for Avi Load Balancer Controller cluster. This API is for VCF deployments only. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @return [nil]
    def delete_alb_controller_node_cluster_config(opts = {})
      delete_alb_controller_node_cluster_config_with_http_info(opts)
      nil
    end

    # Delete the cluster configuration for the Avi Load Balancer Controller cluster configuration. If Avi Load Balancer Controllers are present delete will fail.
    # Delete the cluster configuration for Avi Load Balancer Controller cluster. This API is for VCF deployments only. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_alb_controller_node_cluster_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterConfigApi.delete_alb_controller_node_cluster_config ...'
      end
      # resource path
      local_var_path = '/alb/controller-nodes/clusterconfig'

      # query parameters
      query_params = {}
      query_params[:'clustering_id'] = opts[:'clustering_id'] if !opts[:'clustering_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterConfigApi#delete_alb_controller_node_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns info for of the cluster configuration for the Avi Load Balancer Controller cluster
    # Returns cluster configuration for the Avi Load Balancer Controller cluster. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @return [ALBControllerNodeVMClusterConfig]
    def read_alb_controller_node_cluster_config(opts = {})
      data, _status_code, _headers = read_alb_controller_node_cluster_config_with_http_info(opts)
      data
    end

    # Returns info for of the cluster configuration for the Avi Load Balancer Controller cluster
    # Returns cluster configuration for the Avi Load Balancer Controller cluster. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @return [Array<(ALBControllerNodeVMClusterConfig, Fixnum, Hash)>] ALBControllerNodeVMClusterConfig data, response status code and response headers
    def read_alb_controller_node_cluster_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterConfigApi.read_alb_controller_node_cluster_config ...'
      end
      # resource path
      local_var_path = '/alb/controller-nodes/clusterconfig'

      # query parameters
      query_params = {}
      query_params[:'clustering_id'] = opts[:'clustering_id'] if !opts[:'clustering_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerNodeVMClusterConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterConfigApi#read_alb_controller_node_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
