=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class LocalEndpointsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or patch a custom IPSec VPN local endpoint
    # Create or patch a custom IPSec VPN local endpoint for a given locale service under Tier-0.  <br> This API is deprecated. Please use PATCH /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/local-endpoints/&lt;local-endpoint-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier0_ip_sec_vpn_local_endpoint(tier_0_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      create_or_patch_tier0_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      nil
    end

    # Create or patch a custom IPSec VPN local endpoint
    # Create or patch a custom IPSec VPN local endpoint for a given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use PATCH /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/local-endpoints/&amp;lt;local-endpoint-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier0_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.create_or_patch_tier0_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling LocalEndpointsApi.create_or_patch_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling LocalEndpointsApi.create_or_patch_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.create_or_patch_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling LocalEndpointsApi.create_or_patch_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling LocalEndpointsApi.create_or_patch_tier0_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#create_or_patch_tier0_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch a custom IPSec VPN local endpoint
    # Create or patch a custom IPSec VPN local endpoint under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier0_vpn_ip_sec_vpn_local_endpoint(tier_0_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      create_or_patch_tier0_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      nil
    end

    # Create or patch a custom IPSec VPN local endpoint
    # Create or patch a custom IPSec VPN local endpoint under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier0_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.create_or_patch_tier0_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling LocalEndpointsApi.create_or_patch_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.create_or_patch_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling LocalEndpointsApi.create_or_patch_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling LocalEndpointsApi.create_or_patch_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#create_or_patch_tier0_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch a custom IPSec VPN local endpoint
    # Create or patch a custom IPSec VPN local endpoint for a given locale service under Tier-1.  <br> This API is deprecated. Please use PATCH /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ local-endpoints/&lt;local-endpoint-id&gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_ip_sec_vpn_local_endpoint(tier_1_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      create_or_patch_tier1_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      nil
    end

    # Create or patch a custom IPSec VPN local endpoint
    # Create or patch a custom IPSec VPN local endpoint for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use PATCH /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ local-endpoints/&amp;lt;local-endpoint-id&amp;gt; instead. Note:    Please note that request is validated and any error messages returned from validation may include the new VPN path    instead of the deprecated path. Both new path and old path refer to same resource.    Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.create_or_patch_tier1_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling LocalEndpointsApi.create_or_patch_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling LocalEndpointsApi.create_or_patch_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.create_or_patch_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling LocalEndpointsApi.create_or_patch_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling LocalEndpointsApi.create_or_patch_tier1_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#create_or_patch_tier1_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch a custom IPSec VPN local endpoint
    # Create or patch a custom IPSec VPN local endpoint for a given ipsec vpn service under Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint(tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      nil
    end

    # Create or patch a custom IPSec VPN local endpoint
    # Create or patch a custom IPSec VPN local endpoint for a given ipsec vpn service under Tier-1.
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling LocalEndpointsApi.create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling LocalEndpointsApi.create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling LocalEndpointsApi.create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN local endpoint
    # Create or fully replace IPSec VPN local endpoint for a given locale service under Tier-0. Revision is optional for creation and required for update. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path  <br> This API is deprecated. Please use PUT /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/local-endpoints/&lt;local-endpoint-id&gt; instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnLocalEndpoint]
    def create_or_update_tier0_ip_sec_vpn_local_endpoint(tier_0_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      data, _status_code, _headers = create_or_update_tier0_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      data
    end

    # Create or fully replace IPSec VPN local endpoint
    # Create or fully replace IPSec VPN local endpoint for a given locale service under Tier-0. Revision is optional for creation and required for update. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path  &lt;br&gt; This API is deprecated. Please use PUT /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/local-endpoints/&amp;lt;local-endpoint-id&amp;gt; instead. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnLocalEndpoint, Fixnum, Hash)>] IPSecVpnLocalEndpoint data, response status code and response headers
    def create_or_update_tier0_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.create_or_update_tier0_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling LocalEndpointsApi.create_or_update_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling LocalEndpointsApi.create_or_update_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.create_or_update_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling LocalEndpointsApi.create_or_update_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling LocalEndpointsApi.create_or_update_tier0_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#create_or_update_tier0_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN local endpoint
    # Create or fully replace IPSec VPN local endpoint for a given ipsec vpn service under Tier-0. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnLocalEndpoint]
    def create_or_update_tier0_vpn_ip_sec_vpn_local_endpoint(tier_0_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      data, _status_code, _headers = create_or_update_tier0_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      data
    end

    # Create or fully replace IPSec VPN local endpoint
    # Create or fully replace IPSec VPN local endpoint for a given ipsec vpn service under Tier-0. Revision is optional for creation and required for update. 
    # @param tier_0_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnLocalEndpoint, Fixnum, Hash)>] IPSecVpnLocalEndpoint data, response status code and response headers
    def create_or_update_tier0_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.create_or_update_tier0_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling LocalEndpointsApi.create_or_update_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.create_or_update_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling LocalEndpointsApi.create_or_update_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling LocalEndpointsApi.create_or_update_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#create_or_update_tier0_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN local endpoint
    # Create or fully replace IPSec VPN local endpoint for a given locale service under Tier-1. Revision is optional for creation and required for update.  <br> This API is deprecated. Please use PUT /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ local-endpoints/&lt;local-endpoint-id&gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource.      Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnLocalEndpoint]
    def create_or_update_tier1_ip_sec_vpn_local_endpoint(tier_1_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      data, _status_code, _headers = create_or_update_tier1_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      data
    end

    # Create or fully replace IPSec VPN local endpoint
    # Create or fully replace IPSec VPN local endpoint for a given locale service under Tier-1. Revision is optional for creation and required for update.  &lt;br&gt; This API is deprecated. Please use PUT /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ local-endpoints/&amp;lt;local-endpoint-id&amp;gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource.      Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnLocalEndpoint, Fixnum, Hash)>] IPSecVpnLocalEndpoint data, response status code and response headers
    def create_or_update_tier1_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, locale_service_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.create_or_update_tier1_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling LocalEndpointsApi.create_or_update_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling LocalEndpointsApi.create_or_update_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.create_or_update_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling LocalEndpointsApi.create_or_update_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling LocalEndpointsApi.create_or_update_tier1_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#create_or_update_tier1_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN local endpoint
    # Create or fully replace IPSec VPN local endpoint for a given ipsec vpn service under Tier-1. Revision is optional for creation and required for update. 
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnLocalEndpoint]
    def create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint(tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      data, _status_code, _headers = create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      data
    end

    # Create or fully replace IPSec VPN local endpoint
    # Create or fully replace IPSec VPN local endpoint for a given ipsec vpn service under Tier-1. Revision is optional for creation and required for update. 
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnLocalEndpoint, Fixnum, Hash)>] IPSecVpnLocalEndpoint data, response status code and response headers
    def create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling LocalEndpointsApi.create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling LocalEndpointsApi.create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling LocalEndpointsApi.create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN local endpoint
    # Delete IPSec VPN local endpoint for a given locale service under Tier-0.  <br> This API is deprecated. Please use DELETE /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/local-endpoints/&lt;local-endpoint-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_ip_sec_vpn_local_endpoint(tier_0_id, locale_service_id, service_id, local_endpoint_id, opts = {})
      delete_tier0_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, locale_service_id, service_id, local_endpoint_id, opts)
      nil
    end

    # Delete IPSec VPN local endpoint
    # Delete IPSec VPN local endpoint for a given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use DELETE /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/local-endpoints/&amp;lt;local-endpoint-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource.   Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, locale_service_id, service_id, local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.delete_tier0_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling LocalEndpointsApi.delete_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling LocalEndpointsApi.delete_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.delete_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling LocalEndpointsApi.delete_tier0_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#delete_tier0_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN local endpoint
    # Delete IPSec VPN local endpoint for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_vpn_ip_sec_vpn_local_endpoint(tier_0_id, service_id, local_endpoint_id, opts = {})
      delete_tier0_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, service_id, local_endpoint_id, opts)
      nil
    end

    # Delete IPSec VPN local endpoint
    # Delete IPSec VPN local endpoint for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, service_id, local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.delete_tier0_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling LocalEndpointsApi.delete_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.delete_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling LocalEndpointsApi.delete_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#delete_tier0_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN local endpoint
    # Delete IPSec VPN local endpoint for a given locale service under Tier-1.  <br> This API is deprecated. Please use DELETE /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ local-endpoints/&lt;local-endpoint-id&gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource.      Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_ip_sec_vpn_local_endpoint(tier_1_id, locale_service_id, service_id, local_endpoint_id, opts = {})
      delete_tier1_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, locale_service_id, service_id, local_endpoint_id, opts)
      nil
    end

    # Delete IPSec VPN local endpoint
    # Delete IPSec VPN local endpoint for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use DELETE /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ local-endpoints/&amp;lt;local-endpoint-id&amp;gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource.      Also VPN path returned in the Alarm, GPRR payload may include the new VPN path 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, locale_service_id, service_id, local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.delete_tier1_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling LocalEndpointsApi.delete_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling LocalEndpointsApi.delete_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.delete_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling LocalEndpointsApi.delete_tier1_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#delete_tier1_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN local endpoint
    # Delete IPSec VPN local endpoint for a ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_vpn_ip_sec_vpn_local_endpoint(tier_1_id, service_id, local_endpoint_id, opts = {})
      delete_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, service_id, local_endpoint_id, opts)
      nil
    end

    # Delete IPSec VPN local endpoint
    # Delete IPSec VPN local endpoint for a ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, service_id, local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.delete_tier1_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling LocalEndpointsApi.delete_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.delete_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling LocalEndpointsApi.delete_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#delete_tier1_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN local endpoint
    # Get IPSec VPN local endpoint for a given locale service under Tier-0.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/local-endpoints/&lt;local-endpoint-id&gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnLocalEndpoint]
    def get_tier0_ip_sec_vpn_local_endpoint(tier_0_id, locale_service_id, service_id, local_endpoint_id, opts = {})
      data, _status_code, _headers = get_tier0_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, locale_service_id, service_id, local_endpoint_id, opts)
      data
    end

    # Get IPSec VPN local endpoint
    # Get IPSec VPN local endpoint for a given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/local-endpoints/&amp;lt;local-endpoint-id&amp;gt; instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnLocalEndpoint, Fixnum, Hash)>] IPSecVpnLocalEndpoint data, response status code and response headers
    def get_tier0_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, locale_service_id, service_id, local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.get_tier0_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling LocalEndpointsApi.get_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling LocalEndpointsApi.get_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.get_tier0_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling LocalEndpointsApi.get_tier0_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#get_tier0_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN local endpoint
    # Get IPSec VPN local endpoint for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnLocalEndpoint]
    def get_tier0_vpn_ip_sec_vpn_local_endpoint(tier_0_id, service_id, local_endpoint_id, opts = {})
      data, _status_code, _headers = get_tier0_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, service_id, local_endpoint_id, opts)
      data
    end

    # Get IPSec VPN local endpoint
    # Get IPSec VPN local endpoint for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnLocalEndpoint, Fixnum, Hash)>] IPSecVpnLocalEndpoint data, response status code and response headers
    def get_tier0_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_0_id, service_id, local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.get_tier0_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling LocalEndpointsApi.get_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.get_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling LocalEndpointsApi.get_tier0_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#get_tier0_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN local endpoint
    # Get IPSec VPN local endpoint for a given locale service under Tier-1.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/ local-endpoints/&lt;local-endpoint-id&gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnLocalEndpoint]
    def get_tier1_ip_sec_vpn_local_endpoint(tier_1_id, locale_service_id, service_id, local_endpoint_id, opts = {})
      data, _status_code, _headers = get_tier1_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, locale_service_id, service_id, local_endpoint_id, opts)
      data
    end

    # Get IPSec VPN local endpoint
    # Get IPSec VPN local endpoint for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/ local-endpoints/&amp;lt;local-endpoint-id&amp;gt; instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnLocalEndpoint, Fixnum, Hash)>] IPSecVpnLocalEndpoint data, response status code and response headers
    def get_tier1_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, locale_service_id, service_id, local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.get_tier1_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling LocalEndpointsApi.get_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling LocalEndpointsApi.get_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.get_tier1_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling LocalEndpointsApi.get_tier1_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#get_tier1_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN local endpoint
    # Get IPSec VPN local endpoint for a ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnLocalEndpoint]
    def get_tier1_vpn_ip_sec_vpn_local_endpoint(tier_1_id, service_id, local_endpoint_id, opts = {})
      data, _status_code, _headers = get_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, service_id, local_endpoint_id, opts)
      data
    end

    # Get IPSec VPN local endpoint
    # Get IPSec VPN local endpoint for a ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnLocalEndpoint, Fixnum, Hash)>] IPSecVpnLocalEndpoint data, response status code and response headers
    def get_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(tier_1_id, service_id, local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.get_tier1_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling LocalEndpointsApi.get_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.get_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling LocalEndpointsApi.get_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#get_tier1_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN local endpoint list result
    # Get paginated list of all IPSec VPN local endpoints for a given locale service under Tier-0.  <br> This API is deprecated. Please use GET /infra/tier-0s/&lt;tier-0-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/local-endpoints instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnLocalEndpointListResult]
    def list_tier0_ip_sec_vpn_local_endpoints(tier_0_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = list_tier0_ip_sec_vpn_local_endpoints_with_http_info(tier_0_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN local endpoint list result
    # Get paginated list of all IPSec VPN local endpoints for a given locale service under Tier-0.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-0s/&amp;lt;tier-0-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/local-endpoints instead. Note:   Please note that request is validated and any error messages returned from validation may include the new VPN path   instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_0_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnLocalEndpointListResult, Fixnum, Hash)>] IPSecVpnLocalEndpointListResult data, response status code and response headers
    def list_tier0_ip_sec_vpn_local_endpoints_with_http_info(tier_0_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.list_tier0_ip_sec_vpn_local_endpoints ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling LocalEndpointsApi.list_tier0_ip_sec_vpn_local_endpoints"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling LocalEndpointsApi.list_tier0_ip_sec_vpn_local_endpoints"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.list_tier0_ip_sec_vpn_local_endpoints"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LocalEndpointsApi.list_tier0_ip_sec_vpn_local_endpoints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LocalEndpointsApi.list_tier0_ip_sec_vpn_local_endpoints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/local-endpoints'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#list_tier0_ip_sec_vpn_local_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN local endpoint list result
    # Get paginated list of all IPSec VPN local endpoints for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnLocalEndpointListResult]
    def list_tier0_vpn_ip_sec_vpn_local_endpoints(tier_0_id, service_id, opts = {})
      data, _status_code, _headers = list_tier0_vpn_ip_sec_vpn_local_endpoints_with_http_info(tier_0_id, service_id, opts)
      data
    end

    # Get IPSec VPN local endpoint list result
    # Get paginated list of all IPSec VPN local endpoints for a given ipsec vpn service under Tier-0. 
    # @param tier_0_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnLocalEndpointListResult, Fixnum, Hash)>] IPSecVpnLocalEndpointListResult data, response status code and response headers
    def list_tier0_vpn_ip_sec_vpn_local_endpoints_with_http_info(tier_0_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.list_tier0_vpn_ip_sec_vpn_local_endpoints ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling LocalEndpointsApi.list_tier0_vpn_ip_sec_vpn_local_endpoints"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.list_tier0_vpn_ip_sec_vpn_local_endpoints"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LocalEndpointsApi.list_tier0_vpn_ip_sec_vpn_local_endpoints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LocalEndpointsApi.list_tier0_vpn_ip_sec_vpn_local_endpoints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/ipsec-vpn-services/{service-id}/local-endpoints'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#list_tier0_vpn_ip_sec_vpn_local_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN local endpoint list result
    # Get paginated list of all IPSec VPN local endpoints for a given locale service under Tier-1.  <br> This API is deprecated. Please use GET /infra/tier-1s/&lt;tier-1-id&gt;/ipsec-vpn-services/&lt;service-id&gt;/local-endpoints instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnLocalEndpointListResult]
    def list_tier1_ip_sec_vpn_local_endpoints(tier_1_id, locale_service_id, service_id, opts = {})
      data, _status_code, _headers = list_tier1_ip_sec_vpn_local_endpoints_with_http_info(tier_1_id, locale_service_id, service_id, opts)
      data
    end

    # Get IPSec VPN local endpoint list result
    # Get paginated list of all IPSec VPN local endpoints for a given locale service under Tier-1.  &lt;br&gt; This API is deprecated. Please use GET /infra/tier-1s/&amp;lt;tier-1-id&amp;gt;/ipsec-vpn-services/&amp;lt;service-id&amp;gt;/local-endpoints instead. Note:      Please note that request is validated and any error messages returned from validation may include the new VPN path      instead of the deprecated path. Both new path and old path refer to same resource. 
    # @param tier_1_id 
    # @param locale_service_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnLocalEndpointListResult, Fixnum, Hash)>] IPSecVpnLocalEndpointListResult data, response status code and response headers
    def list_tier1_ip_sec_vpn_local_endpoints_with_http_info(tier_1_id, locale_service_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.list_tier1_ip_sec_vpn_local_endpoints ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling LocalEndpointsApi.list_tier1_ip_sec_vpn_local_endpoints"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling LocalEndpointsApi.list_tier1_ip_sec_vpn_local_endpoints"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.list_tier1_ip_sec_vpn_local_endpoints"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LocalEndpointsApi.list_tier1_ip_sec_vpn_local_endpoints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LocalEndpointsApi.list_tier1_ip_sec_vpn_local_endpoints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/ipsec-vpn-services/{service-id}/local-endpoints'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#list_tier1_ip_sec_vpn_local_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN local endpoint list result
    # Get paginated list of all IPSec VPN local endpoints for a given ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnLocalEndpointListResult]
    def list_tier1_vpn_ip_sec_vpn_local_endpoints(tier_1_id, service_id, opts = {})
      data, _status_code, _headers = list_tier1_vpn_ip_sec_vpn_local_endpoints_with_http_info(tier_1_id, service_id, opts)
      data
    end

    # Get IPSec VPN local endpoint list result
    # Get paginated list of all IPSec VPN local endpoints for a given ipsec vpn service under Tier-1. 
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnLocalEndpointListResult, Fixnum, Hash)>] IPSecVpnLocalEndpointListResult data, response status code and response headers
    def list_tier1_vpn_ip_sec_vpn_local_endpoints_with_http_info(tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.list_tier1_vpn_ip_sec_vpn_local_endpoints ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling LocalEndpointsApi.list_tier1_vpn_ip_sec_vpn_local_endpoints"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.list_tier1_vpn_ip_sec_vpn_local_endpoints"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LocalEndpointsApi.list_tier1_vpn_ip_sec_vpn_local_endpoints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LocalEndpointsApi.list_tier1_vpn_ip_sec_vpn_local_endpoints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/local-endpoints'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#list_tier1_vpn_ip_sec_vpn_local_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch a custom IPSec VPN local endpoint
    # Create or patch a custom IPSec VPN local endpoint for a given ipsec vpn service under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint(org_id, project_id, tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(org_id, project_id, tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      nil
    end

    # Create or patch a custom IPSec VPN local endpoint
    # Create or patch a custom IPSec VPN local endpoint for a given ipsec vpn service under Tier-1.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(org_id, project_id, tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#orgs_org_id_projects_project_id_infra_create_or_patch_tier1_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace IPSec VPN local endpoint
    # Create or fully replace IPSec VPN local endpoint for a given ipsec vpn service under Tier-1. Revision is optional for creation and required for update. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnLocalEndpoint]
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint(org_id, project_id, tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(org_id, project_id, tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts)
      data
    end

    # Create or fully replace IPSec VPN local endpoint
    # Create or fully replace IPSec VPN local endpoint for a given ipsec vpn service under Tier-1. Revision is optional for creation and required for update. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param ip_sec_vpn_local_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnLocalEndpoint, Fixnum, Hash)>] IPSecVpnLocalEndpoint data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(org_id, project_id, tier_1_id, service_id, local_endpoint_id, ip_sec_vpn_local_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'ip_sec_vpn_local_endpoint' is set
      if @api_client.config.client_side_validation && ip_sec_vpn_local_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'ip_sec_vpn_local_endpoint' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_sec_vpn_local_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#orgs_org_id_projects_project_id_infra_create_or_update_tier1_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPSec VPN local endpoint
    # Delete IPSec VPN local endpoint for a ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_local_endpoint(org_id, project_id, tier_1_id, service_id, local_endpoint_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(org_id, project_id, tier_1_id, service_id, local_endpoint_id, opts)
      nil
    end

    # Delete IPSec VPN local endpoint
    # Delete IPSec VPN local endpoint for a ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(org_id, project_id, tier_1_id, service_id, local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#orgs_org_id_projects_project_id_infra_delete_tier1_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN local endpoint
    # Get IPSec VPN local endpoint for a ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [IPSecVpnLocalEndpoint]
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_local_endpoint(org_id, project_id, tier_1_id, service_id, local_endpoint_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(org_id, project_id, tier_1_id, service_id, local_endpoint_id, opts)
      data
    end

    # Get IPSec VPN local endpoint
    # Get IPSec VPN local endpoint for a ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param local_endpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecVpnLocalEndpoint, Fixnum, Hash)>] IPSecVpnLocalEndpoint data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_local_endpoint_with_http_info(org_id, project_id, tier_1_id, service_id, local_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_local_endpoint ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # verify the required parameter 'local_endpoint_id' is set
      if @api_client.config.client_side_validation && local_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'local_endpoint_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_local_endpoint"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/local-endpoints/{local-endpoint-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'local-endpoint-id' + '}', local_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#orgs_org_id_projects_project_id_infra_get_tier1_vpn_ip_sec_vpn_local_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPSec VPN local endpoint list result
    # Get paginated list of all IPSec VPN local endpoints for a given ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPSecVpnLocalEndpointListResult]
    def orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints(org_id, project_id, tier_1_id, service_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints_with_http_info(org_id, project_id, tier_1_id, service_id, opts)
      data
    end

    # Get IPSec VPN local endpoint list result
    # Get paginated list of all IPSec VPN local endpoints for a given ipsec vpn service under Tier-1. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param service_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPSecVpnLocalEndpointListResult, Fixnum, Hash)>] IPSecVpnLocalEndpointListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints_with_http_info(org_id, project_id, tier_1_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocalEndpointsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LocalEndpointsApi.orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/ipsec-vpn-services/{service-id}/local-endpoints'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPSecVpnLocalEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalEndpointsApi#orgs_org_id_projects_project_id_infra_list_tier1_vpn_ip_sec_vpn_local_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
