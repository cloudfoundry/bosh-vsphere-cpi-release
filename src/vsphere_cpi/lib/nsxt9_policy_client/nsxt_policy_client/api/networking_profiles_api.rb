=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class NetworkingProfilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update Gateway QoS profile
    # If profile with the qos-profile-id is not already present, create a new gateway QoS profile instance. If it already exists, replace the gateway QoS profile instance with this object. 
    # @param qos_profile_id 
    # @param gateway_qos_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [GatewayQosProfile]
    def create_or_replace_gateway_qos_profile(qos_profile_id, gateway_qos_profile, opts = {})
      data, _status_code, _headers = create_or_replace_gateway_qos_profile_with_http_info(qos_profile_id, gateway_qos_profile, opts)
      data
    end

    # Create or update Gateway QoS profile
    # If profile with the qos-profile-id is not already present, create a new gateway QoS profile instance. If it already exists, replace the gateway QoS profile instance with this object. 
    # @param qos_profile_id 
    # @param gateway_qos_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(GatewayQosProfile, Fixnum, Hash)>] GatewayQosProfile data, response status code and response headers
    def create_or_replace_gateway_qos_profile_with_http_info(qos_profile_id, gateway_qos_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.create_or_replace_gateway_qos_profile ...'
      end
      # verify the required parameter 'qos_profile_id' is set
      if @api_client.config.client_side_validation && qos_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'qos_profile_id' when calling NetworkingProfilesApi.create_or_replace_gateway_qos_profile"
      end
      # verify the required parameter 'gateway_qos_profile' is set
      if @api_client.config.client_side_validation && gateway_qos_profile.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_qos_profile' when calling NetworkingProfilesApi.create_or_replace_gateway_qos_profile"
      end
      # resource path
      local_var_path = '/infra/gateway-qos-profiles/{qos-profile-id}'.sub('{' + 'qos-profile-id' + '}', qos_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_qos_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayQosProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#create_or_replace_gateway_qos_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update IPv6 DAD profile
    # If profile with the dad-profile-id is not already present, create a new IPv6 DAD profile instance. If it already exists, replace the IPv6 DAD profile instance with this object. 
    # @param dad_profile_id 
    # @param ipv6_dad_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [Ipv6DadProfile]
    def create_or_replace_ipv6_dad_profile(dad_profile_id, ipv6_dad_profile, opts = {})
      data, _status_code, _headers = create_or_replace_ipv6_dad_profile_with_http_info(dad_profile_id, ipv6_dad_profile, opts)
      data
    end

    # Create or update IPv6 DAD profile
    # If profile with the dad-profile-id is not already present, create a new IPv6 DAD profile instance. If it already exists, replace the IPv6 DAD profile instance with this object. 
    # @param dad_profile_id 
    # @param ipv6_dad_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(Ipv6DadProfile, Fixnum, Hash)>] Ipv6DadProfile data, response status code and response headers
    def create_or_replace_ipv6_dad_profile_with_http_info(dad_profile_id, ipv6_dad_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.create_or_replace_ipv6_dad_profile ...'
      end
      # verify the required parameter 'dad_profile_id' is set
      if @api_client.config.client_side_validation && dad_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dad_profile_id' when calling NetworkingProfilesApi.create_or_replace_ipv6_dad_profile"
      end
      # verify the required parameter 'ipv6_dad_profile' is set
      if @api_client.config.client_side_validation && ipv6_dad_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipv6_dad_profile' when calling NetworkingProfilesApi.create_or_replace_ipv6_dad_profile"
      end
      # resource path
      local_var_path = '/infra/ipv6-dad-profiles/{dad-profile-id}'.sub('{' + 'dad-profile-id' + '}', dad_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipv6_dad_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ipv6DadProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#create_or_replace_ipv6_dad_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update IPv6 NDRA profile
    # If profile with the ndra-profile-id is not already present, create a new IPv6 NDRA profile instance. If it already exists, replace the IPv6 NDRA profile instance with this object. 
    # @param ndra_profile_id 
    # @param ipv6_ndra_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [Ipv6NdraProfile]
    def create_or_replace_ipv6_ndra_profile(ndra_profile_id, ipv6_ndra_profile, opts = {})
      data, _status_code, _headers = create_or_replace_ipv6_ndra_profile_with_http_info(ndra_profile_id, ipv6_ndra_profile, opts)
      data
    end

    # Create or update IPv6 NDRA profile
    # If profile with the ndra-profile-id is not already present, create a new IPv6 NDRA profile instance. If it already exists, replace the IPv6 NDRA profile instance with this object. 
    # @param ndra_profile_id 
    # @param ipv6_ndra_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(Ipv6NdraProfile, Fixnum, Hash)>] Ipv6NdraProfile data, response status code and response headers
    def create_or_replace_ipv6_ndra_profile_with_http_info(ndra_profile_id, ipv6_ndra_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.create_or_replace_ipv6_ndra_profile ...'
      end
      # verify the required parameter 'ndra_profile_id' is set
      if @api_client.config.client_side_validation && ndra_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ndra_profile_id' when calling NetworkingProfilesApi.create_or_replace_ipv6_ndra_profile"
      end
      # verify the required parameter 'ipv6_ndra_profile' is set
      if @api_client.config.client_side_validation && ipv6_ndra_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipv6_ndra_profile' when calling NetworkingProfilesApi.create_or_replace_ipv6_ndra_profile"
      end
      # resource path
      local_var_path = '/infra/ipv6-ndra-profiles/{ndra-profile-id}'.sub('{' + 'ndra-profile-id' + '}', ndra_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipv6_ndra_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ipv6NdraProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#create_or_replace_ipv6_ndra_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update Evpn Tenant Configuration
    # Create or update Evpn Tenant configuration. 
    # @param config_id Evpn Tenant config id
    # @param evpn_tenant_config 
    # @param [Hash] opts the optional parameters
    # @return [EvpnTenantConfig]
    def create_or_update_evpn_tenant_config(config_id, evpn_tenant_config, opts = {})
      data, _status_code, _headers = create_or_update_evpn_tenant_config_with_http_info(config_id, evpn_tenant_config, opts)
      data
    end

    # Create or Update Evpn Tenant Configuration
    # Create or update Evpn Tenant configuration. 
    # @param config_id Evpn Tenant config id
    # @param evpn_tenant_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EvpnTenantConfig, Fixnum, Hash)>] EvpnTenantConfig data, response status code and response headers
    def create_or_update_evpn_tenant_config_with_http_info(config_id, evpn_tenant_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.create_or_update_evpn_tenant_config ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling NetworkingProfilesApi.create_or_update_evpn_tenant_config"
      end
      # verify the required parameter 'evpn_tenant_config' is set
      if @api_client.config.client_side_validation && evpn_tenant_config.nil?
        fail ArgumentError, "Missing the required parameter 'evpn_tenant_config' when calling NetworkingProfilesApi.create_or_update_evpn_tenant_config"
      end
      # resource path
      local_var_path = '/infra/evpn-tenant-configs/{config-id}'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(evpn_tenant_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvpnTenantConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#create_or_update_evpn_tenant_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update igmp profile
    # Create or update igmp profile. 
    # @param igmp_profile_id igmp profile id
    # @param policy_igmp_profile 
    # @param [Hash] opts the optional parameters
    # @return [PolicyIgmpProfile]
    def create_or_update_policy_igmp_profile(igmp_profile_id, policy_igmp_profile, opts = {})
      data, _status_code, _headers = create_or_update_policy_igmp_profile_with_http_info(igmp_profile_id, policy_igmp_profile, opts)
      data
    end

    # Update igmp profile
    # Create or update igmp profile. 
    # @param igmp_profile_id igmp profile id
    # @param policy_igmp_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyIgmpProfile, Fixnum, Hash)>] PolicyIgmpProfile data, response status code and response headers
    def create_or_update_policy_igmp_profile_with_http_info(igmp_profile_id, policy_igmp_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.create_or_update_policy_igmp_profile ...'
      end
      # verify the required parameter 'igmp_profile_id' is set
      if @api_client.config.client_side_validation && igmp_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'igmp_profile_id' when calling NetworkingProfilesApi.create_or_update_policy_igmp_profile"
      end
      # verify the required parameter 'policy_igmp_profile' is set
      if @api_client.config.client_side_validation && policy_igmp_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_igmp_profile' when calling NetworkingProfilesApi.create_or_update_policy_igmp_profile"
      end
      # resource path
      local_var_path = '/infra/igmp-profiles/{igmp-profile-id}'.sub('{' + 'igmp-profile-id' + '}', igmp_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_igmp_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIgmpProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#create_or_update_policy_igmp_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update pim profile
    # Create or update pim profile. 
    # @param pim_profile_id pim profile id
    # @param policy_pim_profile 
    # @param [Hash] opts the optional parameters
    # @return [PolicyPimProfile]
    def create_or_update_policy_pim_profile(pim_profile_id, policy_pim_profile, opts = {})
      data, _status_code, _headers = create_or_update_policy_pim_profile_with_http_info(pim_profile_id, policy_pim_profile, opts)
      data
    end

    # Update pim profile
    # Create or update pim profile. 
    # @param pim_profile_id pim profile id
    # @param policy_pim_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyPimProfile, Fixnum, Hash)>] PolicyPimProfile data, response status code and response headers
    def create_or_update_policy_pim_profile_with_http_info(pim_profile_id, policy_pim_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.create_or_update_policy_pim_profile ...'
      end
      # verify the required parameter 'pim_profile_id' is set
      if @api_client.config.client_side_validation && pim_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'pim_profile_id' when calling NetworkingProfilesApi.create_or_update_policy_pim_profile"
      end
      # verify the required parameter 'policy_pim_profile' is set
      if @api_client.config.client_side_validation && policy_pim_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_pim_profile' when calling NetworkingProfilesApi.create_or_update_policy_pim_profile"
      end
      # resource path
      local_var_path = '/infra/pim-profiles/{pim-profile-id}'.sub('{' + 'pim-profile-id' + '}', pim_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_pim_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyPimProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#create_or_update_policy_pim_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Policy Transport Zone Profile
    # API will update Policy Transport Zone Profile. 
    # @param tz_profile_id 
    # @param policy_transport_zone_profile 
    # @param [Hash] opts the optional parameters
    # @return [PolicyTransportZoneProfile]
    def create_or_update_policy_transport_zone_profile(tz_profile_id, policy_transport_zone_profile, opts = {})
      data, _status_code, _headers = create_or_update_policy_transport_zone_profile_with_http_info(tz_profile_id, policy_transport_zone_profile, opts)
      data
    end

    # Update Policy Transport Zone Profile
    # API will update Policy Transport Zone Profile. 
    # @param tz_profile_id 
    # @param policy_transport_zone_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyTransportZoneProfile, Fixnum, Hash)>] PolicyTransportZoneProfile data, response status code and response headers
    def create_or_update_policy_transport_zone_profile_with_http_info(tz_profile_id, policy_transport_zone_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.create_or_update_policy_transport_zone_profile ...'
      end
      # verify the required parameter 'tz_profile_id' is set
      if @api_client.config.client_side_validation && tz_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'tz_profile_id' when calling NetworkingProfilesApi.create_or_update_policy_transport_zone_profile"
      end
      # verify the required parameter 'policy_transport_zone_profile' is set
      if @api_client.config.client_side_validation && policy_transport_zone_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_transport_zone_profile' when calling NetworkingProfilesApi.create_or_update_policy_transport_zone_profile"
      end
      # resource path
      local_var_path = '/infra/transport-zone-profiles/{tz-profile-id}'.sub('{' + 'tz-profile-id' + '}', tz_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_transport_zone_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyTransportZoneProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#create_or_update_policy_transport_zone_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update Vni Pool Configuration
    # Create or update VniPool configuration. 
    # @param vni_pool_id vni pool id
    # @param vni_pool_config 
    # @param [Hash] opts the optional parameters
    # @return [VniPoolConfig]
    def create_or_update_vni_pool_config(vni_pool_id, vni_pool_config, opts = {})
      data, _status_code, _headers = create_or_update_vni_pool_config_with_http_info(vni_pool_id, vni_pool_config, opts)
      data
    end

    # Create or Update Vni Pool Configuration
    # Create or update VniPool configuration. 
    # @param vni_pool_id vni pool id
    # @param vni_pool_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VniPoolConfig, Fixnum, Hash)>] VniPoolConfig data, response status code and response headers
    def create_or_update_vni_pool_config_with_http_info(vni_pool_id, vni_pool_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.create_or_update_vni_pool_config ...'
      end
      # verify the required parameter 'vni_pool_id' is set
      if @api_client.config.client_side_validation && vni_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vni_pool_id' when calling NetworkingProfilesApi.create_or_update_vni_pool_config"
      end
      # verify the required parameter 'vni_pool_config' is set
      if @api_client.config.client_side_validation && vni_pool_config.nil?
        fail ArgumentError, "Missing the required parameter 'vni_pool_config' when calling NetworkingProfilesApi.create_or_update_vni_pool_config"
      end
      # resource path
      local_var_path = '/infra/vni-pools/{vni-pool-id}'.sub('{' + 'vni-pool-id' + '}', vni_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vni_pool_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VniPoolConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#create_or_update_vni_pool_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete BFD Config and all the entities contained by this BfdProfile
    # Delete BFD Config and all the entities contained by this BfdProfile.
    # @param bfd_profile_id BfdProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_bfd_profile(bfd_profile_id, opts = {})
      delete_bfd_profile_with_http_info(bfd_profile_id, opts)
      nil
    end

    # Delete BFD Config and all the entities contained by this BfdProfile
    # Delete BFD Config and all the entities contained by this BfdProfile.
    # @param bfd_profile_id BfdProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_bfd_profile_with_http_info(bfd_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.delete_bfd_profile ...'
      end
      # verify the required parameter 'bfd_profile_id' is set
      if @api_client.config.client_side_validation && bfd_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'bfd_profile_id' when calling NetworkingProfilesApi.delete_bfd_profile"
      end
      # resource path
      local_var_path = '/infra/bfd-profiles/{bfd-profile-id}'.sub('{' + 'bfd-profile-id' + '}', bfd_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#delete_bfd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete gateway QoS profile
    # Delete QoS profile
    # @param qos_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_gateway_qos_profile(qos_profile_id, opts = {})
      delete_gateway_qos_profile_with_http_info(qos_profile_id, opts)
      nil
    end

    # Delete gateway QoS profile
    # Delete QoS profile
    # @param qos_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_gateway_qos_profile_with_http_info(qos_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.delete_gateway_qos_profile ...'
      end
      # verify the required parameter 'qos_profile_id' is set
      if @api_client.config.client_side_validation && qos_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'qos_profile_id' when calling NetworkingProfilesApi.delete_gateway_qos_profile"
      end
      # resource path
      local_var_path = '/infra/gateway-qos-profiles/{qos-profile-id}'.sub('{' + 'qos-profile-id' + '}', qos_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#delete_gateway_qos_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPv6 DAD profile
    # Delete IPv6 DAD profile
    # @param dad_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_ipv6_dad_profile(dad_profile_id, opts = {})
      delete_ipv6_dad_profile_with_http_info(dad_profile_id, opts)
      nil
    end

    # Delete IPv6 DAD profile
    # Delete IPv6 DAD profile
    # @param dad_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ipv6_dad_profile_with_http_info(dad_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.delete_ipv6_dad_profile ...'
      end
      # verify the required parameter 'dad_profile_id' is set
      if @api_client.config.client_side_validation && dad_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dad_profile_id' when calling NetworkingProfilesApi.delete_ipv6_dad_profile"
      end
      # resource path
      local_var_path = '/infra/ipv6-dad-profiles/{dad-profile-id}'.sub('{' + 'dad-profile-id' + '}', dad_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#delete_ipv6_dad_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPv6 NDRA profile
    # Delete IPv6 NDRA profile
    # @param ndra_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_ipv6_ndra_profile(ndra_profile_id, opts = {})
      delete_ipv6_ndra_profile_with_http_info(ndra_profile_id, opts)
      nil
    end

    # Delete IPv6 NDRA profile
    # Delete IPv6 NDRA profile
    # @param ndra_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ipv6_ndra_profile_with_http_info(ndra_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.delete_ipv6_ndra_profile ...'
      end
      # verify the required parameter 'ndra_profile_id' is set
      if @api_client.config.client_side_validation && ndra_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ndra_profile_id' when calling NetworkingProfilesApi.delete_ipv6_ndra_profile"
      end
      # resource path
      local_var_path = '/infra/ipv6-ndra-profiles/{ndra-profile-id}'.sub('{' + 'ndra-profile-id' + '}', ndra_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#delete_ipv6_ndra_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Igmp Profile
    # Delete Igmp Profile.
    # @param igmp_profile_id igmp profile id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_igmp_profile(igmp_profile_id, opts = {})
      delete_policy_igmp_profile_with_http_info(igmp_profile_id, opts)
      nil
    end

    # Delete Igmp Profile
    # Delete Igmp Profile.
    # @param igmp_profile_id igmp profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_igmp_profile_with_http_info(igmp_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.delete_policy_igmp_profile ...'
      end
      # verify the required parameter 'igmp_profile_id' is set
      if @api_client.config.client_side_validation && igmp_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'igmp_profile_id' when calling NetworkingProfilesApi.delete_policy_igmp_profile"
      end
      # resource path
      local_var_path = '/infra/igmp-profiles/{igmp-profile-id}'.sub('{' + 'igmp-profile-id' + '}', igmp_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#delete_policy_igmp_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Pim Profile
    # Delete Pim Profile.
    # @param pim_profile_id pim profile id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_pim_profile(pim_profile_id, opts = {})
      delete_policy_pim_profile_with_http_info(pim_profile_id, opts)
      nil
    end

    # Delete Pim Profile
    # Delete Pim Profile.
    # @param pim_profile_id pim profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_pim_profile_with_http_info(pim_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.delete_policy_pim_profile ...'
      end
      # verify the required parameter 'pim_profile_id' is set
      if @api_client.config.client_side_validation && pim_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'pim_profile_id' when calling NetworkingProfilesApi.delete_policy_pim_profile"
      end
      # resource path
      local_var_path = '/infra/pim-profiles/{pim-profile-id}'.sub('{' + 'pim-profile-id' + '}', pim_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#delete_policy_pim_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Policy Transport Zone Profile
    # API will delete Policy Transport Zone Profile. 
    # @param tz_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_transport_zone_profile(tz_profile_id, opts = {})
      delete_policy_transport_zone_profile_with_http_info(tz_profile_id, opts)
      nil
    end

    # Delete Policy Transport Zone Profile
    # API will delete Policy Transport Zone Profile. 
    # @param tz_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_transport_zone_profile_with_http_info(tz_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.delete_policy_transport_zone_profile ...'
      end
      # verify the required parameter 'tz_profile_id' is set
      if @api_client.config.client_side_validation && tz_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'tz_profile_id' when calling NetworkingProfilesApi.delete_policy_transport_zone_profile"
      end
      # resource path
      local_var_path = '/infra/transport-zone-profiles/{tz-profile-id}'.sub('{' + 'tz-profile-id' + '}', tz_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#delete_policy_transport_zone_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Vni Pool Configuration
    # Delete Vni Pool Configuration.
    # @param vni_pool_id vni pool id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vni_pool_config(vni_pool_id, opts = {})
      delete_vni_pool_config_with_http_info(vni_pool_id, opts)
      nil
    end

    # Delete Vni Pool Configuration
    # Delete Vni Pool Configuration.
    # @param vni_pool_id vni pool id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vni_pool_config_with_http_info(vni_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.delete_vni_pool_config ...'
      end
      # verify the required parameter 'vni_pool_id' is set
      if @api_client.config.client_side_validation && vni_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vni_pool_id' when calling NetworkingProfilesApi.delete_vni_pool_config"
      end
      # resource path
      local_var_path = '/infra/vni-pools/{vni-pool-id}'.sub('{' + 'vni-pool-id' + '}', vni_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#delete_vni_pool_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Policy Transport Zone Profile
    # API will fetch Policy Transport Zone Profile. 
    # @param tz_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyTransportZoneProfile]
    def get_policy_transport_zone_profile(tz_profile_id, opts = {})
      data, _status_code, _headers = get_policy_transport_zone_profile_with_http_info(tz_profile_id, opts)
      data
    end

    # Get Policy Transport Zone Profile
    # API will fetch Policy Transport Zone Profile. 
    # @param tz_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyTransportZoneProfile, Fixnum, Hash)>] PolicyTransportZoneProfile data, response status code and response headers
    def get_policy_transport_zone_profile_with_http_info(tz_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.get_policy_transport_zone_profile ...'
      end
      # verify the required parameter 'tz_profile_id' is set
      if @api_client.config.client_side_validation && tz_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'tz_profile_id' when calling NetworkingProfilesApi.get_policy_transport_zone_profile"
      end
      # resource path
      local_var_path = '/infra/transport-zone-profiles/{tz-profile-id}'.sub('{' + 'tz-profile-id' + '}', tz_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyTransportZoneProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#get_policy_transport_zone_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy Transport Zone Profiles
    # API will list all Policy Transport Zone Profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyTransportZoneProfileListResult]
    def get_policy_transport_zone_profiles(opts = {})
      data, _status_code, _headers = get_policy_transport_zone_profiles_with_http_info(opts)
      data
    end

    # List Policy Transport Zone Profiles
    # API will list all Policy Transport Zone Profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyTransportZoneProfileListResult, Fixnum, Hash)>] PolicyTransportZoneProfileListResult data, response status code and response headers
    def get_policy_transport_zone_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.get_policy_transport_zone_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.get_policy_transport_zone_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.get_policy_transport_zone_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/transport-zone-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyTransportZoneProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#get_policy_transport_zone_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Gateway QoS profile
    # If profile with the qos-profile-id is not already present, create a new gateway QoS profile instance. If it already exists, replace the gateway QoS profile instance with this object. 
    # @param qos_profile_id 
    # @param gateway_qos_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [GatewayQosProfile]
    def global_infra_create_or_replace_gateway_qos_profile(qos_profile_id, gateway_qos_profile, opts = {})
      data, _status_code, _headers = global_infra_create_or_replace_gateway_qos_profile_with_http_info(qos_profile_id, gateway_qos_profile, opts)
      data
    end

    # Create or update Gateway QoS profile
    # If profile with the qos-profile-id is not already present, create a new gateway QoS profile instance. If it already exists, replace the gateway QoS profile instance with this object. 
    # @param qos_profile_id 
    # @param gateway_qos_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(GatewayQosProfile, Fixnum, Hash)>] GatewayQosProfile data, response status code and response headers
    def global_infra_create_or_replace_gateway_qos_profile_with_http_info(qos_profile_id, gateway_qos_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_create_or_replace_gateway_qos_profile ...'
      end
      # verify the required parameter 'qos_profile_id' is set
      if @api_client.config.client_side_validation && qos_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'qos_profile_id' when calling NetworkingProfilesApi.global_infra_create_or_replace_gateway_qos_profile"
      end
      # verify the required parameter 'gateway_qos_profile' is set
      if @api_client.config.client_side_validation && gateway_qos_profile.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_qos_profile' when calling NetworkingProfilesApi.global_infra_create_or_replace_gateway_qos_profile"
      end
      # resource path
      local_var_path = '/global-infra/gateway-qos-profiles/{qos-profile-id}'.sub('{' + 'qos-profile-id' + '}', qos_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_qos_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayQosProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_create_or_replace_gateway_qos_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update IPv6 DAD profile
    # If profile with the dad-profile-id is not already present, create a new IPv6 DAD profile instance. If it already exists, replace the IPv6 DAD profile instance with this object. 
    # @param dad_profile_id 
    # @param ipv6_dad_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [Ipv6DadProfile]
    def global_infra_create_or_replace_ipv6_dad_profile(dad_profile_id, ipv6_dad_profile, opts = {})
      data, _status_code, _headers = global_infra_create_or_replace_ipv6_dad_profile_with_http_info(dad_profile_id, ipv6_dad_profile, opts)
      data
    end

    # Create or update IPv6 DAD profile
    # If profile with the dad-profile-id is not already present, create a new IPv6 DAD profile instance. If it already exists, replace the IPv6 DAD profile instance with this object. 
    # @param dad_profile_id 
    # @param ipv6_dad_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(Ipv6DadProfile, Fixnum, Hash)>] Ipv6DadProfile data, response status code and response headers
    def global_infra_create_or_replace_ipv6_dad_profile_with_http_info(dad_profile_id, ipv6_dad_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_create_or_replace_ipv6_dad_profile ...'
      end
      # verify the required parameter 'dad_profile_id' is set
      if @api_client.config.client_side_validation && dad_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dad_profile_id' when calling NetworkingProfilesApi.global_infra_create_or_replace_ipv6_dad_profile"
      end
      # verify the required parameter 'ipv6_dad_profile' is set
      if @api_client.config.client_side_validation && ipv6_dad_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipv6_dad_profile' when calling NetworkingProfilesApi.global_infra_create_or_replace_ipv6_dad_profile"
      end
      # resource path
      local_var_path = '/global-infra/ipv6-dad-profiles/{dad-profile-id}'.sub('{' + 'dad-profile-id' + '}', dad_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipv6_dad_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ipv6DadProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_create_or_replace_ipv6_dad_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update IPv6 NDRA profile
    # If profile with the ndra-profile-id is not already present, create a new IPv6 NDRA profile instance. If it already exists, replace the IPv6 NDRA profile instance with this object. 
    # @param ndra_profile_id 
    # @param ipv6_ndra_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [Ipv6NdraProfile]
    def global_infra_create_or_replace_ipv6_ndra_profile(ndra_profile_id, ipv6_ndra_profile, opts = {})
      data, _status_code, _headers = global_infra_create_or_replace_ipv6_ndra_profile_with_http_info(ndra_profile_id, ipv6_ndra_profile, opts)
      data
    end

    # Create or update IPv6 NDRA profile
    # If profile with the ndra-profile-id is not already present, create a new IPv6 NDRA profile instance. If it already exists, replace the IPv6 NDRA profile instance with this object. 
    # @param ndra_profile_id 
    # @param ipv6_ndra_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(Ipv6NdraProfile, Fixnum, Hash)>] Ipv6NdraProfile data, response status code and response headers
    def global_infra_create_or_replace_ipv6_ndra_profile_with_http_info(ndra_profile_id, ipv6_ndra_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_create_or_replace_ipv6_ndra_profile ...'
      end
      # verify the required parameter 'ndra_profile_id' is set
      if @api_client.config.client_side_validation && ndra_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ndra_profile_id' when calling NetworkingProfilesApi.global_infra_create_or_replace_ipv6_ndra_profile"
      end
      # verify the required parameter 'ipv6_ndra_profile' is set
      if @api_client.config.client_side_validation && ipv6_ndra_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipv6_ndra_profile' when calling NetworkingProfilesApi.global_infra_create_or_replace_ipv6_ndra_profile"
      end
      # resource path
      local_var_path = '/global-infra/ipv6-ndra-profiles/{ndra-profile-id}'.sub('{' + 'ndra-profile-id' + '}', ndra_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipv6_ndra_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ipv6NdraProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_create_or_replace_ipv6_ndra_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete BFD Config and all the entities contained by this BfdProfile
    # Delete BFD Config and all the entities contained by this BfdProfile.
    # @param bfd_profile_id BfdProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_delete_bfd_profile(bfd_profile_id, opts = {})
      global_infra_delete_bfd_profile_with_http_info(bfd_profile_id, opts)
      nil
    end

    # Delete BFD Config and all the entities contained by this BfdProfile
    # Delete BFD Config and all the entities contained by this BfdProfile.
    # @param bfd_profile_id BfdProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_bfd_profile_with_http_info(bfd_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_delete_bfd_profile ...'
      end
      # verify the required parameter 'bfd_profile_id' is set
      if @api_client.config.client_side_validation && bfd_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'bfd_profile_id' when calling NetworkingProfilesApi.global_infra_delete_bfd_profile"
      end
      # resource path
      local_var_path = '/global-infra/bfd-profiles/{bfd-profile-id}'.sub('{' + 'bfd-profile-id' + '}', bfd_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_delete_bfd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete gateway QoS profile
    # Delete QoS profile
    # @param qos_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_delete_gateway_qos_profile(qos_profile_id, opts = {})
      global_infra_delete_gateway_qos_profile_with_http_info(qos_profile_id, opts)
      nil
    end

    # Delete gateway QoS profile
    # Delete QoS profile
    # @param qos_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_gateway_qos_profile_with_http_info(qos_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_delete_gateway_qos_profile ...'
      end
      # verify the required parameter 'qos_profile_id' is set
      if @api_client.config.client_side_validation && qos_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'qos_profile_id' when calling NetworkingProfilesApi.global_infra_delete_gateway_qos_profile"
      end
      # resource path
      local_var_path = '/global-infra/gateway-qos-profiles/{qos-profile-id}'.sub('{' + 'qos-profile-id' + '}', qos_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_delete_gateway_qos_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPv6 DAD profile
    # Delete IPv6 DAD profile
    # @param dad_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_delete_ipv6_dad_profile(dad_profile_id, opts = {})
      global_infra_delete_ipv6_dad_profile_with_http_info(dad_profile_id, opts)
      nil
    end

    # Delete IPv6 DAD profile
    # Delete IPv6 DAD profile
    # @param dad_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_ipv6_dad_profile_with_http_info(dad_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_delete_ipv6_dad_profile ...'
      end
      # verify the required parameter 'dad_profile_id' is set
      if @api_client.config.client_side_validation && dad_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dad_profile_id' when calling NetworkingProfilesApi.global_infra_delete_ipv6_dad_profile"
      end
      # resource path
      local_var_path = '/global-infra/ipv6-dad-profiles/{dad-profile-id}'.sub('{' + 'dad-profile-id' + '}', dad_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_delete_ipv6_dad_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPv6 NDRA profile
    # Delete IPv6 NDRA profile
    # @param ndra_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_delete_ipv6_ndra_profile(ndra_profile_id, opts = {})
      global_infra_delete_ipv6_ndra_profile_with_http_info(ndra_profile_id, opts)
      nil
    end

    # Delete IPv6 NDRA profile
    # Delete IPv6 NDRA profile
    # @param ndra_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_ipv6_ndra_profile_with_http_info(ndra_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_delete_ipv6_ndra_profile ...'
      end
      # verify the required parameter 'ndra_profile_id' is set
      if @api_client.config.client_side_validation && ndra_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ndra_profile_id' when calling NetworkingProfilesApi.global_infra_delete_ipv6_ndra_profile"
      end
      # resource path
      local_var_path = '/global-infra/ipv6-ndra-profiles/{ndra-profile-id}'.sub('{' + 'ndra-profile-id' + '}', ndra_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_delete_ipv6_ndra_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Policy Transport Zone Profile
    # API will fetch Policy Transport Zone Profile. 
    # @param tz_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyTransportZoneProfile]
    def global_infra_get_policy_transport_zone_profile(tz_profile_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_transport_zone_profile_with_http_info(tz_profile_id, opts)
      data
    end

    # Get Policy Transport Zone Profile
    # API will fetch Policy Transport Zone Profile. 
    # @param tz_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyTransportZoneProfile, Fixnum, Hash)>] PolicyTransportZoneProfile data, response status code and response headers
    def global_infra_get_policy_transport_zone_profile_with_http_info(tz_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_get_policy_transport_zone_profile ...'
      end
      # verify the required parameter 'tz_profile_id' is set
      if @api_client.config.client_side_validation && tz_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'tz_profile_id' when calling NetworkingProfilesApi.global_infra_get_policy_transport_zone_profile"
      end
      # resource path
      local_var_path = '/global-infra/transport-zone-profiles/{tz-profile-id}'.sub('{' + 'tz-profile-id' + '}', tz_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyTransportZoneProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_get_policy_transport_zone_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy Transport Zone Profiles
    # API will list all Policy Transport Zone Profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyTransportZoneProfileListResult]
    def global_infra_get_policy_transport_zone_profiles(opts = {})
      data, _status_code, _headers = global_infra_get_policy_transport_zone_profiles_with_http_info(opts)
      data
    end

    # List Policy Transport Zone Profiles
    # API will list all Policy Transport Zone Profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyTransportZoneProfileListResult, Fixnum, Hash)>] PolicyTransportZoneProfileListResult data, response status code and response headers
    def global_infra_get_policy_transport_zone_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_get_policy_transport_zone_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.global_infra_get_policy_transport_zone_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.global_infra_get_policy_transport_zone_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/transport-zone-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyTransportZoneProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_get_policy_transport_zone_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List BfdProfiles
    # Paginated list of all BfdProfiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [BfdProfileListResult]
    def global_infra_list_bfd_profile(opts = {})
      data, _status_code, _headers = global_infra_list_bfd_profile_with_http_info(opts)
      data
    end

    # List BfdProfiles
    # Paginated list of all BfdProfiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(BfdProfileListResult, Fixnum, Hash)>] BfdProfileListResult data, response status code and response headers
    def global_infra_list_bfd_profile_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_list_bfd_profile ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.global_infra_list_bfd_profile, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.global_infra_list_bfd_profile, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/bfd-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BfdProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_list_bfd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all gateway QoS profiles
    # Paginated list of all gateway QoS profle instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GatewayQosProfileListResult]
    def global_infra_list_gateway_qos_profiles(opts = {})
      data, _status_code, _headers = global_infra_list_gateway_qos_profiles_with_http_info(opts)
      data
    end

    # List all gateway QoS profiles
    # Paginated list of all gateway QoS profle instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GatewayQosProfileListResult, Fixnum, Hash)>] GatewayQosProfileListResult data, response status code and response headers
    def global_infra_list_gateway_qos_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_list_gateway_qos_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.global_infra_list_gateway_qos_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.global_infra_list_gateway_qos_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/gateway-qos-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayQosProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_list_gateway_qos_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all IPv6 DAD profiles
    # Paginated list of all IPv6 DAD profile instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Ipv6DadProfileListResult]
    def global_infra_list_ipv6_dad_profiles(opts = {})
      data, _status_code, _headers = global_infra_list_ipv6_dad_profiles_with_http_info(opts)
      data
    end

    # List all IPv6 DAD profiles
    # Paginated list of all IPv6 DAD profile instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(Ipv6DadProfileListResult, Fixnum, Hash)>] Ipv6DadProfileListResult data, response status code and response headers
    def global_infra_list_ipv6_dad_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_list_ipv6_dad_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.global_infra_list_ipv6_dad_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.global_infra_list_ipv6_dad_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/ipv6-dad-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ipv6DadProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_list_ipv6_dad_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all IPv6 NDRA profiles
    # Paginated list of all IPv6 NDRA profile instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Ipv6NdraProfileListResult]
    def global_infra_list_ipv6_ndra_profiles(opts = {})
      data, _status_code, _headers = global_infra_list_ipv6_ndra_profiles_with_http_info(opts)
      data
    end

    # List all IPv6 NDRA profiles
    # Paginated list of all IPv6 NDRA profile instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(Ipv6NdraProfileListResult, Fixnum, Hash)>] Ipv6NdraProfileListResult data, response status code and response headers
    def global_infra_list_ipv6_ndra_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_list_ipv6_ndra_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.global_infra_list_ipv6_ndra_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.global_infra_list_ipv6_ndra_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/ipv6-ndra-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ipv6NdraProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_list_ipv6_ndra_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a BfdProfile
    # If a BfdProfile with the bfd-profile-id is not already present, create a new BfdProfile. If it already exists, update the BfdProfile. This operation will fully replace the object. 
    # @param bfd_profile_id BfdProfile ID
    # @param bfd_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_patch_bfd_profile(bfd_profile_id, bfd_profile, opts = {})
      global_infra_patch_bfd_profile_with_http_info(bfd_profile_id, bfd_profile, opts)
      nil
    end

    # Create or update a BfdProfile
    # If a BfdProfile with the bfd-profile-id is not already present, create a new BfdProfile. If it already exists, update the BfdProfile. This operation will fully replace the object. 
    # @param bfd_profile_id BfdProfile ID
    # @param bfd_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_bfd_profile_with_http_info(bfd_profile_id, bfd_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_patch_bfd_profile ...'
      end
      # verify the required parameter 'bfd_profile_id' is set
      if @api_client.config.client_side_validation && bfd_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'bfd_profile_id' when calling NetworkingProfilesApi.global_infra_patch_bfd_profile"
      end
      # verify the required parameter 'bfd_profile' is set
      if @api_client.config.client_side_validation && bfd_profile.nil?
        fail ArgumentError, "Missing the required parameter 'bfd_profile' when calling NetworkingProfilesApi.global_infra_patch_bfd_profile"
      end
      # resource path
      local_var_path = '/global-infra/bfd-profiles/{bfd-profile-id}'.sub('{' + 'bfd-profile-id' + '}', bfd_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bfd_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_patch_bfd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Gateway QoS profile
    # If profile with the qos-profile-id is not already present, create a new gateway QoS profile instance. If it already exists, update the gateway QoS profile instance with specified attributes. 
    # @param qos_profile_id 
    # @param gateway_qos_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_patch_gateway_qos_profile(qos_profile_id, gateway_qos_profile, opts = {})
      global_infra_patch_gateway_qos_profile_with_http_info(qos_profile_id, gateway_qos_profile, opts)
      nil
    end

    # Create or update Gateway QoS profile
    # If profile with the qos-profile-id is not already present, create a new gateway QoS profile instance. If it already exists, update the gateway QoS profile instance with specified attributes. 
    # @param qos_profile_id 
    # @param gateway_qos_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_gateway_qos_profile_with_http_info(qos_profile_id, gateway_qos_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_patch_gateway_qos_profile ...'
      end
      # verify the required parameter 'qos_profile_id' is set
      if @api_client.config.client_side_validation && qos_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'qos_profile_id' when calling NetworkingProfilesApi.global_infra_patch_gateway_qos_profile"
      end
      # verify the required parameter 'gateway_qos_profile' is set
      if @api_client.config.client_side_validation && gateway_qos_profile.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_qos_profile' when calling NetworkingProfilesApi.global_infra_patch_gateway_qos_profile"
      end
      # resource path
      local_var_path = '/global-infra/gateway-qos-profiles/{qos-profile-id}'.sub('{' + 'qos-profile-id' + '}', qos_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_qos_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_patch_gateway_qos_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update IPv6 DAD profile
    # If profile with the dad-profile-id is not already present, create a new IPv6 DAD profile instance. If it already exists, update the IPv6 DAD profile instance with specified attributes. 
    # @param dad_profile_id 
    # @param ipv6_dad_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_patch_ipv6_dad_profile(dad_profile_id, ipv6_dad_profile, opts = {})
      global_infra_patch_ipv6_dad_profile_with_http_info(dad_profile_id, ipv6_dad_profile, opts)
      nil
    end

    # Create or update IPv6 DAD profile
    # If profile with the dad-profile-id is not already present, create a new IPv6 DAD profile instance. If it already exists, update the IPv6 DAD profile instance with specified attributes. 
    # @param dad_profile_id 
    # @param ipv6_dad_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_ipv6_dad_profile_with_http_info(dad_profile_id, ipv6_dad_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_patch_ipv6_dad_profile ...'
      end
      # verify the required parameter 'dad_profile_id' is set
      if @api_client.config.client_side_validation && dad_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dad_profile_id' when calling NetworkingProfilesApi.global_infra_patch_ipv6_dad_profile"
      end
      # verify the required parameter 'ipv6_dad_profile' is set
      if @api_client.config.client_side_validation && ipv6_dad_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipv6_dad_profile' when calling NetworkingProfilesApi.global_infra_patch_ipv6_dad_profile"
      end
      # resource path
      local_var_path = '/global-infra/ipv6-dad-profiles/{dad-profile-id}'.sub('{' + 'dad-profile-id' + '}', dad_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipv6_dad_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_patch_ipv6_dad_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update IPv6 NDRA profile
    # If profile with the ndra-profile-id is not already present, create a new IPv6 NDRA profile instance. If it already exists, update the IPv6 NDRA profile instance with specified attributes. 
    # @param ndra_profile_id 
    # @param ipv6_ndra_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_patch_ipv6_ndra_profile(ndra_profile_id, ipv6_ndra_profile, opts = {})
      global_infra_patch_ipv6_ndra_profile_with_http_info(ndra_profile_id, ipv6_ndra_profile, opts)
      nil
    end

    # Create or update IPv6 NDRA profile
    # If profile with the ndra-profile-id is not already present, create a new IPv6 NDRA profile instance. If it already exists, update the IPv6 NDRA profile instance with specified attributes. 
    # @param ndra_profile_id 
    # @param ipv6_ndra_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_ipv6_ndra_profile_with_http_info(ndra_profile_id, ipv6_ndra_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_patch_ipv6_ndra_profile ...'
      end
      # verify the required parameter 'ndra_profile_id' is set
      if @api_client.config.client_side_validation && ndra_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ndra_profile_id' when calling NetworkingProfilesApi.global_infra_patch_ipv6_ndra_profile"
      end
      # verify the required parameter 'ipv6_ndra_profile' is set
      if @api_client.config.client_side_validation && ipv6_ndra_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipv6_ndra_profile' when calling NetworkingProfilesApi.global_infra_patch_ipv6_ndra_profile"
      end
      # resource path
      local_var_path = '/global-infra/ipv6-ndra-profiles/{ndra-profile-id}'.sub('{' + 'ndra-profile-id' + '}', ndra_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipv6_ndra_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_patch_ipv6_ndra_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a BfdProfile
    # Read a BfdProfile.
    # @param bfd_profile_id BfdProfile ID
    # @param [Hash] opts the optional parameters
    # @return [BfdProfile]
    def global_infra_read_bfd_profile(bfd_profile_id, opts = {})
      data, _status_code, _headers = global_infra_read_bfd_profile_with_http_info(bfd_profile_id, opts)
      data
    end

    # Read a BfdProfile
    # Read a BfdProfile.
    # @param bfd_profile_id BfdProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(BfdProfile, Fixnum, Hash)>] BfdProfile data, response status code and response headers
    def global_infra_read_bfd_profile_with_http_info(bfd_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_read_bfd_profile ...'
      end
      # verify the required parameter 'bfd_profile_id' is set
      if @api_client.config.client_side_validation && bfd_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'bfd_profile_id' when calling NetworkingProfilesApi.global_infra_read_bfd_profile"
      end
      # resource path
      local_var_path = '/global-infra/bfd-profiles/{bfd-profile-id}'.sub('{' + 'bfd-profile-id' + '}', bfd_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BfdProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_read_bfd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read gateway QoS profile
    # Read gateway QoS profile
    # @param qos_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayQosProfile]
    def global_infra_read_gateway_qos_profile(qos_profile_id, opts = {})
      data, _status_code, _headers = global_infra_read_gateway_qos_profile_with_http_info(qos_profile_id, opts)
      data
    end

    # Read gateway QoS profile
    # Read gateway QoS profile
    # @param qos_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayQosProfile, Fixnum, Hash)>] GatewayQosProfile data, response status code and response headers
    def global_infra_read_gateway_qos_profile_with_http_info(qos_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_read_gateway_qos_profile ...'
      end
      # verify the required parameter 'qos_profile_id' is set
      if @api_client.config.client_side_validation && qos_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'qos_profile_id' when calling NetworkingProfilesApi.global_infra_read_gateway_qos_profile"
      end
      # resource path
      local_var_path = '/global-infra/gateway-qos-profiles/{qos-profile-id}'.sub('{' + 'qos-profile-id' + '}', qos_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayQosProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_read_gateway_qos_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IPv6 DAD profile
    # Read IPv6 DAD profile
    # @param dad_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Ipv6DadProfile]
    def global_infra_read_ipv6_dad_profile(dad_profile_id, opts = {})
      data, _status_code, _headers = global_infra_read_ipv6_dad_profile_with_http_info(dad_profile_id, opts)
      data
    end

    # Read IPv6 DAD profile
    # Read IPv6 DAD profile
    # @param dad_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Ipv6DadProfile, Fixnum, Hash)>] Ipv6DadProfile data, response status code and response headers
    def global_infra_read_ipv6_dad_profile_with_http_info(dad_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_read_ipv6_dad_profile ...'
      end
      # verify the required parameter 'dad_profile_id' is set
      if @api_client.config.client_side_validation && dad_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dad_profile_id' when calling NetworkingProfilesApi.global_infra_read_ipv6_dad_profile"
      end
      # resource path
      local_var_path = '/global-infra/ipv6-dad-profiles/{dad-profile-id}'.sub('{' + 'dad-profile-id' + '}', dad_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ipv6DadProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_read_ipv6_dad_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IPv6 NDRA profile
    # Read IPv6 NDRA profile
    # @param ndra_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Ipv6NdraProfile]
    def global_infra_read_ipv6_ndra_profile(ndra_profile_id, opts = {})
      data, _status_code, _headers = global_infra_read_ipv6_ndra_profile_with_http_info(ndra_profile_id, opts)
      data
    end

    # Read IPv6 NDRA profile
    # Read IPv6 NDRA profile
    # @param ndra_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Ipv6NdraProfile, Fixnum, Hash)>] Ipv6NdraProfile data, response status code and response headers
    def global_infra_read_ipv6_ndra_profile_with_http_info(ndra_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_read_ipv6_ndra_profile ...'
      end
      # verify the required parameter 'ndra_profile_id' is set
      if @api_client.config.client_side_validation && ndra_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ndra_profile_id' when calling NetworkingProfilesApi.global_infra_read_ipv6_ndra_profile"
      end
      # resource path
      local_var_path = '/global-infra/ipv6-ndra-profiles/{ndra-profile-id}'.sub('{' + 'ndra-profile-id' + '}', ndra_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ipv6NdraProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_read_ipv6_ndra_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security global configuration
    # This reads the security-global-config used for NSX Manager appliance certificates. These properties are not sent to the hosts. 
    # @param [Hash] opts the optional parameters
    # @return [InfraSecurityConfig]
    def global_infra_read_security_global_config(opts = {})
      data, _status_code, _headers = global_infra_read_security_global_config_with_http_info(opts)
      data
    end

    # Read security global configuration
    # This reads the security-global-config used for NSX Manager appliance certificates. These properties are not sent to the hosts. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InfraSecurityConfig, Fixnum, Hash)>] InfraSecurityConfig data, response status code and response headers
    def global_infra_read_security_global_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_read_security_global_config ...'
      end
      # resource path
      local_var_path = '/global-infra/security-global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InfraSecurityConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_read_security_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a BfdProfile
    # If a BfdProfile with the bfd-profile-id is not already present, create a new BfdProfile. If it already exists, update the BfdProfile. This operation will fully replace the object. 
    # @param bfd_profile_id BfdProfile ID
    # @param bfd_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [BfdProfile]
    def global_infra_update_bfd_profile(bfd_profile_id, bfd_profile, opts = {})
      data, _status_code, _headers = global_infra_update_bfd_profile_with_http_info(bfd_profile_id, bfd_profile, opts)
      data
    end

    # Create or update a BfdProfile
    # If a BfdProfile with the bfd-profile-id is not already present, create a new BfdProfile. If it already exists, update the BfdProfile. This operation will fully replace the object. 
    # @param bfd_profile_id BfdProfile ID
    # @param bfd_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(BfdProfile, Fixnum, Hash)>] BfdProfile data, response status code and response headers
    def global_infra_update_bfd_profile_with_http_info(bfd_profile_id, bfd_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_update_bfd_profile ...'
      end
      # verify the required parameter 'bfd_profile_id' is set
      if @api_client.config.client_side_validation && bfd_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'bfd_profile_id' when calling NetworkingProfilesApi.global_infra_update_bfd_profile"
      end
      # verify the required parameter 'bfd_profile' is set
      if @api_client.config.client_side_validation && bfd_profile.nil?
        fail ArgumentError, "Missing the required parameter 'bfd_profile' when calling NetworkingProfilesApi.global_infra_update_bfd_profile"
      end
      # resource path
      local_var_path = '/global-infra/bfd-profiles/{bfd-profile-id}'.sub('{' + 'bfd-profile-id' + '}', bfd_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bfd_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BfdProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_update_bfd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the security global configuration
    # This updates the security-global-config used for NSX Manager appliance certificates. These properties are not sent to the hosts. 
    # @param infra_security_config 
    # @param [Hash] opts the optional parameters
    # @return [InfraSecurityConfig]
    def global_infra_update_security_global_config(infra_security_config, opts = {})
      data, _status_code, _headers = global_infra_update_security_global_config_with_http_info(infra_security_config, opts)
      data
    end

    # Update the security global configuration
    # This updates the security-global-config used for NSX Manager appliance certificates. These properties are not sent to the hosts. 
    # @param infra_security_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InfraSecurityConfig, Fixnum, Hash)>] InfraSecurityConfig data, response status code and response headers
    def global_infra_update_security_global_config_with_http_info(infra_security_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infra_update_security_global_config ...'
      end
      # verify the required parameter 'infra_security_config' is set
      if @api_client.config.client_side_validation && infra_security_config.nil?
        fail ArgumentError, "Missing the required parameter 'infra_security_config' when calling NetworkingProfilesApi.global_infra_update_security_global_config"
      end
      # resource path
      local_var_path = '/global-infra/security-global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra_security_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InfraSecurityConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infra_update_security_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infrapatch_constraint_global_config(constraint_global_config, opts = {})
      global_infrapatch_constraint_global_config_with_http_info(constraint_global_config, opts)
      nil
    end

    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infrapatch_constraint_global_config_with_http_info(constraint_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infrapatch_constraint_global_config ...'
      end
      # verify the required parameter 'constraint_global_config' is set
      if @api_client.config.client_side_validation && constraint_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_global_config' when calling NetworkingProfilesApi.global_infrapatch_constraint_global_config"
      end
      # resource path
      local_var_path = '/global-infra/constraint-global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(constraint_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infrapatch_constraint_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [ConstraintGlobalConfig]
    def global_infraput_constraint_global_config(constraint_global_config, opts = {})
      data, _status_code, _headers = global_infraput_constraint_global_config_with_http_info(constraint_global_config, opts)
      data
    end

    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConstraintGlobalConfig, Fixnum, Hash)>] ConstraintGlobalConfig data, response status code and response headers
    def global_infraput_constraint_global_config_with_http_info(constraint_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infraput_constraint_global_config ...'
      end
      # verify the required parameter 'constraint_global_config' is set
      if @api_client.config.client_side_validation && constraint_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_global_config' when calling NetworkingProfilesApi.global_infraput_constraint_global_config"
      end
      # resource path
      local_var_path = '/global-infra/constraint-global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(constraint_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConstraintGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infraput_constraint_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the constraint global configuration
    # Read the constraint global configuration
    # @param [Hash] opts the optional parameters
    # @return [ConstraintGlobalConfig]
    def global_infraread_constraint_global_config(opts = {})
      data, _status_code, _headers = global_infraread_constraint_global_config_with_http_info(opts)
      data
    end

    # Read the constraint global configuration
    # Read the constraint global configuration
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConstraintGlobalConfig, Fixnum, Hash)>] ConstraintGlobalConfig data, response status code and response headers
    def global_infraread_constraint_global_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.global_infraread_constraint_global_config ...'
      end
      # resource path
      local_var_path = '/global-infra/constraint-global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConstraintGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#global_infraread_constraint_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List BfdProfiles
    # Paginated list of all BfdProfiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [BfdProfileListResult]
    def list_bfd_profile(opts = {})
      data, _status_code, _headers = list_bfd_profile_with_http_info(opts)
      data
    end

    # List BfdProfiles
    # Paginated list of all BfdProfiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(BfdProfileListResult, Fixnum, Hash)>] BfdProfileListResult data, response status code and response headers
    def list_bfd_profile_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.list_bfd_profile ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.list_bfd_profile, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.list_bfd_profile, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/bfd-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BfdProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#list_bfd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Evpn Tenant Configuration
    # List all evpn tunnel endpoint configuration. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EvpnTenantConfigListResult]
    def list_evpn_tenant_config(opts = {})
      data, _status_code, _headers = list_evpn_tenant_config_with_http_info(opts)
      data
    end

    # List Evpn Tenant Configuration
    # List all evpn tunnel endpoint configuration. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EvpnTenantConfigListResult, Fixnum, Hash)>] EvpnTenantConfigListResult data, response status code and response headers
    def list_evpn_tenant_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.list_evpn_tenant_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.list_evpn_tenant_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.list_evpn_tenant_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/evpn-tenant-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvpnTenantConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#list_evpn_tenant_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all gateway QoS profiles
    # Paginated list of all gateway QoS profle instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GatewayQosProfileListResult]
    def list_gateway_qos_profiles(opts = {})
      data, _status_code, _headers = list_gateway_qos_profiles_with_http_info(opts)
      data
    end

    # List all gateway QoS profiles
    # Paginated list of all gateway QoS profle instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GatewayQosProfileListResult, Fixnum, Hash)>] GatewayQosProfileListResult data, response status code and response headers
    def list_gateway_qos_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.list_gateway_qos_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.list_gateway_qos_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.list_gateway_qos_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/gateway-qos-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayQosProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#list_gateway_qos_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all IPv6 DAD profiles
    # Paginated list of all IPv6 DAD profile instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Ipv6DadProfileListResult]
    def list_ipv6_dad_profiles(opts = {})
      data, _status_code, _headers = list_ipv6_dad_profiles_with_http_info(opts)
      data
    end

    # List all IPv6 DAD profiles
    # Paginated list of all IPv6 DAD profile instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(Ipv6DadProfileListResult, Fixnum, Hash)>] Ipv6DadProfileListResult data, response status code and response headers
    def list_ipv6_dad_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.list_ipv6_dad_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.list_ipv6_dad_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.list_ipv6_dad_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/ipv6-dad-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ipv6DadProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#list_ipv6_dad_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all IPv6 NDRA profiles
    # Paginated list of all IPv6 NDRA profile instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Ipv6NdraProfileListResult]
    def list_ipv6_ndra_profiles(opts = {})
      data, _status_code, _headers = list_ipv6_ndra_profiles_with_http_info(opts)
      data
    end

    # List all IPv6 NDRA profiles
    # Paginated list of all IPv6 NDRA profile instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(Ipv6NdraProfileListResult, Fixnum, Hash)>] Ipv6NdraProfileListResult data, response status code and response headers
    def list_ipv6_ndra_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.list_ipv6_ndra_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.list_ipv6_ndra_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.list_ipv6_ndra_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/ipv6-ndra-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ipv6NdraProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#list_ipv6_ndra_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Igmp Profile
    # List all igmp profile. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIgmpProfileListResult]
    def list_policy_igmp_profile(opts = {})
      data, _status_code, _headers = list_policy_igmp_profile_with_http_info(opts)
      data
    end

    # List Igmp Profile
    # List all igmp profile. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIgmpProfileListResult, Fixnum, Hash)>] PolicyIgmpProfileListResult data, response status code and response headers
    def list_policy_igmp_profile_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.list_policy_igmp_profile ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.list_policy_igmp_profile, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.list_policy_igmp_profile, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/igmp-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIgmpProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#list_policy_igmp_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Pim Profile
    # List all pim profile. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyPimProfileListResult]
    def list_policy_pim_profile(opts = {})
      data, _status_code, _headers = list_policy_pim_profile_with_http_info(opts)
      data
    end

    # List Pim Profile
    # List all pim profile. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyPimProfileListResult, Fixnum, Hash)>] PolicyPimProfileListResult data, response status code and response headers
    def list_policy_pim_profile_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.list_policy_pim_profile ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.list_policy_pim_profile, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.list_policy_pim_profile, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/pim-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyPimProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#list_policy_pim_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Vni Pool Configuration
    # List all Vni Pool configuration. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VniPoolConfigListResult]
    def list_vni_pool_config(opts = {})
      data, _status_code, _headers = list_vni_pool_config_with_http_info(opts)
      data
    end

    # List Vni Pool Configuration
    # List all Vni Pool configuration. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VniPoolConfigListResult, Fixnum, Hash)>] VniPoolConfigListResult data, response status code and response headers
    def list_vni_pool_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.list_vni_pool_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.list_vni_pool_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.list_vni_pool_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/vni-pools'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VniPoolConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#list_vni_pool_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Gateway QoS profile
    # If profile with the qos-profile-id is not already present, create a new gateway QoS profile instance. If it already exists, replace the gateway QoS profile instance with this object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param qos_profile_id 
    # @param gateway_qos_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [GatewayQosProfile]
    def orgs_org_id_projects_project_id_infra_create_or_replace_gateway_qos_profile(org_id, project_id, qos_profile_id, gateway_qos_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_gateway_qos_profile_with_http_info(org_id, project_id, qos_profile_id, gateway_qos_profile, opts)
      data
    end

    # Create or update Gateway QoS profile
    # If profile with the qos-profile-id is not already present, create a new gateway QoS profile instance. If it already exists, replace the gateway QoS profile instance with this object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param qos_profile_id 
    # @param gateway_qos_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(GatewayQosProfile, Fixnum, Hash)>] GatewayQosProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_gateway_qos_profile_with_http_info(org_id, project_id, qos_profile_id, gateway_qos_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_qos_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_qos_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_qos_profile"
      end
      # verify the required parameter 'qos_profile_id' is set
      if @api_client.config.client_side_validation && qos_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'qos_profile_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_qos_profile"
      end
      # verify the required parameter 'gateway_qos_profile' is set
      if @api_client.config.client_side_validation && gateway_qos_profile.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_qos_profile' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_qos_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/gateway-qos-profiles/{qos-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'qos-profile-id' + '}', qos_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_qos_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayQosProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_create_or_replace_gateway_qos_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update IPv6 DAD profile
    # If profile with the dad-profile-id is not already present, create a new IPv6 DAD profile instance. If it already exists, replace the IPv6 DAD profile instance with this object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dad_profile_id 
    # @param ipv6_dad_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [Ipv6DadProfile]
    def orgs_org_id_projects_project_id_infra_create_or_replace_ipv6_dad_profile(org_id, project_id, dad_profile_id, ipv6_dad_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_ipv6_dad_profile_with_http_info(org_id, project_id, dad_profile_id, ipv6_dad_profile, opts)
      data
    end

    # Create or update IPv6 DAD profile
    # If profile with the dad-profile-id is not already present, create a new IPv6 DAD profile instance. If it already exists, replace the IPv6 DAD profile instance with this object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dad_profile_id 
    # @param ipv6_dad_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(Ipv6DadProfile, Fixnum, Hash)>] Ipv6DadProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_ipv6_dad_profile_with_http_info(org_id, project_id, dad_profile_id, ipv6_dad_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_create_or_replace_ipv6_dad_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_create_or_replace_ipv6_dad_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_create_or_replace_ipv6_dad_profile"
      end
      # verify the required parameter 'dad_profile_id' is set
      if @api_client.config.client_side_validation && dad_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dad_profile_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_create_or_replace_ipv6_dad_profile"
      end
      # verify the required parameter 'ipv6_dad_profile' is set
      if @api_client.config.client_side_validation && ipv6_dad_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipv6_dad_profile' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_create_or_replace_ipv6_dad_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipv6-dad-profiles/{dad-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dad-profile-id' + '}', dad_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipv6_dad_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ipv6DadProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_create_or_replace_ipv6_dad_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update IPv6 NDRA profile
    # If profile with the ndra-profile-id is not already present, create a new IPv6 NDRA profile instance. If it already exists, replace the IPv6 NDRA profile instance with this object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ndra_profile_id 
    # @param ipv6_ndra_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [Ipv6NdraProfile]
    def orgs_org_id_projects_project_id_infra_create_or_replace_ipv6_ndra_profile(org_id, project_id, ndra_profile_id, ipv6_ndra_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_ipv6_ndra_profile_with_http_info(org_id, project_id, ndra_profile_id, ipv6_ndra_profile, opts)
      data
    end

    # Create or update IPv6 NDRA profile
    # If profile with the ndra-profile-id is not already present, create a new IPv6 NDRA profile instance. If it already exists, replace the IPv6 NDRA profile instance with this object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ndra_profile_id 
    # @param ipv6_ndra_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(Ipv6NdraProfile, Fixnum, Hash)>] Ipv6NdraProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_ipv6_ndra_profile_with_http_info(org_id, project_id, ndra_profile_id, ipv6_ndra_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_create_or_replace_ipv6_ndra_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_create_or_replace_ipv6_ndra_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_create_or_replace_ipv6_ndra_profile"
      end
      # verify the required parameter 'ndra_profile_id' is set
      if @api_client.config.client_side_validation && ndra_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ndra_profile_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_create_or_replace_ipv6_ndra_profile"
      end
      # verify the required parameter 'ipv6_ndra_profile' is set
      if @api_client.config.client_side_validation && ipv6_ndra_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipv6_ndra_profile' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_create_or_replace_ipv6_ndra_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipv6-ndra-profiles/{ndra-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ndra-profile-id' + '}', ndra_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipv6_ndra_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ipv6NdraProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_create_or_replace_ipv6_ndra_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete gateway QoS profile
    # Delete QoS profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param qos_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_gateway_qos_profile(org_id, project_id, qos_profile_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_gateway_qos_profile_with_http_info(org_id, project_id, qos_profile_id, opts)
      nil
    end

    # Delete gateway QoS profile
    # Delete QoS profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param qos_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_gateway_qos_profile_with_http_info(org_id, project_id, qos_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_delete_gateway_qos_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_delete_gateway_qos_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_delete_gateway_qos_profile"
      end
      # verify the required parameter 'qos_profile_id' is set
      if @api_client.config.client_side_validation && qos_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'qos_profile_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_delete_gateway_qos_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/gateway-qos-profiles/{qos-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'qos-profile-id' + '}', qos_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_delete_gateway_qos_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPv6 DAD profile
    # Delete IPv6 DAD profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dad_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ipv6_dad_profile(org_id, project_id, dad_profile_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ipv6_dad_profile_with_http_info(org_id, project_id, dad_profile_id, opts)
      nil
    end

    # Delete IPv6 DAD profile
    # Delete IPv6 DAD profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dad_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ipv6_dad_profile_with_http_info(org_id, project_id, dad_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_delete_ipv6_dad_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_delete_ipv6_dad_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_delete_ipv6_dad_profile"
      end
      # verify the required parameter 'dad_profile_id' is set
      if @api_client.config.client_side_validation && dad_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dad_profile_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_delete_ipv6_dad_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipv6-dad-profiles/{dad-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dad-profile-id' + '}', dad_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_delete_ipv6_dad_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPv6 NDRA profile
    # Delete IPv6 NDRA profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ndra_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ipv6_ndra_profile(org_id, project_id, ndra_profile_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ipv6_ndra_profile_with_http_info(org_id, project_id, ndra_profile_id, opts)
      nil
    end

    # Delete IPv6 NDRA profile
    # Delete IPv6 NDRA profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ndra_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ipv6_ndra_profile_with_http_info(org_id, project_id, ndra_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_delete_ipv6_ndra_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_delete_ipv6_ndra_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_delete_ipv6_ndra_profile"
      end
      # verify the required parameter 'ndra_profile_id' is set
      if @api_client.config.client_side_validation && ndra_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ndra_profile_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_delete_ipv6_ndra_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipv6-ndra-profiles/{ndra-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ndra-profile-id' + '}', ndra_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_delete_ipv6_ndra_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all gateway QoS profiles
    # Paginated list of all gateway QoS profle instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GatewayQosProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_gateway_qos_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_gateway_qos_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # List all gateway QoS profiles
    # Paginated list of all gateway QoS profle instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GatewayQosProfileListResult, Fixnum, Hash)>] GatewayQosProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_gateway_qos_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_list_gateway_qos_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_list_gateway_qos_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_list_gateway_qos_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_list_gateway_qos_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_list_gateway_qos_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/gateway-qos-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayQosProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_list_gateway_qos_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all IPv6 DAD profiles
    # Paginated list of all IPv6 DAD profile instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Ipv6DadProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_ipv6_dad_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ipv6_dad_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # List all IPv6 DAD profiles
    # Paginated list of all IPv6 DAD profile instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(Ipv6DadProfileListResult, Fixnum, Hash)>] Ipv6DadProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ipv6_dad_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_list_ipv6_dad_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_list_ipv6_dad_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_list_ipv6_dad_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_list_ipv6_dad_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_list_ipv6_dad_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipv6-dad-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ipv6DadProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_list_ipv6_dad_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all IPv6 NDRA profiles
    # Paginated list of all IPv6 NDRA profile instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Ipv6NdraProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_ipv6_ndra_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ipv6_ndra_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # List all IPv6 NDRA profiles
    # Paginated list of all IPv6 NDRA profile instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(Ipv6NdraProfileListResult, Fixnum, Hash)>] Ipv6NdraProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ipv6_ndra_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_list_ipv6_ndra_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_list_ipv6_ndra_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_list_ipv6_ndra_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_list_ipv6_ndra_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_list_ipv6_ndra_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipv6-ndra-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ipv6NdraProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_list_ipv6_ndra_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the connectivity global configuration
    # Update the connectivity global configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_connectivity_global_config(org_id, project_id, global_config, opts = {})
      orgs_org_id_projects_project_id_infra_patch_connectivity_global_config_with_http_info(org_id, project_id, global_config, opts)
      nil
    end

    # Update the connectivity global configuration
    # Update the connectivity global configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_connectivity_global_config_with_http_info(org_id, project_id, global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_connectivity_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_connectivity_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_connectivity_global_config"
      end
      # verify the required parameter 'global_config' is set
      if @api_client.config.client_side_validation && global_config.nil?
        fail ArgumentError, "Missing the required parameter 'global_config' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_connectivity_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/connectivity-global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_patch_connectivity_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Gateway QoS profile
    # If profile with the qos-profile-id is not already present, create a new gateway QoS profile instance. If it already exists, update the gateway QoS profile instance with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param qos_profile_id 
    # @param gateway_qos_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_gateway_qos_profile(org_id, project_id, qos_profile_id, gateway_qos_profile, opts = {})
      orgs_org_id_projects_project_id_infra_patch_gateway_qos_profile_with_http_info(org_id, project_id, qos_profile_id, gateway_qos_profile, opts)
      nil
    end

    # Create or update Gateway QoS profile
    # If profile with the qos-profile-id is not already present, create a new gateway QoS profile instance. If it already exists, update the gateway QoS profile instance with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param qos_profile_id 
    # @param gateway_qos_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_gateway_qos_profile_with_http_info(org_id, project_id, qos_profile_id, gateway_qos_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_gateway_qos_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_gateway_qos_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_gateway_qos_profile"
      end
      # verify the required parameter 'qos_profile_id' is set
      if @api_client.config.client_side_validation && qos_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'qos_profile_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_gateway_qos_profile"
      end
      # verify the required parameter 'gateway_qos_profile' is set
      if @api_client.config.client_side_validation && gateway_qos_profile.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_qos_profile' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_gateway_qos_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/gateway-qos-profiles/{qos-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'qos-profile-id' + '}', qos_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_qos_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_patch_gateway_qos_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the global configuration
    # Update the global configuration.  <br> This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_global_config(org_id, project_id, global_config, opts = {})
      orgs_org_id_projects_project_id_infra_patch_global_config_with_http_info(org_id, project_id, global_config, opts)
      nil
    end

    # Update the global configuration
    # Update the global configuration.  &lt;br&gt; This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_global_config_with_http_info(org_id, project_id, global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_global_config"
      end
      # verify the required parameter 'global_config' is set
      if @api_client.config.client_side_validation && global_config.nil?
        fail ArgumentError, "Missing the required parameter 'global_config' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_patch_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update IPv6 DAD profile
    # If profile with the dad-profile-id is not already present, create a new IPv6 DAD profile instance. If it already exists, update the IPv6 DAD profile instance with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dad_profile_id 
    # @param ipv6_dad_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_ipv6_dad_profile(org_id, project_id, dad_profile_id, ipv6_dad_profile, opts = {})
      orgs_org_id_projects_project_id_infra_patch_ipv6_dad_profile_with_http_info(org_id, project_id, dad_profile_id, ipv6_dad_profile, opts)
      nil
    end

    # Create or update IPv6 DAD profile
    # If profile with the dad-profile-id is not already present, create a new IPv6 DAD profile instance. If it already exists, update the IPv6 DAD profile instance with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dad_profile_id 
    # @param ipv6_dad_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_ipv6_dad_profile_with_http_info(org_id, project_id, dad_profile_id, ipv6_dad_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_ipv6_dad_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_ipv6_dad_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_ipv6_dad_profile"
      end
      # verify the required parameter 'dad_profile_id' is set
      if @api_client.config.client_side_validation && dad_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dad_profile_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_ipv6_dad_profile"
      end
      # verify the required parameter 'ipv6_dad_profile' is set
      if @api_client.config.client_side_validation && ipv6_dad_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipv6_dad_profile' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_ipv6_dad_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipv6-dad-profiles/{dad-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dad-profile-id' + '}', dad_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipv6_dad_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_patch_ipv6_dad_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update IPv6 NDRA profile
    # If profile with the ndra-profile-id is not already present, create a new IPv6 NDRA profile instance. If it already exists, update the IPv6 NDRA profile instance with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ndra_profile_id 
    # @param ipv6_ndra_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_ipv6_ndra_profile(org_id, project_id, ndra_profile_id, ipv6_ndra_profile, opts = {})
      orgs_org_id_projects_project_id_infra_patch_ipv6_ndra_profile_with_http_info(org_id, project_id, ndra_profile_id, ipv6_ndra_profile, opts)
      nil
    end

    # Create or update IPv6 NDRA profile
    # If profile with the ndra-profile-id is not already present, create a new IPv6 NDRA profile instance. If it already exists, update the IPv6 NDRA profile instance with specified attributes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ndra_profile_id 
    # @param ipv6_ndra_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_ipv6_ndra_profile_with_http_info(org_id, project_id, ndra_profile_id, ipv6_ndra_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_ipv6_ndra_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_ipv6_ndra_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_ipv6_ndra_profile"
      end
      # verify the required parameter 'ndra_profile_id' is set
      if @api_client.config.client_side_validation && ndra_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ndra_profile_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_ipv6_ndra_profile"
      end
      # verify the required parameter 'ipv6_ndra_profile' is set
      if @api_client.config.client_side_validation && ipv6_ndra_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipv6_ndra_profile' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_patch_ipv6_ndra_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipv6-ndra-profiles/{ndra-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ndra-profile-id' + '}', ndra_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipv6_ndra_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_patch_ipv6_ndra_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the connectivity global configuration
    # Read the connectivity global configuration 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [GlobalConfig]
    def orgs_org_id_projects_project_id_infra_read_connectivity_global_config(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_connectivity_global_config_with_http_info(org_id, project_id, opts)
      data
    end

    # Read the connectivity global configuration
    # Read the connectivity global configuration 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(GlobalConfig, Fixnum, Hash)>] GlobalConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_connectivity_global_config_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_read_connectivity_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_read_connectivity_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_read_connectivity_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/connectivity-global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_read_connectivity_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read gateway QoS profile
    # Read gateway QoS profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param qos_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayQosProfile]
    def orgs_org_id_projects_project_id_infra_read_gateway_qos_profile(org_id, project_id, qos_profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_gateway_qos_profile_with_http_info(org_id, project_id, qos_profile_id, opts)
      data
    end

    # Read gateway QoS profile
    # Read gateway QoS profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param qos_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayQosProfile, Fixnum, Hash)>] GatewayQosProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_gateway_qos_profile_with_http_info(org_id, project_id, qos_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_read_gateway_qos_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_read_gateway_qos_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_read_gateway_qos_profile"
      end
      # verify the required parameter 'qos_profile_id' is set
      if @api_client.config.client_side_validation && qos_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'qos_profile_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_read_gateway_qos_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/gateway-qos-profiles/{qos-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'qos-profile-id' + '}', qos_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayQosProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_read_gateway_qos_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read global configuration
    # This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. Read global configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [GlobalConfig]
    def orgs_org_id_projects_project_id_infra_read_global_config(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_global_config_with_http_info(org_id, project_id, opts)
      data
    end

    # Read global configuration
    # This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. Read global configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(GlobalConfig, Fixnum, Hash)>] GlobalConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_global_config_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_read_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_read_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_read_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_read_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IPv6 DAD profile
    # Read IPv6 DAD profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dad_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Ipv6DadProfile]
    def orgs_org_id_projects_project_id_infra_read_ipv6_dad_profile(org_id, project_id, dad_profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_ipv6_dad_profile_with_http_info(org_id, project_id, dad_profile_id, opts)
      data
    end

    # Read IPv6 DAD profile
    # Read IPv6 DAD profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dad_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Ipv6DadProfile, Fixnum, Hash)>] Ipv6DadProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_ipv6_dad_profile_with_http_info(org_id, project_id, dad_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_read_ipv6_dad_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_read_ipv6_dad_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_read_ipv6_dad_profile"
      end
      # verify the required parameter 'dad_profile_id' is set
      if @api_client.config.client_side_validation && dad_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dad_profile_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_read_ipv6_dad_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipv6-dad-profiles/{dad-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dad-profile-id' + '}', dad_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ipv6DadProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_read_ipv6_dad_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IPv6 NDRA profile
    # Read IPv6 NDRA profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ndra_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Ipv6NdraProfile]
    def orgs_org_id_projects_project_id_infra_read_ipv6_ndra_profile(org_id, project_id, ndra_profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_ipv6_ndra_profile_with_http_info(org_id, project_id, ndra_profile_id, opts)
      data
    end

    # Read IPv6 NDRA profile
    # Read IPv6 NDRA profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ndra_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Ipv6NdraProfile, Fixnum, Hash)>] Ipv6NdraProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_ipv6_ndra_profile_with_http_info(org_id, project_id, ndra_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_read_ipv6_ndra_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_read_ipv6_ndra_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_read_ipv6_ndra_profile"
      end
      # verify the required parameter 'ndra_profile_id' is set
      if @api_client.config.client_side_validation && ndra_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ndra_profile_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_read_ipv6_ndra_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ipv6-ndra-profiles/{ndra-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ndra-profile-id' + '}', ndra_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ipv6NdraProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_read_ipv6_ndra_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the connectivity global configuration
    # Update the connectivity global configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [GlobalConfig]
    def orgs_org_id_projects_project_id_infra_update_connectivity_global_config(org_id, project_id, global_config, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_connectivity_global_config_with_http_info(org_id, project_id, global_config, opts)
      data
    end

    # Update the connectivity global configuration
    # Update the connectivity global configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(GlobalConfig, Fixnum, Hash)>] GlobalConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_connectivity_global_config_with_http_info(org_id, project_id, global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_update_connectivity_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_update_connectivity_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_update_connectivity_global_config"
      end
      # verify the required parameter 'global_config' is set
      if @api_client.config.client_side_validation && global_config.nil?
        fail ArgumentError, "Missing the required parameter 'global_config' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_update_connectivity_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/connectivity-global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_update_connectivity_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the global configuration
    # This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. Update the global configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [GlobalConfig]
    def orgs_org_id_projects_project_id_infra_update_global_config(org_id, project_id, global_config, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_global_config_with_http_info(org_id, project_id, global_config, opts)
      data
    end

    # Update the global configuration
    # This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. Update the global configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(GlobalConfig, Fixnum, Hash)>] GlobalConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_global_config_with_http_info(org_id, project_id, global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_update_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_update_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_update_global_config"
      end
      # verify the required parameter 'global_config' is set
      if @api_client.config.client_side_validation && global_config.nil?
        fail ArgumentError, "Missing the required parameter 'global_config' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infra_update_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infra_update_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infrapatch_constraint_global_config(org_id, project_id, constraint_global_config, opts = {})
      orgs_org_id_projects_project_id_infrapatch_constraint_global_config_with_http_info(org_id, project_id, constraint_global_config, opts)
      nil
    end

    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infrapatch_constraint_global_config_with_http_info(org_id, project_id, constraint_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infrapatch_constraint_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infrapatch_constraint_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infrapatch_constraint_global_config"
      end
      # verify the required parameter 'constraint_global_config' is set
      if @api_client.config.client_side_validation && constraint_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_global_config' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infrapatch_constraint_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/constraint-global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(constraint_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infrapatch_constraint_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the global Operationconfiguration
    # Update the global Operationconfiguration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ops_global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infrapatch_ops_global_config(org_id, project_id, ops_global_config, opts = {})
      orgs_org_id_projects_project_id_infrapatch_ops_global_config_with_http_info(org_id, project_id, ops_global_config, opts)
      nil
    end

    # Update the global Operationconfiguration
    # Update the global Operationconfiguration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ops_global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infrapatch_ops_global_config_with_http_info(org_id, project_id, ops_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infrapatch_ops_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infrapatch_ops_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infrapatch_ops_global_config"
      end
      # verify the required parameter 'ops_global_config' is set
      if @api_client.config.client_side_validation && ops_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'ops_global_config' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infrapatch_ops_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ops-global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ops_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infrapatch_ops_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [ConstraintGlobalConfig]
    def orgs_org_id_projects_project_id_infraput_constraint_global_config(org_id, project_id, constraint_global_config, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infraput_constraint_global_config_with_http_info(org_id, project_id, constraint_global_config, opts)
      data
    end

    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConstraintGlobalConfig, Fixnum, Hash)>] ConstraintGlobalConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infraput_constraint_global_config_with_http_info(org_id, project_id, constraint_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infraput_constraint_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infraput_constraint_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infraput_constraint_global_config"
      end
      # verify the required parameter 'constraint_global_config' is set
      if @api_client.config.client_side_validation && constraint_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_global_config' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infraput_constraint_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/constraint-global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(constraint_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConstraintGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infraput_constraint_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the global Operations Configuration
    # Update the global Operations Configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ops_global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [OpsGlobalConfig]
    def orgs_org_id_projects_project_id_infraput_ops_global_config(org_id, project_id, ops_global_config, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infraput_ops_global_config_with_http_info(org_id, project_id, ops_global_config, opts)
      data
    end

    # Update the global Operations Configuration
    # Update the global Operations Configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ops_global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(OpsGlobalConfig, Fixnum, Hash)>] OpsGlobalConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infraput_ops_global_config_with_http_info(org_id, project_id, ops_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infraput_ops_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infraput_ops_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infraput_ops_global_config"
      end
      # verify the required parameter 'ops_global_config' is set
      if @api_client.config.client_side_validation && ops_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'ops_global_config' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infraput_ops_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ops-global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ops_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OpsGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infraput_ops_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the constraint global configuration
    # Read the constraint global configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [ConstraintGlobalConfig]
    def orgs_org_id_projects_project_id_infraread_constraint_global_config(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infraread_constraint_global_config_with_http_info(org_id, project_id, opts)
      data
    end

    # Read the constraint global configuration
    # Read the constraint global configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConstraintGlobalConfig, Fixnum, Hash)>] ConstraintGlobalConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infraread_constraint_global_config_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infraread_constraint_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infraread_constraint_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infraread_constraint_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/constraint-global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConstraintGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infraread_constraint_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read global Operations Configuration
    # Read global Operations Configuration 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [OpsGlobalConfig]
    def orgs_org_id_projects_project_id_infraread_ops_global_config(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infraread_ops_global_config_with_http_info(org_id, project_id, opts)
      data
    end

    # Read global Operations Configuration
    # Read global Operations Configuration 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(OpsGlobalConfig, Fixnum, Hash)>] OpsGlobalConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infraread_ops_global_config_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.orgs_org_id_projects_project_id_infraread_ops_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infraread_ops_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NetworkingProfilesApi.orgs_org_id_projects_project_id_infraread_ops_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ops-global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OpsGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#orgs_org_id_projects_project_id_infraread_ops_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a BfdProfile
    # If a BfdProfile with the bfd-profile-id is not already present, create a new BfdProfile. If it already exists, update the BfdProfile. This operation will fully replace the object. 
    # @param bfd_profile_id BfdProfile ID
    # @param bfd_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_bfd_profile(bfd_profile_id, bfd_profile, opts = {})
      patch_bfd_profile_with_http_info(bfd_profile_id, bfd_profile, opts)
      nil
    end

    # Create or update a BfdProfile
    # If a BfdProfile with the bfd-profile-id is not already present, create a new BfdProfile. If it already exists, update the BfdProfile. This operation will fully replace the object. 
    # @param bfd_profile_id BfdProfile ID
    # @param bfd_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_bfd_profile_with_http_info(bfd_profile_id, bfd_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.patch_bfd_profile ...'
      end
      # verify the required parameter 'bfd_profile_id' is set
      if @api_client.config.client_side_validation && bfd_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'bfd_profile_id' when calling NetworkingProfilesApi.patch_bfd_profile"
      end
      # verify the required parameter 'bfd_profile' is set
      if @api_client.config.client_side_validation && bfd_profile.nil?
        fail ArgumentError, "Missing the required parameter 'bfd_profile' when calling NetworkingProfilesApi.patch_bfd_profile"
      end
      # resource path
      local_var_path = '/infra/bfd-profiles/{bfd-profile-id}'.sub('{' + 'bfd-profile-id' + '}', bfd_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bfd_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#patch_bfd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the connectivity global configuration
    # Update the connectivity global configuration
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [nil]
    def patch_connectivity_global_config(global_config, opts = {})
      patch_connectivity_global_config_with_http_info(global_config, opts)
      nil
    end

    # Update the connectivity global configuration
    # Update the connectivity global configuration
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_connectivity_global_config_with_http_info(global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.patch_connectivity_global_config ...'
      end
      # verify the required parameter 'global_config' is set
      if @api_client.config.client_side_validation && global_config.nil?
        fail ArgumentError, "Missing the required parameter 'global_config' when calling NetworkingProfilesApi.patch_connectivity_global_config"
      end
      # resource path
      local_var_path = '/infra/connectivity-global-config'

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#patch_connectivity_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_constraint_global_config(constraint_global_config, opts = {})
      patch_constraint_global_config_with_http_info(constraint_global_config, opts)
      nil
    end

    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_constraint_global_config_with_http_info(constraint_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.patch_constraint_global_config ...'
      end
      # verify the required parameter 'constraint_global_config' is set
      if @api_client.config.client_side_validation && constraint_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_global_config' when calling NetworkingProfilesApi.patch_constraint_global_config"
      end
      # resource path
      local_var_path = '/infra/constraint-global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(constraint_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#patch_constraint_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update Evpn Tenant Configuration
    # Create a global evpn tenant configuration if it is not already present, otherwise update the evpn tenant configuration. 
    # @param config_id Evpn Tenant config id
    # @param evpn_tenant_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_evpn_tenant_config(config_id, evpn_tenant_config, opts = {})
      patch_evpn_tenant_config_with_http_info(config_id, evpn_tenant_config, opts)
      nil
    end

    # Create or Update Evpn Tenant Configuration
    # Create a global evpn tenant configuration if it is not already present, otherwise update the evpn tenant configuration. 
    # @param config_id Evpn Tenant config id
    # @param evpn_tenant_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_evpn_tenant_config_with_http_info(config_id, evpn_tenant_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.patch_evpn_tenant_config ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling NetworkingProfilesApi.patch_evpn_tenant_config"
      end
      # verify the required parameter 'evpn_tenant_config' is set
      if @api_client.config.client_side_validation && evpn_tenant_config.nil?
        fail ArgumentError, "Missing the required parameter 'evpn_tenant_config' when calling NetworkingProfilesApi.patch_evpn_tenant_config"
      end
      # resource path
      local_var_path = '/infra/evpn-tenant-configs/{config-id}'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(evpn_tenant_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#patch_evpn_tenant_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Gateway QoS profile
    # If profile with the qos-profile-id is not already present, create a new gateway QoS profile instance. If it already exists, update the gateway QoS profile instance with specified attributes. 
    # @param qos_profile_id 
    # @param gateway_qos_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_gateway_qos_profile(qos_profile_id, gateway_qos_profile, opts = {})
      patch_gateway_qos_profile_with_http_info(qos_profile_id, gateway_qos_profile, opts)
      nil
    end

    # Create or update Gateway QoS profile
    # If profile with the qos-profile-id is not already present, create a new gateway QoS profile instance. If it already exists, update the gateway QoS profile instance with specified attributes. 
    # @param qos_profile_id 
    # @param gateway_qos_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_gateway_qos_profile_with_http_info(qos_profile_id, gateway_qos_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.patch_gateway_qos_profile ...'
      end
      # verify the required parameter 'qos_profile_id' is set
      if @api_client.config.client_side_validation && qos_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'qos_profile_id' when calling NetworkingProfilesApi.patch_gateway_qos_profile"
      end
      # verify the required parameter 'gateway_qos_profile' is set
      if @api_client.config.client_side_validation && gateway_qos_profile.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_qos_profile' when calling NetworkingProfilesApi.patch_gateway_qos_profile"
      end
      # resource path
      local_var_path = '/infra/gateway-qos-profiles/{qos-profile-id}'.sub('{' + 'qos-profile-id' + '}', qos_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_qos_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#patch_gateway_qos_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the global configuration
    # Update the global configuration.  <br> This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. 
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [nil]
    def patch_global_config(global_config, opts = {})
      patch_global_config_with_http_info(global_config, opts)
      nil
    end

    # Update the global configuration
    # Update the global configuration.  &lt;br&gt; This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. 
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_global_config_with_http_info(global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.patch_global_config ...'
      end
      # verify the required parameter 'global_config' is set
      if @api_client.config.client_side_validation && global_config.nil?
        fail ArgumentError, "Missing the required parameter 'global_config' when calling NetworkingProfilesApi.patch_global_config"
      end
      # resource path
      local_var_path = '/infra/global-config'

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#patch_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update IPv6 DAD profile
    # If profile with the dad-profile-id is not already present, create a new IPv6 DAD profile instance. If it already exists, update the IPv6 DAD profile instance with specified attributes. 
    # @param dad_profile_id 
    # @param ipv6_dad_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_ipv6_dad_profile(dad_profile_id, ipv6_dad_profile, opts = {})
      patch_ipv6_dad_profile_with_http_info(dad_profile_id, ipv6_dad_profile, opts)
      nil
    end

    # Create or update IPv6 DAD profile
    # If profile with the dad-profile-id is not already present, create a new IPv6 DAD profile instance. If it already exists, update the IPv6 DAD profile instance with specified attributes. 
    # @param dad_profile_id 
    # @param ipv6_dad_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ipv6_dad_profile_with_http_info(dad_profile_id, ipv6_dad_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.patch_ipv6_dad_profile ...'
      end
      # verify the required parameter 'dad_profile_id' is set
      if @api_client.config.client_side_validation && dad_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dad_profile_id' when calling NetworkingProfilesApi.patch_ipv6_dad_profile"
      end
      # verify the required parameter 'ipv6_dad_profile' is set
      if @api_client.config.client_side_validation && ipv6_dad_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipv6_dad_profile' when calling NetworkingProfilesApi.patch_ipv6_dad_profile"
      end
      # resource path
      local_var_path = '/infra/ipv6-dad-profiles/{dad-profile-id}'.sub('{' + 'dad-profile-id' + '}', dad_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipv6_dad_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#patch_ipv6_dad_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update IPv6 NDRA profile
    # If profile with the ndra-profile-id is not already present, create a new IPv6 NDRA profile instance. If it already exists, update the IPv6 NDRA profile instance with specified attributes. 
    # @param ndra_profile_id 
    # @param ipv6_ndra_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_ipv6_ndra_profile(ndra_profile_id, ipv6_ndra_profile, opts = {})
      patch_ipv6_ndra_profile_with_http_info(ndra_profile_id, ipv6_ndra_profile, opts)
      nil
    end

    # Create or update IPv6 NDRA profile
    # If profile with the ndra-profile-id is not already present, create a new IPv6 NDRA profile instance. If it already exists, update the IPv6 NDRA profile instance with specified attributes. 
    # @param ndra_profile_id 
    # @param ipv6_ndra_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ipv6_ndra_profile_with_http_info(ndra_profile_id, ipv6_ndra_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.patch_ipv6_ndra_profile ...'
      end
      # verify the required parameter 'ndra_profile_id' is set
      if @api_client.config.client_side_validation && ndra_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ndra_profile_id' when calling NetworkingProfilesApi.patch_ipv6_ndra_profile"
      end
      # verify the required parameter 'ipv6_ndra_profile' is set
      if @api_client.config.client_side_validation && ipv6_ndra_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipv6_ndra_profile' when calling NetworkingProfilesApi.patch_ipv6_ndra_profile"
      end
      # resource path
      local_var_path = '/infra/ipv6-ndra-profiles/{ndra-profile-id}'.sub('{' + 'ndra-profile-id' + '}', ndra_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipv6_ndra_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#patch_ipv6_ndra_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the global Operationconfiguration
    # Update the global Operationconfiguration
    # @param ops_global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [nil]
    def patch_ops_global_config(ops_global_config, opts = {})
      patch_ops_global_config_with_http_info(ops_global_config, opts)
      nil
    end

    # Update the global Operationconfiguration
    # Update the global Operationconfiguration
    # @param ops_global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ops_global_config_with_http_info(ops_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.patch_ops_global_config ...'
      end
      # verify the required parameter 'ops_global_config' is set
      if @api_client.config.client_side_validation && ops_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'ops_global_config' when calling NetworkingProfilesApi.patch_ops_global_config"
      end
      # resource path
      local_var_path = '/infra/ops-global-config'

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ops_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#patch_ops_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update igmp profile
    # Create a igmp profile with the igmp-profile-id is not already present, otherwise update the igmp profile. 
    # @param igmp_profile_id igmp profile id
    # @param policy_igmp_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_igmp_profile(igmp_profile_id, policy_igmp_profile, opts = {})
      patch_policy_igmp_profile_with_http_info(igmp_profile_id, policy_igmp_profile, opts)
      nil
    end

    # Update igmp profile
    # Create a igmp profile with the igmp-profile-id is not already present, otherwise update the igmp profile. 
    # @param igmp_profile_id igmp profile id
    # @param policy_igmp_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_igmp_profile_with_http_info(igmp_profile_id, policy_igmp_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.patch_policy_igmp_profile ...'
      end
      # verify the required parameter 'igmp_profile_id' is set
      if @api_client.config.client_side_validation && igmp_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'igmp_profile_id' when calling NetworkingProfilesApi.patch_policy_igmp_profile"
      end
      # verify the required parameter 'policy_igmp_profile' is set
      if @api_client.config.client_side_validation && policy_igmp_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_igmp_profile' when calling NetworkingProfilesApi.patch_policy_igmp_profile"
      end
      # resource path
      local_var_path = '/infra/igmp-profiles/{igmp-profile-id}'.sub('{' + 'igmp-profile-id' + '}', igmp_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_igmp_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#patch_policy_igmp_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update pim profile
    # Create a pim profile with the pim-profile-id is not already present, otherwise update the pim profile. 
    # @param pim_profile_id pim profile id
    # @param policy_pim_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_pim_profile(pim_profile_id, policy_pim_profile, opts = {})
      patch_policy_pim_profile_with_http_info(pim_profile_id, policy_pim_profile, opts)
      nil
    end

    # Update pim profile
    # Create a pim profile with the pim-profile-id is not already present, otherwise update the pim profile. 
    # @param pim_profile_id pim profile id
    # @param policy_pim_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_pim_profile_with_http_info(pim_profile_id, policy_pim_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.patch_policy_pim_profile ...'
      end
      # verify the required parameter 'pim_profile_id' is set
      if @api_client.config.client_side_validation && pim_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'pim_profile_id' when calling NetworkingProfilesApi.patch_policy_pim_profile"
      end
      # verify the required parameter 'policy_pim_profile' is set
      if @api_client.config.client_side_validation && policy_pim_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_pim_profile' when calling NetworkingProfilesApi.patch_policy_pim_profile"
      end
      # resource path
      local_var_path = '/infra/pim-profiles/{pim-profile-id}'.sub('{' + 'pim-profile-id' + '}', pim_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_pim_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#patch_policy_pim_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Policy Transport Zone Profile
    # API will create Policy Transport Zone Profile. 
    # @param tz_profile_id 
    # @param policy_transport_zone_profile 
    # @param [Hash] opts the optional parameters
    # @return [PolicyTransportZoneProfile]
    def patch_policy_transport_zone_profile(tz_profile_id, policy_transport_zone_profile, opts = {})
      data, _status_code, _headers = patch_policy_transport_zone_profile_with_http_info(tz_profile_id, policy_transport_zone_profile, opts)
      data
    end

    # Create Policy Transport Zone Profile
    # API will create Policy Transport Zone Profile. 
    # @param tz_profile_id 
    # @param policy_transport_zone_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyTransportZoneProfile, Fixnum, Hash)>] PolicyTransportZoneProfile data, response status code and response headers
    def patch_policy_transport_zone_profile_with_http_info(tz_profile_id, policy_transport_zone_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.patch_policy_transport_zone_profile ...'
      end
      # verify the required parameter 'tz_profile_id' is set
      if @api_client.config.client_side_validation && tz_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'tz_profile_id' when calling NetworkingProfilesApi.patch_policy_transport_zone_profile"
      end
      # verify the required parameter 'policy_transport_zone_profile' is set
      if @api_client.config.client_side_validation && policy_transport_zone_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_transport_zone_profile' when calling NetworkingProfilesApi.patch_policy_transport_zone_profile"
      end
      # resource path
      local_var_path = '/infra/transport-zone-profiles/{tz-profile-id}'.sub('{' + 'tz-profile-id' + '}', tz_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_transport_zone_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyTransportZoneProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#patch_policy_transport_zone_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update Vni Pool Configuration
    # Create a Vni Pool config if it is not already present, otherwise update the Vni Pool configuration. 
    # @param vni_pool_id vni pool id
    # @param vni_pool_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vni_pool_config(vni_pool_id, vni_pool_config, opts = {})
      patch_vni_pool_config_with_http_info(vni_pool_id, vni_pool_config, opts)
      nil
    end

    # Create or Update Vni Pool Configuration
    # Create a Vni Pool config if it is not already present, otherwise update the Vni Pool configuration. 
    # @param vni_pool_id vni pool id
    # @param vni_pool_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vni_pool_config_with_http_info(vni_pool_id, vni_pool_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.patch_vni_pool_config ...'
      end
      # verify the required parameter 'vni_pool_id' is set
      if @api_client.config.client_side_validation && vni_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vni_pool_id' when calling NetworkingProfilesApi.patch_vni_pool_config"
      end
      # verify the required parameter 'vni_pool_config' is set
      if @api_client.config.client_side_validation && vni_pool_config.nil?
        fail ArgumentError, "Missing the required parameter 'vni_pool_config' when calling NetworkingProfilesApi.patch_vni_pool_config"
      end
      # resource path
      local_var_path = '/infra/vni-pools/{vni-pool-id}'.sub('{' + 'vni-pool-id' + '}', vni_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vni_pool_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#patch_vni_pool_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [ConstraintGlobalConfig]
    def put_constraint_global_config(constraint_global_config, opts = {})
      data, _status_code, _headers = put_constraint_global_config_with_http_info(constraint_global_config, opts)
      data
    end

    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConstraintGlobalConfig, Fixnum, Hash)>] ConstraintGlobalConfig data, response status code and response headers
    def put_constraint_global_config_with_http_info(constraint_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.put_constraint_global_config ...'
      end
      # verify the required parameter 'constraint_global_config' is set
      if @api_client.config.client_side_validation && constraint_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_global_config' when calling NetworkingProfilesApi.put_constraint_global_config"
      end
      # resource path
      local_var_path = '/infra/constraint-global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(constraint_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConstraintGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#put_constraint_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the global Operations Configuration
    # Update the global Operations Configuration
    # @param ops_global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [OpsGlobalConfig]
    def put_ops_global_config(ops_global_config, opts = {})
      data, _status_code, _headers = put_ops_global_config_with_http_info(ops_global_config, opts)
      data
    end

    # Update the global Operations Configuration
    # Update the global Operations Configuration
    # @param ops_global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(OpsGlobalConfig, Fixnum, Hash)>] OpsGlobalConfig data, response status code and response headers
    def put_ops_global_config_with_http_info(ops_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.put_ops_global_config ...'
      end
      # verify the required parameter 'ops_global_config' is set
      if @api_client.config.client_side_validation && ops_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'ops_global_config' when calling NetworkingProfilesApi.put_ops_global_config"
      end
      # resource path
      local_var_path = '/infra/ops-global-config'

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ops_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OpsGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#put_ops_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a BfdProfile
    # Read a BfdProfile.
    # @param bfd_profile_id BfdProfile ID
    # @param [Hash] opts the optional parameters
    # @return [BfdProfile]
    def read_bfd_profile(bfd_profile_id, opts = {})
      data, _status_code, _headers = read_bfd_profile_with_http_info(bfd_profile_id, opts)
      data
    end

    # Read a BfdProfile
    # Read a BfdProfile.
    # @param bfd_profile_id BfdProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(BfdProfile, Fixnum, Hash)>] BfdProfile data, response status code and response headers
    def read_bfd_profile_with_http_info(bfd_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.read_bfd_profile ...'
      end
      # verify the required parameter 'bfd_profile_id' is set
      if @api_client.config.client_side_validation && bfd_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'bfd_profile_id' when calling NetworkingProfilesApi.read_bfd_profile"
      end
      # resource path
      local_var_path = '/infra/bfd-profiles/{bfd-profile-id}'.sub('{' + 'bfd-profile-id' + '}', bfd_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BfdProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#read_bfd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the connectivity global configuration
    # Read the connectivity global configuration 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [GlobalConfig]
    def read_connectivity_global_config(opts = {})
      data, _status_code, _headers = read_connectivity_global_config_with_http_info(opts)
      data
    end

    # Read the connectivity global configuration
    # Read the connectivity global configuration 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(GlobalConfig, Fixnum, Hash)>] GlobalConfig data, response status code and response headers
    def read_connectivity_global_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.read_connectivity_global_config ...'
      end
      # resource path
      local_var_path = '/infra/connectivity-global-config'

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#read_connectivity_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the constraint global configuration
    # Read the constraint global configuration
    # @param [Hash] opts the optional parameters
    # @return [ConstraintGlobalConfig]
    def read_constraint_global_config(opts = {})
      data, _status_code, _headers = read_constraint_global_config_with_http_info(opts)
      data
    end

    # Read the constraint global configuration
    # Read the constraint global configuration
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConstraintGlobalConfig, Fixnum, Hash)>] ConstraintGlobalConfig data, response status code and response headers
    def read_constraint_global_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.read_constraint_global_config ...'
      end
      # resource path
      local_var_path = '/infra/constraint-global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConstraintGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#read_constraint_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Evpn Tenant Configuration
    # Read Evpn Tenant Configuration. 
    # @param config_id config id
    # @param [Hash] opts the optional parameters
    # @return [EvpnTenantConfig]
    def read_evpn_tenant_config(config_id, opts = {})
      data, _status_code, _headers = read_evpn_tenant_config_with_http_info(config_id, opts)
      data
    end

    # Read Evpn Tenant Configuration
    # Read Evpn Tenant Configuration. 
    # @param config_id config id
    # @param [Hash] opts the optional parameters
    # @return [Array<(EvpnTenantConfig, Fixnum, Hash)>] EvpnTenantConfig data, response status code and response headers
    def read_evpn_tenant_config_with_http_info(config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.read_evpn_tenant_config ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling NetworkingProfilesApi.read_evpn_tenant_config"
      end
      # resource path
      local_var_path = '/infra/evpn-tenant-configs/{config-id}'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvpnTenantConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#read_evpn_tenant_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read gateway QoS profile
    # Read gateway QoS profile
    # @param qos_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayQosProfile]
    def read_gateway_qos_profile(qos_profile_id, opts = {})
      data, _status_code, _headers = read_gateway_qos_profile_with_http_info(qos_profile_id, opts)
      data
    end

    # Read gateway QoS profile
    # Read gateway QoS profile
    # @param qos_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayQosProfile, Fixnum, Hash)>] GatewayQosProfile data, response status code and response headers
    def read_gateway_qos_profile_with_http_info(qos_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.read_gateway_qos_profile ...'
      end
      # verify the required parameter 'qos_profile_id' is set
      if @api_client.config.client_side_validation && qos_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'qos_profile_id' when calling NetworkingProfilesApi.read_gateway_qos_profile"
      end
      # resource path
      local_var_path = '/infra/gateway-qos-profiles/{qos-profile-id}'.sub('{' + 'qos-profile-id' + '}', qos_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayQosProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#read_gateway_qos_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read global configuration
    # This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. Read global configuration. 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [GlobalConfig]
    def read_global_config(opts = {})
      data, _status_code, _headers = read_global_config_with_http_info(opts)
      data
    end

    # Read global configuration
    # This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. Read global configuration. 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(GlobalConfig, Fixnum, Hash)>] GlobalConfig data, response status code and response headers
    def read_global_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.read_global_config ...'
      end
      # resource path
      local_var_path = '/infra/global-config'

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#read_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IPv6 DAD profile
    # Read IPv6 DAD profile
    # @param dad_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Ipv6DadProfile]
    def read_ipv6_dad_profile(dad_profile_id, opts = {})
      data, _status_code, _headers = read_ipv6_dad_profile_with_http_info(dad_profile_id, opts)
      data
    end

    # Read IPv6 DAD profile
    # Read IPv6 DAD profile
    # @param dad_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Ipv6DadProfile, Fixnum, Hash)>] Ipv6DadProfile data, response status code and response headers
    def read_ipv6_dad_profile_with_http_info(dad_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.read_ipv6_dad_profile ...'
      end
      # verify the required parameter 'dad_profile_id' is set
      if @api_client.config.client_side_validation && dad_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'dad_profile_id' when calling NetworkingProfilesApi.read_ipv6_dad_profile"
      end
      # resource path
      local_var_path = '/infra/ipv6-dad-profiles/{dad-profile-id}'.sub('{' + 'dad-profile-id' + '}', dad_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ipv6DadProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#read_ipv6_dad_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IPv6 NDRA profile
    # Read IPv6 NDRA profile
    # @param ndra_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Ipv6NdraProfile]
    def read_ipv6_ndra_profile(ndra_profile_id, opts = {})
      data, _status_code, _headers = read_ipv6_ndra_profile_with_http_info(ndra_profile_id, opts)
      data
    end

    # Read IPv6 NDRA profile
    # Read IPv6 NDRA profile
    # @param ndra_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Ipv6NdraProfile, Fixnum, Hash)>] Ipv6NdraProfile data, response status code and response headers
    def read_ipv6_ndra_profile_with_http_info(ndra_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.read_ipv6_ndra_profile ...'
      end
      # verify the required parameter 'ndra_profile_id' is set
      if @api_client.config.client_side_validation && ndra_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ndra_profile_id' when calling NetworkingProfilesApi.read_ipv6_ndra_profile"
      end
      # resource path
      local_var_path = '/infra/ipv6-ndra-profiles/{ndra-profile-id}'.sub('{' + 'ndra-profile-id' + '}', ndra_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ipv6NdraProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#read_ipv6_ndra_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read global Operations Configuration
    # Read global Operations Configuration 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [OpsGlobalConfig]
    def read_ops_global_config(opts = {})
      data, _status_code, _headers = read_ops_global_config_with_http_info(opts)
      data
    end

    # Read global Operations Configuration
    # Read global Operations Configuration 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(OpsGlobalConfig, Fixnum, Hash)>] OpsGlobalConfig data, response status code and response headers
    def read_ops_global_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.read_ops_global_config ...'
      end
      # resource path
      local_var_path = '/infra/ops-global-config'

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OpsGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#read_ops_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Igmp Profile
    # Read Igmp Profile. 
    # @param igmp_profile_id igmp profile id
    # @param [Hash] opts the optional parameters
    # @return [PolicyIgmpProfile]
    def read_policy_igmp_profile(igmp_profile_id, opts = {})
      data, _status_code, _headers = read_policy_igmp_profile_with_http_info(igmp_profile_id, opts)
      data
    end

    # Read Igmp Profile
    # Read Igmp Profile. 
    # @param igmp_profile_id igmp profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyIgmpProfile, Fixnum, Hash)>] PolicyIgmpProfile data, response status code and response headers
    def read_policy_igmp_profile_with_http_info(igmp_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.read_policy_igmp_profile ...'
      end
      # verify the required parameter 'igmp_profile_id' is set
      if @api_client.config.client_side_validation && igmp_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'igmp_profile_id' when calling NetworkingProfilesApi.read_policy_igmp_profile"
      end
      # resource path
      local_var_path = '/infra/igmp-profiles/{igmp-profile-id}'.sub('{' + 'igmp-profile-id' + '}', igmp_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIgmpProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#read_policy_igmp_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Pim Profile
    # Read Pim Profile. 
    # @param pim_profile_id pim profile id
    # @param [Hash] opts the optional parameters
    # @return [PolicyPimProfile]
    def read_policy_pim_profile(pim_profile_id, opts = {})
      data, _status_code, _headers = read_policy_pim_profile_with_http_info(pim_profile_id, opts)
      data
    end

    # Read Pim Profile
    # Read Pim Profile. 
    # @param pim_profile_id pim profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyPimProfile, Fixnum, Hash)>] PolicyPimProfile data, response status code and response headers
    def read_policy_pim_profile_with_http_info(pim_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.read_policy_pim_profile ...'
      end
      # verify the required parameter 'pim_profile_id' is set
      if @api_client.config.client_side_validation && pim_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'pim_profile_id' when calling NetworkingProfilesApi.read_policy_pim_profile"
      end
      # resource path
      local_var_path = '/infra/pim-profiles/{pim-profile-id}'.sub('{' + 'pim-profile-id' + '}', pim_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyPimProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#read_policy_pim_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security global configuration
    # This reads the security-global-config used for NSX Manager appliance certificates. These properties are not sent to the hosts. 
    # @param [Hash] opts the optional parameters
    # @return [InfraSecurityConfig]
    def read_security_global_config(opts = {})
      data, _status_code, _headers = read_security_global_config_with_http_info(opts)
      data
    end

    # Read security global configuration
    # This reads the security-global-config used for NSX Manager appliance certificates. These properties are not sent to the hosts. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InfraSecurityConfig, Fixnum, Hash)>] InfraSecurityConfig data, response status code and response headers
    def read_security_global_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.read_security_global_config ...'
      end
      # resource path
      local_var_path = '/infra/security-global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InfraSecurityConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#read_security_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Vni Pool Configuration
    # Read Vni Pool Configuration. 
    # @param vni_pool_id vni pool id
    # @param [Hash] opts the optional parameters
    # @return [VniPoolConfig]
    def read_vni_pool_config(vni_pool_id, opts = {})
      data, _status_code, _headers = read_vni_pool_config_with_http_info(vni_pool_id, opts)
      data
    end

    # Read Vni Pool Configuration
    # Read Vni Pool Configuration. 
    # @param vni_pool_id vni pool id
    # @param [Hash] opts the optional parameters
    # @return [Array<(VniPoolConfig, Fixnum, Hash)>] VniPoolConfig data, response status code and response headers
    def read_vni_pool_config_with_http_info(vni_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.read_vni_pool_config ...'
      end
      # verify the required parameter 'vni_pool_id' is set
      if @api_client.config.client_side_validation && vni_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vni_pool_id' when calling NetworkingProfilesApi.read_vni_pool_config"
      end
      # resource path
      local_var_path = '/infra/vni-pools/{vni-pool-id}'.sub('{' + 'vni-pool-id' + '}', vni_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VniPoolConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#read_vni_pool_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a BfdProfile
    # If a BfdProfile with the bfd-profile-id is not already present, create a new BfdProfile. If it already exists, update the BfdProfile. This operation will fully replace the object. 
    # @param bfd_profile_id BfdProfile ID
    # @param bfd_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [BfdProfile]
    def update_bfd_profile(bfd_profile_id, bfd_profile, opts = {})
      data, _status_code, _headers = update_bfd_profile_with_http_info(bfd_profile_id, bfd_profile, opts)
      data
    end

    # Create or update a BfdProfile
    # If a BfdProfile with the bfd-profile-id is not already present, create a new BfdProfile. If it already exists, update the BfdProfile. This operation will fully replace the object. 
    # @param bfd_profile_id BfdProfile ID
    # @param bfd_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(BfdProfile, Fixnum, Hash)>] BfdProfile data, response status code and response headers
    def update_bfd_profile_with_http_info(bfd_profile_id, bfd_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.update_bfd_profile ...'
      end
      # verify the required parameter 'bfd_profile_id' is set
      if @api_client.config.client_side_validation && bfd_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'bfd_profile_id' when calling NetworkingProfilesApi.update_bfd_profile"
      end
      # verify the required parameter 'bfd_profile' is set
      if @api_client.config.client_side_validation && bfd_profile.nil?
        fail ArgumentError, "Missing the required parameter 'bfd_profile' when calling NetworkingProfilesApi.update_bfd_profile"
      end
      # resource path
      local_var_path = '/infra/bfd-profiles/{bfd-profile-id}'.sub('{' + 'bfd-profile-id' + '}', bfd_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bfd_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BfdProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#update_bfd_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the connectivity global configuration
    # Update the connectivity global configuration
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [GlobalConfig]
    def update_connectivity_global_config(global_config, opts = {})
      data, _status_code, _headers = update_connectivity_global_config_with_http_info(global_config, opts)
      data
    end

    # Update the connectivity global configuration
    # Update the connectivity global configuration
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(GlobalConfig, Fixnum, Hash)>] GlobalConfig data, response status code and response headers
    def update_connectivity_global_config_with_http_info(global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.update_connectivity_global_config ...'
      end
      # verify the required parameter 'global_config' is set
      if @api_client.config.client_side_validation && global_config.nil?
        fail ArgumentError, "Missing the required parameter 'global_config' when calling NetworkingProfilesApi.update_connectivity_global_config"
      end
      # resource path
      local_var_path = '/infra/connectivity-global-config'

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#update_connectivity_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the global configuration
    # This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. Update the global configuration. 
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [GlobalConfig]
    def update_global_config(global_config, opts = {})
      data, _status_code, _headers = update_global_config_with_http_info(global_config, opts)
      data
    end

    # Update the global configuration
    # This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. Update the global configuration. 
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(GlobalConfig, Fixnum, Hash)>] GlobalConfig data, response status code and response headers
    def update_global_config_with_http_info(global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.update_global_config ...'
      end
      # verify the required parameter 'global_config' is set
      if @api_client.config.client_side_validation && global_config.nil?
        fail ArgumentError, "Missing the required parameter 'global_config' when calling NetworkingProfilesApi.update_global_config"
      end
      # resource path
      local_var_path = '/infra/global-config'

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#update_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the security global configuration
    # This updates the security-global-config used for NSX Manager appliance certificates. These properties are not sent to the hosts. 
    # @param infra_security_config 
    # @param [Hash] opts the optional parameters
    # @return [InfraSecurityConfig]
    def update_security_global_config(infra_security_config, opts = {})
      data, _status_code, _headers = update_security_global_config_with_http_info(infra_security_config, opts)
      data
    end

    # Update the security global configuration
    # This updates the security-global-config used for NSX Manager appliance certificates. These properties are not sent to the hosts. 
    # @param infra_security_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InfraSecurityConfig, Fixnum, Hash)>] InfraSecurityConfig data, response status code and response headers
    def update_security_global_config_with_http_info(infra_security_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkingProfilesApi.update_security_global_config ...'
      end
      # verify the required parameter 'infra_security_config' is set
      if @api_client.config.client_side_validation && infra_security_config.nil?
        fail ArgumentError, "Missing the required parameter 'infra_security_config' when calling NetworkingProfilesApi.update_security_global_config"
      end
      # resource path
      local_var_path = '/infra/security-global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra_security_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InfraSecurityConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkingProfilesApi#update_security_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
