=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class ConfigApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get NSX Application Platform deployment configuration
    # Get input parameters required to deploy NSX Application Platform.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [PlatformDeploymentConfig]
    def get_platform_deployment_config(site_id, opts = {})
      data, _status_code, _headers = get_platform_deployment_config_with_http_info(site_id, opts)
      data
    end

    # Get NSX Application Platform deployment configuration
    # Get input parameters required to deploy NSX Application Platform.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlatformDeploymentConfig, Fixnum, Hash)>] PlatformDeploymentConfig data, response status code and response headers
    def get_platform_deployment_config_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigApi.get_platform_deployment_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ConfigApi.get_platform_deployment_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/platform'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PlatformDeploymentConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigApi#get_platform_deployment_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get upgrade coordinator deployment configuration
    # Get input parameters required to deploy upgrade-coordinator.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [UpgradeCoordinatorDeploymentConfig]
    def get_upgrade_coordinator_deployment_config(site_id, opts = {})
      data, _status_code, _headers = get_upgrade_coordinator_deployment_config_with_http_info(site_id, opts)
      data
    end

    # Get upgrade coordinator deployment configuration
    # Get input parameters required to deploy upgrade-coordinator.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeCoordinatorDeploymentConfig, Fixnum, Hash)>] UpgradeCoordinatorDeploymentConfig data, response status code and response headers
    def get_upgrade_coordinator_deployment_config_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigApi.get_upgrade_coordinator_deployment_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ConfigApi.get_upgrade_coordinator_deployment_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/upgrade-coordinator'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeCoordinatorDeploymentConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigApi#get_upgrade_coordinator_deployment_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update platform configuration
    # Update input parameters required to deploy platform related pods. The UI has option to deploy kubernetes tools. You need to get this file from VMware website. File contains kubectl binary, helm binary and signature to verify them. 
    # @param site_id 
    # @param platform_deployment_config 
    # @param [Hash] opts the optional parameters
    # @return [PlatformDeploymentConfig]
    def update_platform_deployment_config(site_id, platform_deployment_config, opts = {})
      data, _status_code, _headers = update_platform_deployment_config_with_http_info(site_id, platform_deployment_config, opts)
      data
    end

    # Update platform configuration
    # Update input parameters required to deploy platform related pods. The UI has option to deploy kubernetes tools. You need to get this file from VMware website. File contains kubectl binary, helm binary and signature to verify them. 
    # @param site_id 
    # @param platform_deployment_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlatformDeploymentConfig, Fixnum, Hash)>] PlatformDeploymentConfig data, response status code and response headers
    def update_platform_deployment_config_with_http_info(site_id, platform_deployment_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigApi.update_platform_deployment_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ConfigApi.update_platform_deployment_config"
      end
      # verify the required parameter 'platform_deployment_config' is set
      if @api_client.config.client_side_validation && platform_deployment_config.nil?
        fail ArgumentError, "Missing the required parameter 'platform_deployment_config' when calling ConfigApi.update_platform_deployment_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/platform'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(platform_deployment_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PlatformDeploymentConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigApi#update_platform_deployment_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update upgrade-coordinator configuration
    # Update input parameter require to deploy upgrade-coordinator related pods. Advanced configuraion option on UI has option to deploy kubernetes tools. You need to get this file from VMware website. File contains kubectl binary, helm binary and signature to verify them. 
    # @param site_id 
    # @param upgrade_coordinator_deployment_config 
    # @param [Hash] opts the optional parameters
    # @return [UpgradeCoordinatorDeploymentConfig]
    def update_upgrade_coordinator_deployment_config(site_id, upgrade_coordinator_deployment_config, opts = {})
      data, _status_code, _headers = update_upgrade_coordinator_deployment_config_with_http_info(site_id, upgrade_coordinator_deployment_config, opts)
      data
    end

    # Update upgrade-coordinator configuration
    # Update input parameter require to deploy upgrade-coordinator related pods. Advanced configuraion option on UI has option to deploy kubernetes tools. You need to get this file from VMware website. File contains kubectl binary, helm binary and signature to verify them. 
    # @param site_id 
    # @param upgrade_coordinator_deployment_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeCoordinatorDeploymentConfig, Fixnum, Hash)>] UpgradeCoordinatorDeploymentConfig data, response status code and response headers
    def update_upgrade_coordinator_deployment_config_with_http_info(site_id, upgrade_coordinator_deployment_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigApi.update_upgrade_coordinator_deployment_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ConfigApi.update_upgrade_coordinator_deployment_config"
      end
      # verify the required parameter 'upgrade_coordinator_deployment_config' is set
      if @api_client.config.client_side_validation && upgrade_coordinator_deployment_config.nil?
        fail ArgumentError, "Missing the required parameter 'upgrade_coordinator_deployment_config' when calling ConfigApi.update_upgrade_coordinator_deployment_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/upgrade-coordinator'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(upgrade_coordinator_deployment_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeCoordinatorDeploymentConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigApi#update_upgrade_coordinator_deployment_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
