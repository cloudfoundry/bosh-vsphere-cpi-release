=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class LimitApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update limit
    # API to create or update a limit definition. If the object with the ID already exists, it will be updated. 
    # @param limit_id 
    # @param limit 
    # @param [Hash] opts the optional parameters
    # @return [Limit]
    def create_or_update_limit(limit_id, limit, opts = {})
      data, _status_code, _headers = create_or_update_limit_with_http_info(limit_id, limit, opts)
      data
    end

    # Create or update limit
    # API to create or update a limit definition. If the object with the ID already exists, it will be updated. 
    # @param limit_id 
    # @param limit 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Limit, Fixnum, Hash)>] Limit data, response status code and response headers
    def create_or_update_limit_with_http_info(limit_id, limit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LimitApi.create_or_update_limit ...'
      end
      # verify the required parameter 'limit_id' is set
      if @api_client.config.client_side_validation && limit_id.nil?
        fail ArgumentError, "Missing the required parameter 'limit_id' when calling LimitApi.create_or_update_limit"
      end
      # verify the required parameter 'limit' is set
      if @api_client.config.client_side_validation && limit.nil?
        fail ArgumentError, "Missing the required parameter 'limit' when calling LimitApi.create_or_update_limit"
      end
      # resource path
      local_var_path = '/infra/limits/{limit-id}'.sub('{' + 'limit-id' + '}', limit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(limit)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Limit')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LimitApi#create_or_update_limit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete limit definition
    # Deletes a limit definition with id limit-id. 
    # @param limit_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_limit(limit_id, opts = {})
      delete_limit_with_http_info(limit_id, opts)
      nil
    end

    # Delete limit definition
    # Deletes a limit definition with id limit-id. 
    # @param limit_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_limit_with_http_info(limit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LimitApi.delete_limit ...'
      end
      # verify the required parameter 'limit_id' is set
      if @api_client.config.client_side_validation && limit_id.nil?
        fail ArgumentError, "Missing the required parameter 'limit_id' when calling LimitApi.delete_limit"
      end
      # resource path
      local_var_path = '/infra/limits/{limit-id}'.sub('{' + 'limit-id' + '}', limit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LimitApi#delete_limit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get details of a limit definition
    # Returns details of a limit definition for a valid limit-id. A limit definition will have different types of limits that will be applied to policies at the time of their creation. 
    # @param limit_id 
    # @param [Hash] opts the optional parameters
    # @return [Limit]
    def get_limit(limit_id, opts = {})
      data, _status_code, _headers = get_limit_with_http_info(limit_id, opts)
      data
    end

    # Get details of a limit definition
    # Returns details of a limit definition for a valid limit-id. A limit definition will have different types of limits that will be applied to policies at the time of their creation. 
    # @param limit_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Limit, Fixnum, Hash)>] Limit data, response status code and response headers
    def get_limit_with_http_info(limit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LimitApi.get_limit ...'
      end
      # verify the required parameter 'limit_id' is set
      if @api_client.config.client_side_validation && limit_id.nil?
        fail ArgumentError, "Missing the required parameter 'limit_id' when calling LimitApi.get_limit"
      end
      # resource path
      local_var_path = '/infra/limits/{limit-id}'.sub('{' + 'limit-id' + '}', limit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Limit')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LimitApi#get_limit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get consumption details and other operational state for a limit
    # This API returns the consumption and other operational state for a limit. For example, in case of IPBlock quota limits, it returns the quota defined at the user role, how much of that limit is currently consumed, and its consumers. 
    # @param limit_id 
    # @param [Hash] opts the optional parameters
    # @return [LimitState]
    def get_limit_state(limit_id, opts = {})
      data, _status_code, _headers = get_limit_state_with_http_info(limit_id, opts)
      data
    end

    # Get consumption details and other operational state for a limit
    # This API returns the consumption and other operational state for a limit. For example, in case of IPBlock quota limits, it returns the quota defined at the user role, how much of that limit is currently consumed, and its consumers. 
    # @param limit_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LimitState, Fixnum, Hash)>] LimitState data, response status code and response headers
    def get_limit_state_with_http_info(limit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LimitApi.get_limit_state ...'
      end
      # verify the required parameter 'limit_id' is set
      if @api_client.config.client_side_validation && limit_id.nil?
        fail ArgumentError, "Missing the required parameter 'limit_id' when calling LimitApi.get_limit_state"
      end
      # resource path
      local_var_path = '/infra/limits/{limit-id}/state'.sub('{' + 'limit-id' + '}', limit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LimitState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LimitApi#get_limit_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get consumption details and other operational state for limits
    # This API returns the consumption and other operational state for limits. For example, in case of IPBlock quota limits, it returns all the quotas defined at the user role and how much of that limit is currently consumed, and its consumers. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LimitStateListResult]
    def get_limits_state(opts = {})
      data, _status_code, _headers = get_limits_state_with_http_info(opts)
      data
    end

    # Get consumption details and other operational state for limits
    # This API returns the consumption and other operational state for limits. For example, in case of IPBlock quota limits, it returns all the quotas defined at the user role and how much of that limit is currently consumed, and its consumers. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LimitStateListResult, Fixnum, Hash)>] LimitStateListResult data, response status code and response headers
    def get_limits_state_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LimitApi.get_limits_state ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LimitApi.get_limits_state, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LimitApi.get_limits_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/limits/state'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LimitStateListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LimitApi#get_limits_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get consumption details and other operational state for limits for a VPC
    # This API returns the consumption and other operational state for limits. For example, in case of IPBlock quota limits, it returns the quotas applied on a VPC and how much quota is consumed. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [LimitStateListResult]
    def get_limits_state_for_vpc(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_limits_state_for_vpc_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get consumption details and other operational state for limits for a VPC
    # This API returns the consumption and other operational state for limits. For example, in case of IPBlock quota limits, it returns the quotas applied on a VPC and how much quota is consumed. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LimitStateListResult, Fixnum, Hash)>] LimitStateListResult data, response status code and response headers
    def get_limits_state_for_vpc_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LimitApi.get_limits_state_for_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LimitApi.get_limits_state_for_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LimitApi.get_limits_state_for_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LimitApi.get_limits_state_for_vpc"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/limits/state'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LimitStateListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LimitApi#get_limits_state_for_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all limit definitions
    # Returns a paginated list of all the existing limit definitions 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LimitListResult]
    def list_limits(opts = {})
      data, _status_code, _headers = list_limits_with_http_info(opts)
      data
    end

    # List all limit definitions
    # Returns a paginated list of all the existing limit definitions 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LimitListResult, Fixnum, Hash)>] LimitListResult data, response status code and response headers
    def list_limits_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LimitApi.list_limits ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LimitApi.list_limits, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LimitApi.list_limits, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/limits'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LimitListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LimitApi#list_limits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get consumption details and another operational state for limits for VPCs within a project
    # This API returns the consumption and other operational state for limits. For example, in case of IPBlock quota limits, it returns the quotas applied and how much quota is consumed. The response will contain a collection of such consumption information for all VPCs within a project 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LimitStateListResultForVpcs]
    def list_limits_state_for_vpcs(org_id, project_id, opts = {})
      data, _status_code, _headers = list_limits_state_for_vpcs_with_http_info(org_id, project_id, opts)
      data
    end

    # Get consumption details and another operational state for limits for VPCs within a project
    # This API returns the consumption and other operational state for limits. For example, in case of IPBlock quota limits, it returns the quotas applied and how much quota is consumed. The response will contain a collection of such consumption information for all VPCs within a project 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LimitStateListResultForVpcs, Fixnum, Hash)>] LimitStateListResultForVpcs data, response status code and response headers
    def list_limits_state_for_vpcs_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LimitApi.list_limits_state_for_vpcs ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LimitApi.list_limits_state_for_vpcs"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LimitApi.list_limits_state_for_vpcs"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LimitApi.list_limits_state_for_vpcs, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LimitApi.list_limits_state_for_vpcs, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/limits/state'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LimitStateListResultForVpcs')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LimitApi#list_limits_state_for_vpcs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update limit
    # API to create or update a limit definition. If the object with the ID already exists, it will be updated. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param limit_id 
    # @param limit 
    # @param [Hash] opts the optional parameters
    # @return [Limit]
    def orgs_org_id_projects_project_id_infra_create_or_update_limit(org_id, project_id, limit_id, limit, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_limit_with_http_info(org_id, project_id, limit_id, limit, opts)
      data
    end

    # Create or update limit
    # API to create or update a limit definition. If the object with the ID already exists, it will be updated. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param limit_id 
    # @param limit 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Limit, Fixnum, Hash)>] Limit data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_limit_with_http_info(org_id, project_id, limit_id, limit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LimitApi.orgs_org_id_projects_project_id_infra_create_or_update_limit ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LimitApi.orgs_org_id_projects_project_id_infra_create_or_update_limit"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LimitApi.orgs_org_id_projects_project_id_infra_create_or_update_limit"
      end
      # verify the required parameter 'limit_id' is set
      if @api_client.config.client_side_validation && limit_id.nil?
        fail ArgumentError, "Missing the required parameter 'limit_id' when calling LimitApi.orgs_org_id_projects_project_id_infra_create_or_update_limit"
      end
      # verify the required parameter 'limit' is set
      if @api_client.config.client_side_validation && limit.nil?
        fail ArgumentError, "Missing the required parameter 'limit' when calling LimitApi.orgs_org_id_projects_project_id_infra_create_or_update_limit"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/limits/{limit-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'limit-id' + '}', limit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(limit)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Limit')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LimitApi#orgs_org_id_projects_project_id_infra_create_or_update_limit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete limit definition
    # Deletes a limit definition with id limit-id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param limit_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_limit(org_id, project_id, limit_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_limit_with_http_info(org_id, project_id, limit_id, opts)
      nil
    end

    # Delete limit definition
    # Deletes a limit definition with id limit-id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param limit_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_limit_with_http_info(org_id, project_id, limit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LimitApi.orgs_org_id_projects_project_id_infra_delete_limit ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LimitApi.orgs_org_id_projects_project_id_infra_delete_limit"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LimitApi.orgs_org_id_projects_project_id_infra_delete_limit"
      end
      # verify the required parameter 'limit_id' is set
      if @api_client.config.client_side_validation && limit_id.nil?
        fail ArgumentError, "Missing the required parameter 'limit_id' when calling LimitApi.orgs_org_id_projects_project_id_infra_delete_limit"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/limits/{limit-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'limit-id' + '}', limit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LimitApi#orgs_org_id_projects_project_id_infra_delete_limit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get details of a limit definition
    # Returns details of a limit definition for a valid limit-id. A limit definition will have different types of limits that will be applied to policies at the time of their creation. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param limit_id 
    # @param [Hash] opts the optional parameters
    # @return [Limit]
    def orgs_org_id_projects_project_id_infra_get_limit(org_id, project_id, limit_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_limit_with_http_info(org_id, project_id, limit_id, opts)
      data
    end

    # Get details of a limit definition
    # Returns details of a limit definition for a valid limit-id. A limit definition will have different types of limits that will be applied to policies at the time of their creation. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param limit_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Limit, Fixnum, Hash)>] Limit data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_limit_with_http_info(org_id, project_id, limit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LimitApi.orgs_org_id_projects_project_id_infra_get_limit ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LimitApi.orgs_org_id_projects_project_id_infra_get_limit"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LimitApi.orgs_org_id_projects_project_id_infra_get_limit"
      end
      # verify the required parameter 'limit_id' is set
      if @api_client.config.client_side_validation && limit_id.nil?
        fail ArgumentError, "Missing the required parameter 'limit_id' when calling LimitApi.orgs_org_id_projects_project_id_infra_get_limit"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/limits/{limit-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'limit-id' + '}', limit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Limit')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LimitApi#orgs_org_id_projects_project_id_infra_get_limit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get consumption details and other operational state for a limit
    # This API returns the consumption and other operational state for a limit. For example, in case of IPBlock quota limits, it returns the quota defined at the user role, how much of that limit is currently consumed, and its consumers. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param limit_id 
    # @param [Hash] opts the optional parameters
    # @return [LimitState]
    def orgs_org_id_projects_project_id_infra_get_limit_state(org_id, project_id, limit_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_limit_state_with_http_info(org_id, project_id, limit_id, opts)
      data
    end

    # Get consumption details and other operational state for a limit
    # This API returns the consumption and other operational state for a limit. For example, in case of IPBlock quota limits, it returns the quota defined at the user role, how much of that limit is currently consumed, and its consumers. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param limit_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LimitState, Fixnum, Hash)>] LimitState data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_limit_state_with_http_info(org_id, project_id, limit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LimitApi.orgs_org_id_projects_project_id_infra_get_limit_state ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LimitApi.orgs_org_id_projects_project_id_infra_get_limit_state"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LimitApi.orgs_org_id_projects_project_id_infra_get_limit_state"
      end
      # verify the required parameter 'limit_id' is set
      if @api_client.config.client_side_validation && limit_id.nil?
        fail ArgumentError, "Missing the required parameter 'limit_id' when calling LimitApi.orgs_org_id_projects_project_id_infra_get_limit_state"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/limits/{limit-id}/state'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'limit-id' + '}', limit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LimitState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LimitApi#orgs_org_id_projects_project_id_infra_get_limit_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get consumption details and other operational state for limits
    # This API returns the consumption and other operational state for limits. For example, in case of IPBlock quota limits, it returns all the quotas defined at the user role and how much of that limit is currently consumed, and its consumers. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LimitStateListResult]
    def orgs_org_id_projects_project_id_infra_get_limits_state(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_limits_state_with_http_info(org_id, project_id, opts)
      data
    end

    # Get consumption details and other operational state for limits
    # This API returns the consumption and other operational state for limits. For example, in case of IPBlock quota limits, it returns all the quotas defined at the user role and how much of that limit is currently consumed, and its consumers. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LimitStateListResult, Fixnum, Hash)>] LimitStateListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_limits_state_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LimitApi.orgs_org_id_projects_project_id_infra_get_limits_state ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LimitApi.orgs_org_id_projects_project_id_infra_get_limits_state"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LimitApi.orgs_org_id_projects_project_id_infra_get_limits_state"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LimitApi.orgs_org_id_projects_project_id_infra_get_limits_state, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LimitApi.orgs_org_id_projects_project_id_infra_get_limits_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/limits/state'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LimitStateListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LimitApi#orgs_org_id_projects_project_id_infra_get_limits_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all limit definitions
    # Returns a paginated list of all the existing limit definitions 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LimitListResult]
    def orgs_org_id_projects_project_id_infra_list_limits(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_limits_with_http_info(org_id, project_id, opts)
      data
    end

    # List all limit definitions
    # Returns a paginated list of all the existing limit definitions 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LimitListResult, Fixnum, Hash)>] LimitListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_limits_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LimitApi.orgs_org_id_projects_project_id_infra_list_limits ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LimitApi.orgs_org_id_projects_project_id_infra_list_limits"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LimitApi.orgs_org_id_projects_project_id_infra_list_limits"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LimitApi.orgs_org_id_projects_project_id_infra_list_limits, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LimitApi.orgs_org_id_projects_project_id_infra_list_limits, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/limits'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LimitListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LimitApi#orgs_org_id_projects_project_id_infra_list_limits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update limit
    # API to create or update a limit definition.  If the limit with the limit-id already exists, it will be updated. If the limit-id doesn't exist then it creates a new limit object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param limit_id 
    # @param limit 
    # @param [Hash] opts the optional parameters
    # @return [Limit]
    def orgs_org_id_projects_project_id_infra_update_limit(org_id, project_id, limit_id, limit, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_limit_with_http_info(org_id, project_id, limit_id, limit, opts)
      data
    end

    # Create or Update limit
    # API to create or update a limit definition.  If the limit with the limit-id already exists, it will be updated. If the limit-id doesn&#39;t exist then it creates a new limit object. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param limit_id 
    # @param limit 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Limit, Fixnum, Hash)>] Limit data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_limit_with_http_info(org_id, project_id, limit_id, limit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LimitApi.orgs_org_id_projects_project_id_infra_update_limit ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LimitApi.orgs_org_id_projects_project_id_infra_update_limit"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LimitApi.orgs_org_id_projects_project_id_infra_update_limit"
      end
      # verify the required parameter 'limit_id' is set
      if @api_client.config.client_side_validation && limit_id.nil?
        fail ArgumentError, "Missing the required parameter 'limit_id' when calling LimitApi.orgs_org_id_projects_project_id_infra_update_limit"
      end
      # verify the required parameter 'limit' is set
      if @api_client.config.client_side_validation && limit.nil?
        fail ArgumentError, "Missing the required parameter 'limit' when calling LimitApi.orgs_org_id_projects_project_id_infra_update_limit"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/limits/{limit-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'limit-id' + '}', limit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(limit)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Limit')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LimitApi#orgs_org_id_projects_project_id_infra_update_limit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update limit
    # API to create or update a limit definition.  If the limit with the limit-id already exists, it will be updated. If the limit-id doesn't exist then it creates a new limit object. 
    # @param limit_id 
    # @param limit 
    # @param [Hash] opts the optional parameters
    # @return [Limit]
    def update_limit(limit_id, limit, opts = {})
      data, _status_code, _headers = update_limit_with_http_info(limit_id, limit, opts)
      data
    end

    # Create or Update limit
    # API to create or update a limit definition.  If the limit with the limit-id already exists, it will be updated. If the limit-id doesn&#39;t exist then it creates a new limit object. 
    # @param limit_id 
    # @param limit 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Limit, Fixnum, Hash)>] Limit data, response status code and response headers
    def update_limit_with_http_info(limit_id, limit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LimitApi.update_limit ...'
      end
      # verify the required parameter 'limit_id' is set
      if @api_client.config.client_side_validation && limit_id.nil?
        fail ArgumentError, "Missing the required parameter 'limit_id' when calling LimitApi.update_limit"
      end
      # verify the required parameter 'limit' is set
      if @api_client.config.client_side_validation && limit.nil?
        fail ArgumentError, "Missing the required parameter 'limit' when calling LimitApi.update_limit"
      end
      # resource path
      local_var_path = '/infra/limits/{limit-id}'.sub('{' + 'limit-id' + '}', limit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(limit)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Limit')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LimitApi#update_limit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
