=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class DeploymentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Deploy and register a Avi Load Balancer Controller node
    # Deploys a Avi Load Balancer Controller node as specified by the deployment config. 
    # @param add_alb_controller_node_vm_info 
    # @param [Hash] opts the optional parameters
    # @return [ALBControllerNodeVMDeploymentRequestList]
    def add_alb_controller_node_vm(add_alb_controller_node_vm_info, opts = {})
      data, _status_code, _headers = add_alb_controller_node_vm_with_http_info(add_alb_controller_node_vm_info, opts)
      data
    end

    # Deploy and register a Avi Load Balancer Controller node
    # Deploys a Avi Load Balancer Controller node as specified by the deployment config. 
    # @param add_alb_controller_node_vm_info 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ALBControllerNodeVMDeploymentRequestList, Fixnum, Hash)>] ALBControllerNodeVMDeploymentRequestList data, response status code and response headers
    def add_alb_controller_node_vm_with_http_info(add_alb_controller_node_vm_info, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeploymentsApi.add_alb_controller_node_vm ...'
      end
      # verify the required parameter 'add_alb_controller_node_vm_info' is set
      if @api_client.config.client_side_validation && add_alb_controller_node_vm_info.nil?
        fail ArgumentError, "Missing the required parameter 'add_alb_controller_node_vm_info' when calling DeploymentsApi.add_alb_controller_node_vm"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/deployments'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(add_alb_controller_node_vm_info)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerNodeVMDeploymentRequestList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeploymentsApi#add_alb_controller_node_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Attempt to delete an auto-deployed Avi Load Balancer Controller node
    # Attempts to unregister and undeploy a specified auto-deployed cluster node. If it is a member of a cluster, then the node will be automatically detached from the cluster before being unregistered and undeployed. Alternatively, if the original deployment attempt failed or the node is not found, cleans up the deployment information associated with the deployment attempt. Note: If a node has been successfully auto-deployed, then the associated deployment information will not be deleted unless and until the node is successfully deleted. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force_delete Delete by force
    # @option opts [String] :inaccessible Delete when controller is inaccessible
    # @return [nil]
    def delete_auto_deployed_alb_controller_node_vm(node_id, opts = {})
      delete_auto_deployed_alb_controller_node_vm_with_http_info(node_id, opts)
      nil
    end

    # Attempt to delete an auto-deployed Avi Load Balancer Controller node
    # Attempts to unregister and undeploy a specified auto-deployed cluster node. If it is a member of a cluster, then the node will be automatically detached from the cluster before being unregistered and undeployed. Alternatively, if the original deployment attempt failed or the node is not found, cleans up the deployment information associated with the deployment attempt. Note: If a node has been successfully auto-deployed, then the associated deployment information will not be deleted unless and until the node is successfully deleted. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force_delete Delete by force
    # @option opts [String] :inaccessible Delete when controller is inaccessible
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_auto_deployed_alb_controller_node_vm_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeploymentsApi.delete_auto_deployed_alb_controller_node_vm ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling DeploymentsApi.delete_auto_deployed_alb_controller_node_vm"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/deployments/{node-id}?action=delete'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force_delete'] = opts[:'force_delete'] if !opts[:'force_delete'].nil?
      query_params[:'inaccessible'] = opts[:'inaccessible'] if !opts[:'inaccessible'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeploymentsApi#delete_auto_deployed_alb_controller_node_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns info for all Avi Load Balancer cluster node auto-deployment attempts
    # Returns request information for every attempted deployment of a Avi Load Balancer cluster node. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @option opts [String] :state The current state of the Avi Load Balancer Controller node deployment
    # @return [ALBControllerNodeVMDeploymentRequestList]
    def list_alb_controller_node_vm_deployment_requests(opts = {})
      data, _status_code, _headers = list_alb_controller_node_vm_deployment_requests_with_http_info(opts)
      data
    end

    # Returns info for all Avi Load Balancer cluster node auto-deployment attempts
    # Returns request information for every attempted deployment of a Avi Load Balancer cluster node. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @option opts [String] :state The current state of the Avi Load Balancer Controller node deployment
    # @return [Array<(ALBControllerNodeVMDeploymentRequestList, Fixnum, Hash)>] ALBControllerNodeVMDeploymentRequestList data, response status code and response headers
    def list_alb_controller_node_vm_deployment_requests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeploymentsApi.list_alb_controller_node_vm_deployment_requests ...'
      end
      if @api_client.config.client_side_validation && opts[:'state'] && !['DEPLOYED', 'PENDING'].include?(opts[:'state'])
        fail ArgumentError, 'invalid value for "state", must be one of DEPLOYED, PENDING'
      end
      # resource path
      local_var_path = '/alb/controller-nodes/deployments'

      # query parameters
      query_params = {}
      query_params[:'clustering_id'] = opts[:'clustering_id'] if !opts[:'clustering_id'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerNodeVMDeploymentRequestList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeploymentsApi#list_alb_controller_node_vm_deployment_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns info for a Avi Load Balancer Controller deployment attempt
    # Returns deployment request information for a specific attempted deployment of a cluster node. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [ALBControllerNodeVMDeploymentRequest]
    def read_alb_controller_node_vm_deployment_request(node_id, opts = {})
      data, _status_code, _headers = read_alb_controller_node_vm_deployment_request_with_http_info(node_id, opts)
      data
    end

    # Returns info for a Avi Load Balancer Controller deployment attempt
    # Returns deployment request information for a specific attempted deployment of a cluster node. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ALBControllerNodeVMDeploymentRequest, Fixnum, Hash)>] ALBControllerNodeVMDeploymentRequest data, response status code and response headers
    def read_alb_controller_node_vm_deployment_request_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeploymentsApi.read_alb_controller_node_vm_deployment_request ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling DeploymentsApi.read_alb_controller_node_vm_deployment_request"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/deployments/{node-id}'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerNodeVMDeploymentRequest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeploymentsApi#read_alb_controller_node_vm_deployment_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the status of the node creation/deletion
    # Returns the current deployment or undeployment status for a node along with any other relevant current information, such as error messages. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [ALBControllerNodeVMDeploymentStatusReport]
    def read_alb_controller_node_vm_deployment_status(node_id, opts = {})
      data, _status_code, _headers = read_alb_controller_node_vm_deployment_status_with_http_info(node_id, opts)
      data
    end

    # Returns the status of the node creation/deletion
    # Returns the current deployment or undeployment status for a node along with any other relevant current information, such as error messages. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ALBControllerNodeVMDeploymentStatusReport, Fixnum, Hash)>] ALBControllerNodeVMDeploymentStatusReport data, response status code and response headers
    def read_alb_controller_node_vm_deployment_status_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeploymentsApi.read_alb_controller_node_vm_deployment_status ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling DeploymentsApi.read_alb_controller_node_vm_deployment_status"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/deployments/{node-id}/status'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerNodeVMDeploymentStatusReport')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeploymentsApi#read_alb_controller_node_vm_deployment_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Avi Load Balancer Controller cluster node. Only updating password, ntp and dns servers are supported. If controller is in a cluster then all nodes in the cluster are updated with the provided values
    # Update Avi Load Balancer Controller node details 
    # @param node_id 
    # @param alb_controller_node_vm_deployment_request 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :running_config Update Avi Load Balancer Controller runtime config as well
    # @return [ALBControllerNodeVMDeploymentRequest]
    def update_alb_controller_node_vm_deployment_request(node_id, alb_controller_node_vm_deployment_request, opts = {})
      data, _status_code, _headers = update_alb_controller_node_vm_deployment_request_with_http_info(node_id, alb_controller_node_vm_deployment_request, opts)
      data
    end

    # Update a Avi Load Balancer Controller cluster node. Only updating password, ntp and dns servers are supported. If controller is in a cluster then all nodes in the cluster are updated with the provided values
    # Update Avi Load Balancer Controller node details 
    # @param node_id 
    # @param alb_controller_node_vm_deployment_request 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :running_config Update Avi Load Balancer Controller runtime config as well
    # @return [Array<(ALBControllerNodeVMDeploymentRequest, Fixnum, Hash)>] ALBControllerNodeVMDeploymentRequest data, response status code and response headers
    def update_alb_controller_node_vm_deployment_request_with_http_info(node_id, alb_controller_node_vm_deployment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeploymentsApi.update_alb_controller_node_vm_deployment_request ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling DeploymentsApi.update_alb_controller_node_vm_deployment_request"
      end
      # verify the required parameter 'alb_controller_node_vm_deployment_request' is set
      if @api_client.config.client_side_validation && alb_controller_node_vm_deployment_request.nil?
        fail ArgumentError, "Missing the required parameter 'alb_controller_node_vm_deployment_request' when calling DeploymentsApi.update_alb_controller_node_vm_deployment_request"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/deployments/{node-id}'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'running_config'] = opts[:'running_config'] if !opts[:'running_config'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(alb_controller_node_vm_deployment_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerNodeVMDeploymentRequest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeploymentsApi#update_alb_controller_node_vm_deployment_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
