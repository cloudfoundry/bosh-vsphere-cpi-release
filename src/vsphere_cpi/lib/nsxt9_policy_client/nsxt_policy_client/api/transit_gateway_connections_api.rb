=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class TransitGatewayConnectionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update distributed vlan connection
    # If a distributed vlan connection is not already present, create a new distributed vlan connection. If it already exists, update the distributed vlan connection. This operation will fully replace the object. 
    # @param distributed_vlan_connection_id 
    # @param distributed_vlan_connection 
    # @param [Hash] opts the optional parameters
    # @return [DistributedVlanConnection]
    def create_or_replace_distributed_vlan_connection(distributed_vlan_connection_id, distributed_vlan_connection, opts = {})
      data, _status_code, _headers = create_or_replace_distributed_vlan_connection_with_http_info(distributed_vlan_connection_id, distributed_vlan_connection, opts)
      data
    end

    # Create or update distributed vlan connection
    # If a distributed vlan connection is not already present, create a new distributed vlan connection. If it already exists, update the distributed vlan connection. This operation will fully replace the object. 
    # @param distributed_vlan_connection_id 
    # @param distributed_vlan_connection 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DistributedVlanConnection, Fixnum, Hash)>] DistributedVlanConnection data, response status code and response headers
    def create_or_replace_distributed_vlan_connection_with_http_info(distributed_vlan_connection_id, distributed_vlan_connection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayConnectionsApi.create_or_replace_distributed_vlan_connection ...'
      end
      # verify the required parameter 'distributed_vlan_connection_id' is set
      if @api_client.config.client_side_validation && distributed_vlan_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'distributed_vlan_connection_id' when calling TransitGatewayConnectionsApi.create_or_replace_distributed_vlan_connection"
      end
      # verify the required parameter 'distributed_vlan_connection' is set
      if @api_client.config.client_side_validation && distributed_vlan_connection.nil?
        fail ArgumentError, "Missing the required parameter 'distributed_vlan_connection' when calling TransitGatewayConnectionsApi.create_or_replace_distributed_vlan_connection"
      end
      # resource path
      local_var_path = '/infra/distributed-vlan-connections/{distributed-vlan-connection-id}'.sub('{' + 'distributed-vlan-connection-id' + '}', distributed_vlan_connection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(distributed_vlan_connection)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DistributedVlanConnection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayConnectionsApi#create_or_replace_distributed_vlan_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a gateway connection
    # If a gateway connection is not already present, create a new gateway connection . If it already exists, update the gateway connection. This operation will fully replace the object. 
    # @param gateway_connection_id 
    # @param gateway_connection 
    # @param [Hash] opts the optional parameters
    # @return [GatewayConnection]
    def create_or_replace_gateway_connection(gateway_connection_id, gateway_connection, opts = {})
      data, _status_code, _headers = create_or_replace_gateway_connection_with_http_info(gateway_connection_id, gateway_connection, opts)
      data
    end

    # Create or update a gateway connection
    # If a gateway connection is not already present, create a new gateway connection . If it already exists, update the gateway connection. This operation will fully replace the object. 
    # @param gateway_connection_id 
    # @param gateway_connection 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayConnection, Fixnum, Hash)>] GatewayConnection data, response status code and response headers
    def create_or_replace_gateway_connection_with_http_info(gateway_connection_id, gateway_connection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayConnectionsApi.create_or_replace_gateway_connection ...'
      end
      # verify the required parameter 'gateway_connection_id' is set
      if @api_client.config.client_side_validation && gateway_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_connection_id' when calling TransitGatewayConnectionsApi.create_or_replace_gateway_connection"
      end
      # verify the required parameter 'gateway_connection' is set
      if @api_client.config.client_side_validation && gateway_connection.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_connection' when calling TransitGatewayConnectionsApi.create_or_replace_gateway_connection"
      end
      # resource path
      local_var_path = '/infra/gateway-connections/{gateway-connection-id}'.sub('{' + 'gateway-connection-id' + '}', gateway_connection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_connection)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayConnection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayConnectionsApi#create_or_replace_gateway_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a distributed vlan connection
    # Delete a distributed vlan connection 
    # @param distributed_vlan_connection_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_distributed_vlan_connection(distributed_vlan_connection_id, opts = {})
      delete_distributed_vlan_connection_with_http_info(distributed_vlan_connection_id, opts)
      nil
    end

    # Delete a distributed vlan connection
    # Delete a distributed vlan connection 
    # @param distributed_vlan_connection_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_distributed_vlan_connection_with_http_info(distributed_vlan_connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayConnectionsApi.delete_distributed_vlan_connection ...'
      end
      # verify the required parameter 'distributed_vlan_connection_id' is set
      if @api_client.config.client_side_validation && distributed_vlan_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'distributed_vlan_connection_id' when calling TransitGatewayConnectionsApi.delete_distributed_vlan_connection"
      end
      # resource path
      local_var_path = '/infra/distributed-vlan-connections/{distributed-vlan-connection-id}'.sub('{' + 'distributed-vlan-connection-id' + '}', distributed_vlan_connection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayConnectionsApi#delete_distributed_vlan_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a gateway connection
    # Delete a gateway connection 
    # @param gateway_connection_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_gateway_connection(gateway_connection_id, opts = {})
      delete_gateway_connection_with_http_info(gateway_connection_id, opts)
      nil
    end

    # Delete a gateway connection
    # Delete a gateway connection 
    # @param gateway_connection_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_gateway_connection_with_http_info(gateway_connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayConnectionsApi.delete_gateway_connection ...'
      end
      # verify the required parameter 'gateway_connection_id' is set
      if @api_client.config.client_side_validation && gateway_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_connection_id' when calling TransitGatewayConnectionsApi.delete_gateway_connection"
      end
      # resource path
      local_var_path = '/infra/gateway-connections/{gateway-connection-id}'.sub('{' + 'gateway-connection-id' + '}', gateway_connection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayConnectionsApi#delete_gateway_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List distributed vlan connections
    # List distributed vlan connections 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DistributedVlanConnectionListResult]
    def list_distributed_vlan_connections(opts = {})
      data, _status_code, _headers = list_distributed_vlan_connections_with_http_info(opts)
      data
    end

    # List distributed vlan connections
    # List distributed vlan connections 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DistributedVlanConnectionListResult, Fixnum, Hash)>] DistributedVlanConnectionListResult data, response status code and response headers
    def list_distributed_vlan_connections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayConnectionsApi.list_distributed_vlan_connections ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayConnectionsApi.list_distributed_vlan_connections, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayConnectionsApi.list_distributed_vlan_connections, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/distributed-vlan-connections'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DistributedVlanConnectionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayConnectionsApi#list_distributed_vlan_connections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List gateway connections
    # List gateway connections 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GatewayConnectionListResult]
    def list_gateway_connections(opts = {})
      data, _status_code, _headers = list_gateway_connections_with_http_info(opts)
      data
    end

    # List gateway connections
    # List gateway connections 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GatewayConnectionListResult, Fixnum, Hash)>] GatewayConnectionListResult data, response status code and response headers
    def list_gateway_connections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayConnectionsApi.list_gateway_connections ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayConnectionsApi.list_gateway_connections, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransitGatewayConnectionsApi.list_gateway_connections, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/gateway-connections'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayConnectionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayConnectionsApi#list_gateway_connections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a distributed vlan connection
    # If a distributed vlan connection is not already present, create a new distributed vlan connection . If it already exists, update the distributed vlan connection. 
    # @param distributed_vlan_connection_id 
    # @param distributed_vlan_connection 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_distributed_vlan_connection(distributed_vlan_connection_id, distributed_vlan_connection, opts = {})
      patch_distributed_vlan_connection_with_http_info(distributed_vlan_connection_id, distributed_vlan_connection, opts)
      nil
    end

    # Patch a distributed vlan connection
    # If a distributed vlan connection is not already present, create a new distributed vlan connection . If it already exists, update the distributed vlan connection. 
    # @param distributed_vlan_connection_id 
    # @param distributed_vlan_connection 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_distributed_vlan_connection_with_http_info(distributed_vlan_connection_id, distributed_vlan_connection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayConnectionsApi.patch_distributed_vlan_connection ...'
      end
      # verify the required parameter 'distributed_vlan_connection_id' is set
      if @api_client.config.client_side_validation && distributed_vlan_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'distributed_vlan_connection_id' when calling TransitGatewayConnectionsApi.patch_distributed_vlan_connection"
      end
      # verify the required parameter 'distributed_vlan_connection' is set
      if @api_client.config.client_side_validation && distributed_vlan_connection.nil?
        fail ArgumentError, "Missing the required parameter 'distributed_vlan_connection' when calling TransitGatewayConnectionsApi.patch_distributed_vlan_connection"
      end
      # resource path
      local_var_path = '/infra/distributed-vlan-connections/{distributed-vlan-connection-id}'.sub('{' + 'distributed-vlan-connection-id' + '}', distributed_vlan_connection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(distributed_vlan_connection)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayConnectionsApi#patch_distributed_vlan_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a gateway connection
    # If a gateway connection is not already present, create a new gateway connection . If it already exists, update the gateway connection. 
    # @param gateway_connection_id 
    # @param gateway_connection 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_gateway_connection(gateway_connection_id, gateway_connection, opts = {})
      patch_gateway_connection_with_http_info(gateway_connection_id, gateway_connection, opts)
      nil
    end

    # Patch a gateway connection
    # If a gateway connection is not already present, create a new gateway connection . If it already exists, update the gateway connection. 
    # @param gateway_connection_id 
    # @param gateway_connection 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_gateway_connection_with_http_info(gateway_connection_id, gateway_connection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayConnectionsApi.patch_gateway_connection ...'
      end
      # verify the required parameter 'gateway_connection_id' is set
      if @api_client.config.client_side_validation && gateway_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_connection_id' when calling TransitGatewayConnectionsApi.patch_gateway_connection"
      end
      # verify the required parameter 'gateway_connection' is set
      if @api_client.config.client_side_validation && gateway_connection.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_connection' when calling TransitGatewayConnectionsApi.patch_gateway_connection"
      end
      # resource path
      local_var_path = '/infra/gateway-connections/{gateway-connection-id}'.sub('{' + 'gateway-connection-id' + '}', gateway_connection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_connection)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayConnectionsApi#patch_gateway_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a distributed vlan connection
    # Read a distributed vlan connection. 
    # @param distributed_vlan_connection_id 
    # @param [Hash] opts the optional parameters
    # @return [DistributedVlanConnection]
    def read_distributed_vlan_connection(distributed_vlan_connection_id, opts = {})
      data, _status_code, _headers = read_distributed_vlan_connection_with_http_info(distributed_vlan_connection_id, opts)
      data
    end

    # Read a distributed vlan connection
    # Read a distributed vlan connection. 
    # @param distributed_vlan_connection_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DistributedVlanConnection, Fixnum, Hash)>] DistributedVlanConnection data, response status code and response headers
    def read_distributed_vlan_connection_with_http_info(distributed_vlan_connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayConnectionsApi.read_distributed_vlan_connection ...'
      end
      # verify the required parameter 'distributed_vlan_connection_id' is set
      if @api_client.config.client_side_validation && distributed_vlan_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'distributed_vlan_connection_id' when calling TransitGatewayConnectionsApi.read_distributed_vlan_connection"
      end
      # resource path
      local_var_path = '/infra/distributed-vlan-connections/{distributed-vlan-connection-id}'.sub('{' + 'distributed-vlan-connection-id' + '}', distributed_vlan_connection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DistributedVlanConnection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayConnectionsApi#read_distributed_vlan_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a gateway connection
    # Read a gateway connection. 
    # @param gateway_connection_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayConnection]
    def read_gateway_connection(gateway_connection_id, opts = {})
      data, _status_code, _headers = read_gateway_connection_with_http_info(gateway_connection_id, opts)
      data
    end

    # Read a gateway connection
    # Read a gateway connection. 
    # @param gateway_connection_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayConnection, Fixnum, Hash)>] GatewayConnection data, response status code and response headers
    def read_gateway_connection_with_http_info(gateway_connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransitGatewayConnectionsApi.read_gateway_connection ...'
      end
      # verify the required parameter 'gateway_connection_id' is set
      if @api_client.config.client_side_validation && gateway_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_connection_id' when calling TransitGatewayConnectionsApi.read_gateway_connection"
      end
      # resource path
      local_var_path = '/infra/gateway-connections/{gateway-connection-id}'.sub('{' + 'gateway-connection-id' + '}', gateway_connection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayConnection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransitGatewayConnectionsApi#read_gateway_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
