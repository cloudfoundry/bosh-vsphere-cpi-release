=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class HostswitchProfilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update a Hostswitch Profile
    # Create or update a hostswitch profile. The resource_type is required and needs to be one of the following, UplinkHostSwitchProfile, LldpHostSwitchProfile, NiocProfile & ExtraConfigHostSwitchProfile. Uplink profile - For uplink profiles, the teaming and policy parameters are required. By default, the mtu is 1600 and the transport_vlan is 0. The supported MTU range is 1280 through (uplink_mtu_threshold). uplink_mtu_threshold is 9000 by default. Range can be extended by modifying (uplink_mtu_threshold) in SwitchingGlobalConfig to the required upper threshold. Teaming defined in this profile allows NSX to load balance traffic across different physical NICs (PNICs) on the hypervisor hosts. Multiple teaming policies are supported, including LACP active, LACP passive, load balancing based on source ID, and failover order. Lldp profile - Activate or deactivate sending LLDP packets NiocProfile - Network I/O Control settings: defines limits, shares and reservations for various host traffic types. ExtraConfig - Vendor specific configuration on HostSwitch, logical switch or logical port 
    # @param host_switch_profile_id 
    # @param policy_base_host_switch_profile 
    # @param [Hash] opts the optional parameters
    # @return [PolicyBaseHostSwitchProfile]
    def create_or_update_policy_host_switch_profile(host_switch_profile_id, policy_base_host_switch_profile, opts = {})
      data, _status_code, _headers = create_or_update_policy_host_switch_profile_with_http_info(host_switch_profile_id, policy_base_host_switch_profile, opts)
      data
    end

    # Create or update a Hostswitch Profile
    # Create or update a hostswitch profile. The resource_type is required and needs to be one of the following, UplinkHostSwitchProfile, LldpHostSwitchProfile, NiocProfile &amp; ExtraConfigHostSwitchProfile. Uplink profile - For uplink profiles, the teaming and policy parameters are required. By default, the mtu is 1600 and the transport_vlan is 0. The supported MTU range is 1280 through (uplink_mtu_threshold). uplink_mtu_threshold is 9000 by default. Range can be extended by modifying (uplink_mtu_threshold) in SwitchingGlobalConfig to the required upper threshold. Teaming defined in this profile allows NSX to load balance traffic across different physical NICs (PNICs) on the hypervisor hosts. Multiple teaming policies are supported, including LACP active, LACP passive, load balancing based on source ID, and failover order. Lldp profile - Activate or deactivate sending LLDP packets NiocProfile - Network I/O Control settings: defines limits, shares and reservations for various host traffic types. ExtraConfig - Vendor specific configuration on HostSwitch, logical switch or logical port 
    # @param host_switch_profile_id 
    # @param policy_base_host_switch_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyBaseHostSwitchProfile, Fixnum, Hash)>] PolicyBaseHostSwitchProfile data, response status code and response headers
    def create_or_update_policy_host_switch_profile_with_http_info(host_switch_profile_id, policy_base_host_switch_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HostswitchProfilesApi.create_or_update_policy_host_switch_profile ...'
      end
      # verify the required parameter 'host_switch_profile_id' is set
      if @api_client.config.client_side_validation && host_switch_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_switch_profile_id' when calling HostswitchProfilesApi.create_or_update_policy_host_switch_profile"
      end
      # verify the required parameter 'policy_base_host_switch_profile' is set
      if @api_client.config.client_side_validation && policy_base_host_switch_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_base_host_switch_profile' when calling HostswitchProfilesApi.create_or_update_policy_host_switch_profile"
      end
      # resource path
      local_var_path = '/infra/host-switch-profiles/{host-switch-profile-id}'.sub('{' + 'host-switch-profile-id' + '}', host_switch_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_base_host_switch_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyBaseHostSwitchProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HostswitchProfilesApi#create_or_update_policy_host_switch_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Hostswitch Profile
    # Deletes a specified hostswitch profile.
    # @param host_switch_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_host_switch_profile(host_switch_profile_id, opts = {})
      delete_policy_host_switch_profile_with_http_info(host_switch_profile_id, opts)
      nil
    end

    # Delete a Hostswitch Profile
    # Deletes a specified hostswitch profile.
    # @param host_switch_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_host_switch_profile_with_http_info(host_switch_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HostswitchProfilesApi.delete_policy_host_switch_profile ...'
      end
      # verify the required parameter 'host_switch_profile_id' is set
      if @api_client.config.client_side_validation && host_switch_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_switch_profile_id' when calling HostswitchProfilesApi.delete_policy_host_switch_profile"
      end
      # resource path
      local_var_path = '/infra/host-switch-profiles/{host-switch-profile-id}'.sub('{' + 'host-switch-profile-id' + '}', host_switch_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HostswitchProfilesApi#delete_policy_host_switch_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Hostswitch Profile by ID
    # Returns information about a specified hostswitch profile.
    # @param host_switch_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyBaseHostSwitchProfile]
    def get_policy_host_switch_profile(host_switch_profile_id, opts = {})
      data, _status_code, _headers = get_policy_host_switch_profile_with_http_info(host_switch_profile_id, opts)
      data
    end

    # Get a Hostswitch Profile by ID
    # Returns information about a specified hostswitch profile.
    # @param host_switch_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyBaseHostSwitchProfile, Fixnum, Hash)>] PolicyBaseHostSwitchProfile data, response status code and response headers
    def get_policy_host_switch_profile_with_http_info(host_switch_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HostswitchProfilesApi.get_policy_host_switch_profile ...'
      end
      # verify the required parameter 'host_switch_profile_id' is set
      if @api_client.config.client_side_validation && host_switch_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_switch_profile_id' when calling HostswitchProfilesApi.get_policy_host_switch_profile"
      end
      # resource path
      local_var_path = '/infra/host-switch-profiles/{host-switch-profile-id}'.sub('{' + 'host-switch-profile-id' + '}', host_switch_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyBaseHostSwitchProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HostswitchProfilesApi#get_policy_host_switch_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Hostswitch Profiles
    # Returns information about the configured hostswitch profiles. Hostswitch profiles define networking policies for hostswitches (sometimes referred to as bridges in OVS). Currently, following profiles are supported. UplinkHostSwitchProfile, LldpHostSwitchProfile, NiocProfile & ExtraConfigHostSwitchProfile. Uplink profile - teaming defined in this profile allows NSX to load balance traffic across different physical NICs (PNICs) on the hypervisor hosts. Multiple teaming policies are supported, including LACP active, LACP passive, load balancing based on source ID, and failover order. Lldp profile - Activate or deactivate sending LLDP packets NiocProfile - Network I/O Control settings: defines limits, shares and reservations for various host traffic types. ExtraConfig - Vendor specific configuration on HostSwitch, logical switch or logical port 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :deployment_type Supported edge deployment type.
    # @option opts [String] :hostswitch_profile_type Supported HostSwitch profiles.
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_system_owned Whether the list result contains system resources (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :max_active_uplink_count Filter uplink profiles by number of active links in teaming policy.
    # @option opts [String] :node_type Fabric node type for which uplink profiles are to be listed
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :uplink_teaming_policy_name The host switch profile&#39;s uplink teaming policy name
    # @return [PolicyHostSwitchProfilesListResult]
    def list_policy_host_switch_profiles(opts = {})
      data, _status_code, _headers = list_policy_host_switch_profiles_with_http_info(opts)
      data
    end

    # List Hostswitch Profiles
    # Returns information about the configured hostswitch profiles. Hostswitch profiles define networking policies for hostswitches (sometimes referred to as bridges in OVS). Currently, following profiles are supported. UplinkHostSwitchProfile, LldpHostSwitchProfile, NiocProfile &amp; ExtraConfigHostSwitchProfile. Uplink profile - teaming defined in this profile allows NSX to load balance traffic across different physical NICs (PNICs) on the hypervisor hosts. Multiple teaming policies are supported, including LACP active, LACP passive, load balancing based on source ID, and failover order. Lldp profile - Activate or deactivate sending LLDP packets NiocProfile - Network I/O Control settings: defines limits, shares and reservations for various host traffic types. ExtraConfig - Vendor specific configuration on HostSwitch, logical switch or logical port 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :deployment_type Supported edge deployment type.
    # @option opts [String] :hostswitch_profile_type Supported HostSwitch profiles.
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_system_owned Whether the list result contains system resources
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :max_active_uplink_count Filter uplink profiles by number of active links in teaming policy.
    # @option opts [String] :node_type Fabric node type for which uplink profiles are to be listed
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :uplink_teaming_policy_name The host switch profile&#39;s uplink teaming policy name
    # @return [Array<(PolicyHostSwitchProfilesListResult, Fixnum, Hash)>] PolicyHostSwitchProfilesListResult data, response status code and response headers
    def list_policy_host_switch_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HostswitchProfilesApi.list_policy_host_switch_profiles ...'
      end
      if @api_client.config.client_side_validation && opts[:'deployment_type'] && !['VIRTUAL_MACHINE', 'PHYSICAL_MACHINE', 'UNKNOWN'].include?(opts[:'deployment_type'])
        fail ArgumentError, 'invalid value for "deployment_type", must be one of VIRTUAL_MACHINE, PHYSICAL_MACHINE, UNKNOWN'
      end
      if @api_client.config.client_side_validation && opts[:'hostswitch_profile_type'] && !['PolicyUplinkHostSwitchProfile', 'PolicyLldpHostSwitchProfile', 'PolicyNiocProfile', 'PolicyExtraConfigHostSwitchProfile', 'PolicyVtepHAHostSwitchProfile', 'PolicyHighPerformanceHostSwitchProfile'].include?(opts[:'hostswitch_profile_type'])
        fail ArgumentError, 'invalid value for "hostswitch_profile_type", must be one of PolicyUplinkHostSwitchProfile, PolicyLldpHostSwitchProfile, PolicyNiocProfile, PolicyExtraConfigHostSwitchProfile, PolicyVtepHAHostSwitchProfile, PolicyHighPerformanceHostSwitchProfile'
      end
      if @api_client.config.client_side_validation && opts[:'node_type'] && !['EdgeNode', 'PublicCloudGatewayNode'].include?(opts[:'node_type'])
        fail ArgumentError, 'invalid value for "node_type", must be one of EdgeNode, PublicCloudGatewayNode'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling HostswitchProfilesApi.list_policy_host_switch_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling HostswitchProfilesApi.list_policy_host_switch_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/host-switch-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'deployment_type'] = opts[:'deployment_type'] if !opts[:'deployment_type'].nil?
      query_params[:'hostswitch_profile_type'] = opts[:'hostswitch_profile_type'] if !opts[:'hostswitch_profile_type'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_system_owned'] = opts[:'include_system_owned'] if !opts[:'include_system_owned'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'max_active_uplink_count'] = opts[:'max_active_uplink_count'] if !opts[:'max_active_uplink_count'].nil?
      query_params[:'node_type'] = opts[:'node_type'] if !opts[:'node_type'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'uplink_teaming_policy_name'] = opts[:'uplink_teaming_policy_name'] if !opts[:'uplink_teaming_policy_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyHostSwitchProfilesListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HostswitchProfilesApi#list_policy_host_switch_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Hostswitch Profile
    # Patch a hostswitch profile. The resource_type is required and needs to be one of the following, UplinkHostSwitchProfile, LldpHostSwitchProfile, NiocProfile & ExtraConfigHostSwitchProfile. Uplink profile - For uplink profiles, the teaming and policy parameters are required. By default, the mtu is 1600 and the transport_vlan is 0. The supported MTU range is 1280 through (uplink_mtu_threshold). uplink_mtu_threshold is 9000 by default. Range can be extended by modifying (uplink_mtu_threshold) in SwitchingGlobalConfig to the required upper threshold. Teaming defined in this profile allows NSX to load balance traffic across different physical NICs (PNICs) on the hypervisor hosts. Multiple teaming policies are supported, including LACP active, LACP passive, load balancing based on source ID, and failover order. Lldp profile - Activate or deactivate sending LLDP packets NiocProfile - Network I/O Control settings: defines limits, shares and reservations for various host traffic types. ExtraConfig - Vendor specific configuration on HostSwitch, logical switch or logical port 
    # @param host_switch_profile_id 
    # @param policy_base_host_switch_profile 
    # @param [Hash] opts the optional parameters
    # @return [PolicyBaseHostSwitchProfile]
    def patch_policy_host_switch_profile(host_switch_profile_id, policy_base_host_switch_profile, opts = {})
      data, _status_code, _headers = patch_policy_host_switch_profile_with_http_info(host_switch_profile_id, policy_base_host_switch_profile, opts)
      data
    end

    # Create or update a Hostswitch Profile
    # Patch a hostswitch profile. The resource_type is required and needs to be one of the following, UplinkHostSwitchProfile, LldpHostSwitchProfile, NiocProfile &amp; ExtraConfigHostSwitchProfile. Uplink profile - For uplink profiles, the teaming and policy parameters are required. By default, the mtu is 1600 and the transport_vlan is 0. The supported MTU range is 1280 through (uplink_mtu_threshold). uplink_mtu_threshold is 9000 by default. Range can be extended by modifying (uplink_mtu_threshold) in SwitchingGlobalConfig to the required upper threshold. Teaming defined in this profile allows NSX to load balance traffic across different physical NICs (PNICs) on the hypervisor hosts. Multiple teaming policies are supported, including LACP active, LACP passive, load balancing based on source ID, and failover order. Lldp profile - Activate or deactivate sending LLDP packets NiocProfile - Network I/O Control settings: defines limits, shares and reservations for various host traffic types. ExtraConfig - Vendor specific configuration on HostSwitch, logical switch or logical port 
    # @param host_switch_profile_id 
    # @param policy_base_host_switch_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyBaseHostSwitchProfile, Fixnum, Hash)>] PolicyBaseHostSwitchProfile data, response status code and response headers
    def patch_policy_host_switch_profile_with_http_info(host_switch_profile_id, policy_base_host_switch_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HostswitchProfilesApi.patch_policy_host_switch_profile ...'
      end
      # verify the required parameter 'host_switch_profile_id' is set
      if @api_client.config.client_side_validation && host_switch_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_switch_profile_id' when calling HostswitchProfilesApi.patch_policy_host_switch_profile"
      end
      # verify the required parameter 'policy_base_host_switch_profile' is set
      if @api_client.config.client_side_validation && policy_base_host_switch_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_base_host_switch_profile' when calling HostswitchProfilesApi.patch_policy_host_switch_profile"
      end
      # resource path
      local_var_path = '/infra/host-switch-profiles/{host-switch-profile-id}'.sub('{' + 'host-switch-profile-id' + '}', host_switch_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_base_host_switch_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyBaseHostSwitchProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HostswitchProfilesApi#patch_policy_host_switch_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
