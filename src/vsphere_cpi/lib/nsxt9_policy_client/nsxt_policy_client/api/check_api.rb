=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class CheckApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get NSX Application Platform upgrade-coordinator pre/post checks progress status.
    # Get NSX Application Platform upgrade-coordinator pre/post checks progress status.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [DeploymentChecksStatusResult]
    def get_uc_deployment_checks_status(site_id, opts = {})
      data, _status_code, _headers = get_uc_deployment_checks_status_with_http_info(site_id, opts)
      data
    end

    # Get NSX Application Platform upgrade-coordinator pre/post checks progress status.
    # Get NSX Application Platform upgrade-coordinator pre/post checks progress status.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentChecksStatusResult, Fixnum, Hash)>] DeploymentChecksStatusResult data, response status code and response headers
    def get_uc_deployment_checks_status_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckApi.get_uc_deployment_checks_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling CheckApi.get_uc_deployment_checks_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/upgrade-coordinator/checks/status'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentChecksStatusResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckApi#get_uc_deployment_checks_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Run pre/post checks for NSX Application Platform upgrade-coordinator
    # Run pre/post checks for NSX Application Platform upgrade-coordinator. 
    # @param site_id 
    # @param deployment_checks_action 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def run_uc_deployment_checks(site_id, deployment_checks_action, opts = {})
      run_uc_deployment_checks_with_http_info(site_id, deployment_checks_action, opts)
      nil
    end

    # Run pre/post checks for NSX Application Platform upgrade-coordinator
    # Run pre/post checks for NSX Application Platform upgrade-coordinator. 
    # @param site_id 
    # @param deployment_checks_action 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def run_uc_deployment_checks_with_http_info(site_id, deployment_checks_action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckApi.run_uc_deployment_checks ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling CheckApi.run_uc_deployment_checks"
      end
      # verify the required parameter 'deployment_checks_action' is set
      if @api_client.config.client_side_validation && deployment_checks_action.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_checks_action' when calling CheckApi.run_uc_deployment_checks"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/upgrade-coordinator/checks'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(deployment_checks_action)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckApi#run_uc_deployment_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
