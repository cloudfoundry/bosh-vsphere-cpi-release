=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class TlsRulesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Update TLS policy
    # Update the TLS policy. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a TLS policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param policy_id Firewall TLS inspection poicy id
    # @param tls_policy 
    # @param [Hash] opts the optional parameters
    # @return [TlsPolicy]
    def create_or_replace_tls_policy(policy_id, tls_policy, opts = {})
      data, _status_code, _headers = create_or_replace_tls_policy_with_http_info(policy_id, tls_policy, opts)
      data
    end

    # Update TLS policy
    # Update the TLS policy. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a TLS policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param policy_id Firewall TLS inspection poicy id
    # @param tls_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsPolicy, Fixnum, Hash)>] TlsPolicy data, response status code and response headers
    def create_or_replace_tls_policy_with_http_info(policy_id, tls_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TlsRulesApi.create_or_replace_tls_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling TlsRulesApi.create_or_replace_tls_policy"
      end
      # verify the required parameter 'tls_policy' is set
      if @api_client.config.client_side_validation && tls_policy.nil?
        fail ArgumentError, "Missing the required parameter 'tls_policy' when calling TlsRulesApi.create_or_replace_tls_policy"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TlsRulesApi#create_or_replace_tls_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update TLS rule
    # Update the TLS rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a TLS policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/tls-inspection-policies/&lt;policy-id&gt; 
    # @param policy_id 
    # @param rule_id 
    # @param tls_rule 
    # @param [Hash] opts the optional parameters
    # @return [TlsRule]
    def create_or_replace_tls_rule(policy_id, rule_id, tls_rule, opts = {})
      data, _status_code, _headers = create_or_replace_tls_rule_with_http_info(policy_id, rule_id, tls_rule, opts)
      data
    end

    # Update TLS rule
    # Update the TLS rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a TLS policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/tls-inspection-policies/&amp;lt;policy-id&amp;gt; 
    # @param policy_id 
    # @param rule_id 
    # @param tls_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsRule, Fixnum, Hash)>] TlsRule data, response status code and response headers
    def create_or_replace_tls_rule_with_http_info(policy_id, rule_id, tls_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TlsRulesApi.create_or_replace_tls_rule ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling TlsRulesApi.create_or_replace_tls_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling TlsRulesApi.create_or_replace_tls_rule"
      end
      # verify the required parameter 'tls_rule' is set
      if @api_client.config.client_side_validation && tls_rule.nil?
        fail ArgumentError, "Missing the required parameter 'tls_rule' when calling TlsRulesApi.create_or_replace_tls_rule"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TlsRulesApi#create_or_replace_tls_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete TlsPolicy
    # Delete TlsPolicy
    # @param policy_id Firewall TLS inspection poicy id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tls_policy(policy_id, opts = {})
      delete_tls_policy_with_http_info(policy_id, opts)
      nil
    end

    # Delete TlsPolicy
    # Delete TlsPolicy
    # @param policy_id Firewall TLS inspection poicy id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tls_policy_with_http_info(policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TlsRulesApi.delete_tls_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling TlsRulesApi.delete_tls_policy"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TlsRulesApi#delete_tls_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete rule
    # Delete rule
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tls_rule(policy_id, rule_id, opts = {})
      delete_tls_rule_with_http_info(policy_id, rule_id, opts)
      nil
    end

    # Delete rule
    # Delete rule
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tls_rule_with_http_info(policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TlsRulesApi.delete_tls_rule ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling TlsRulesApi.delete_tls_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling TlsRulesApi.delete_tls_rule"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TlsRulesApi#delete_tls_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List TLS policies
    # List all TLS policies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TlsPolicyListResult]
    def list_tls_policies(opts = {})
      data, _status_code, _headers = list_tls_policies_with_http_info(opts)
      data
    end

    # List TLS policies
    # List all TLS policies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TlsPolicyListResult, Fixnum, Hash)>] TlsPolicyListResult data, response status code and response headers
    def list_tls_policies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TlsRulesApi.list_tls_policies ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TlsRulesApi.list_tls_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TlsRulesApi.list_tls_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tls-inspection-policies'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TlsRulesApi#list_tls_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List TLS rules
    # List TLS rules
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TlsRuleListResult]
    def list_tls_rules(policy_id, opts = {})
      data, _status_code, _headers = list_tls_rules_with_http_info(policy_id, opts)
      data
    end

    # List TLS rules
    # List TLS rules
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TlsRuleListResult, Fixnum, Hash)>] TlsRuleListResult data, response status code and response headers
    def list_tls_rules_with_http_info(policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TlsRulesApi.list_tls_rules ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling TlsRulesApi.list_tls_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TlsRulesApi.list_tls_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TlsRulesApi.list_tls_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}/rules'.sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TlsRulesApi#list_tls_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update TLS policy
    # Update the TLS policy. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a TLS policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param policy_id Firewall TLS inspection poicy id
    # @param tls_policy 
    # @param [Hash] opts the optional parameters
    # @return [TlsPolicy]
    def patch_tls_policy(policy_id, tls_policy, opts = {})
      data, _status_code, _headers = patch_tls_policy_with_http_info(policy_id, tls_policy, opts)
      data
    end

    # Update TLS policy
    # Update the TLS policy. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a TLS policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param policy_id Firewall TLS inspection poicy id
    # @param tls_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsPolicy, Fixnum, Hash)>] TlsPolicy data, response status code and response headers
    def patch_tls_policy_with_http_info(policy_id, tls_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TlsRulesApi.patch_tls_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling TlsRulesApi.patch_tls_policy"
      end
      # verify the required parameter 'tls_policy' is set
      if @api_client.config.client_side_validation && tls_policy.nil?
        fail ArgumentError, "Missing the required parameter 'tls_policy' when calling TlsRulesApi.patch_tls_policy"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TlsRulesApi#patch_tls_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update TLS rule
    # Update the TLS rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a TLS policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/tls-inspection-policies/&lt;policy-id&gt; 
    # @param policy_id 
    # @param rule_id 
    # @param tls_rule 
    # @param [Hash] opts the optional parameters
    # @return [TlsRule]
    def patch_tls_rule(policy_id, rule_id, tls_rule, opts = {})
      data, _status_code, _headers = patch_tls_rule_with_http_info(policy_id, rule_id, tls_rule, opts)
      data
    end

    # Update TLS rule
    # Update the TLS rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a TLS policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/tls-inspection-policies/&amp;lt;policy-id&amp;gt; 
    # @param policy_id 
    # @param rule_id 
    # @param tls_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsRule, Fixnum, Hash)>] TlsRule data, response status code and response headers
    def patch_tls_rule_with_http_info(policy_id, rule_id, tls_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TlsRulesApi.patch_tls_rule ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling TlsRulesApi.patch_tls_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling TlsRulesApi.patch_tls_rule"
      end
      # verify the required parameter 'tls_rule' is set
      if @api_client.config.client_side_validation && tls_rule.nil?
        fail ArgumentError, "Missing the required parameter 'tls_rule' when calling TlsRulesApi.patch_tls_rule"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TlsRulesApi#patch_tls_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read tls policy
    # Read TLS policy. 
    # @param policy_id Firewall TLS inspection poicy id
    # @param [Hash] opts the optional parameters
    # @return [TlsPolicy]
    def read_tls_policy(policy_id, opts = {})
      data, _status_code, _headers = read_tls_policy_with_http_info(policy_id, opts)
      data
    end

    # Read tls policy
    # Read TLS policy. 
    # @param policy_id Firewall TLS inspection poicy id
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsPolicy, Fixnum, Hash)>] TlsPolicy data, response status code and response headers
    def read_tls_policy_with_http_info(policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TlsRulesApi.read_tls_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling TlsRulesApi.read_tls_policy"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TlsRulesApi#read_tls_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [TlsRule]
    def read_tls_rule(policy_id, rule_id, opts = {})
      data, _status_code, _headers = read_tls_rule_with_http_info(policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsRule, Fixnum, Hash)>] TlsRule data, response status code and response headers
    def read_tls_rule_with_http_info(policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TlsRulesApi.read_tls_rule ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling TlsRulesApi.read_tls_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling TlsRulesApi.read_tls_rule"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TlsRulesApi#read_tls_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
