=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class SecurityApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a container cluster as a span of this security policy
    # Add a container cluster as a span of this security policy. If there already exists another object containing the same container cluster path, an error will be thrown. The container cluster path cannot be modified If the path has to be modified, then delete this entity and add a new entity with the desired container cluster path 
    # @param domain_id 
    # @param security_policy_id 
    # @param container_cluster_id 
    # @param security_policy_container_cluster 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicyContainerCluster]
    def add_container_cluster_span(domain_id, security_policy_id, container_cluster_id, security_policy_container_cluster, opts = {})
      data, _status_code, _headers = add_container_cluster_span_with_http_info(domain_id, security_policy_id, container_cluster_id, security_policy_container_cluster, opts)
      data
    end

    # Add a container cluster as a span of this security policy
    # Add a container cluster as a span of this security policy. If there already exists another object containing the same container cluster path, an error will be thrown. The container cluster path cannot be modified If the path has to be modified, then delete this entity and add a new entity with the desired container cluster path 
    # @param domain_id 
    # @param security_policy_id 
    # @param container_cluster_id 
    # @param security_policy_container_cluster 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicyContainerCluster, Fixnum, Hash)>] SecurityPolicyContainerCluster data, response status code and response headers
    def add_container_cluster_span_with_http_info(domain_id, security_policy_id, container_cluster_id, security_policy_container_cluster, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.add_container_cluster_span ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.add_container_cluster_span"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.add_container_cluster_span"
      end
      # verify the required parameter 'container_cluster_id' is set
      if @api_client.config.client_side_validation && container_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'container_cluster_id' when calling SecurityApi.add_container_cluster_span"
      end
      # verify the required parameter 'security_policy_container_cluster' is set
      if @api_client.config.client_side_validation && security_policy_container_cluster.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_container_cluster' when calling SecurityApi.add_container_cluster_span"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/container-cluster-span/{container-cluster-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'container-cluster-id' + '}', container_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy_container_cluster)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyContainerCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#add_container_cluster_span\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add IDS custom signatures
    # Add IDS custom signatures 
    # @param version_id 
    # @param ids_raw_signatures 
    # @param action Action to add custom signatures
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_custom_signatures(version_id, ids_raw_signatures, action, opts = {})
      add_custom_signatures_with_http_info(version_id, ids_raw_signatures, action, opts)
      nil
    end

    # Add IDS custom signatures
    # Add IDS custom signatures 
    # @param version_id 
    # @param ids_raw_signatures 
    # @param action Action to add custom signatures
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_custom_signatures_with_http_info(version_id, ids_raw_signatures, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.add_custom_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SecurityApi.add_custom_signatures"
      end
      # verify the required parameter 'ids_raw_signatures' is set
      if @api_client.config.client_side_validation && ids_raw_signatures.nil?
        fail ArgumentError, "Missing the required parameter 'ids_raw_signatures' when calling SecurityApi.add_custom_signatures"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling SecurityApi.add_custom_signatures"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ADD_CUSTOM_SIGNATURES'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of ADD_CUSTOM_SIGNATURES"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_raw_signatures)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#add_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Publish/Cancel/Validate the custom signatures
    # Publish/Cancel/Validate the customer signatures. CANCEL: Revert to earlier published state i.e. cancel/remove all the unpublished custom signatures. VALIDATE: Trigger the validation of the custom signatures. PUBLISH: Publish the custom signatures. This action will push all the valid custom signatures to datapath. 
    # @param version_id 
    # @param custom_signature_validation_payload 
    # @param action Different Actions on Custom signatures
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def apply_custom_signatures_action(version_id, custom_signature_validation_payload, action, opts = {})
      apply_custom_signatures_action_with_http_info(version_id, custom_signature_validation_payload, action, opts)
      nil
    end

    # Publish/Cancel/Validate the custom signatures
    # Publish/Cancel/Validate the customer signatures. CANCEL: Revert to earlier published state i.e. cancel/remove all the unpublished custom signatures. VALIDATE: Trigger the validation of the custom signatures. PUBLISH: Publish the custom signatures. This action will push all the valid custom signatures to datapath. 
    # @param version_id 
    # @param custom_signature_validation_payload 
    # @param action Different Actions on Custom signatures
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def apply_custom_signatures_action_with_http_info(version_id, custom_signature_validation_payload, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.apply_custom_signatures_action ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SecurityApi.apply_custom_signatures_action"
      end
      # verify the required parameter 'custom_signature_validation_payload' is set
      if @api_client.config.client_side_validation && custom_signature_validation_payload.nil?
        fail ArgumentError, "Missing the required parameter 'custom_signature_validation_payload' when calling SecurityApi.apply_custom_signatures_action"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling SecurityApi.apply_custom_signatures_action"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CANCEL', 'PUBLISH', 'VALIDATE'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CANCEL, PUBLISH, VALIDATE"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(custom_signature_validation_payload)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#apply_custom_signatures_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a running export task
    # This operation cancels an export task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def cancel_export_task(opts = {})
      data, _status_code, _headers = cancel_export_task_with_http_info(opts)
      data
    end

    # Cancel a running export task
    # This operation cancels an export task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def cancel_export_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.cancel_export_task ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/export?action=cancel'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#cancel_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a running import task
    # This operation cancels an import task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [ImportTask]
    def cancel_import_task(opts = {})
      data, _status_code, _headers = cancel_import_task_with_http_info(opts)
      data
    end

    # Cancel a running import task
    # This operation cancels an import task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportTask, Fixnum, Hash)>] ImportTask data, response status code and response headers
    def cancel_import_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.cancel_import_task ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/import?action=cancel'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#cancel_import_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create BYOD service instance
    # Create BYOD Service Instance which represent instance of service definition created on manager. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id BYOD service instance id
    # @param byod_policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [ByodPolicyServiceInstance]
    def create_byod_policy_service_instance(tier_0_id, locale_service_id, service_instance_id, byod_policy_service_instance, opts = {})
      data, _status_code, _headers = create_byod_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, byod_policy_service_instance, opts)
      data
    end

    # Create BYOD service instance
    # Create BYOD Service Instance which represent instance of service definition created on manager. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id BYOD service instance id
    # @param byod_policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ByodPolicyServiceInstance, Fixnum, Hash)>] ByodPolicyServiceInstance data, response status code and response headers
    def create_byod_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, byod_policy_service_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_byod_policy_service_instance ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.create_byod_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.create_byod_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.create_byod_policy_service_instance"
      end
      # verify the required parameter 'byod_policy_service_instance' is set
      if @api_client.config.client_side_validation && byod_policy_service_instance.nil?
        fail ArgumentError, "Missing the required parameter 'byod_policy_service_instance' when calling SecurityApi.create_byod_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(byod_policy_service_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ByodPolicyServiceInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_byod_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id is not already present, create a new firewall identity store. If it already exists, update the firewall identity store with specified attributes.  <br> <br> Use the following Policy API - <br> PATCH /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def create_or_patch_firewall_identity_store(firewall_identity_store_id, directory_domain, opts = {})
      create_or_patch_firewall_identity_store_with_http_info(firewall_identity_store_id, directory_domain, opts)
      nil
    end

    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id is not already present, create a new firewall identity store. If it already exists, update the firewall identity store with specified attributes.  &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PATCH /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_firewall_identity_store_with_http_info(firewall_identity_store_id, directory_domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_patch_firewall_identity_store ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SecurityApi.create_or_patch_firewall_identity_store"
      end
      # verify the required parameter 'directory_domain' is set
      if @api_client.config.client_side_validation && directory_domain.nil?
        fail ArgumentError, "Missing the required parameter 'directory_domain' when calling SecurityApi.create_or_patch_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_patch_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a LDAP server for Firewall Identity store
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one.  <br> <br> Use the following Policy API - <br> PATCH /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers/&lt;ldap-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryLdapServer]
    def create_or_patch_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts = {})
      data, _status_code, _headers = create_or_patch_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts)
      data
    end

    # Create a LDAP server for Firewall Identity store
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one.  &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PATCH /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers/&amp;lt;ldap-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryLdapServer, Fixnum, Hash)>] DirectoryLdapServer data, response status code and response headers
    def create_or_patch_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_patch_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SecurityApi.create_or_patch_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SecurityApi.create_or_patch_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling SecurityApi.create_or_patch_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_patch_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the Bridge Firewall Policy
    # Update the Bridge Firewall Policy. This is a full replace. Create new BridgeFirewallPolicy if a policy with the policy-id is not already present. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param bridge_firewall_policy 
    # @param [Hash] opts the optional parameters
    # @return [BridgeFirewallPolicy]
    def create_or_replace_bridge_firewall_policy(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts = {})
      data, _status_code, _headers = create_or_replace_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts)
      data
    end

    # Update the Bridge Firewall Policy
    # Update the Bridge Firewall Policy. This is a full replace. Create new BridgeFirewallPolicy if a policy with the policy-id is not already present. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param bridge_firewall_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BridgeFirewallPolicy, Fixnum, Hash)>] BridgeFirewallPolicy data, response status code and response headers
    def create_or_replace_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_replace_bridge_firewall_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.create_or_replace_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling SecurityApi.create_or_replace_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy' when calling SecurityApi.create_or_replace_bridge_firewall_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bridge_firewall_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeFirewallPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_replace_bridge_firewall_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Bridge Firewall Rule
    # Update the Bridge Firewall Rule. This is a full replace. All the rules are replaced. Create new BridgeFirewallRule if a rule with the rule-id is not already present. Performance Note: If you wish to edit several rules in a bridge firewall policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/bridge-policies/&lt;bridge-firewall-policy-id&gt; 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def create_or_replace_bridge_firewall_rule(domain_id, bridge_firewall_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = create_or_replace_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, rule, opts)
      data
    end

    # Update Bridge Firewall Rule
    # Update the Bridge Firewall Rule. This is a full replace. All the rules are replaced. Create new BridgeFirewallRule if a rule with the rule-id is not already present. Performance Note: If you wish to edit several rules in a bridge firewall policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/bridge-policies/&amp;lt;bridge-firewall-policy-id&amp;gt; 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def create_or_replace_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_replace_bridge_firewall_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.create_or_replace_bridge_firewall_rule"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling SecurityApi.create_or_replace_bridge_firewall_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.create_or_replace_bridge_firewall_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.create_or_replace_bridge_firewall_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_replace_bridge_firewall_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id   is not already present, create a new firewall identity store. If it already exists, replace the firewall identity store instance with the new object.  <br> <br> Use the following Policy API - <br> PUT /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryDomain]
    def create_or_replace_firewall_identity_store(firewall_identity_store_id, directory_domain, opts = {})
      data, _status_code, _headers = create_or_replace_firewall_identity_store_with_http_info(firewall_identity_store_id, directory_domain, opts)
      data
    end

    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id   is not already present, create a new firewall identity store. If it already exists, replace the firewall identity store instance with the new object.  &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PUT /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryDomain, Fixnum, Hash)>] DirectoryDomain data, response status code and response headers
    def create_or_replace_firewall_identity_store_with_http_info(firewall_identity_store_id, directory_domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_replace_firewall_identity_store ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SecurityApi.create_or_replace_firewall_identity_store"
      end
      # verify the required parameter 'directory_domain' is set
      if @api_client.config.client_side_validation && directory_domain.nil?
        fail ArgumentError, "Missing the required parameter 'directory_domain' when calling SecurityApi.create_or_replace_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_replace_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a event log server for Firewall Identity store
    # Update a event log server for Firewall Identity store <br> <br> Use the following Policy API - <br> PUT /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/event-log-servers/&lt;event-log-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log Server identifier
    # @param directory_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryEventLogServer]
    def create_or_replace_firewall_identity_store_event_log_server(firewall_identity_store_id, event_log_server_id, directory_event_log_server, opts = {})
      data, _status_code, _headers = create_or_replace_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, directory_event_log_server, opts)
      data
    end

    # Update a event log server for Firewall Identity store
    # Update a event log server for Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PUT /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/event-log-servers/&amp;lt;event-log-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log Server identifier
    # @param directory_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryEventLogServer, Fixnum, Hash)>] DirectoryEventLogServer data, response status code and response headers
    def create_or_replace_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, directory_event_log_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_replace_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SecurityApi.create_or_replace_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling SecurityApi.create_or_replace_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'directory_event_log_server' is set
      if @api_client.config.client_side_validation && directory_event_log_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_event_log_server' when calling SecurityApi.create_or_replace_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_event_log_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryEventLogServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_replace_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a LDAP server for Firewall Identity store
    # Update a LDAP server for Firewall Identity store <br> <br> Use the following Policy API - <br> PUT /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers/&lt;ldap-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryLdapServer]
    def create_or_replace_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts = {})
      data, _status_code, _headers = create_or_replace_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts)
      data
    end

    # Update a LDAP server for Firewall Identity store
    # Update a LDAP server for Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; PUT /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers/&amp;lt;ldap-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryLdapServer, Fixnum, Hash)>] DirectoryLdapServer data, response status code and response headers
    def create_or_replace_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, directory_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_replace_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SecurityApi.create_or_replace_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SecurityApi.create_or_replace_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling SecurityApi.create_or_replace_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_replace_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def create_or_replace_gateway_policy_for_domain(domain_id, gateway_policy_id, gateway_policy, opts = {})
      data, _status_code, _headers = create_or_replace_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts)
      data
    end

    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def create_or_replace_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_replace_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.create_or_replace_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.create_or_replace_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling SecurityApi.create_or_replace_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_replace_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/gateway-policies/&lt;gateway-policy-id&gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def create_or_replace_gateway_rule(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = create_or_replace_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts)
      data
    end

    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/gateway-policies/&amp;lt;gateway-policy-id&amp;gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def create_or_replace_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_replace_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.create_or_replace_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.create_or_replace_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.create_or_replace_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.create_or_replace_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_replace_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update IDS gateway policy
    # Update the IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [IdsGatewayPolicy]
    def create_or_replace_ids_gateway_policy(domain_id, policy_id, ids_gateway_policy, opts = {})
      data, _status_code, _headers = create_or_replace_ids_gateway_policy_with_http_info(domain_id, policy_id, ids_gateway_policy, opts)
      data
    end

    # Update IDS gateway policy
    # Update the IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsGatewayPolicy, Fixnum, Hash)>] IdsGatewayPolicy data, response status code and response headers
    def create_or_replace_ids_gateway_policy_with_http_info(domain_id, policy_id, ids_gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_replace_ids_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.create_or_replace_ids_gateway_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.create_or_replace_ids_gateway_policy"
      end
      # verify the required parameter 'ids_gateway_policy' is set
      if @api_client.config.client_side_validation && ids_gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_gateway_policy' when calling SecurityApi.create_or_replace_ids_gateway_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsGatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_replace_ids_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update IDS gateway rule
    # Create or Update the IDS gateway rule. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def create_or_replace_ids_gateway_rule(domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = create_or_replace_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # Create or Update IDS gateway rule
    # Create or Update the IDS gateway rule. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def create_or_replace_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_replace_ids_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.create_or_replace_ids_gateway_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.create_or_replace_ids_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.create_or_replace_ids_gateway_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling SecurityApi.create_or_replace_ids_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_replace_ids_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update TLS policy
    # Update the TLS policy. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a TLS policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param policy_id Firewall TLS inspection poicy id
    # @param tls_policy 
    # @param [Hash] opts the optional parameters
    # @return [TlsPolicy]
    def create_or_replace_tls_policy(policy_id, tls_policy, opts = {})
      data, _status_code, _headers = create_or_replace_tls_policy_with_http_info(policy_id, tls_policy, opts)
      data
    end

    # Update TLS policy
    # Update the TLS policy. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a TLS policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param policy_id Firewall TLS inspection poicy id
    # @param tls_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsPolicy, Fixnum, Hash)>] TlsPolicy data, response status code and response headers
    def create_or_replace_tls_policy_with_http_info(policy_id, tls_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_replace_tls_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.create_or_replace_tls_policy"
      end
      # verify the required parameter 'tls_policy' is set
      if @api_client.config.client_side_validation && tls_policy.nil?
        fail ArgumentError, "Missing the required parameter 'tls_policy' when calling SecurityApi.create_or_replace_tls_policy"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_replace_tls_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update TLS rule
    # Update the TLS rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a TLS policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/tls-inspection-policies/&lt;policy-id&gt; 
    # @param policy_id 
    # @param rule_id 
    # @param tls_rule 
    # @param [Hash] opts the optional parameters
    # @return [TlsRule]
    def create_or_replace_tls_rule(policy_id, rule_id, tls_rule, opts = {})
      data, _status_code, _headers = create_or_replace_tls_rule_with_http_info(policy_id, rule_id, tls_rule, opts)
      data
    end

    # Update TLS rule
    # Update the TLS rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a TLS policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/tls-inspection-policies/&amp;lt;policy-id&amp;gt; 
    # @param policy_id 
    # @param rule_id 
    # @param tls_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsRule, Fixnum, Hash)>] TlsRule data, response status code and response headers
    def create_or_replace_tls_rule_with_http_info(policy_id, rule_id, tls_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_replace_tls_rule ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.create_or_replace_tls_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.create_or_replace_tls_rule"
      end
      # verify the required parameter 'tls_rule' is set
      if @api_client.config.client_side_validation && tls_rule.nil?
        fail ArgumentError, "Missing the required parameter 'tls_rule' when calling SecurityApi.create_or_replace_tls_rule"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_replace_tls_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Endpoint policy
    # Create or update the Endpoint policy. 
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param endpoint_policy 
    # @param [Hash] opts the optional parameters
    # @return [EndpointPolicy]
    def create_or_update_endpoint_policy(domain_id, endpoint_policy_id, endpoint_policy, opts = {})
      data, _status_code, _headers = create_or_update_endpoint_policy_with_http_info(domain_id, endpoint_policy_id, endpoint_policy, opts)
      data
    end

    # Create or update Endpoint policy
    # Create or update the Endpoint policy. 
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param endpoint_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EndpointPolicy, Fixnum, Hash)>] EndpointPolicy data, response status code and response headers
    def create_or_update_endpoint_policy_with_http_info(domain_id, endpoint_policy_id, endpoint_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_update_endpoint_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.create_or_update_endpoint_policy"
      end
      # verify the required parameter 'endpoint_policy_id' is set
      if @api_client.config.client_side_validation && endpoint_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy_id' when calling SecurityApi.create_or_update_endpoint_policy"
      end
      # verify the required parameter 'endpoint_policy' is set
      if @api_client.config.client_side_validation && endpoint_policy.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy' when calling SecurityApi.create_or_update_endpoint_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'endpoint-policy-id' + '}', endpoint_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(endpoint_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EndpointPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_update_endpoint_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Endpoint rule
    # Create a Endpoint rule with the endpoint-rule-id is not already present, otherwise update the Endpoint Rule. 
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param endpoint_rule_id Endpoint rule id
    # @param endpoint_rule 
    # @param [Hash] opts the optional parameters
    # @return [EndpointRule]
    def create_or_update_endpoint_rule(domain_id, endpoint_policy_id, endpoint_rule_id, endpoint_rule, opts = {})
      data, _status_code, _headers = create_or_update_endpoint_rule_with_http_info(domain_id, endpoint_policy_id, endpoint_rule_id, endpoint_rule, opts)
      data
    end

    # Update Endpoint rule
    # Create a Endpoint rule with the endpoint-rule-id is not already present, otherwise update the Endpoint Rule. 
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param endpoint_rule_id Endpoint rule id
    # @param endpoint_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EndpointRule, Fixnum, Hash)>] EndpointRule data, response status code and response headers
    def create_or_update_endpoint_rule_with_http_info(domain_id, endpoint_policy_id, endpoint_rule_id, endpoint_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_update_endpoint_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.create_or_update_endpoint_rule"
      end
      # verify the required parameter 'endpoint_policy_id' is set
      if @api_client.config.client_side_validation && endpoint_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy_id' when calling SecurityApi.create_or_update_endpoint_rule"
      end
      # verify the required parameter 'endpoint_rule_id' is set
      if @api_client.config.client_side_validation && endpoint_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_rule_id' when calling SecurityApi.create_or_update_endpoint_rule"
      end
      # verify the required parameter 'endpoint_rule' is set
      if @api_client.config.client_side_validation && endpoint_rule.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_rule' when calling SecurityApi.create_or_update_endpoint_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}/endpoint-rules/{endpoint-rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'endpoint-policy-id' + '}', endpoint_policy_id.to_s).sub('{' + 'endpoint-rule-id' + '}', endpoint_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(endpoint_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EndpointRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_update_endpoint_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update Global IDS Signature
    # Update global intrusion detection signature.
    # @param signature_id Signature ID
    # @param global_ids_signature 
    # @param [Hash] opts the optional parameters
    # @return [GlobalIdsSignature]
    def create_or_update_global_ids_signature(signature_id, global_ids_signature, opts = {})
      data, _status_code, _headers = create_or_update_global_ids_signature_with_http_info(signature_id, global_ids_signature, opts)
      data
    end

    # create or update Global IDS Signature
    # Update global intrusion detection signature.
    # @param signature_id Signature ID
    # @param global_ids_signature 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalIdsSignature, Fixnum, Hash)>] GlobalIdsSignature data, response status code and response headers
    def create_or_update_global_ids_signature_with_http_info(signature_id, global_ids_signature, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_update_global_ids_signature ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SecurityApi.create_or_update_global_ids_signature"
      end
      # verify the required parameter 'global_ids_signature' is set
      if @api_client.config.client_side_validation && global_ids_signature.nil?
        fail ArgumentError, "Missing the required parameter 'global_ids_signature' when calling SecurityApi.create_or_update_global_ids_signature"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_ids_signature)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_update_global_ids_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update IDS config on cluster level
    # Update intrusion detection system on cluster level.
    # @param cluster_config_id User entered ID
    # @param ids_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [IdsClusterConfig]
    def create_or_update_ids_cluster_config(cluster_config_id, ids_cluster_config, opts = {})
      data, _status_code, _headers = create_or_update_ids_cluster_config_with_http_info(cluster_config_id, ids_cluster_config, opts)
      data
    end

    # create or update IDS config on cluster level
    # Update intrusion detection system on cluster level.
    # @param cluster_config_id User entered ID
    # @param ids_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsClusterConfig, Fixnum, Hash)>] IdsClusterConfig data, response status code and response headers
    def create_or_update_ids_cluster_config_with_http_info(cluster_config_id, ids_cluster_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_update_ids_cluster_config ...'
      end
      # verify the required parameter 'cluster_config_id' is set
      if @api_client.config.client_side_validation && cluster_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_config_id' when calling SecurityApi.create_or_update_ids_cluster_config"
      end
      # verify the required parameter 'ids_cluster_config' is set
      if @api_client.config.client_side_validation && ids_cluster_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_cluster_config' when calling SecurityApi.create_or_update_ids_cluster_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/cluster-configs/{cluster-config-id}'.sub('{' + 'cluster-config-id' + '}', cluster_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_cluster_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsClusterConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_update_ids_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will create or update IDS profile
    # This routine will create or update IDS profile. User can provide Profile Severity, Criteria and can also Override the Signature in the request
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [IdsProfile]
    def create_or_update_ids_profile(profile_id, ids_profile, opts = {})
      data, _status_code, _headers = create_or_update_ids_profile_with_http_info(profile_id, ids_profile, opts)
      data
    end

    # This routine will create or update IDS profile
    # This routine will create or update IDS profile. User can provide Profile Severity, Criteria and can also Override the Signature in the request
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsProfile, Fixnum, Hash)>] IdsProfile data, response status code and response headers
    def create_or_update_ids_profile_with_http_info(profile_id, ids_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_update_ids_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.create_or_update_ids_profile"
      end
      # verify the required parameter 'ids_profile' is set
      if @api_client.config.client_side_validation && ids_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ids_profile' when calling SecurityApi.create_or_update_ids_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_update_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update IDS rule
    # Update intrusion detection system rule.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def create_or_update_ids_rule(domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = create_or_update_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # create or update IDS rule
    # Update intrusion detection system rule.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def create_or_update_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_update_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.create_or_update_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.create_or_update_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.create_or_update_ids_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling SecurityApi.create_or_update_ids_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_update_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update IDS security policy
    # Update intrusion detection system security policy for a domain.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [IdsSecurityPolicy]
    def create_or_update_ids_security_policy(domain_id, policy_id, ids_security_policy, opts = {})
      data, _status_code, _headers = create_or_update_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts)
      data
    end

    # create or update IDS security policy
    # Update intrusion detection system security policy for a domain.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def create_or_update_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_update_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.create_or_update_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.create_or_update_ids_security_policy"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling SecurityApi.create_or_update_ids_security_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_update_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update IDS configuration
    # Update intrusion detection system configuration on standalone hosts.
    # @param ids_standalone_host_config 
    # @param [Hash] opts the optional parameters
    # @return [IdsStandaloneHostConfig]
    def create_or_update_ids_standalone_host_config(ids_standalone_host_config, opts = {})
      data, _status_code, _headers = create_or_update_ids_standalone_host_config_with_http_info(ids_standalone_host_config, opts)
      data
    end

    # Create or update IDS configuration
    # Update intrusion detection system configuration on standalone hosts.
    # @param ids_standalone_host_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsStandaloneHostConfig, Fixnum, Hash)>] IdsStandaloneHostConfig data, response status code and response headers
    def create_or_update_ids_standalone_host_config_with_http_info(ids_standalone_host_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_update_ids_standalone_host_config ...'
      end
      # verify the required parameter 'ids_standalone_host_config' is set
      if @api_client.config.client_side_validation && ids_standalone_host_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_standalone_host_config' when calling SecurityApi.create_or_update_ids_standalone_host_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/ids-standalone-host-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_standalone_host_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsStandaloneHostConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_update_ids_standalone_host_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration for Segment
    # Create a Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityFeatures]
    def create_or_update_infra_segment_security_feature(segment_id, segment_security_features, opts = {})
      data, _status_code, _headers = create_or_update_infra_segment_security_feature_with_http_info(segment_id, segment_security_features, opts)
      data
    end

    # Create or Update security configuration for Segment
    # Create a Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def create_or_update_infra_segment_security_feature_with_http_info(segment_id, segment_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_update_infra_segment_security_feature ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SecurityApi.create_or_update_infra_segment_security_feature"
      end
      # verify the required parameter 'segment_security_features' is set
      if @api_client.config.client_side_validation && segment_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_features' when calling SecurityApi.create_or_update_infra_segment_security_feature"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/security-config'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_update_infra_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update Malware Prevention profile
    # Update Malware Prevention profile.
    # @param profile_id Profile ID
    # @param malware_prevention_profile 
    # @param [Hash] opts the optional parameters
    # @return [MalwarePreventionProfile]
    def create_or_update_malware_prevention_profile(profile_id, malware_prevention_profile, opts = {})
      data, _status_code, _headers = create_or_update_malware_prevention_profile_with_http_info(profile_id, malware_prevention_profile, opts)
      data
    end

    # Create or Update Malware Prevention profile
    # Update Malware Prevention profile.
    # @param profile_id Profile ID
    # @param malware_prevention_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MalwarePreventionProfile, Fixnum, Hash)>] MalwarePreventionProfile data, response status code and response headers
    def create_or_update_malware_prevention_profile_with_http_info(profile_id, malware_prevention_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_update_malware_prevention_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.create_or_update_malware_prevention_profile"
      end
      # verify the required parameter 'malware_prevention_profile' is set
      if @api_client.config.client_side_validation && malware_prevention_profile.nil?
        fail ArgumentError, "Missing the required parameter 'malware_prevention_profile' when calling SecurityApi.create_or_update_malware_prevention_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/malware-prevention-service/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(malware_prevention_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MalwarePreventionProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_update_malware_prevention_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update redirection policy
    # Create or update the redirection policy. Performance Note: If you want to edit several rules in a redirection policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param redirection_policy 
    # @param [Hash] opts the optional parameters
    # @return [RedirectionPolicy]
    def create_or_update_redirection_policy(domain_id, redirection_policy_id, redirection_policy, opts = {})
      data, _status_code, _headers = create_or_update_redirection_policy_with_http_info(domain_id, redirection_policy_id, redirection_policy, opts)
      data
    end

    # Create or update redirection policy
    # Create or update the redirection policy. Performance Note: If you want to edit several rules in a redirection policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param redirection_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedirectionPolicy, Fixnum, Hash)>] RedirectionPolicy data, response status code and response headers
    def create_or_update_redirection_policy_with_http_info(domain_id, redirection_policy_id, redirection_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_update_redirection_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.create_or_update_redirection_policy"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling SecurityApi.create_or_update_redirection_policy"
      end
      # verify the required parameter 'redirection_policy' is set
      if @api_client.config.client_side_validation && redirection_policy.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy' when calling SecurityApi.create_or_update_redirection_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(redirection_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_update_redirection_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update redirection rule
    # Create a rule with the rule-id is not already present, otherwise update the rule. Performance Note: If you want to edit several rules in a redirection policy,prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/redirection-policies/&lt;red-policy-id&gt; 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param rule_id Rule id
    # @param redirection_rule 
    # @param [Hash] opts the optional parameters
    # @return [RedirectionRule]
    def create_or_update_redirection_rule(domain_id, redirection_policy_id, rule_id, redirection_rule, opts = {})
      data, _status_code, _headers = create_or_update_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, redirection_rule, opts)
      data
    end

    # Update redirection rule
    # Create a rule with the rule-id is not already present, otherwise update the rule. Performance Note: If you want to edit several rules in a redirection policy,prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/redirection-policies/&amp;lt;red-policy-id&amp;gt; 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param rule_id Rule id
    # @param redirection_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedirectionRule, Fixnum, Hash)>] RedirectionRule data, response status code and response headers
    def create_or_update_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, redirection_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_update_redirection_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.create_or_update_redirection_rule"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling SecurityApi.create_or_update_redirection_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.create_or_update_redirection_rule"
      end
      # verify the required parameter 'redirection_rule' is set
      if @api_client.config.client_side_validation && redirection_rule.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_rule' when calling SecurityApi.create_or_update_redirection_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(redirection_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_update_redirection_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create or update security configuration. 
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [SecurityFeatures]
    def create_or_update_security_feature(tier_1_id, security_features, opts = {})
      data, _status_code, _headers = create_or_update_security_feature_with_http_info(tier_1_id, security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create or update security configuration. 
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def create_or_update_security_feature_with_http_info(tier_1_id, security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_update_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.create_or_update_security_feature"
      end
      # verify the required parameter 'security_features' is set
      if @api_client.config.client_side_validation && security_features.nil?
        fail ArgumentError, "Missing the required parameter 'security_features' when calling SecurityApi.create_or_update_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_update_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service reference
    # Create Service Reference representing the intent to consume a given 3rd party service. 
    # @param service_reference_id Service reference id
    # @param service_reference 
    # @param [Hash] opts the optional parameters
    # @return [ServiceReference]
    def create_or_update_service_reference(service_reference_id, service_reference, opts = {})
      data, _status_code, _headers = create_or_update_service_reference_with_http_info(service_reference_id, service_reference, opts)
      data
    end

    # Create service reference
    # Create Service Reference representing the intent to consume a given 3rd party service. 
    # @param service_reference_id Service reference id
    # @param service_reference 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceReference, Fixnum, Hash)>] ServiceReference data, response status code and response headers
    def create_or_update_service_reference_with_http_info(service_reference_id, service_reference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_update_service_reference ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling SecurityApi.create_or_update_service_reference"
      end
      # verify the required parameter 'service_reference' is set
      if @api_client.config.client_side_validation && service_reference.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference' when calling SecurityApi.create_or_update_service_reference"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_reference)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_update_service_reference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create or update security configuration. 
    # @param tier_0_id tier0 id
    # @param tier0_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Tier0SecurityFeatures]
    def create_or_update_tier0_security_feature(tier_0_id, tier0_security_features, opts = {})
      data, _status_code, _headers = create_or_update_tier0_security_feature_with_http_info(tier_0_id, tier0_security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create or update security configuration. 
    # @param tier_0_id tier0 id
    # @param tier0_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tier0SecurityFeatures, Fixnum, Hash)>] Tier0SecurityFeatures data, response status code and response headers
    def create_or_update_tier0_security_feature_with_http_info(tier_0_id, tier0_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_update_tier0_security_feature ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.create_or_update_tier0_security_feature"
      end
      # verify the required parameter 'tier0_security_features' is set
      if @api_client.config.client_side_validation && tier0_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_security_features' when calling SecurityApi.create_or_update_tier0_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/security-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tier0_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tier0SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_update_tier0_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration for Tier1 Segment
    # Create a Tier1 Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityFeatures]
    def create_or_update_tier1_segment_security_feature(tier_1_id, segment_id, segment_security_features, opts = {})
      data, _status_code, _headers = create_or_update_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, segment_security_features, opts)
      data
    end

    # Create or Update security configuration for Tier1 Segment
    # Create a Tier1 Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def create_or_update_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, segment_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_update_tier1_segment_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.create_or_update_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SecurityApi.create_or_update_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_security_features' is set
      if @api_client.config.client_side_validation && segment_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_features' when calling SecurityApi.create_or_update_tier1_segment_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_update_tier1_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update virtual endpoint
    # Create or update virtual endpoint. 
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param virtual_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [VirtualEndpoint]
    def create_or_update_tier1_virtual_endpoint(tier_1_id, locale_service_id, virtual_endpoint_id, virtual_endpoint, opts = {})
      data, _status_code, _headers = create_or_update_tier1_virtual_endpoint_with_http_info(tier_1_id, locale_service_id, virtual_endpoint_id, virtual_endpoint, opts)
      data
    end

    # Create or update virtual endpoint
    # Create or update virtual endpoint. 
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param virtual_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VirtualEndpoint, Fixnum, Hash)>] VirtualEndpoint data, response status code and response headers
    def create_or_update_tier1_virtual_endpoint_with_http_info(tier_1_id, locale_service_id, virtual_endpoint_id, virtual_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_update_tier1_virtual_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.create_or_update_tier1_virtual_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.create_or_update_tier1_virtual_endpoint"
      end
      # verify the required parameter 'virtual_endpoint_id' is set
      if @api_client.config.client_side_validation && virtual_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_endpoint_id' when calling SecurityApi.create_or_update_tier1_virtual_endpoint"
      end
      # verify the required parameter 'virtual_endpoint' is set
      if @api_client.config.client_side_validation && virtual_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_endpoint' when calling SecurityApi.create_or_update_tier1_virtual_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/endpoints/virtual-endpoints/{virtual-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'virtual-endpoint-id' + '}', virtual_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(virtual_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_update_tier1_virtual_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Tls profile.
    # Update user configurable properties of Tls profile. Each action profile supports the following 3 pre-defined config setting defaults:     Balanced, High Fidelity and High Security.  1 - External Profile Balanced (default) Sample intent path: /infra/tls-inspection-action-profiles/external-balanced-profile API payload: <pre> {     \"tls_config_setting\": \"BALANCED\",     \"resource_type\": \"TlsInspectionExternalProfile\",     \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",     \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\" } </pre> Profile with default settings: <pre> {     \"tls_config_setting\": \"BALANCED\",     \"invalid_cert_action\": \"ALLOW\",     \"decryption_fail_action\": \"BYPASS\",     \"crypto_enforcement\": \"ENFORCE\",     \"client_min_tls_version\": \"TLS_V1_1\",     \"client_max_tls_version\": \"TLS_V1_2\",     \"server_min_tls_version\": \"TLS_V1_1\",     \"server_max_tls_version\": \"TLS_V1_2\",     \"client_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",         \"TLS_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_RSA_WITH_AES_256_CBC_SHA256\"     ],     \"server_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",         \"TLS_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_RSA_WITH_AES_256_CBC_SHA256\"     ],     \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",     \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\",     \"ocsp_must_staple\": false,     \"resource_type\": \"TlsInspectionExternalProfile\",     \"id\": \"external-balanced-profile\",     \"display_name\": \"external-balanced-profile\",     \"path\": \"/infra/tls-inspection-action-profiles/external-balanced-profile\",     \"relative_path\": \"external-balanced-profile\",     \"parent_path\": \"/infra\",     \"unique_id\": \"bb236080-e49d-4475-9eb3-b749b075164a\",     \"marked_for_delete\": false,     \"overridden\": false,     \"trusted_ca_bundles\": [         \"/infra/cabundles/default_trusted_public_ca_bundle\"     ],     \"crls\": [         \"/infra/crls/nsx_default_public_crl\"     ],     \"idle_connection_timeout\": 5400,     \"_system_owned\": false,     \"_protection\": \"NOT_PROTECTED\",     \"_create_user\": \"admin\",     \"_create_time\": 1622225641015,     \"_last_modified_user\": \"admin\",     \"_last_modified_time\": 1622225641015,     \"_revision\": 0 } </pre>  2 - External Profile High Fidelity Sample intent path: /infra/tls-inspection-action-profiles/external-high-fidelity-profile Sample intent path: <pre> {     \"tls_config_setting\": \"HIGH_FIDELITY\",     \"resource_type\": \"TlsInspectionExternalProfile\",     \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",     \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\" } </pre> Profile with default settings: <pre> {     \"tls_config_setting\": \"HIGH_FIDELITY\",     \"invalid_cert_action\": \"ALLOW\",     \"decryption_fail_action\": \"BYPASS\",     \"crypto_enforcement\": \"TRANSPARENT\",     \"client_min_tls_version\": \"\",     \"client_max_tls_version\": \"\",     \"server_min_tls_version\": \"\",     \"server_max_tls_version\": \"\",     \"client_cipher_suite\": [],     \"server_cipher_suite\": [],     \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",     \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\",     \"ocsp_must_staple\": false,     \"resource_type\": \"TlsInspectionExternalProfile\",     \"id\": \"external-high-fidelity-profile\",     \"display_name\": \"external-high-fidelity-profile\",     \"path\": \"/infra/tls-inspection-action-profiles/external-high-fidelity-profile\",     \"relative_path\": \"external-high-fidelity-profile\",     \"parent_path\": \"/infra\",     \"unique_id\": \"bb6c8604-c8eb-44dd-aded-7407e0ca887c\",     \"marked_for_delete\": false,     \"overridden\": false,     \"trusted_ca_bundles\": [         \"/infra/cabundles/default_trusted_public_ca_bundle\"     ],     \"crls\": [         \"/infra/crls/nsx_default_public_crl\"     ],     \"idle_connection_timeout\": 5400,     \"_system_owned\": false,     \"_protection\": \"NOT_PROTECTED\",     \"_create_user\": \"admin\",     \"_create_time\": 1622225537386,     \"_last_modified_user\": \"admin\",     \"_last_modified_time\": 1622225537386,     \"_revision\": 0 } </pre>  3 - External Profile High Security Sample intent path:/infra/tls-inspection-action-profiles/external-high-security-profile Sample intent path: <pre> {     \"tls_config_setting\": \"HIGH_SECURITY\",     \"resource_type\": \"TlsInspectionExternalProfile\",     \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",     \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\" } </pre> Profile with default settings: <pre> {    \"tls_config_setting\": \"HIGH_SECURITY\",    \"invalid_cert_action\": \"BLOCK\",    \"decryption_fail_action\": \"BLOCK\",    \"crypto_enforcement\": \"ENFORCE\",    \"client_min_tls_version\": \"TLS_V1_2\",    \"client_max_tls_version\": \"TLS_V1_2\",    \"server_min_tls_version\": \"TLS_V1_2\",    \"server_max_tls_version\": \"TLS_V1_2\",    \"client_cipher_suite\": [        \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",        \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\"    ],    \"server_cipher_suite\": [        \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",        \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\"    ],    \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",    \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\",    \"ocsp_must_staple\": false,    \"resource_type\": \"TlsInspectionExternalProfile\",    \"id\": \"external-high-security-profile\",    \"display_name\": \"external-high-security-profile\",    \"path\": \"/infra/tls-inspection-action-profiles/external-high-security-profile\",    \"relative_path\": \"external-high-security-profile\",    \"parent_path\": \"/infra\",    \"unique_id\": \"e19cbc40-c679-4f32-9e40-aa5eedf7f254\",    \"marked_for_delete\": false,    \"overridden\": false,    \"trusted_ca_bundles\": [        \"/infra/cabundles/default_trusted_public_ca_bundle\"    ],    \"crls\": [        \"/infra/crls/nsx_default_public_crl\"    ],    \"idle_connection_timeout\": 5400,    \"_system_owned\": false,    \"_protection\": \"NOT_PROTECTED\",    \"_create_user\": \"admin\",    \"_create_time\": 1622141786963,    \"_last_modified_user\": \"admin\",    \"_last_modified_time\": 1622225387352,    \"_revision\": 4 } </pre>  4 - Internal Profile Balanced Sample intent path:/infra/tls-inspection-action-profiles/internal-balanced-profile Sample intent path: <pre> {     \"tls_config_setting\": \"BALANCED\",     \"resource_type\": \"TlsInspectionInternalProfile\",     \"server_certs_key\": [\"/infra/certificates/server-cert-1\"],     \"default_cert_key\": \"/infra/certificates/server-cert-1\" } </pre> Profile with default settings: <pre> {     \"tls_config_setting\": \"BALANCED\",     \"decryption_fail_action\": \"BYPASS\",     \"crypto_enforcement\": \"ENFORCE\",     \"client_min_tls_version\": \"TLS_V1_1\",     \"client_max_tls_version\": \"TLS_V1_2\",     \"server_min_tls_version\": \"TLS_V1_1\",     \"server_max_tls_version\": \"TLS_V1_2\",     \"client_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",         \"TLS_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_RSA_WITH_AES_256_CBC_SHA256\"     ],     \"server_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",         \"TLS_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_RSA_WITH_AES_256_CBC_SHA256\"     ],     \"server_certs_key\": [         \"/infra/certificates/server-cert-1\"     ],     \"default_cert_key\": \"/infra/certificates/server-cert-1\",     \"ocsp_must_staple\": false,     \"certificate_validation\": false,     \"resource_type\": \"TlsInspectionInternalProfile\",     \"id\": \"internal-balanced-profile\",     \"display_name\": \"internal-balanced-profile\",     \"path\": \"/infra/tls-inspection-action-profiles/internal-balanced-profile\",     \"relative_path\": \"internal-balanced-profile\",     \"parent_path\": \"/infra\",     \"unique_id\": \"b8486763-843a-4894-8dfd-5bceebb10cd3\",     \"marked_for_delete\": false,     \"overridden\": false,     \"trusted_ca_bundles\": [         \"/infra/cabundles/default_trusted_public_ca_bundle\"     ],     \"crls\": [         \"/infra/crls/nsx_default_public_crl\"     ],     \"idle_connection_timeout\": 5400,     \"_system_owned\": false,     \"_protection\": \"NOT_PROTECTED\",     \"_create_user\": \"admin\",     \"_create_time\": 1622071598527,     \"_last_modified_user\": \"admin\",     \"_last_modified_time\": 1622071598527,     \"_revision\": 0 } </pre>  5 - Internal Profile High Fidelity Sample intent path:/infra/tls-inspection-action-profiles/internal-high-fidelity-profile Sample intent path: <pre> {     \"tls_config_setting\": \"HIGH_FIDELITY\",     \"resource_type\": \"TlsInspectionInternalProfile\",     \"server_certs_key\": [\"/infra/certificates/server-cert-1\"],     \"default_cert_key\": \"/infra/certificates/server-cert-1\" } </pre> Profile with default settings: <pre> {     \"tls_config_setting\": \"HIGH_FIDELITY\",     \"decryption_fail_action\": \"BYPASS\",     \"crypto_enforcement\": \"TRANSPARENT\",     \"client_min_tls_version\": \"\",     \"client_max_tls_version\": \"\",     \"server_min_tls_version\": \"\",     \"server_max_tls_version\": \"\",     \"client_cipher_suite\": [],     \"server_cipher_suite\": [],     \"server_certs_key\": [         \"/infra/certificates/server-cert-1\"     ],     \"default_cert_key\": \"/infra/certificates/server-cert-1\",     \"ocsp_must_staple\": false,     \"certificate_validation\": false,     \"resource_type\": \"TlsInspectionInternalProfile\",     \"id\": \"internal-high-fidelity-profile\",     \"display_name\": \"internal-high-fidelity-profile\",     \"path\": \"/infra/tls-inspection-action-profiles/internal-high-fidelity-profile\",     \"relative_path\": \"internal-high-fidelity-profile\",     \"parent_path\": \"/infra\",     \"unique_id\": \"27609d17-e642-4a7a-b414-176b3f7eca8d\",     \"marked_for_delete\": false,     \"overridden\": false,     \"trusted_ca_bundles\": [         \"/infra/cabundles/default_trusted_public_ca_bundle\"     ],     \"crls\": [         \"/infra/crls/nsx_default_public_crl\"     ],     \"idle_connection_timeout\": 5400,     \"_system_owned\": false,     \"_protection\": \"NOT_PROTECTED\",     \"_create_user\": \"admin\",     \"_create_time\": 1622071452299,     \"_last_modified_user\": \"admin\",     \"_last_modified_time\": 1622071452299,     \"_revision\": 0 } </pre>  6 - Internal Profile High Security Sample intent path:/infra/tls-inspection-action-profiles/internal-high-security-profile Sample intent path: <pre> {     \"tls_config_setting\": \"HIGH_SECURITY\",     \"resource_type\": \"TlsInspectionInternalProfile\",     \"server_certs_key\": [\"/infra/certificates/server-cert-1\"],     \"default_cert_key\": \"/infra/certificates/server-cert-1\" } </pre>  Profile with default settings: <pre> {     \"tls_config_setting\": \"HIGH_SECURITY\",     \"decryption_fail_action\": \"BLOCK\",     \"crypto_enforcement\": \"ENFORCE\",     \"client_min_tls_version\": \"TLS_V1_2\",     \"client_max_tls_version\": \"TLS_V1_2\",     \"server_min_tls_version\": \"TLS_V1_2\",     \"server_max_tls_version\": \"TLS_V1_2\",     \"client_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\"     ],     \"server_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\"     ],     \"server_certs_key\": [         \"/infra/certificates/server-cert-1\"     ],     \"default_cert_key\": \"/infra/certificates/server-cert-1\",     \"ocsp_must_staple\": false,     \"certificate_validation\": false,     \"resource_type\": \"TlsInspectionInternalProfile\",     \"id\": \"internal-high-security-profile\",     \"display_name\": \"internal-high-security-profile\",     \"path\": \"/infra/tls-inspection-action-profiles/internal-high-security-profile\",     \"relative_path\": \"internal-high-security-profile\",     \"parent_path\": \"/infra\",     \"unique_id\": \"52e3e7e8-718d-4eaf-a177-501f196c421a\",     \"marked_for_delete\": false,     \"overridden\": false,     \"trusted_ca_bundles\": [         \"/infra/cabundles/default_trusted_public_ca_bundle\"     ],     \"crls\": [         \"/infra/crls/nsx_default_public_crl\"     ],     \"idle_connection_timeout\": 5400,     \"_system_owned\": false,     \"_protection\": \"NOT_PROTECTED\",     \"_create_user\": \"admin\",     \"_create_time\": 1622071359539,     \"_last_modified_user\": \"admin\",     \"_last_modified_time\": 1622071359539,     \"_revision\": 0 } </pre> 
    # @param action_profile_id 
    # @param tls_profile 
    # @param [Hash] opts the optional parameters
    # @return [TlsProfile]
    def create_or_update_tls_profile(action_profile_id, tls_profile, opts = {})
      data, _status_code, _headers = create_or_update_tls_profile_with_http_info(action_profile_id, tls_profile, opts)
      data
    end

    # Update a Tls profile.
    # Update user configurable properties of Tls profile. Each action profile supports the following 3 pre-defined config setting defaults:     Balanced, High Fidelity and High Security.  1 - External Profile Balanced (default) Sample intent path: /infra/tls-inspection-action-profiles/external-balanced-profile API payload: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;BALANCED\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,     \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,     \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot; } &lt;/pre&gt; Profile with default settings: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;BALANCED\&quot;,     \&quot;invalid_cert_action\&quot;: \&quot;ALLOW\&quot;,     \&quot;decryption_fail_action\&quot;: \&quot;BYPASS\&quot;,     \&quot;crypto_enforcement\&quot;: \&quot;ENFORCE\&quot;,     \&quot;client_min_tls_version\&quot;: \&quot;TLS_V1_1\&quot;,     \&quot;client_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;server_min_tls_version\&quot;: \&quot;TLS_V1_1\&quot;,     \&quot;server_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;client_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_256_CBC_SHA256\&quot;     ],     \&quot;server_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_256_CBC_SHA256\&quot;     ],     \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,     \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot;,     \&quot;ocsp_must_staple\&quot;: false,     \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,     \&quot;id\&quot;: \&quot;external-balanced-profile\&quot;,     \&quot;display_name\&quot;: \&quot;external-balanced-profile\&quot;,     \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/external-balanced-profile\&quot;,     \&quot;relative_path\&quot;: \&quot;external-balanced-profile\&quot;,     \&quot;parent_path\&quot;: \&quot;/infra\&quot;,     \&quot;unique_id\&quot;: \&quot;bb236080-e49d-4475-9eb3-b749b075164a\&quot;,     \&quot;marked_for_delete\&quot;: false,     \&quot;overridden\&quot;: false,     \&quot;trusted_ca_bundles\&quot;: [         \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;     ],     \&quot;crls\&quot;: [         \&quot;/infra/crls/nsx_default_public_crl\&quot;     ],     \&quot;idle_connection_timeout\&quot;: 5400,     \&quot;_system_owned\&quot;: false,     \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,     \&quot;_create_user\&quot;: \&quot;admin\&quot;,     \&quot;_create_time\&quot;: 1622225641015,     \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,     \&quot;_last_modified_time\&quot;: 1622225641015,     \&quot;_revision\&quot;: 0 } &lt;/pre&gt;  2 - External Profile High Fidelity Sample intent path: /infra/tls-inspection-action-profiles/external-high-fidelity-profile Sample intent path: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_FIDELITY\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,     \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,     \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot; } &lt;/pre&gt; Profile with default settings: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_FIDELITY\&quot;,     \&quot;invalid_cert_action\&quot;: \&quot;ALLOW\&quot;,     \&quot;decryption_fail_action\&quot;: \&quot;BYPASS\&quot;,     \&quot;crypto_enforcement\&quot;: \&quot;TRANSPARENT\&quot;,     \&quot;client_min_tls_version\&quot;: \&quot;\&quot;,     \&quot;client_max_tls_version\&quot;: \&quot;\&quot;,     \&quot;server_min_tls_version\&quot;: \&quot;\&quot;,     \&quot;server_max_tls_version\&quot;: \&quot;\&quot;,     \&quot;client_cipher_suite\&quot;: [],     \&quot;server_cipher_suite\&quot;: [],     \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,     \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot;,     \&quot;ocsp_must_staple\&quot;: false,     \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,     \&quot;id\&quot;: \&quot;external-high-fidelity-profile\&quot;,     \&quot;display_name\&quot;: \&quot;external-high-fidelity-profile\&quot;,     \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/external-high-fidelity-profile\&quot;,     \&quot;relative_path\&quot;: \&quot;external-high-fidelity-profile\&quot;,     \&quot;parent_path\&quot;: \&quot;/infra\&quot;,     \&quot;unique_id\&quot;: \&quot;bb6c8604-c8eb-44dd-aded-7407e0ca887c\&quot;,     \&quot;marked_for_delete\&quot;: false,     \&quot;overridden\&quot;: false,     \&quot;trusted_ca_bundles\&quot;: [         \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;     ],     \&quot;crls\&quot;: [         \&quot;/infra/crls/nsx_default_public_crl\&quot;     ],     \&quot;idle_connection_timeout\&quot;: 5400,     \&quot;_system_owned\&quot;: false,     \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,     \&quot;_create_user\&quot;: \&quot;admin\&quot;,     \&quot;_create_time\&quot;: 1622225537386,     \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,     \&quot;_last_modified_time\&quot;: 1622225537386,     \&quot;_revision\&quot;: 0 } &lt;/pre&gt;  3 - External Profile High Security Sample intent path:/infra/tls-inspection-action-profiles/external-high-security-profile Sample intent path: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_SECURITY\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,     \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,     \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot; } &lt;/pre&gt; Profile with default settings: &lt;pre&gt; {    \&quot;tls_config_setting\&quot;: \&quot;HIGH_SECURITY\&quot;,    \&quot;invalid_cert_action\&quot;: \&quot;BLOCK\&quot;,    \&quot;decryption_fail_action\&quot;: \&quot;BLOCK\&quot;,    \&quot;crypto_enforcement\&quot;: \&quot;ENFORCE\&quot;,    \&quot;client_min_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,    \&quot;client_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,    \&quot;server_min_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,    \&quot;server_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,    \&quot;client_cipher_suite\&quot;: [        \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,        \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;    ],    \&quot;server_cipher_suite\&quot;: [        \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,        \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;    ],    \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,    \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot;,    \&quot;ocsp_must_staple\&quot;: false,    \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,    \&quot;id\&quot;: \&quot;external-high-security-profile\&quot;,    \&quot;display_name\&quot;: \&quot;external-high-security-profile\&quot;,    \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/external-high-security-profile\&quot;,    \&quot;relative_path\&quot;: \&quot;external-high-security-profile\&quot;,    \&quot;parent_path\&quot;: \&quot;/infra\&quot;,    \&quot;unique_id\&quot;: \&quot;e19cbc40-c679-4f32-9e40-aa5eedf7f254\&quot;,    \&quot;marked_for_delete\&quot;: false,    \&quot;overridden\&quot;: false,    \&quot;trusted_ca_bundles\&quot;: [        \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;    ],    \&quot;crls\&quot;: [        \&quot;/infra/crls/nsx_default_public_crl\&quot;    ],    \&quot;idle_connection_timeout\&quot;: 5400,    \&quot;_system_owned\&quot;: false,    \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,    \&quot;_create_user\&quot;: \&quot;admin\&quot;,    \&quot;_create_time\&quot;: 1622141786963,    \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,    \&quot;_last_modified_time\&quot;: 1622225387352,    \&quot;_revision\&quot;: 4 } &lt;/pre&gt;  4 - Internal Profile Balanced Sample intent path:/infra/tls-inspection-action-profiles/internal-balanced-profile Sample intent path: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;BALANCED\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;server_certs_key\&quot;: [\&quot;/infra/certificates/server-cert-1\&quot;],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot; } &lt;/pre&gt; Profile with default settings: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;BALANCED\&quot;,     \&quot;decryption_fail_action\&quot;: \&quot;BYPASS\&quot;,     \&quot;crypto_enforcement\&quot;: \&quot;ENFORCE\&quot;,     \&quot;client_min_tls_version\&quot;: \&quot;TLS_V1_1\&quot;,     \&quot;client_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;server_min_tls_version\&quot;: \&quot;TLS_V1_1\&quot;,     \&quot;server_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;client_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_256_CBC_SHA256\&quot;     ],     \&quot;server_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_256_CBC_SHA256\&quot;     ],     \&quot;server_certs_key\&quot;: [         \&quot;/infra/certificates/server-cert-1\&quot;     ],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot;,     \&quot;ocsp_must_staple\&quot;: false,     \&quot;certificate_validation\&quot;: false,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;id\&quot;: \&quot;internal-balanced-profile\&quot;,     \&quot;display_name\&quot;: \&quot;internal-balanced-profile\&quot;,     \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/internal-balanced-profile\&quot;,     \&quot;relative_path\&quot;: \&quot;internal-balanced-profile\&quot;,     \&quot;parent_path\&quot;: \&quot;/infra\&quot;,     \&quot;unique_id\&quot;: \&quot;b8486763-843a-4894-8dfd-5bceebb10cd3\&quot;,     \&quot;marked_for_delete\&quot;: false,     \&quot;overridden\&quot;: false,     \&quot;trusted_ca_bundles\&quot;: [         \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;     ],     \&quot;crls\&quot;: [         \&quot;/infra/crls/nsx_default_public_crl\&quot;     ],     \&quot;idle_connection_timeout\&quot;: 5400,     \&quot;_system_owned\&quot;: false,     \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,     \&quot;_create_user\&quot;: \&quot;admin\&quot;,     \&quot;_create_time\&quot;: 1622071598527,     \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,     \&quot;_last_modified_time\&quot;: 1622071598527,     \&quot;_revision\&quot;: 0 } &lt;/pre&gt;  5 - Internal Profile High Fidelity Sample intent path:/infra/tls-inspection-action-profiles/internal-high-fidelity-profile Sample intent path: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_FIDELITY\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;server_certs_key\&quot;: [\&quot;/infra/certificates/server-cert-1\&quot;],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot; } &lt;/pre&gt; Profile with default settings: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_FIDELITY\&quot;,     \&quot;decryption_fail_action\&quot;: \&quot;BYPASS\&quot;,     \&quot;crypto_enforcement\&quot;: \&quot;TRANSPARENT\&quot;,     \&quot;client_min_tls_version\&quot;: \&quot;\&quot;,     \&quot;client_max_tls_version\&quot;: \&quot;\&quot;,     \&quot;server_min_tls_version\&quot;: \&quot;\&quot;,     \&quot;server_max_tls_version\&quot;: \&quot;\&quot;,     \&quot;client_cipher_suite\&quot;: [],     \&quot;server_cipher_suite\&quot;: [],     \&quot;server_certs_key\&quot;: [         \&quot;/infra/certificates/server-cert-1\&quot;     ],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot;,     \&quot;ocsp_must_staple\&quot;: false,     \&quot;certificate_validation\&quot;: false,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;id\&quot;: \&quot;internal-high-fidelity-profile\&quot;,     \&quot;display_name\&quot;: \&quot;internal-high-fidelity-profile\&quot;,     \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/internal-high-fidelity-profile\&quot;,     \&quot;relative_path\&quot;: \&quot;internal-high-fidelity-profile\&quot;,     \&quot;parent_path\&quot;: \&quot;/infra\&quot;,     \&quot;unique_id\&quot;: \&quot;27609d17-e642-4a7a-b414-176b3f7eca8d\&quot;,     \&quot;marked_for_delete\&quot;: false,     \&quot;overridden\&quot;: false,     \&quot;trusted_ca_bundles\&quot;: [         \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;     ],     \&quot;crls\&quot;: [         \&quot;/infra/crls/nsx_default_public_crl\&quot;     ],     \&quot;idle_connection_timeout\&quot;: 5400,     \&quot;_system_owned\&quot;: false,     \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,     \&quot;_create_user\&quot;: \&quot;admin\&quot;,     \&quot;_create_time\&quot;: 1622071452299,     \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,     \&quot;_last_modified_time\&quot;: 1622071452299,     \&quot;_revision\&quot;: 0 } &lt;/pre&gt;  6 - Internal Profile High Security Sample intent path:/infra/tls-inspection-action-profiles/internal-high-security-profile Sample intent path: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_SECURITY\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;server_certs_key\&quot;: [\&quot;/infra/certificates/server-cert-1\&quot;],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot; } &lt;/pre&gt;  Profile with default settings: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_SECURITY\&quot;,     \&quot;decryption_fail_action\&quot;: \&quot;BLOCK\&quot;,     \&quot;crypto_enforcement\&quot;: \&quot;ENFORCE\&quot;,     \&quot;client_min_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;client_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;server_min_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;server_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;client_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;     ],     \&quot;server_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;     ],     \&quot;server_certs_key\&quot;: [         \&quot;/infra/certificates/server-cert-1\&quot;     ],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot;,     \&quot;ocsp_must_staple\&quot;: false,     \&quot;certificate_validation\&quot;: false,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;id\&quot;: \&quot;internal-high-security-profile\&quot;,     \&quot;display_name\&quot;: \&quot;internal-high-security-profile\&quot;,     \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/internal-high-security-profile\&quot;,     \&quot;relative_path\&quot;: \&quot;internal-high-security-profile\&quot;,     \&quot;parent_path\&quot;: \&quot;/infra\&quot;,     \&quot;unique_id\&quot;: \&quot;52e3e7e8-718d-4eaf-a177-501f196c421a\&quot;,     \&quot;marked_for_delete\&quot;: false,     \&quot;overridden\&quot;: false,     \&quot;trusted_ca_bundles\&quot;: [         \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;     ],     \&quot;crls\&quot;: [         \&quot;/infra/crls/nsx_default_public_crl\&quot;     ],     \&quot;idle_connection_timeout\&quot;: 5400,     \&quot;_system_owned\&quot;: false,     \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,     \&quot;_create_user\&quot;: \&quot;admin\&quot;,     \&quot;_create_time\&quot;: 1622071359539,     \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,     \&quot;_last_modified_time\&quot;: 1622071359539,     \&quot;_revision\&quot;: 0 } &lt;/pre&gt; 
    # @param action_profile_id 
    # @param tls_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsProfile, Fixnum, Hash)>] TlsProfile data, response status code and response headers
    def create_or_update_tls_profile_with_http_info(action_profile_id, tls_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_update_tls_profile ...'
      end
      # verify the required parameter 'action_profile_id' is set
      if @api_client.config.client_side_validation && action_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'action_profile_id' when calling SecurityApi.create_or_update_tls_profile"
      end
      # verify the required parameter 'tls_profile' is set
      if @api_client.config.client_side_validation && tls_profile.nil?
        fail ArgumentError, "Missing the required parameter 'tls_profile' when calling SecurityApi.create_or_update_tls_profile"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-action-profiles/{action-profile-id}'.sub('{' + 'action-profile-id' + '}', action_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_update_tls_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update virtual endpoint
    # Create or update virtual endpoint. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param virtual_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [VirtualEndpoint]
    def create_or_update_virtual_endpoint(tier_0_id, locale_service_id, virtual_endpoint_id, virtual_endpoint, opts = {})
      data, _status_code, _headers = create_or_update_virtual_endpoint_with_http_info(tier_0_id, locale_service_id, virtual_endpoint_id, virtual_endpoint, opts)
      data
    end

    # Create or update virtual endpoint
    # Create or update virtual endpoint. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param virtual_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VirtualEndpoint, Fixnum, Hash)>] VirtualEndpoint data, response status code and response headers
    def create_or_update_virtual_endpoint_with_http_info(tier_0_id, locale_service_id, virtual_endpoint_id, virtual_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_or_update_virtual_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.create_or_update_virtual_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.create_or_update_virtual_endpoint"
      end
      # verify the required parameter 'virtual_endpoint_id' is set
      if @api_client.config.client_side_validation && virtual_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_endpoint_id' when calling SecurityApi.create_or_update_virtual_endpoint"
      end
      # verify the required parameter 'virtual_endpoint' is set
      if @api_client.config.client_side_validation && virtual_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_endpoint' when calling SecurityApi.create_or_update_virtual_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/endpoints/virtual-endpoints/{virtual-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'virtual-endpoint-id' + '}', virtual_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(virtual_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_or_update_virtual_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service instance
    # Create service instance. Please note that, only display_name, description and deployment_spec_name are allowed to be modified in an exisiting entity. If the deployment spec name is changed, it will trigger the upgrade operation for the SVMs. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceInstance]
    def create_policy_service_instance(tier_0_id, locale_service_id, service_instance_id, policy_service_instance, opts = {})
      data, _status_code, _headers = create_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, policy_service_instance, opts)
      data
    end

    # Create service instance
    # Create service instance. Please note that, only display_name, description and deployment_spec_name are allowed to be modified in an exisiting entity. If the deployment spec name is changed, it will trigger the upgrade operation for the SVMs. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceInstance, Fixnum, Hash)>] PolicyServiceInstance data, response status code and response headers
    def create_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, policy_service_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_policy_service_instance ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.create_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.create_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.create_policy_service_instance"
      end
      # verify the required parameter 'policy_service_instance' is set
      if @api_client.config.client_side_validation && policy_service_instance.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_instance' when calling SecurityApi.create_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/service-instances/{service-instance-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update service profile
    # Create or update Service profile to specify vendor temp- late attributes for a given 3rd party service.
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param policy_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceProfile]
    def create_policy_service_profile(service_reference_id, service_profile_id, policy_service_profile, opts = {})
      data, _status_code, _headers = create_policy_service_profile_with_http_info(service_reference_id, service_profile_id, policy_service_profile, opts)
      data
    end

    # Create or update service profile
    # Create or update Service profile to specify vendor temp- late attributes for a given 3rd party service.
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param policy_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceProfile, Fixnum, Hash)>] PolicyServiceProfile data, response status code and response headers
    def create_policy_service_profile_with_http_info(service_reference_id, service_profile_id, policy_service_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_policy_service_profile ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling SecurityApi.create_policy_service_profile"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling SecurityApi.create_policy_service_profile"
      end
      # verify the required parameter 'policy_service_profile' is set
      if @api_client.config.client_side_validation && policy_service_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_profile' when calling SecurityApi.create_policy_service_profile"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_policy_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create  or update service chain
    # Create or update Service chain representing the sequence in which 3rd party services must be consumed. 
    # @param service_chain_id Service chain id
    # @param policy_service_chain 
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceChain]
    def create_service_chain(service_chain_id, policy_service_chain, opts = {})
      data, _status_code, _headers = create_service_chain_with_http_info(service_chain_id, policy_service_chain, opts)
      data
    end

    # Create  or update service chain
    # Create or update Service chain representing the sequence in which 3rd party services must be consumed. 
    # @param service_chain_id Service chain id
    # @param policy_service_chain 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceChain, Fixnum, Hash)>] PolicyServiceChain data, response status code and response headers
    def create_service_chain_with_http_info(service_chain_id, policy_service_chain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_service_chain ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling SecurityApi.create_service_chain"
      end
      # verify the required parameter 'policy_service_chain' is set
      if @api_client.config.client_side_validation && policy_service_chain.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_chain' when calling SecurityApi.create_service_chain"
      end
      # resource path
      local_var_path = '/infra/service-chains/{service-chain-id}'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_chain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceChain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_service_chain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Service Definition on given enforcement point.
    # Create a Service Definition on given enforcement point.
    # @param enforcement_point_id Enforcement point id
    # @param service_definition 
    # @param [Hash] opts the optional parameters
    # @return [ServiceDefinition]
    def create_service_definition(enforcement_point_id, service_definition, opts = {})
      data, _status_code, _headers = create_service_definition_with_http_info(enforcement_point_id, service_definition, opts)
      data
    end

    # Create a Service Definition on given enforcement point.
    # Create a Service Definition on given enforcement point.
    # @param enforcement_point_id Enforcement point id
    # @param service_definition 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDefinition, Fixnum, Hash)>] ServiceDefinition data, response status code and response headers
    def create_service_definition_with_http_info(enforcement_point_id, service_definition, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_service_definition ...'
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling SecurityApi.create_service_definition"
      end
      # verify the required parameter 'service_definition' is set
      if @api_client.config.client_side_validation && service_definition.nil?
        fail ArgumentError, "Missing the required parameter 'service_definition' when calling SecurityApi.create_service_definition"
      end
      # resource path
      local_var_path = '/enforcement-points/{enforcement-point-id}/service-definitions'.sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_definition)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_service_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service instance endpoint
    # Create service instance endpoint with given request if not exist. Modification of service instance endpoint is not allowed. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Service instance endpoint id
    # @param service_instance_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [ServiceInstanceEndpoint]
    def create_service_instance_endpoint(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, service_instance_endpoint, opts = {})
      data, _status_code, _headers = create_service_instance_endpoint_with_http_info(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, service_instance_endpoint, opts)
      data
    end

    # Create service instance endpoint
    # Create service instance endpoint with given request if not exist. Modification of service instance endpoint is not allowed. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Service instance endpoint id
    # @param service_instance_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInstanceEndpoint, Fixnum, Hash)>] ServiceInstanceEndpoint data, response status code and response headers
    def create_service_instance_endpoint_with_http_info(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, service_instance_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_service_instance_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.create_service_instance_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.create_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.create_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_endpoint_id' is set
      if @api_client.config.client_side_validation && service_instance_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_endpoint_id' when calling SecurityApi.create_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_endpoint' is set
      if @api_client.config.client_side_validation && service_instance_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_endpoint' when calling SecurityApi.create_service_instance_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}/service-instance-endpoints/{service-instance-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s).sub('{' + 'service-instance-endpoint-id' + '}', service_instance_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_instance_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInstanceEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_service_instance_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Tier1 BYOD service instance
    # Create Tier1 BYOD Service Instance which represent instance of service definition created on manager. 
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Tier1 BYOD service instance id
    # @param byod_policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [ByodPolicyServiceInstance]
    def create_tier1_byod_policy_service_instance(tier_1_id, locale_service_id, service_instance_id, byod_policy_service_instance, opts = {})
      data, _status_code, _headers = create_tier1_byod_policy_service_instance_with_http_info(tier_1_id, locale_service_id, service_instance_id, byod_policy_service_instance, opts)
      data
    end

    # Create Tier1 BYOD service instance
    # Create Tier1 BYOD Service Instance which represent instance of service definition created on manager. 
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Tier1 BYOD service instance id
    # @param byod_policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ByodPolicyServiceInstance, Fixnum, Hash)>] ByodPolicyServiceInstance data, response status code and response headers
    def create_tier1_byod_policy_service_instance_with_http_info(tier_1_id, locale_service_id, service_instance_id, byod_policy_service_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_tier1_byod_policy_service_instance ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.create_tier1_byod_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.create_tier1_byod_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.create_tier1_byod_policy_service_instance"
      end
      # verify the required parameter 'byod_policy_service_instance' is set
      if @api_client.config.client_side_validation && byod_policy_service_instance.nil?
        fail ArgumentError, "Missing the required parameter 'byod_policy_service_instance' when calling SecurityApi.create_tier1_byod_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(byod_policy_service_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ByodPolicyServiceInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_tier1_byod_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Tier1 service instance
    # Create Tier1 service instance. Please note that, only display_name, description and deployment_spec_name are allowed to be modified in an exisiting entity. If the deployment spec name is changed, it will trigger the upgrade operation for the SVMs. 
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Tier1 Service instance id
    # @param policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceInstance]
    def create_tier1_policy_service_instance(tier_1_id, locale_service_id, service_instance_id, policy_service_instance, opts = {})
      data, _status_code, _headers = create_tier1_policy_service_instance_with_http_info(tier_1_id, locale_service_id, service_instance_id, policy_service_instance, opts)
      data
    end

    # Create Tier1 service instance
    # Create Tier1 service instance. Please note that, only display_name, description and deployment_spec_name are allowed to be modified in an exisiting entity. If the deployment spec name is changed, it will trigger the upgrade operation for the SVMs. 
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Tier1 Service instance id
    # @param policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceInstance, Fixnum, Hash)>] PolicyServiceInstance data, response status code and response headers
    def create_tier1_policy_service_instance_with_http_info(tier_1_id, locale_service_id, service_instance_id, policy_service_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_tier1_policy_service_instance ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.create_tier1_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.create_tier1_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.create_tier1_policy_service_instance"
      end
      # verify the required parameter 'policy_service_instance' is set
      if @api_client.config.client_side_validation && policy_service_instance.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_instance' when calling SecurityApi.create_tier1_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/service-instances/{service-instance-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_tier1_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Tier1 service instance endpoint
    # Create Tier1 service instance endpoint with given request if not exist. Modification of Tier1 service instance endpoint is not allowed. 
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Tier1 Service instance endpoint id
    # @param service_instance_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [ServiceInstanceEndpoint]
    def create_tier1_service_instance_endpoint(tier_1_id, locale_service_id, service_instance_id, service_instance_endpoint_id, service_instance_endpoint, opts = {})
      data, _status_code, _headers = create_tier1_service_instance_endpoint_with_http_info(tier_1_id, locale_service_id, service_instance_id, service_instance_endpoint_id, service_instance_endpoint, opts)
      data
    end

    # Create Tier1 service instance endpoint
    # Create Tier1 service instance endpoint with given request if not exist. Modification of Tier1 service instance endpoint is not allowed. 
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Tier1 Service instance endpoint id
    # @param service_instance_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInstanceEndpoint, Fixnum, Hash)>] ServiceInstanceEndpoint data, response status code and response headers
    def create_tier1_service_instance_endpoint_with_http_info(tier_1_id, locale_service_id, service_instance_id, service_instance_endpoint_id, service_instance_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.create_tier1_service_instance_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.create_tier1_service_instance_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.create_tier1_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.create_tier1_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_endpoint_id' is set
      if @api_client.config.client_side_validation && service_instance_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_endpoint_id' when calling SecurityApi.create_tier1_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_endpoint' is set
      if @api_client.config.client_side_validation && service_instance_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_endpoint' when calling SecurityApi.create_tier1_service_instance_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}/service-instance-endpoints/{service-instance-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s).sub('{' + 'service-instance-endpoint-id' + '}', service_instance_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_instance_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInstanceEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#create_tier1_service_instance_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Bridge Firewall Policy
    # Delete Bridge Firewall Policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_bridge_firewall_policy(domain_id, bridge_firewall_policy_id, opts = {})
      delete_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, opts)
      nil
    end

    # Delete Bridge Firewall Policy
    # Delete Bridge Firewall Policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_bridge_firewall_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling SecurityApi.delete_bridge_firewall_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_bridge_firewall_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Bridge Firewall Rule
    # Delete Bridge Firewall Rule. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_bridge_firewall_rule(domain_id, bridge_firewall_policy_id, rule_id, opts = {})
      delete_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, opts)
      nil
    end

    # Delete Bridge Firewall Rule
    # Delete Bridge Firewall Rule. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_bridge_firewall_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_bridge_firewall_rule"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling SecurityApi.delete_bridge_firewall_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.delete_bridge_firewall_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_bridge_firewall_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete BYOD policy service instance
    # Delete BYOD policy service instance
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_byod_policy_service_instance(tier_0_id, locale_service_id, service_instance_id, opts = {})
      delete_byod_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts)
      nil
    end

    # Delete BYOD policy service instance
    # Delete BYOD policy service instance
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_byod_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_byod_policy_service_instance ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.delete_byod_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.delete_byod_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.delete_byod_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_byod_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a security policy from this domain
    # Deletes the security policy along with all the rules 
    # @param domain_id 
    # @param security_policy_id 
    # @param antrea_cluster_1 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_cluster_container_for_security_policy(domain_id, security_policy_id, antrea_cluster_1, opts = {})
      delete_cluster_container_for_security_policy_with_http_info(domain_id, security_policy_id, antrea_cluster_1, opts)
      nil
    end

    # Deletes a security policy from this domain
    # Deletes the security policy along with all the rules 
    # @param domain_id 
    # @param security_policy_id 
    # @param antrea_cluster_1 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_cluster_container_for_security_policy_with_http_info(domain_id, security_policy_id, antrea_cluster_1, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_cluster_container_for_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_cluster_container_for_security_policy"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.delete_cluster_container_for_security_policy"
      end
      # verify the required parameter 'antrea_cluster_1' is set
      if @api_client.config.client_side_validation && antrea_cluster_1.nil?
        fail ArgumentError, "Missing the required parameter 'antrea_cluster_1' when calling SecurityApi.delete_cluster_container_for_security_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/container-cluster-span/{antrea-cluster-1}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'antrea-cluster-1' + '}', antrea_cluster_1.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_cluster_container_for_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete CommunicationEntry
    # Delete CommunicationEntry  <br> This API is deprecated. Please use the following API instead. DELETE /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_communication_entry(domain_id, communication_map_id, communication_entry_id, opts = {})
      delete_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, opts)
      nil
    end

    # Delete CommunicationEntry
    # Delete CommunicationEntry  &lt;br&gt; This API is deprecated. Please use the following API instead. DELETE /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_communication_entry ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_communication_entry"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling SecurityApi.delete_communication_entry"
      end
      # verify the required parameter 'communication_entry_id' is set
      if @api_client.config.client_side_validation && communication_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry_id' when calling SecurityApi.delete_communication_entry"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}/communication-entries/{communication-entry-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s).sub('{' + 'communication-entry-id' + '}', communication_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a communication map from this domain
    # Deletes the communication map along with all the communication entries  <br> This API is deprecated. Please use the following API instead. DELETE /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_communication_map_for_domain(domain_id, communication_map_id, opts = {})
      delete_communication_map_for_domain_with_http_info(domain_id, communication_map_id, opts)
      nil
    end

    # Deletes a communication map from this domain
    # Deletes the communication map along with all the communication entries  &lt;br&gt; This API is deprecated. Please use the following API instead. DELETE /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_communication_map_for_domain_with_http_info(domain_id, communication_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_communication_map_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_communication_map_for_domain"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling SecurityApi.delete_communication_map_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_communication_map_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete compute cluster idfw configuration
    # Delete compute cluster identity firewall configuration.
    # @param cluster_id Cluster ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_compute_cluster_idfw_configuration(cluster_id, opts = {})
      delete_compute_cluster_idfw_configuration_with_http_info(cluster_id, opts)
      nil
    end

    # Delete compute cluster idfw configuration
    # Delete compute cluster identity firewall configuration.
    # @param cluster_id Cluster ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_compute_cluster_idfw_configuration_with_http_info(cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_compute_cluster_idfw_configuration ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling SecurityApi.delete_compute_cluster_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/cluster/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_compute_cluster_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete CPU and memory thresholds profile
    # Delete CPU and memory thresholds profile.
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_cpu_mem_thresholds_profile(profile_id, opts = {})
      delete_cpu_mem_thresholds_profile_with_http_info(profile_id, opts)
      nil
    end

    # Delete CPU and memory thresholds profile
    # Delete CPU and memory thresholds profile.
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_cpu_mem_thresholds_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_cpu_mem_thresholds_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.delete_cpu_mem_thresholds_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/cpu-mem-thresholds-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_cpu_mem_thresholds_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DNS security profile
    # Delete DNS security profile
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_dns_security_profile(profile_id, opts = {})
      delete_dns_security_profile_with_http_info(profile_id, opts)
      nil
    end

    # Delete DNS security profile
    # Delete DNS security profile
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dns_security_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_dns_security_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.delete_dns_security_profile"
      end
      # resource path
      local_var_path = '/infra/dns-security-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DNS security profile binding map
    # API will delete DNS security profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dns_security_profile_binding(domain_id, group_id, dns_security_profile_binding_map_id, opts = {})
      delete_dns_security_profile_binding_with_http_info(domain_id, group_id, dns_security_profile_binding_map_id, opts)
      nil
    end

    # Delete DNS security profile binding map
    # API will delete DNS security profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dns_security_profile_binding_with_http_info(domain_id, group_id, dns_security_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_dns_security_profile_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_dns_security_profile_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.delete_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map_id' when calling SecurityApi.delete_dns_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps/{dns-security-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'dns-security-profile-binding-map-id' + '}', dns_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_dns_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a manual draft
    # Delete a manual draft.
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_draft(draft_id, opts = {})
      delete_draft_with_http_info(draft_id, opts)
      nil
    end

    # Delete a manual draft
    # Delete a manual draft.
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.delete_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Endpoint policy
    # Delete Endpoint policy.
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_endpoint_policy(domain_id, endpoint_policy_id, opts = {})
      delete_endpoint_policy_with_http_info(domain_id, endpoint_policy_id, opts)
      nil
    end

    # Delete Endpoint policy
    # Delete Endpoint policy.
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_endpoint_policy_with_http_info(domain_id, endpoint_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_endpoint_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_endpoint_policy"
      end
      # verify the required parameter 'endpoint_policy_id' is set
      if @api_client.config.client_side_validation && endpoint_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy_id' when calling SecurityApi.delete_endpoint_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'endpoint-policy-id' + '}', endpoint_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_endpoint_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete EndpointRule
    # Delete EndpointRule
    # @param domain_id Domain ID
    # @param endpoint_policy_id EndpointPolicy ID
    # @param endpoint_rule_id EndpointRule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_endpoint_rule(domain_id, endpoint_policy_id, endpoint_rule_id, opts = {})
      delete_endpoint_rule_with_http_info(domain_id, endpoint_policy_id, endpoint_rule_id, opts)
      nil
    end

    # Delete EndpointRule
    # Delete EndpointRule
    # @param domain_id Domain ID
    # @param endpoint_policy_id EndpointPolicy ID
    # @param endpoint_rule_id EndpointRule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_endpoint_rule_with_http_info(domain_id, endpoint_policy_id, endpoint_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_endpoint_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_endpoint_rule"
      end
      # verify the required parameter 'endpoint_policy_id' is set
      if @api_client.config.client_side_validation && endpoint_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy_id' when calling SecurityApi.delete_endpoint_rule"
      end
      # verify the required parameter 'endpoint_rule_id' is set
      if @api_client.config.client_side_validation && endpoint_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_rule_id' when calling SecurityApi.delete_endpoint_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}/endpoint-rules/{endpoint-rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'endpoint-policy-id' + '}', endpoint_policy_id.to_s).sub('{' + 'endpoint-rule-id' + '}', endpoint_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_endpoint_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete firewall identity store
    # If the firewall identity store is removed, it will stop the identity store synchronization. User will not be able to define new IDFW rules  <br> <br> Use the following Policy API - <br> DELETE /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def delete_firewall_identity_store(firewall_identity_store_id, opts = {})
      delete_firewall_identity_store_with_http_info(firewall_identity_store_id, opts)
      nil
    end

    # Delete firewall identity store
    # If the firewall identity store is removed, it will stop the identity store synchronization. User will not be able to define new IDFW rules  &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; DELETE /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_firewall_identity_store_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_firewall_identity_store ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SecurityApi.delete_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Event Log server for Firewall Identity store
    # Delete a Event Log server for Firewall Identity store <br> <br> Use the following Policy API - <br> DELETE /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/event-log-servers/&lt;event-log-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def delete_firewall_identity_store_event_log_server(firewall_identity_store_id, event_log_server_id, opts = {})
      delete_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, opts)
      nil
    end

    # Delete a Event Log server for Firewall Identity store
    # Delete a Event Log server for Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; DELETE /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/event-log-servers/&amp;lt;event-log-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SecurityApi.delete_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling SecurityApi.delete_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a LDAP server for Firewall Identity store
    # Delete a LDAP server for Firewall Identity store <br> <br> Use the following Policy API - <br> DELETE /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers/&lt;ldap-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def delete_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, opts = {})
      delete_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, opts)
      nil
    end

    # Delete a LDAP server for Firewall Identity store
    # Delete a LDAP server for Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; DELETE /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers/&amp;lt;ldap-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SecurityApi.delete_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SecurityApi.delete_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile
    # API will delete Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_flood_protection_profile(flood_protection_profile_id, opts = {})
      delete_flood_protection_profile_with_http_info(flood_protection_profile_id, opts)
      nil
    end

    # Delete Flood Protection Profile
    # API will delete Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_flood_protection_profile_with_http_info(flood_protection_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_flood_protection_profile ...'
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityApi.delete_flood_protection_profile"
      end
      # resource path
      local_var_path = '/infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete FqdnAnalysisConfig
    # Delete FqdnAnalysisConfig from the passed edge cluser node. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_fqdn_analysis_config(site_id, enforcement_point_id, edge_cluster_id, opts = {})
      delete_fqdn_analysis_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, opts)
      nil
    end

    # Delete FqdnAnalysisConfig
    # Delete FqdnAnalysisConfig from the passed edge cluser node. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_fqdn_analysis_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_fqdn_analysis_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SecurityApi.delete_fqdn_analysis_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling SecurityApi.delete_fqdn_analysis_config"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling SecurityApi.delete_fqdn_analysis_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/fqdn-analysis-config'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_fqdn_analysis_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete GatewayPolicy
    # Delete GatewayPolicy
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_gateway_policy(domain_id, gateway_policy_id, opts = {})
      delete_gateway_policy_with_http_info(domain_id, gateway_policy_id, opts)
      nil
    end

    # Delete GatewayPolicy
    # Delete GatewayPolicy
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_gateway_policy_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.delete_gateway_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete rule
    # Delete rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_gateway_rule(domain_id, gateway_policy_id, rule_id, opts = {})
      delete_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts)
      nil
    end

    # Delete rule
    # Delete rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.delete_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.delete_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Global IDS signature
    # Delete global intrusion detection signature. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_global_ids_signature(signature_id, opts = {})
      delete_global_ids_signature_with_http_info(signature_id, opts)
      nil
    end

    # Delete Global IDS signature
    # Delete global intrusion detection signature. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_global_ids_signature_with_http_info(signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_global_ids_signature ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SecurityApi.delete_global_ids_signature"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_global_ids_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Group Monitoring Profile Binding
    # API will delete Group Monitoring Profile Binding
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_group_monitoring_binding(domain_id, group_id, group_monitoring_profile_binding_map_id, opts = {})
      delete_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, opts)
      nil
    end

    # Delete Group Monitoring Profile Binding
    # API will delete Group Monitoring Profile Binding
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_group_monitoring_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_group_monitoring_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.delete_group_monitoring_binding"
      end
      # verify the required parameter 'group_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && group_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_monitoring_profile_binding_map_id' when calling SecurityApi.delete_group_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/group-monitoring-profile-binding-maps/{group-monitoring-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'group-monitoring-profile-binding-map-id' + '}', group_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_group_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS GatewayPolicy
    # Delete IDS GatewayPolicy
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_gateway_policy(domain_id, policy_id, opts = {})
      delete_ids_gateway_policy_with_http_info(domain_id, policy_id, opts)
      nil
    end

    # Delete IDS GatewayPolicy
    # Delete IDS GatewayPolicy
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_gateway_policy_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_ids_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_ids_gateway_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.delete_ids_gateway_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_ids_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS Gateway rule
    # Delete IDS Gateway rule
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_gateway_rule(domain_id, policy_id, rule_id, opts = {})
      delete_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, opts)
      nil
    end

    # Delete IDS Gateway rule
    # Delete IDS Gateway rule
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_ids_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_ids_gateway_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.delete_ids_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.delete_ids_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_ids_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the IDS Pcap File
    # Delete IDS Pcap file entry from corfu and from file system. 
    # @param id ID of IdsPcapFileMetadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def delete_ids_pcap_file(id, opts = {})
      delete_ids_pcap_file_with_http_info(id, opts)
      nil
    end

    # Delete the IDS Pcap File
    # Delete IDS Pcap file entry from corfu and from file system. 
    # @param id ID of IdsPcapFileMetadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_pcap_file_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_ids_pcap_file ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SecurityApi.delete_ids_pcap_file"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/pcaps/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_ids_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will Delete existing IDS profile
    # This routine will delete IDS profile for provided profile id 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_profile(profile_id, opts = {})
      delete_ids_profile_with_http_info(profile_id, opts)
      nil
    end

    # This routine will Delete existing IDS profile
    # This routine will delete IDS profile for provided profile id 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_ids_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.delete_ids_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS rule
    # Delete intrusion detection rule. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_rule(domain_id, policy_id, rule_id, opts = {})
      delete_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts)
      nil
    end

    # Delete IDS rule
    # Delete intrusion detection rule. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.delete_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.delete_ids_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS security policy
    # Delete intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_security_policy(domain_id, policy_id, opts = {})
      delete_ids_security_policy_with_http_info(domain_id, policy_id, opts)
      nil
    end

    # Delete IDS security policy
    # Delete intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_security_policy_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.delete_ids_security_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete threshold configuration for IDS system signature
    # Resets threshold configuration for IDS system signature to default values. This API is applicable only for 'System' signatures. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_signature_threshold_config(signature_id, opts = {})
      delete_ids_signature_threshold_config_with_http_info(signature_id, opts)
      nil
    end

    # Delete threshold configuration for IDS system signature
    # Resets threshold configuration for IDS system signature to default values. This API is applicable only for &#39;System&#39; signatures. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_signature_threshold_config_with_http_info(signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_ids_signature_threshold_config ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SecurityApi.delete_ids_signature_threshold_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/threshold-configs/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_ids_signature_threshold_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Malware Prevention profile
    # Delete Malware Prevention profile. 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_malware_prevention_profile(profile_id, opts = {})
      delete_malware_prevention_profile_with_http_info(profile_id, opts)
      nil
    end

    # Delete Malware Prevention profile
    # Delete Malware Prevention profile. 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_malware_prevention_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_malware_prevention_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.delete_malware_prevention_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/malware-prevention-service/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_malware_prevention_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Firewall CPU Memory Thresholds Profile Binding
    # API will delete Firewall CPU Memory Thresholds Profile Binding.
    # @param cpu_mem_thresholds_profile_binding_map_id Firewall CPU Memory Thresholds Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_firewall_cpu_mem_thresholds_profile_binding_map(cpu_mem_thresholds_profile_binding_map_id, opts = {})
      delete_policy_firewall_cpu_mem_thresholds_profile_binding_map_with_http_info(cpu_mem_thresholds_profile_binding_map_id, opts)
      nil
    end

    # Delete Firewall CPU Memory Thresholds Profile Binding
    # API will delete Firewall CPU Memory Thresholds Profile Binding.
    # @param cpu_mem_thresholds_profile_binding_map_id Firewall CPU Memory Thresholds Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_firewall_cpu_mem_thresholds_profile_binding_map_with_http_info(cpu_mem_thresholds_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_policy_firewall_cpu_mem_thresholds_profile_binding_map ...'
      end
      # verify the required parameter 'cpu_mem_thresholds_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && cpu_mem_thresholds_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'cpu_mem_thresholds_profile_binding_map_id' when calling SecurityApi.delete_policy_firewall_cpu_mem_thresholds_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/cpu-mem-thresholds-profile-binding-maps/{cpu-mem-thresholds-profile-binding-map-id}'.sub('{' + 'cpu-mem-thresholds-profile-binding-map-id' + '}', cpu_mem_thresholds_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_policy_firewall_cpu_mem_thresholds_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Firewall Flood Protection Profile Binding
    # API will delete Firewall Flood Protection Profile Binding
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_firewall_flood_protection_binding(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      delete_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts)
      nil
    end

    # Delete Firewall Flood Protection Profile Binding
    # API will delete Firewall Flood Protection Profile Binding
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_policy_firewall_flood_protection_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.delete_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling SecurityApi.delete_policy_firewall_flood_protection_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_policy_firewall_flood_protection_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Policy Firewall Scheduler
    # Deletes the specified PolicyFirewallScheduler. If scheduler is consumed in a security policy, it won't get deleted. 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_policy_firewall_scheduler(firewall_scheduler_id, opts = {})
      delete_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts)
      nil
    end

    # Delete Policy Firewall Scheduler
    # Deletes the specified PolicyFirewallScheduler. If scheduler is consumed in a security policy, it won&#39;t get deleted. 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling SecurityApi.delete_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Firewall Session Timer Profile Binding
    # API will delete Firewall Session Timer Profile Binding
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_firewall_session_timer_binding(domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts = {})
      delete_policy_firewall_session_timer_binding_with_http_info(domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts)
      nil
    end

    # Delete Firewall Session Timer Profile Binding
    # API will delete Firewall Session Timer Profile Binding
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_firewall_session_timer_binding_with_http_info(domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_policy_firewall_session_timer_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.delete_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'firewall_session_timer_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_binding_map_id' when calling SecurityApi.delete_policy_firewall_session_timer_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps/{firewall-session-timer-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-session-timer-profile-binding-map-id' + '}', firewall_session_timer_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_policy_firewall_session_timer_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Firewall Session Timer Profile
    # API will delete Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_policy_firewall_session_timer_profile(firewall_session_timer_profile_id, opts = {})
      delete_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, opts)
      nil
    end

    # Delete Firewall Session Timer Profile
    # API will delete Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityApi.delete_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service chain
    # This API can be user to delete service chain with given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_service_chain(service_chain_id, opts = {})
      delete_policy_service_chain_with_http_info(service_chain_id, opts)
      nil
    end

    # Delete Service chain
    # This API can be user to delete service chain with given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_service_chain_with_http_info(service_chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_policy_service_chain ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling SecurityApi.delete_policy_service_chain"
      end
      # resource path
      local_var_path = '/infra/service-chains/{service-chain-id}'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_policy_service_chain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete policy service instance
    # Delete policy service instance
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_service_instance(tier_0_id, locale_service_id, service_instance_id, opts = {})
      delete_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts)
      nil
    end

    # Delete policy service instance
    # Delete policy service instance
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_policy_service_instance ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.delete_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.delete_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.delete_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/service-instances/{service-instance-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete service instance endpoint
    # Delete service instance endpoint
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Service instance endpoint id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_service_instance_endpoint(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, opts = {})
      delete_policy_service_instance_endpoint_with_http_info(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, opts)
      nil
    end

    # Delete service instance endpoint
    # Delete service instance endpoint
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Service instance endpoint id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_service_instance_endpoint_with_http_info(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_policy_service_instance_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.delete_policy_service_instance_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.delete_policy_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.delete_policy_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_endpoint_id' is set
      if @api_client.config.client_side_validation && service_instance_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_endpoint_id' when calling SecurityApi.delete_policy_service_instance_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}/service-instance-endpoints/{service-instance-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s).sub('{' + 'service-instance-endpoint-id' + '}', service_instance_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_policy_service_instance_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service profile
    # This API can be used to delete service profile with given service-profile-id
    # @param service_reference_id Id of Service Reference
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_service_profile(service_reference_id, service_profile_id, opts = {})
      delete_policy_service_profile_with_http_info(service_reference_id, service_profile_id, opts)
      nil
    end

    # Delete Service profile
    # This API can be used to delete service profile with given service-profile-id
    # @param service_reference_id Id of Service Reference
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_service_profile_with_http_info(service_reference_id, service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_policy_service_profile ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling SecurityApi.delete_policy_service_profile"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling SecurityApi.delete_policy_service_profile"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_policy_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete PolicyUrlCategorizationConfig
    # Delete PolicyUrlCategorizationConfig. If deleted, the URL categorization will be deactivated for that edge cluster. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_url_categorization_config(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts = {})
      delete_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts)
      nil
    end

    # Delete PolicyUrlCategorizationConfig
    # Delete PolicyUrlCategorizationConfig. If deleted, the URL categorization will be deactivated for that edge cluster. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_policy_url_categorization_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SecurityApi.delete_policy_url_categorization_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling SecurityApi.delete_policy_url_categorization_config"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling SecurityApi.delete_policy_url_categorization_config"
      end
      # verify the required parameter 'url_categorization_config_id' is set
      if @api_client.config.client_side_validation && url_categorization_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'url_categorization_config_id' when calling SecurityApi.delete_policy_url_categorization_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'url-categorization-config-id' + '}', url_categorization_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_policy_url_categorization_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete redirection policy
    # Delete redirection policy.
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_redirection_policy(domain_id, redirection_policy_id, opts = {})
      delete_redirection_policy_with_http_info(domain_id, redirection_policy_id, opts)
      nil
    end

    # Delete redirection policy
    # Delete redirection policy.
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_redirection_policy_with_http_info(domain_id, redirection_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_redirection_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_redirection_policy"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling SecurityApi.delete_redirection_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_redirection_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete RedirectionRule
    # Delete RedirectionRule
    # @param domain_id Domain ID
    # @param redirection_policy_id Redirection Map ID
    # @param rule_id RedirectionRule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_redirection_rule(domain_id, redirection_policy_id, rule_id, opts = {})
      delete_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, opts)
      nil
    end

    # Delete RedirectionRule
    # Delete RedirectionRule
    # @param domain_id Domain ID
    # @param redirection_policy_id Redirection Map ID
    # @param rule_id RedirectionRule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_redirection_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_redirection_rule"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling SecurityApi.delete_redirection_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.delete_redirection_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_redirection_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a security policy from this domain
    # Deletes the security policy along with all the rules 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_security_policy_for_domain(domain_id, security_policy_id, opts = {})
      delete_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts)
      nil
    end

    # Deletes a security policy from this domain
    # Deletes the security policy along with all the rules 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_security_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.delete_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete rule
    # Delete rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_security_rule(domain_id, security_policy_id, rule_id, opts = {})
      delete_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts)
      nil
    end

    # Delete rule
    # Delete rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.delete_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.delete_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.delete_security_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an existing Service Definition on the given enforcement point 
    # Delete an existing Service Definition on the given enforcement point. 
    # @param enforcement_point_id Enforcement point id
    # @param service_definition_id Id of service definition
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_definition(enforcement_point_id, service_definition_id, opts = {})
      delete_service_definition_with_http_info(enforcement_point_id, service_definition_id, opts)
      nil
    end

    # Delete an existing Service Definition on the given enforcement point 
    # Delete an existing Service Definition on the given enforcement point. 
    # @param enforcement_point_id Enforcement point id
    # @param service_definition_id Id of service definition
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_definition_with_http_info(enforcement_point_id, service_definition_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_service_definition ...'
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling SecurityApi.delete_service_definition"
      end
      # verify the required parameter 'service_definition_id' is set
      if @api_client.config.client_side_validation && service_definition_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_definition_id' when calling SecurityApi.delete_service_definition"
      end
      # resource path
      local_var_path = '/enforcement-points/{enforcement-point-id}/service-definitions/{service-definition-id}'.sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'service-definition-id' + '}', service_definition_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_service_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service Reference
    # This API can be used to delete a service reference with the given service-reference-id.
    # @param service_reference_id Id of Service Reference
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade Flag to cascade delete all children associated with service reference (default to false)
    # @return [nil]
    def delete_service_reference(service_reference_id, opts = {})
      delete_service_reference_with_http_info(service_reference_id, opts)
      nil
    end

    # Delete Service Reference
    # This API can be used to delete a service reference with the given service-reference-id.
    # @param service_reference_id Id of Service Reference
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade Flag to cascade delete all children associated with service reference
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_reference_with_http_info(service_reference_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_service_reference ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling SecurityApi.delete_service_reference"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cascade'] = opts[:'cascade'] if !opts[:'cascade'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_service_reference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile Binding for Tier-0 Logical Router
    # API will delete Flood Protection Profile Binding for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_flood_protection_profile_binding(tier0_id, flood_protection_profile_binding_id, opts = {})
      delete_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, opts)
      nil
    end

    # Delete Flood Protection Profile Binding for Tier-0 Logical Router
    # API will delete Flood Protection Profile Binding for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_tier0_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityApi.delete_tier0_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.delete_tier0_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_tier0_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile Binding for Tier-0 Logical Router LocaleServices
    # API will delete Flood Protection Profile Binding for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_locale_services_flood_protection_profile_binding(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      delete_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts)
      nil
    end

    # Delete Flood Protection Profile Binding for Tier-0 Logical Router LocaleServices
    # API will delete Flood Protection Profile Binding for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_tier0_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityApi.delete_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.delete_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.delete_tier0_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_tier0_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Session Timer Profile Binding for Tier-0 Logical Router LocaleServices
    # API will delete Session Timer Profile Binding for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_locale_services_session_timer_profile_binding(tier0_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      delete_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, opts)
      nil
    end

    # Delete Session Timer Profile Binding for Tier-0 Logical Router LocaleServices
    # API will delete Session Timer Profile Binding for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_tier0_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityApi.delete_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.delete_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.delete_tier0_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_tier0_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete security config
    # API has been deprecated as the delete of Tier0SecurityConfig is linked with the deletion of T0. To remove a particular feature from T0SecurityConfig please use PUT/PATCH.  <br> Use the following API PUT/PATCH  /infra/tier-0s/<tier-0-id>/security-config 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [nil]
    def delete_tier0_security_feature(tier_0_id, opts = {})
      delete_tier0_security_feature_with_http_info(tier_0_id, opts)
      nil
    end

    # Delete security config
    # API has been deprecated as the delete of Tier0SecurityConfig is linked with the deletion of T0. To remove a particular feature from T0SecurityConfig please use PUT/PATCH.  &lt;br&gt; Use the following API PUT/PATCH  /infra/tier-0s/&lt;tier-0-id&gt;/security-config 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_security_feature_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_tier0_security_feature ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.delete_tier0_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['IDFW', 'IDPS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of IDFW, IDPS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.delete_tier0_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.delete_tier0_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/security-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_tier0_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Session Timer Profile Binding for Tier-0 Logical Router
    # API will delete Session Timer Profile Binding for Tier-0 Logical Router.
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier0_session_timer_profile_binding(tier0_id, session_timer_profile_binding_id, opts = {})
      delete_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, opts)
      nil
    end

    # Delete Session Timer Profile Binding for Tier-0 Logical Router
    # API will delete Session Timer Profile Binding for Tier-0 Logical Router.
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_tier0_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityApi.delete_tier0_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.delete_tier0_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_tier0_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete BYOD policy service instance
    # Delete BYOD policy service instance
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_byod_policy_service_instance(tier_1_id, locale_service_id, service_instance_id, opts = {})
      delete_tier1_byod_policy_service_instance_with_http_info(tier_1_id, locale_service_id, service_instance_id, opts)
      nil
    end

    # Delete BYOD policy service instance
    # Delete BYOD policy service instance
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_byod_policy_service_instance_with_http_info(tier_1_id, locale_service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_tier1_byod_policy_service_instance ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.delete_tier1_byod_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.delete_tier1_byod_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.delete_tier1_byod_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_tier1_byod_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile Binding for Tier-1 Logical Router
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_flood_protection_profile_binding(tier1_id, flood_protection_profile_binding_id, opts = {})
      delete_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, opts)
      nil
    end

    # Delete Flood Protection Profile Binding for Tier-1 Logical Router
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_tier1_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.delete_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.delete_tier1_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_tier1_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_locale_services_flood_protection_profile_binding(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      delete_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts)
      nil
    end

    # Delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_tier1_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.delete_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.delete_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.delete_tier1_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_tier1_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_locale_services_session_timer_profile_binding(tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      delete_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, opts)
      nil
    end

    # Delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.delete_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.delete_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.delete_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Tier1 policy service instance
    # Delete Tier1 policy service instance
    # @param tier_1_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Tier1 Service instance id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_policy_service_instance(tier_1_id, locale_service_id, service_instance_id, opts = {})
      delete_tier1_policy_service_instance_with_http_info(tier_1_id, locale_service_id, service_instance_id, opts)
      nil
    end

    # Delete Tier1 policy service instance
    # Delete Tier1 policy service instance
    # @param tier_1_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Tier1 Service instance id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_policy_service_instance_with_http_info(tier_1_id, locale_service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_tier1_policy_service_instance ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.delete_tier1_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.delete_tier1_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.delete_tier1_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/service-instances/{service-instance-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_tier1_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Tier1 service instance endpoint
    # Delete Tier1 service instance endpoint
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Tier1 Service instance endpoint id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_policy_service_instance_endpoint(tier_1_id, locale_service_id, service_instance_id, service_instance_endpoint_id, opts = {})
      delete_tier1_policy_service_instance_endpoint_with_http_info(tier_1_id, locale_service_id, service_instance_id, service_instance_endpoint_id, opts)
      nil
    end

    # Delete Tier1 service instance endpoint
    # Delete Tier1 service instance endpoint
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Tier1 Service instance endpoint id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_policy_service_instance_endpoint_with_http_info(tier_1_id, locale_service_id, service_instance_id, service_instance_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_tier1_policy_service_instance_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.delete_tier1_policy_service_instance_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.delete_tier1_policy_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.delete_tier1_policy_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_endpoint_id' is set
      if @api_client.config.client_side_validation && service_instance_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_endpoint_id' when calling SecurityApi.delete_tier1_policy_service_instance_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}/service-instance-endpoints/{service-instance-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s).sub('{' + 'service-instance-endpoint-id' + '}', service_instance_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_tier1_policy_service_instance_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Session Timer Profile Binding for Tier-1 Logical Router
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router.
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_session_timer_profile_binding(tier1_id, session_timer_profile_binding_id, opts = {})
      delete_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, opts)
      nil
    end

    # Delete Session Timer Profile Binding for Tier-1 Logical Router
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router.
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.delete_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.delete_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete virtual endpoint
    # Delete virtual endpoint
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_virtual_endpoint(tier_1_id, locale_service_id, virtual_endpoint_id, opts = {})
      delete_tier1_virtual_endpoint_with_http_info(tier_1_id, locale_service_id, virtual_endpoint_id, opts)
      nil
    end

    # Delete virtual endpoint
    # Delete virtual endpoint
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_virtual_endpoint_with_http_info(tier_1_id, locale_service_id, virtual_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_tier1_virtual_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.delete_tier1_virtual_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.delete_tier1_virtual_endpoint"
      end
      # verify the required parameter 'virtual_endpoint_id' is set
      if @api_client.config.client_side_validation && virtual_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_endpoint_id' when calling SecurityApi.delete_tier1_virtual_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/endpoints/virtual-endpoints/{virtual-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'virtual-endpoint-id' + '}', virtual_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_tier1_virtual_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete TlsPolicy
    # Delete TlsPolicy
    # @param policy_id Firewall TLS inspection poicy id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tls_policy(policy_id, opts = {})
      delete_tls_policy_with_http_info(policy_id, opts)
      nil
    end

    # Delete TlsPolicy
    # Delete TlsPolicy
    # @param policy_id Firewall TLS inspection poicy id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tls_policy_with_http_info(policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_tls_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.delete_tls_policy"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_tls_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Tls profile.
    # Deletes a Tls profile. 
    # @param action_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tls_profile(action_profile_id, opts = {})
      delete_tls_profile_with_http_info(action_profile_id, opts)
      nil
    end

    # Delete a Tls profile.
    # Deletes a Tls profile. 
    # @param action_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tls_profile_with_http_info(action_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_tls_profile ...'
      end
      # verify the required parameter 'action_profile_id' is set
      if @api_client.config.client_side_validation && action_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'action_profile_id' when calling SecurityApi.delete_tls_profile"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-action-profiles/{action-profile-id}'.sub('{' + 'action-profile-id' + '}', action_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_tls_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete rule
    # Delete rule
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tls_rule(policy_id, rule_id, opts = {})
      delete_tls_rule_with_http_info(policy_id, rule_id, opts)
      nil
    end

    # Delete rule
    # Delete rule
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tls_rule_with_http_info(policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_tls_rule ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.delete_tls_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.delete_tls_rule"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_tls_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete virtual endpoint
    # Delete virtual endpoint
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_virtual_endpoint(tier_0_id, locale_service_id, virtual_endpoint_id, opts = {})
      delete_virtual_endpoint_with_http_info(tier_0_id, locale_service_id, virtual_endpoint_id, opts)
      nil
    end

    # Delete virtual endpoint
    # Delete virtual endpoint
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_virtual_endpoint_with_http_info(tier_0_id, locale_service_id, virtual_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_virtual_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.delete_virtual_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.delete_virtual_endpoint"
      end
      # verify the required parameter 'virtual_endpoint_id' is set
      if @api_client.config.client_side_validation && virtual_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_endpoint_id' when calling SecurityApi.delete_virtual_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/endpoints/virtual-endpoints/{virtual-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'virtual-endpoint-id' + '}', virtual_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_virtual_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Gateway Policy
    # Delete Gateway Policy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_gateway_policy(org_id, project_id, vpc_id, gateway_policy_id, opts = {})
      delete_vpc_gateway_policy_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, opts)
      nil
    end

    # Delete Gateway Policy
    # Delete Gateway Policy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_gateway_policy_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_vpc_gateway_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.delete_vpc_gateway_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.delete_vpc_gateway_policy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.delete_vpc_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.delete_vpc_gateway_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_vpc_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete N-S Firewall Rule
    # Delete N-S Firewall Rule DELETE /orgs/org1/projects/project1/vpcs/vpc-1/gateway-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_gateway_rule(org_id, project_id, vpc_id, gateway_policy_id, rule_id, opts = {})
      delete_vpc_gateway_rule_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, opts)
      nil
    end

    # Delete N-S Firewall Rule
    # Delete N-S Firewall Rule DELETE /orgs/org1/projects/project1/vpcs/vpc-1/gateway-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_gateway_rule_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_vpc_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.delete_vpc_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.delete_vpc_gateway_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.delete_vpc_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.delete_vpc_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.delete_vpc_gateway_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_vpc_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete VPC Group
    # Delete VPC Group. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_group(org_id, project_id, vpc_id, group_id, opts = {})
      delete_vpc_group_with_http_info(org_id, project_id, vpc_id, group_id, opts)
      nil
    end

    # Delete VPC Group
    # Delete VPC Group. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_group_with_http_info(org_id, project_id, vpc_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_vpc_group ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.delete_vpc_group"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.delete_vpc_group"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.delete_vpc_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.delete_vpc_group"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups/{group-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_vpc_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete E-W Firewall Rule
    # Delete E-W Firewall Rule DELETE /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_policy_rule(org_id, project_id, vpc_id, security_policy_id, rule_id, opts = {})
      delete_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, opts)
      nil
    end

    # Delete E-W Firewall Rule
    # Delete E-W Firewall Rule DELETE /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_vpc_policy_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.delete_vpc_policy_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.delete_vpc_policy_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.delete_vpc_policy_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.delete_vpc_policy_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.delete_vpc_policy_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_vpc_policy_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete SecurityPolicy
    # Delete SecurityPolicy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_security_policy(org_id, project_id, vpc_id, security_policy_id, opts = {})
      delete_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts)
      nil
    end

    # Delete SecurityPolicy
    # Delete SecurityPolicy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.delete_vpc_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.delete_vpc_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.delete_vpc_security_policy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.delete_vpc_security_policy"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.delete_vpc_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#delete_vpc_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download exported file
    # Download the exported file generated from the last export task. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_exported_file(opts = {})
      download_exported_file_with_http_info(opts)
      nil
    end

    # Download exported file
    # Download the exported file generated from the last export task. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def download_exported_file_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.download_exported_file ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/export?action=download'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#download_exported_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download exported pcap file
    # Download the exported pcap file generated from the export IdsPcapFile api. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param file_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def download_exported_pcap_file(file_name, opts = {})
      download_exported_pcap_file_with_http_info(file_name, opts)
      nil
    end

    # Download exported pcap file
    # Download the exported pcap file generated from the export IdsPcapFile api. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param file_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def download_exported_pcap_file_with_http_info(file_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.download_exported_pcap_file ...'
      end
      # verify the required parameter 'file_name' is set
      if @api_client.config.client_side_validation && file_name.nil?
        fail ArgumentError, "Missing the required parameter 'file_name' when calling SecurityApi.download_exported_pcap_file"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/pcaps/{file-name}/download'.sub('{' + 'file-name' + '}', file_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#download_exported_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export Custom signatures into a file.
    # API can be used for user to export the existing custom signatures. Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param version_id 
    # @param include Custom signatures to be exported
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def export_ids_custom_signatures(version_id, include, opts = {})
      export_ids_custom_signatures_with_http_info(version_id, include, opts)
      nil
    end

    # Export Custom signatures into a file.
    # API can be used for user to export the existing custom signatures. Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param version_id 
    # @param include Custom signatures to be exported
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def export_ids_custom_signatures_with_http_info(version_id, include, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.export_ids_custom_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SecurityApi.export_ids_custom_signatures"
      end
      # verify the required parameter 'include' is set
      if @api_client.config.client_side_validation && include.nil?
        fail ArgumentError, "Missing the required parameter 'include' when calling SecurityApi.export_ids_custom_signatures"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['VALID', 'INVALID', 'ALL'].include?(include)
        fail ArgumentError, "invalid value for 'include', must be one of VALID, INVALID, ALL"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures/export'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = include

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#export_ids_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Request the IDS Pcap File Download
    # Trigger the process to collect all pcap files of all the pcap_ids mentioned in request payload. 
    # @param ids_pcap_export 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def export_ids_pcap_file(ids_pcap_export, opts = {})
      export_ids_pcap_file_with_http_info(ids_pcap_export, opts)
      nil
    end

    # Request the IDS Pcap File Download
    # Trigger the process to collect all pcap files of all the pcap_ids mentioned in request payload. 
    # @param ids_pcap_export 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def export_ids_pcap_file_with_http_info(ids_pcap_export, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.export_ids_pcap_file ...'
      end
      # verify the required parameter 'ids_pcap_export' is set
      if @api_client.config.client_side_validation && ids_pcap_export.nil?
        fail ArgumentError, "Missing the required parameter 'ids_pcap_export' when calling SecurityApi.export_ids_pcap_file"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/pcaps/export'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_pcap_export)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#export_ids_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all organization units for a LDAP server.
    # Fetch all organization units for a LDAP server.
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryOrgUnitListResults]
    def fetch_firewall_identity_store_org_units(directory_ldap_server, opts = {})
      data, _status_code, _headers = fetch_firewall_identity_store_org_units_with_http_info(directory_ldap_server, opts)
      data
    end

    # Fetch all organization units for a LDAP server.
    # Fetch all organization units for a LDAP server.
    # @param directory_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryOrgUnitListResults, Fixnum, Hash)>] DirectoryOrgUnitListResults data, response status code and response headers
    def fetch_firewall_identity_store_org_units_with_http_info(directory_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.fetch_firewall_identity_store_org_units ...'
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling SecurityApi.fetch_firewall_identity_store_org_units"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores-org-units'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryOrgUnitListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#fetch_firewall_identity_store_org_units\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all organization units for a Firewall Identity Store.
    # Fetch all organization units for a Firewall Identity Store.
    # @param firewall_identity_store_id Firewall Identity Store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryOrgUnitListResults]
    def fetch_firewall_identity_store_org_units_for_identity_store(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = fetch_firewall_identity_store_org_units_for_identity_store_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # Fetch all organization units for a Firewall Identity Store.
    # Fetch all organization units for a Firewall Identity Store.
    # @param firewall_identity_store_id Firewall Identity Store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryOrgUnitListResults, Fixnum, Hash)>] DirectoryOrgUnitListResults data, response status code and response headers
    def fetch_firewall_identity_store_org_units_for_identity_store_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.fetch_firewall_identity_store_org_units_for_identity_store ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SecurityApi.fetch_firewall_identity_store_org_units_for_identity_store"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/org-units'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryOrgUnitListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#fetch_firewall_identity_store_org_units_for_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Filter the firewall exclude list
    # Filter the firewall exclude list by the given object, to check whether the object is a member of this exclude list. 
    # @param intent_path Path of the intent object to be searched in the exclude list
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :deep_check Check all parents (default to false)
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @return [PolicyResourceReference]
    def filter_firewall_exclude_list(intent_path, opts = {})
      data, _status_code, _headers = filter_firewall_exclude_list_with_http_info(intent_path, opts)
      data
    end

    # Filter the firewall exclude list
    # Filter the firewall exclude list by the given object, to check whether the object is a member of this exclude list. 
    # @param intent_path Path of the intent object to be searched in the exclude list
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :deep_check Check all parents
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @return [Array<(PolicyResourceReference, Fixnum, Hash)>] PolicyResourceReference data, response status code and response headers
    def filter_firewall_exclude_list_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.filter_firewall_exclude_list ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling SecurityApi.filter_firewall_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list?action=filter'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'deep_check'] = opts[:'deep_check'] if !opts[:'deep_check'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#filter_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download Latest Geo IP Bundle
    # Using this API, with request parameter download_now - User can request on demand to download latest Geo IP bundle to be used on the edge nodes.  This will try to get latest bundle regardless auto_download is ON or OFF.  If new bundle available, it will download the latest bundle.  If no new bundle, it will indicate in message. check_latest - User can check the latest Geo IP bundle available. 
    # @param action Geo IP Bundle Action
    # @param [Hash] opts the optional parameters
    # @return [GeoIpBundleInfo]
    def geo_ip_bundle_action(action, opts = {})
      data, _status_code, _headers = geo_ip_bundle_action_with_http_info(action, opts)
      data
    end

    # Download Latest Geo IP Bundle
    # Using this API, with request parameter download_now - User can request on demand to download latest Geo IP bundle to be used on the edge nodes.  This will try to get latest bundle regardless auto_download is ON or OFF.  If new bundle available, it will download the latest bundle.  If no new bundle, it will indicate in message. check_latest - User can check the latest Geo IP bundle available. 
    # @param action Geo IP Bundle Action
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeoIpBundleInfo, Fixnum, Hash)>] GeoIpBundleInfo data, response status code and response headers
    def geo_ip_bundle_action_with_http_info(action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.geo_ip_bundle_action ...'
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling SecurityApi.geo_ip_bundle_action"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['download_now', 'check_latest'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of download_now, check_latest"
      end
      # resource path
      local_var_path = '/infra/geo-ip/bundle'

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpBundleInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#geo_ip_bundle_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def get_aggregated_configuration_to_be_published_for_draft(draft_id, opts = {})
      data, _status_code, _headers = get_aggregated_configuration_to_be_published_for_draft_with_http_info(draft_id, opts)
      data
    end

    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def get_aggregated_configuration_to_be_published_for_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_aggregated_configuration_to_be_published_for_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.get_aggregated_configuration_to_be_published_for_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}/aggregated'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_aggregated_configuration_to_be_published_for_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Bridge Firewall Policy
    # Get Bridge Firewall Policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [BridgeFirewallPolicy]
    def get_bridge_firewall_policy(domain_id, bridge_firewall_policy_id, opts = {})
      data, _status_code, _headers = get_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, opts)
      data
    end

    # Get Bridge Firewall Policy
    # Get Bridge Firewall Policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BridgeFirewallPolicy, Fixnum, Hash)>] BridgeFirewallPolicy data, response status code and response headers
    def get_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_bridge_firewall_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.get_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling SecurityApi.get_bridge_firewall_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeFirewallPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_bridge_firewall_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get bridge firewall policy statistics
    # Get statistics of a bridge firewall policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [SecurityPolicyStatisticsListResult]
    def get_bridge_firewall_policy_statistics(domain_id, bridge_firewall_policy_id, opts = {})
      data, _status_code, _headers = get_bridge_firewall_policy_statistics_with_http_info(domain_id, bridge_firewall_policy_id, opts)
      data
    end

    # Get bridge firewall policy statistics
    # Get statistics of a bridge firewall policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(SecurityPolicyStatisticsListResult, Fixnum, Hash)>] SecurityPolicyStatisticsListResult data, response status code and response headers
    def get_bridge_firewall_policy_statistics_with_http_info(domain_id, bridge_firewall_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_bridge_firewall_policy_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.get_bridge_firewall_policy_statistics"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling SecurityApi.get_bridge_firewall_policy_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_bridge_firewall_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Bridge Firewall Rule
    # Read Bridge Firewall Rule. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def get_bridge_firewall_rule(domain_id, bridge_firewall_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, opts)
      data
    end

    # Read Bridge Firewall Rule
    # Read Bridge Firewall Rule. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def get_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_bridge_firewall_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.get_bridge_firewall_rule"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling SecurityApi.get_bridge_firewall_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.get_bridge_firewall_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_bridge_firewall_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get bridge firewall rule statistics
    # Get statistics of a bridge firewall rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [RuleStatisticsListResult]
    def get_bridge_firewall_rule_statistics(domain_id, bridge_firewall_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_bridge_firewall_rule_statistics_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, opts)
      data
    end

    # Get bridge firewall rule statistics
    # Get statistics of a bridge firewall rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(RuleStatisticsListResult, Fixnum, Hash)>] RuleStatisticsListResult data, response status code and response headers
    def get_bridge_firewall_rule_statistics_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_bridge_firewall_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.get_bridge_firewall_rule_statistics"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling SecurityApi.get_bridge_firewall_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.get_bridge_firewall_rule_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_bridge_firewall_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read compute cluster idfw configuration
    # Read compute cluster identity firewall configuration 
    # @param cluster_id Cluster ID
    # @param [Hash] opts the optional parameters
    # @return [ComputeClusterIdfwConfiguration]
    def get_compute_cluster_idfw_configuration(cluster_id, opts = {})
      data, _status_code, _headers = get_compute_cluster_idfw_configuration_with_http_info(cluster_id, opts)
      data
    end

    # Read compute cluster idfw configuration
    # Read compute cluster identity firewall configuration 
    # @param cluster_id Cluster ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComputeClusterIdfwConfiguration, Fixnum, Hash)>] ComputeClusterIdfwConfiguration data, response status code and response headers
    def get_compute_cluster_idfw_configuration_with_http_info(cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_compute_cluster_idfw_configuration ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling SecurityApi.get_compute_cluster_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/cluster/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeClusterIdfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_compute_cluster_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get dfw firewall configuration
    # Get the current dfw firewall configurations.
    # @param [Hash] opts the optional parameters
    # @return [DfwFirewallConfiguration]
    def get_dfw_firewall_configuration(opts = {})
      data, _status_code, _headers = get_dfw_firewall_configuration_with_http_info(opts)
      data
    end

    # Get dfw firewall configuration
    # Get the current dfw firewall configurations.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfwFirewallConfiguration, Fixnum, Hash)>] DfwFirewallConfiguration data, response status code and response headers
    def get_dfw_firewall_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_dfw_firewall_configuration ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DfwFirewallConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of distributed firewall dependent services
    # Get the list of distributed firewall dependent services 
    # @param [Hash] opts the optional parameters
    # @return [DependentServices]
    def get_distributed_firewall_dependent_services(opts = {})
      data, _status_code, _headers = get_distributed_firewall_dependent_services_with_http_info(opts)
      data
    end

    # Get the list of distributed firewall dependent services
    # Get the list of distributed firewall dependent services 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DependentServices, Fixnum, Hash)>] DependentServices data, response status code and response headers
    def get_distributed_firewall_dependent_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_distributed_firewall_dependent_services ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/dependent-services'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DependentServices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_distributed_firewall_dependent_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param [Hash] opts the optional parameters
    # @return [DnsSecurityProfileBindingMap]
    def get_dns_security_profile_binding(domain_id, group_id, dns_security_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_dns_security_profile_binding_with_http_info(domain_id, group_id, dns_security_profile_binding_map_id, opts)
      data
    end

    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DnsSecurityProfileBindingMap, Fixnum, Hash)>] DnsSecurityProfileBindingMap data, response status code and response headers
    def get_dns_security_profile_binding_with_http_info(domain_id, group_id, dns_security_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_dns_security_profile_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.get_dns_security_profile_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.get_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map_id' when calling SecurityApi.get_dns_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps/{dns-security-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'dns-security-profile-binding-map-id' + '}', dns_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_dns_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of export task
    # Get the information of the latest export task. 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def get_export_task(opts = {})
      data, _status_code, _headers = get_export_task_with_http_info(opts)
      data
    end

    # Get the information of export task
    # Get the information of the latest export task. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def get_export_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_export_task ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/export'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get policies filtered based on the given criteria
    # Get the list of policies filtered based on the given criteria. 
    # @param scope Scope filter criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @option opts [String] :parent_path Path of the parent object of the entities
    # @return [PolicyResourceReferenceForEPListResult]
    def get_filtered_policies(scope, opts = {})
      data, _status_code, _headers = get_filtered_policies_with_http_info(scope, opts)
      data
    end

    # Get policies filtered based on the given criteria
    # Get the list of policies filtered based on the given criteria. 
    # @param scope Scope filter criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @option opts [String] :parent_path Path of the parent object of the entities
    # @return [Array<(PolicyResourceReferenceForEPListResult, Fixnum, Hash)>] PolicyResourceReferenceForEPListResult data, response status code and response headers
    def get_filtered_policies_with_http_info(scope, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_filtered_policies ...'
      end
      # verify the required parameter 'scope' is set
      if @api_client.config.client_side_validation && scope.nil?
        fail ArgumentError, "Missing the required parameter 'scope' when calling SecurityApi.get_filtered_policies"
      end
      # resource path
      local_var_path = '/infra/firewall/policies'

      # query parameters
      query_params = {}
      query_params[:'scope'] = scope
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'parent_path'] = opts[:'parent_path'] if !opts[:'parent_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReferenceForEPListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_filtered_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get rules filtered based on the given criteria
    # Get the list of rules of given parent path of policy/section, filtered based on the given criteria. Parent path is mandatory. 
    # @param scope Scope filter criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @option opts [String] :parent_path Path of the parent object of the entities
    # @return [PolicyResourceReferenceForEPListResult]
    def get_filtered_rules(scope, opts = {})
      data, _status_code, _headers = get_filtered_rules_with_http_info(scope, opts)
      data
    end

    # Get rules filtered based on the given criteria
    # Get the list of rules of given parent path of policy/section, filtered based on the given criteria. Parent path is mandatory. 
    # @param scope Scope filter criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @option opts [String] :parent_path Path of the parent object of the entities
    # @return [Array<(PolicyResourceReferenceForEPListResult, Fixnum, Hash)>] PolicyResourceReferenceForEPListResult data, response status code and response headers
    def get_filtered_rules_with_http_info(scope, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_filtered_rules ...'
      end
      # verify the required parameter 'scope' is set
      if @api_client.config.client_side_validation && scope.nil?
        fail ArgumentError, "Missing the required parameter 'scope' when calling SecurityApi.get_filtered_rules"
      end
      # resource path
      local_var_path = '/infra/firewall/rules'

      # query parameters
      query_params = {}
      query_params[:'scope'] = scope
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'parent_path'] = opts[:'parent_path'] if !opts[:'parent_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReferenceForEPListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_filtered_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def get_firewall_exclude_list(opts = {})
      data, _status_code, _headers = get_firewall_exclude_list_with_http_info(opts)
      data
    end

    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def get_firewall_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_firewall_exclude_list ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read firewall identity store
    # Return a firewall identity store based on the store identifier
    # @param identity_firewall_store_id identity firewall store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStore]
    def get_firewall_identity_store(identity_firewall_store_id, opts = {})
      data, _status_code, _headers = get_firewall_identity_store_with_http_info(identity_firewall_store_id, opts)
      data
    end

    # Read firewall identity store
    # Return a firewall identity store based on the store identifier
    # @param identity_firewall_store_id identity firewall store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStore, Fixnum, Hash)>] IdentityFirewallStore data, response status code and response headers
    def get_firewall_identity_store_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_firewall_identity_store ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SecurityApi.get_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStore')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreEventLogServer]
    def get_firewall_identity_store_event_log_server(identity_firewall_store_id, event_log_server_id, opts = {})
      data, _status_code, _headers = get_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts)
      data
    end

    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreEventLogServer, Fixnum, Hash)>] IdentityFirewallStoreEventLogServer data, response status code and response headers
    def get_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SecurityApi.get_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling SecurityApi.get_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreEventLogServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreLdapServer]
    def get_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, opts = {})
      data, _status_code, _headers = get_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts)
      data
    end

    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreLdapServer, Fixnum, Hash)>] IdentityFirewallStoreLdapServer data, response status code and response headers
    def get_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SecurityApi.get_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SecurityApi.get_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall identity store sync statistics for the given identifier
    # Get Firewall identity store sync statistics for the given identifier
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryDomainSyncStats]
    def get_firewall_identity_store_sync_stats(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = get_firewall_identity_store_sync_stats_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # Get Firewall identity store sync statistics for the given identifier
    # Get Firewall identity store sync statistics for the given identifier
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryDomainSyncStats, Fixnum, Hash)>] DirectoryDomainSyncStats data, response status code and response headers
    def get_firewall_identity_store_sync_stats_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_firewall_identity_store_sync_stats ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SecurityApi.get_firewall_identity_store_sync_stats"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/sync-stats'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomainSyncStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_firewall_identity_store_sync_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile
    # API will get Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfile]
    def get_flood_protection_profile(flood_protection_profile_id, opts = {})
      data, _status_code, _headers = get_flood_protection_profile_with_http_info(flood_protection_profile_id, opts)
      data
    end

    # Get Flood Protection Profile
    # API will get Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfile, Fixnum, Hash)>] FloodProtectionProfile data, response status code and response headers
    def get_flood_protection_profile_with_http_info(flood_protection_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_flood_protection_profile ...'
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityApi.get_flood_protection_profile"
      end
      # resource path
      local_var_path = '/infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get FqdnAnalysisConfig
    # Gets a FqdnAnalysisConfig. This returns the details of the config like whether the FQDN Analysis is activated or deactivated for the given edge cluster. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [FqdnAnalysisConfig]
    def get_fqdn_analysis_config(site_id, enforcement_point_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = get_fqdn_analysis_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, opts)
      data
    end

    # Get FqdnAnalysisConfig
    # Gets a FqdnAnalysisConfig. This returns the details of the config like whether the FQDN Analysis is activated or deactivated for the given edge cluster. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FqdnAnalysisConfig, Fixnum, Hash)>] FqdnAnalysisConfig data, response status code and response headers
    def get_fqdn_analysis_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_fqdn_analysis_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SecurityApi.get_fqdn_analysis_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling SecurityApi.get_fqdn_analysis_config"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling SecurityApi.get_fqdn_analysis_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/fqdn-analysis-config'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FqdnAnalysisConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_fqdn_analysis_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of gateway firewall dependent services
    # Get the list of gateway firewall dependent services 
    # @param [Hash] opts the optional parameters
    # @return [DependentServices]
    def get_gateway_firewall_dependent_services(opts = {})
      data, _status_code, _headers = get_gateway_firewall_dependent_services_with_http_info(opts)
      data
    end

    # Get the list of gateway firewall dependent services
    # Get the list of gateway firewall dependent services 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DependentServices, Fixnum, Hash)>] DependentServices data, response status code and response headers
    def get_gateway_firewall_dependent_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_gateway_firewall_dependent_services ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/gateway/dependent-services'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DependentServices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_gateway_firewall_dependent_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get gateway policy statistics
    # Get statistics of a gateay policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [SecurityPolicyStatisticsListResult]
    def get_gateway_policy_statistics(domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = get_gateway_policy_statistics_with_http_info(domain_id, gateway_policy_id, opts)
      data
    end

    # Get gateway policy statistics
    # Get statistics of a gateay policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(SecurityPolicyStatisticsListResult, Fixnum, Hash)>] SecurityPolicyStatisticsListResult data, response status code and response headers
    def get_gateway_policy_statistics_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_gateway_policy_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.get_gateway_policy_statistics"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.get_gateway_policy_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_gateway_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get gateway rule statistics
    # Get statistics of a gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [RuleStatisticsListResult]
    def get_gateway_rule_statistics(domain_id, gateway_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_gateway_rule_statistics_with_http_info(domain_id, gateway_policy_id, rule_id, opts)
      data
    end

    # Get gateway rule statistics
    # Get statistics of a gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(RuleStatisticsListResult, Fixnum, Hash)>] RuleStatisticsListResult data, response status code and response headers
    def get_gateway_rule_statistics_with_http_info(domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_gateway_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.get_gateway_rule_statistics"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.get_gateway_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.get_gateway_rule_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_gateway_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Geo IP Blocked Events
    # Get Geo IP Blocked Events. The system will return the latest 25k events stored. User can use optional request parameters like source_country_code or source_ip_address to filter the response. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for getting next page of records
    # @option opts [String] :destination_country_code Comma Separated Destination Country Codes of Geo IP Blocked Event
    # @option opts [String] :destination_ip_address Comma Separated Destination IP Addresses of Geo IP Blocked Event
    # @option opts [String] :direction Comma Separated Directions of Traffic
    # @option opts [BOOLEAN] :include_all_projects  (default to false)
    # @option opts [Integer] :page_size Maximum number of results to return in this page (default to 500)
    # @option opts [String] :rule_id Comma Separated Gateway Firewall Rule Ids of Geo IP Blocked Event
    # @option opts [String] :source_country_code Comma Separated Source Country Codes of Geo IP Blocked Event
    # @option opts [String] :source_ip_address Comma Separated Source IP Addresses of Geo IP Blocked Event
    # @return [GeoIpBlockedEventsList]
    def get_geo_ip_blocked_events(opts = {})
      data, _status_code, _headers = get_geo_ip_blocked_events_with_http_info(opts)
      data
    end

    # Get Geo IP Blocked Events
    # Get Geo IP Blocked Events. The system will return the latest 25k events stored. User can use optional request parameters like source_country_code or source_ip_address to filter the response. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for getting next page of records
    # @option opts [String] :destination_country_code Comma Separated Destination Country Codes of Geo IP Blocked Event
    # @option opts [String] :destination_ip_address Comma Separated Destination IP Addresses of Geo IP Blocked Event
    # @option opts [String] :direction Comma Separated Directions of Traffic
    # @option opts [BOOLEAN] :include_all_projects 
    # @option opts [Integer] :page_size Maximum number of results to return in this page
    # @option opts [String] :rule_id Comma Separated Gateway Firewall Rule Ids of Geo IP Blocked Event
    # @option opts [String] :source_country_code Comma Separated Source Country Codes of Geo IP Blocked Event
    # @option opts [String] :source_ip_address Comma Separated Source IP Addresses of Geo IP Blocked Event
    # @return [Array<(GeoIpBlockedEventsList, Fixnum, Hash)>] GeoIpBlockedEventsList data, response status code and response headers
    def get_geo_ip_blocked_events_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_geo_ip_blocked_events ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_geo_ip_blocked_events, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_geo_ip_blocked_events, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/geo-ip/blocked-events'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'destination_country_code'] = opts[:'destination_country_code'] if !opts[:'destination_country_code'].nil?
      query_params[:'destination_ip_address'] = opts[:'destination_ip_address'] if !opts[:'destination_ip_address'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'include_all_projects'] = opts[:'include_all_projects'] if !opts[:'include_all_projects'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'rule_id'] = opts[:'rule_id'] if !opts[:'rule_id'].nil?
      query_params[:'source_country_code'] = opts[:'source_country_code'] if !opts[:'source_country_code'].nil?
      query_params[:'source_ip_address'] = opts[:'source_ip_address'] if !opts[:'source_ip_address'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpBlockedEventsList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_geo_ip_blocked_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Current Geo IP Bundle Information
    # Get current Geo IP Bundle information that is downloaded in the system. 
    # @param [Hash] opts the optional parameters
    # @return [GeoIpBundleInfo]
    def get_geo_ip_bundle_info(opts = {})
      data, _status_code, _headers = get_geo_ip_bundle_info_with_http_info(opts)
      data
    end

    # Get Current Geo IP Bundle Information
    # Get current Geo IP Bundle information that is downloaded in the system. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeoIpBundleInfo, Fixnum, Hash)>] GeoIpBundleInfo data, response status code and response headers
    def get_geo_ip_bundle_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_geo_ip_bundle_info ...'
      end
      # resource path
      local_var_path = '/infra/geo-ip/bundle'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpBundleInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_geo_ip_bundle_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Geo IP Look Up
    # Gets Country Code for the IP Address provided. 
    # @param ip_address IPv4 or IPv6 address
    # @param [Hash] opts the optional parameters
    # @return [GeoIpLookUp]
    def get_geo_ip_look_up(ip_address, opts = {})
      data, _status_code, _headers = get_geo_ip_look_up_with_http_info(ip_address, opts)
      data
    end

    # Get Geo IP Look Up
    # Gets Country Code for the IP Address provided. 
    # @param ip_address IPv4 or IPv6 address
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeoIpLookUp, Fixnum, Hash)>] GeoIpLookUp data, response status code and response headers
    def get_geo_ip_look_up_with_http_info(ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_geo_ip_look_up ...'
      end
      # verify the required parameter 'ip_address' is set
      if @api_client.config.client_side_validation && ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address' when calling SecurityApi.get_geo_ip_look_up"
      end
      # resource path
      local_var_path = '/infra/geo-ip/look-up'

      # query parameters
      query_params = {}
      query_params[:'ip_address'] = ip_address

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpLookUp')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_geo_ip_look_up\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Geo IP Setting Configuration
    # API to retrieve the current Geo IP Setting Configuration. 
    # @param [Hash] opts the optional parameters
    # @return [GeoIpSetting]
    def get_geo_ip_setting(opts = {})
      data, _status_code, _headers = get_geo_ip_setting_with_http_info(opts)
      data
    end

    # Get Geo IP Setting Configuration
    # API to retrieve the current Geo IP Setting Configuration. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeoIpSetting, Fixnum, Hash)>] GeoIpSetting data, response status code and response headers
    def get_geo_ip_setting_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_geo_ip_setting ...'
      end
      # resource path
      local_var_path = '/infra/geo-ip/setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpSetting')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_geo_ip_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get global distributed firewall configuration for the specified site
    # Get global distributed firewall configuration for the specified site.
    # @param site_id Site ID
    # @param [Hash] opts the optional parameters
    # @return [GlobalDfwConfiguration]
    def get_global_dfw_configuration_for_site(site_id, opts = {})
      data, _status_code, _headers = get_global_dfw_configuration_for_site_with_http_info(site_id, opts)
      data
    end

    # Get global distributed firewall configuration for the specified site
    # Get global distributed firewall configuration for the specified site.
    # @param site_id Site ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalDfwConfiguration, Fixnum, Hash)>] GlobalDfwConfiguration data, response status code and response headers
    def get_global_dfw_configuration_for_site_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_global_dfw_configuration_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SecurityApi.get_global_dfw_configuration_for_site"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/settings/firewall/security'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalDfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_global_dfw_configuration_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Global IDS signature.
    # Read global intrusion detection signature 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [GlobalIdsSignature]
    def get_global_ids_signature(signature_id, opts = {})
      data, _status_code, _headers = get_global_ids_signature_with_http_info(signature_id, opts)
      data
    end

    # Get Global IDS signature.
    # Read global intrusion detection signature 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalIdsSignature, Fixnum, Hash)>] GlobalIdsSignature data, response status code and response headers
    def get_global_ids_signature_with_http_info(signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_global_ids_signature ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SecurityApi.get_global_ids_signature"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_global_ids_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Group Monitoring Profile Binding Map
    # API will get Group Monitoring Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [GroupMonitoringProfileBindingMap]
    def get_group_monitoring_binding(domain_id, group_id, group_monitoring_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, opts)
      data
    end

    # Get Group Monitoring Profile Binding Map
    # API will get Group Monitoring Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupMonitoringProfileBindingMap, Fixnum, Hash)>] GroupMonitoringProfileBindingMap data, response status code and response headers
    def get_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_group_monitoring_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.get_group_monitoring_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.get_group_monitoring_binding"
      end
      # verify the required parameter 'group_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && group_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_monitoring_profile_binding_map_id' when calling SecurityApi.get_group_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/group-monitoring-profile-binding-maps/{group-monitoring-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'group-monitoring-profile-binding-map-id' + '}', group_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupMonitoringProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_group_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all IDFW Group VM details for a given Group
    # Get all Identity Firewall Group VM details for a given Group. 
    # @param group_path String Path of the group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyIdfwGroupVmDetailListResult]
    def get_group_vm_details(group_path, opts = {})
      data, _status_code, _headers = get_group_vm_details_with_http_info(group_path, opts)
      data
    end

    # Get all IDFW Group VM details for a given Group
    # Get all Identity Firewall Group VM details for a given Group. 
    # @param group_path String Path of the group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyIdfwGroupVmDetailListResult, Fixnum, Hash)>] PolicyIdfwGroupVmDetailListResult data, response status code and response headers
    def get_group_vm_details_with_http_info(group_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_group_vm_details ...'
      end
      # verify the required parameter 'group_path' is set
      if @api_client.config.client_side_validation && group_path.nil?
        fail ArgumentError, "Missing the required parameter 'group_path' when calling SecurityApi.get_group_vm_details"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/group-vm-details'

      # query parameters
      query_params = {}
      query_params[:'group_path'] = group_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdfwGroupVmDetailListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_group_vm_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW status for a Compute Collection
    # Get IDFW status for a specific Compute Collection
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwComputeCollectionStatus]
    def get_idfw_status_for_a_compute_collection(compute_collection_id, opts = {})
      data, _status_code, _headers = get_idfw_status_for_a_compute_collection_with_http_info(compute_collection_id, opts)
      data
    end

    # Get IDFW status for a Compute Collection
    # Get IDFW status for a specific Compute Collection
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwComputeCollectionStatus, Fixnum, Hash)>] IdfwComputeCollectionStatus data, response status code and response headers
    def get_idfw_status_for_a_compute_collection_with_http_info(compute_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_idfw_status_for_a_compute_collection ...'
      end
      # verify the required parameter 'compute_collection_id' is set
      if @api_client.config.client_side_validation && compute_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_id' when calling SecurityApi.get_idfw_status_for_a_compute_collection"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/compute-collections/{compute-collection-id}/status'.sub('{' + 'compute-collection-id' + '}', compute_collection_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwComputeCollectionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_idfw_status_for_a_compute_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW status for all Compute Collections
    # Get IDFW status for all Compute Collections
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwComputeCollectionListResult]
    def get_idfw_status_for_all_compute_collections(opts = {})
      data, _status_code, _headers = get_idfw_status_for_all_compute_collections_with_http_info(opts)
      data
    end

    # Get IDFW status for all Compute Collections
    # Get IDFW status for all Compute Collections
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwComputeCollectionListResult, Fixnum, Hash)>] IdfwComputeCollectionListResult data, response status code and response headers
    def get_idfw_status_for_all_compute_collections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_idfw_status_for_all_compute_collections ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/compute-collections/status'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwComputeCollectionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_idfw_status_for_all_compute_collections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW system statistics data
    # It will get IDFW system statistics data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwSystemStats]
    def get_idfw_system_statistics_data(opts = {})
      data, _status_code, _headers = get_idfw_system_statistics_data_with_http_info(opts)
      data
    end

    # Get IDFW system statistics data
    # It will get IDFW system statistics data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwSystemStats, Fixnum, Hash)>] IdfwSystemStats data, response status code and response headers
    def get_idfw_system_statistics_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_idfw_system_statistics_data ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/system-stats'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwSystemStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_idfw_system_statistics_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS cluster config.
    # Read intrusion detection system cluster config 
    # @param cluster_config_id User entered ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsClusterConfig]
    def get_ids_cluster_config(cluster_config_id, opts = {})
      data, _status_code, _headers = get_ids_cluster_config_with_http_info(cluster_config_id, opts)
      data
    end

    # Read IDS cluster config.
    # Read intrusion detection system cluster config 
    # @param cluster_config_id User entered ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsClusterConfig, Fixnum, Hash)>] IdsClusterConfig data, response status code and response headers
    def get_ids_cluster_config_with_http_info(cluster_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_ids_cluster_config ...'
      end
      # verify the required parameter 'cluster_config_id' is set
      if @api_client.config.client_side_validation && cluster_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_config_id' when calling SecurityApi.get_ids_cluster_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/cluster-configs/{cluster-config-id}'.sub('{' + 'cluster-config-id' + '}', cluster_config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsClusterConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_ids_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature
    # Get IDS Custom Signature. 
    # @param version_id 
    # @param sig_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignature]
    def get_ids_custom_signature(version_id, sig_id, opts = {})
      data, _status_code, _headers = get_ids_custom_signature_with_http_info(version_id, sig_id, opts)
      data
    end

    # Get IDS Custom Signature
    # Get IDS Custom Signature. 
    # @param version_id 
    # @param sig_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignature, Fixnum, Hash)>] IdsCustomSignature data, response status code and response headers
    def get_ids_custom_signature_with_http_info(version_id, sig_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_ids_custom_signature ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SecurityApi.get_ids_custom_signature"
      end
      # verify the required parameter 'sig_id' is set
      if @api_client.config.client_side_validation && sig_id.nil?
        fail ArgumentError, "Missing the required parameter 'sig_id' when calling SecurityApi.get_ids_custom_signature"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures/{sig-id}'.sub('{' + 'version-id' + '}', version_id.to_s).sub('{' + 'sig-id' + '}', sig_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_ids_custom_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS custom signature settings
    # IDS custom signatures settings. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignatureSettings]
    def get_ids_custom_signature_settings(version_id, opts = {})
      data, _status_code, _headers = get_ids_custom_signature_settings_with_http_info(version_id, opts)
      data
    end

    # Get IDS custom signature settings
    # IDS custom signatures settings. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignatureSettings, Fixnum, Hash)>] IdsCustomSignatureSettings data, response status code and response headers
    def get_ids_custom_signature_settings_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_ids_custom_signature_settings ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SecurityApi.get_ids_custom_signature_settings"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/settings'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_ids_custom_signature_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature Version
    # Get IDS Custom Signature Version. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignatureVersion]
    def get_ids_custom_signature_version(version_id, opts = {})
      data, _status_code, _headers = get_ids_custom_signature_version_with_http_info(version_id, opts)
      data
    end

    # Get IDS Custom Signature Version
    # Get IDS Custom Signature Version. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignatureVersion, Fixnum, Hash)>] IdsCustomSignatureVersion data, response status code and response headers
    def get_ids_custom_signature_version_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_ids_custom_signature_version ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SecurityApi.get_ids_custom_signature_version"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureVersion')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_ids_custom_signature_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature difference
    # Get published and unpublished custom signatures difference. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignaturesDiff]
    def get_ids_custom_signatures_diff(version_id, opts = {})
      data, _status_code, _headers = get_ids_custom_signatures_diff_with_http_info(version_id, opts)
      data
    end

    # Get IDS Custom Signature difference
    # Get published and unpublished custom signatures difference. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignaturesDiff, Fixnum, Hash)>] IdsCustomSignaturesDiff data, response status code and response headers
    def get_ids_custom_signatures_diff_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_ids_custom_signatures_diff ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SecurityApi.get_ids_custom_signatures_diff"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures-diff'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignaturesDiff')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_ids_custom_signatures_diff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS gateway policy statistics
    # Get statistics of a IDS gateway policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsSecurityPolicyStatisticsListResult]
    def get_ids_gateway_policy_statistics(domain_id, policy_id, opts = {})
      data, _status_code, _headers = get_ids_gateway_policy_statistics_with_http_info(domain_id, policy_id, opts)
      data
    end

    # Get IDS gateway policy statistics
    # Get statistics of a IDS gateway policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsSecurityPolicyStatisticsListResult, Fixnum, Hash)>] IdsSecurityPolicyStatisticsListResult data, response status code and response headers
    def get_ids_gateway_policy_statistics_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_ids_gateway_policy_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.get_ids_gateway_policy_statistics"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.get_ids_gateway_policy_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_ids_gateway_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS gateway rule statistics
    # Get statistics of a IDS gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsRuleStatisticsListResult]
    def get_ids_gateway_rule_statistics(domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_ids_gateway_rule_statistics_with_http_info(domain_id, policy_id, rule_id, opts)
      data
    end

    # Get IDS gateway rule statistics
    # Get statistics of a IDS gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsRuleStatisticsListResult, Fixnum, Hash)>] IdsRuleStatisticsListResult data, response status code and response headers
    def get_ids_gateway_rule_statistics_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_ids_gateway_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.get_ids_gateway_rule_statistics"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.get_ids_gateway_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.get_ids_gateway_rule_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_ids_gateway_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will get existing IDS Profile .
    # This routine will read intrusion detection profile for provided profile id 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [IdsProfile]
    def get_ids_profile(profile_id, opts = {})
      data, _status_code, _headers = get_ids_profile_with_http_info(profile_id, opts)
      data
    end

    # This routine will get existing IDS Profile .
    # This routine will read intrusion detection profile for provided profile id 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsProfile, Fixnum, Hash)>] IdsProfile data, response status code and response headers
    def get_ids_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_ids_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.get_ids_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS profile signatures.
    # Get all the IDS signatures attached to the Profile. 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsProfileSignatures]
    def get_ids_profile_signatures(profile_id, opts = {})
      data, _status_code, _headers = get_ids_profile_signatures_with_http_info(profile_id, opts)
      data
    end

    # Get IDS profile signatures.
    # Get all the IDS signatures attached to the Profile. 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsProfileSignatures, Fixnum, Hash)>] IdsProfileSignatures data, response status code and response headers
    def get_ids_profile_signatures_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_ids_profile_signatures ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.get_ids_profile_signatures"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}/effective-signatures'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfileSignatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_ids_profile_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS rule.
    # Read intrusion detection rule 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def get_ids_rule(domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts)
      data
    end

    # Get IDS rule.
    # Read intrusion detection rule 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def get_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.get_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.get_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.get_ids_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS-IPS rule statistics
    # Get statistics of a IDS-IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsRuleStatisticsListResult]
    def get_ids_rule_statistics(domain_id, ids_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_ids_rule_statistics_with_http_info(domain_id, ids_policy_id, rule_id, opts)
      data
    end

    # Get IDS-IPS rule statistics
    # Get statistics of a IDS-IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsRuleStatisticsListResult, Fixnum, Hash)>] IdsRuleStatisticsListResult data, response status code and response headers
    def get_ids_rule_statistics_with_http_info(domain_id, ids_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_ids_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.get_ids_rule_statistics"
      end
      # verify the required parameter 'ids_policy_id' is set
      if @api_client.config.client_side_validation && ids_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ids_policy_id' when calling SecurityApi.get_ids_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.get_ids_rule_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{ids-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'ids-policy-id' + '}', ids_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_ids_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [IdsSecurityPolicy]
    def get_ids_security_policy(domain_id, policy_id, opts = {})
      data, _status_code, _headers = get_ids_security_policy_with_http_info(domain_id, policy_id, opts)
      data
    end

    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def get_ids_security_policy_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.get_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.get_ids_security_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS security policy statistics
    # Get statistics of a IDS security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsSecurityPolicyStatisticsListResult]
    def get_ids_security_policy_statistics(domain_id, ids_policy_id, opts = {})
      data, _status_code, _headers = get_ids_security_policy_statistics_with_http_info(domain_id, ids_policy_id, opts)
      data
    end

    # Get IDS security policy statistics
    # Get statistics of a IDS security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsSecurityPolicyStatisticsListResult, Fixnum, Hash)>] IdsSecurityPolicyStatisticsListResult data, response status code and response headers
    def get_ids_security_policy_statistics_with_http_info(domain_id, ids_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_ids_security_policy_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.get_ids_security_policy_statistics"
      end
      # verify the required parameter 'ids_policy_id' is set
      if @api_client.config.client_side_validation && ids_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ids_policy_id' when calling SecurityApi.get_ids_security_policy_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{ids-policy-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'ids-policy-id' + '}', ids_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_ids_security_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS system settings
    # Intrusion detection system settings. 
    # @param [Hash] opts the optional parameters
    # @return [IdsSettings]
    def get_ids_settings(opts = {})
      data, _status_code, _headers = get_ids_settings_with_http_info(opts)
      data
    end

    # Get IDS system settings
    # Intrusion detection system settings. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSettings, Fixnum, Hash)>] IdsSettings data, response status code and response headers
    def get_ids_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_ids_settings ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_ids_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS signature status
    # Intrusion detection system signatures status. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsSignatureStatus]
    def get_ids_signature_status(opts = {})
      data, _status_code, _headers = get_ids_signature_status_with_http_info(opts)
      data
    end

    # Get IDS signature status
    # Intrusion detection system signatures status. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsSignatureStatus, Fixnum, Hash)>] IdsSignatureStatus data, response status code and response headers
    def get_ids_signature_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_ids_signature_status ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signatures/status'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSignatureStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_ids_signature_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get threshold configuration for IDS system signature
    # Retrieve threshold and rate filter configuration for IDS signature. This API is applicable only for 'System' signatures. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [IdsThresholdConfig]
    def get_ids_signature_threshold_config(signature_id, opts = {})
      data, _status_code, _headers = get_ids_signature_threshold_config_with_http_info(signature_id, opts)
      data
    end

    # Get threshold configuration for IDS system signature
    # Retrieve threshold and rate filter configuration for IDS signature. This API is applicable only for &#39;System&#39; signatures. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsThresholdConfig, Fixnum, Hash)>] IdsThresholdConfig data, response status code and response headers
    def get_ids_signature_threshold_config_with_http_info(signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_ids_signature_threshold_config ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SecurityApi.get_ids_signature_threshold_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/threshold-configs/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsThresholdConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_ids_signature_threshold_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS signature version
    # Intrusion detection system signature version. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsSignatureVersion]
    def get_ids_signature_version(version_id, opts = {})
      data, _status_code, _headers = get_ids_signature_version_with_http_info(version_id, opts)
      data
    end

    # Get IDS signature version
    # Intrusion detection system signature version. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSignatureVersion, Fixnum, Hash)>] IdsSignatureVersion data, response status code and response headers
    def get_ids_signature_version_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_ids_signature_version ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SecurityApi.get_ids_signature_version"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signature-versions/{version-id}'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSignatureVersion')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_ids_signature_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS signature versions
    # Intrusion detection system signature versions. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSignatureVersionListResult]
    def get_ids_signature_versions(opts = {})
      data, _status_code, _headers = get_ids_signature_versions_with_http_info(opts)
      data
    end

    # Get IDS signature versions
    # Intrusion detection system signature versions. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSignatureVersionListResult, Fixnum, Hash)>] IdsSignatureVersionListResult data, response status code and response headers
    def get_ids_signature_versions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_ids_signature_versions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_ids_signature_versions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_ids_signature_versions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signature-versions'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSignatureVersionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_ids_signature_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS config
    # Read intrusion detection system config of standalone hosts. 
    # @param [Hash] opts the optional parameters
    # @return [IdsStandaloneHostConfig]
    def get_ids_standalone_host_config(opts = {})
      data, _status_code, _headers = get_ids_standalone_host_config_with_http_info(opts)
      data
    end

    # Read IDS config
    # Read intrusion detection system config of standalone hosts. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsStandaloneHostConfig, Fixnum, Hash)>] IdsStandaloneHostConfig data, response status code and response headers
    def get_ids_standalone_host_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_ids_standalone_host_config ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/ids-standalone-host-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsStandaloneHostConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_ids_standalone_host_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of import task
    # Get the information of the latest import task. 
    # @param [Hash] opts the optional parameters
    # @return [ImportTask]
    def get_import_task(opts = {})
      data, _status_code, _headers = get_import_task_with_http_info(opts)
      data
    end

    # Get the information of import task
    # Get the information of the latest import task. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportTask, Fixnum, Hash)>] ImportTask data, response status code and response headers
    def get_import_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_import_task ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/import'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_import_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy exclude list including system and user excluded members
    # Read security policy exclude list including system and user excluded members. 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def get_internal_firewall_exclude_list(opts = {})
      data, _status_code, _headers = get_internal_firewall_exclude_list_with_http_info(opts)
      data
    end

    # Read security policy exclude list including system and user excluded members
    # Read security policy exclude list including system and user excluded members. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def get_internal_firewall_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_internal_firewall_exclude_list ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list?system_owned=true'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_internal_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Additional API to read service insertion exclude list without filtering out the system owned members
    # Read exclude list for service insertion 
    # @param [Hash] opts the optional parameters
    # @return [PolicySIExcludeList]
    def get_internal_si_exclude_list(opts = {})
      data, _status_code, _headers = get_internal_si_exclude_list_with_http_info(opts)
      data
    end

    # Additional API to read service insertion exclude list without filtering out the system owned members
    # Read exclude list for service insertion 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicySIExcludeList, Fixnum, Hash)>] PolicySIExcludeList data, response status code and response headers
    def get_internal_si_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_internal_si_exclude_list ...'
      end
      # resource path
      local_var_path = '/infra/settings/service-insertion/security/exclude-list?system_owned=true'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicySIExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_internal_si_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # It returns the exclusion IP list present in the default malicious group
    # Querying the API on GM with a valid enforcement point path, the API will return the list of exclusion IPs from the default malicious IP group of the site represented by the enforcement point path. In the absence of an enforcement point path, the API returns the exclusion IPs present in the global default malicious IP group of GM. Querying the API on LM, the api will return a list of exclusion IP addresses present in the local default malicious ip group. The API will not consider the IP addresses present in the user created malicious group. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPReputationExclusionList]
    def get_ip_reputation_exclusion_list(opts = {})
      data, _status_code, _headers = get_ip_reputation_exclusion_list_with_http_info(opts)
      data
    end

    # It returns the exclusion IP list present in the default malicious group
    # Querying the API on GM with a valid enforcement point path, the API will return the list of exclusion IPs from the default malicious IP group of the site represented by the enforcement point path. In the absence of an enforcement point path, the API returns the exclusion IPs present in the global default malicious IP group of GM. Querying the API on LM, the api will return a list of exclusion IP addresses present in the local default malicious ip group. The API will not consider the IP addresses present in the user created malicious group. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPReputationExclusionList, Fixnum, Hash)>] IPReputationExclusionList data, response status code and response headers
    def get_ip_reputation_exclusion_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_ip_reputation_exclusion_list ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_ip_reputation_exclusion_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_ip_reputation_exclusion_list, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/ip-reputation-exclusion-list'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPReputationExclusionList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_ip_reputation_exclusion_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Malware Prevention profile.
    # Read Malware Prevention profile 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [MalwarePreventionProfile]
    def get_malware_prevention_profile(profile_id, opts = {})
      data, _status_code, _headers = get_malware_prevention_profile_with_http_info(profile_id, opts)
      data
    end

    # Get Malware Prevention profile.
    # Read Malware Prevention profile 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(MalwarePreventionProfile, Fixnum, Hash)>] MalwarePreventionProfile data, response status code and response headers
    def get_malware_prevention_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_malware_prevention_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.get_malware_prevention_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/malware-prevention-service/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MalwarePreventionProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_malware_prevention_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def get_pmaas_firewall_exclude_list(opts = {})
      data, _status_code, _headers = get_pmaas_firewall_exclude_list_with_http_info(opts)
      data
    end

    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def get_pmaas_firewall_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_pmaas_firewall_exclude_list ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list/global'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_pmaas_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of gateways where an intrusion event was detected
    # Get the list of gateways where an intrusion event matching a signature was detected. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsIpList]
    def get_policy_affected_ips(policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = get_policy_affected_ips_with_http_info(policy_ids_event_data_request, opts)
      data
    end

    # Get the list of gateways where an intrusion event was detected
    # Get the list of gateways where an intrusion event matching a signature was detected. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsIpList, Fixnum, Hash)>] PolicyIdsIpList data, response status code and response headers
    def get_policy_affected_ips_with_http_info(policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_policy_affected_ips ...'
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling SecurityApi.get_policy_affected_ips"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_policy_affected_ips, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_policy_affected_ips, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/affected-ips'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsIpList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_policy_affected_ips\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of the users affected for that signature
    # Get the list of the users affected pertaining to a specific signature. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsUserList]
    def get_policy_affected_users(policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = get_policy_affected_users_with_http_info(policy_ids_event_data_request, opts)
      data
    end

    # Get the list of the users affected for that signature
    # Get the list of the users affected pertaining to a specific signature. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsUserList, Fixnum, Hash)>] PolicyIdsUserList data, response status code and response headers
    def get_policy_affected_users_with_http_info(policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_policy_affected_users ...'
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling SecurityApi.get_policy_affected_users"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_policy_affected_users, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_policy_affected_users, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/affected-users'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsUserList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_policy_affected_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of the VMs affected for that signature
    # Get the list of the VMs affected pertaining to a specific signature. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsVmList]
    def get_policy_affected_vms(policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = get_policy_affected_vms_with_http_info(policy_ids_event_data_request, opts)
      data
    end

    # Get the list of the VMs affected for that signature
    # Get the list of the VMs affected pertaining to a specific signature. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsVmList, Fixnum, Hash)>] PolicyIdsVmList data, response status code and response headers
    def get_policy_affected_vms_with_http_info(policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_policy_affected_vms ...'
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling SecurityApi.get_policy_affected_vms"
      end
      if @api_client.config.client_side_validation && opts[:'context'] && !['ALL_PROJECTS'].include?(opts[:'context'])
        fail ArgumentError, 'invalid value for "context", must be one of ALL_PROJECTS'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_policy_affected_vms, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_policy_affected_vms, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/affected-vms'

      # query parameters
      query_params = {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsVmList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_policy_affected_vms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of the IDS events that are detected, grouped by signature id.
    # Get the list of the IDS events that are detected with the total number of intrusions detected, their severity and the time they occurred, grouped by signature id. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyIdsEventsBySignatureResult]
    def get_policy_all_ids_events(policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = get_policy_all_ids_events_with_http_info(policy_ids_event_data_request, opts)
      data
    end

    # Get the list of the IDS events that are detected, grouped by signature id.
    # Get the list of the IDS events that are detected with the total number of intrusions detected, their severity and the time they occurred, grouped by signature id. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyIdsEventsBySignatureResult, Fixnum, Hash)>] PolicyIdsEventsBySignatureResult data, response status code and response headers
    def get_policy_all_ids_events_with_http_info(policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_policy_all_ids_events ...'
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling SecurityApi.get_policy_all_ids_events"
      end
      if @api_client.config.client_side_validation && opts[:'context'] && !['ALL_PROJECTS'].include?(opts[:'context'])
        fail ArgumentError, 'invalid value for "context", must be one of ALL_PROJECTS'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/ids-events'

      # query parameters
      query_params = {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsEventsBySignatureResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_policy_all_ids_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [PolicyDraftPaginatedAggregatedConfigurationResult]
    def get_policy_draft_paginated_aggregated_configuration_result(draft_id, opts = {})
      data, _status_code, _headers = get_policy_draft_paginated_aggregated_configuration_result_with_http_info(draft_id, opts)
      data
    end

    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [Array<(PolicyDraftPaginatedAggregatedConfigurationResult, Fixnum, Hash)>] PolicyDraftPaginatedAggregatedConfigurationResult data, response status code and response headers
    def get_policy_draft_paginated_aggregated_configuration_result_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_policy_draft_paginated_aggregated_configuration_result ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.get_policy_draft_paginated_aggregated_configuration_result"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}/aggregated_with_pagination'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftPaginatedAggregatedConfigurationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_policy_draft_paginated_aggregated_configuration_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall CPU Memory Thresholds Profile Binding Map
    # API will get Firewall CPU Memory Thresholds Profile Binding Map. 
    # @param cpu_mem_thresholds_profile_binding_map_id Firewall CPU Memory Thresholds Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallCPUMemThresholdsProfileBindingMap]
    def get_policy_firewall_cpu_mem_thresholds_profile_binding_map(cpu_mem_thresholds_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_policy_firewall_cpu_mem_thresholds_profile_binding_map_with_http_info(cpu_mem_thresholds_profile_binding_map_id, opts)
      data
    end

    # Get Firewall CPU Memory Thresholds Profile Binding Map
    # API will get Firewall CPU Memory Thresholds Profile Binding Map. 
    # @param cpu_mem_thresholds_profile_binding_map_id Firewall CPU Memory Thresholds Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallCPUMemThresholdsProfileBindingMap, Fixnum, Hash)>] PolicyFirewallCPUMemThresholdsProfileBindingMap data, response status code and response headers
    def get_policy_firewall_cpu_mem_thresholds_profile_binding_map_with_http_info(cpu_mem_thresholds_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_policy_firewall_cpu_mem_thresholds_profile_binding_map ...'
      end
      # verify the required parameter 'cpu_mem_thresholds_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && cpu_mem_thresholds_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'cpu_mem_thresholds_profile_binding_map_id' when calling SecurityApi.get_policy_firewall_cpu_mem_thresholds_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/cpu-mem-thresholds-profile-binding-maps/{cpu-mem-thresholds-profile-binding-map-id}'.sub('{' + 'cpu-mem-thresholds-profile-binding-map-id' + '}', cpu_mem_thresholds_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallCPUMemThresholdsProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_policy_firewall_cpu_mem_thresholds_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall Flood Protection Profile Binding Map
    # API will get Firewall Flood Protection Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallFloodProtectionProfileBindingMap]
    def get_policy_firewall_flood_protection_binding(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts)
      data
    end

    # Get Firewall Flood Protection Profile Binding Map
    # API will get Firewall Flood Protection Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMap, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMap data, response status code and response headers
    def get_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_policy_firewall_flood_protection_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.get_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.get_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling SecurityApi.get_policy_firewall_flood_protection_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_policy_firewall_flood_protection_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # IP Reputation feed configuration.
    # API to retrieve the current IP Reputation feed configuration. 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallIpReputationConfig]
    def get_policy_firewall_ip_reputation_config(opts = {})
      data, _status_code, _headers = get_policy_firewall_ip_reputation_config_with_http_info(opts)
      data
    end

    # IP Reputation feed configuration.
    # API to retrieve the current IP Reputation feed configuration. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallIpReputationConfig, Fixnum, Hash)>] PolicyFirewallIpReputationConfig data, response status code and response headers
    def get_policy_firewall_ip_reputation_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_policy_firewall_ip_reputation_config ...'
      end
      # resource path
      local_var_path = '/infra/firewall-ip-reputation-feed'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallIpReputationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_policy_firewall_ip_reputation_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallScheduler]
    def get_policy_firewall_scheduler(firewall_scheduler_id, opts = {})
      data, _status_code, _headers = get_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts)
      data
    end

    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallScheduler, Fixnum, Hash)>] PolicyFirewallScheduler data, response status code and response headers
    def get_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling SecurityApi.get_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallScheduler')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall Session Timer Profile Binding Map
    # API will get Firewall Session Timer Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallSessionTimerProfileBindingMap]
    def get_policy_firewall_session_timer_binding(domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts = {})
      data, _status_code, _headers = get_policy_firewall_session_timer_binding_with_http_info(domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts)
      data
    end

    # Get Firewall Session Timer Profile Binding Map
    # API will get Firewall Session Timer Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMap, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMap data, response status code and response headers
    def get_policy_firewall_session_timer_binding_with_http_info(domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_policy_firewall_session_timer_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.get_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.get_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'firewall_session_timer_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_binding_map_id' when calling SecurityApi.get_policy_firewall_session_timer_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps/{firewall-session-timer-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-session-timer-profile-binding-map-id' + '}', firewall_session_timer_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_policy_firewall_session_timer_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall Session Timer Profile
    # API will get Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallSessionTimerProfile]
    def get_policy_firewall_session_timer_profile(firewall_session_timer_profile_id, opts = {})
      data, _status_code, _headers = get_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, opts)
      data
    end

    # Get Firewall Session Timer Profile
    # API will get Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallSessionTimerProfile, Fixnum, Hash)>] PolicyFirewallSessionTimerProfile data, response status code and response headers
    def get_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityApi.get_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the summary of the intrusions that were detected.
    # Get the summary of all the intrusions that are detected grouped by signature with details including signature name, id, severity, attack type, protocol, first and recent occurence, and affected users and VMs. The following filter criteria are supported: attack target, attack type, gateway name, IP address, product affected, signature ID and VM name. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsSummaryListResult]
    def get_policy_ids_dashboard_summary(policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = get_policy_ids_dashboard_summary_with_http_info(policy_ids_event_data_request, opts)
      data
    end

    # Get the summary of the intrusions that were detected.
    # Get the summary of all the intrusions that are detected grouped by signature with details including signature name, id, severity, attack type, protocol, first and recent occurence, and affected users and VMs. The following filter criteria are supported: attack target, attack type, gateway name, IP address, product affected, signature ID and VM name. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsSummaryListResult, Fixnum, Hash)>] PolicyIdsSummaryListResult data, response status code and response headers
    def get_policy_ids_dashboard_summary_with_http_info(policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_policy_ids_dashboard_summary ...'
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling SecurityApi.get_policy_ids_dashboard_summary"
      end
      if @api_client.config.client_side_validation && opts[:'context'] && !['ALL_PROJECTS'].include?(opts[:'context'])
        fail ArgumentError, 'invalid value for "context", must be one of ALL_PROJECTS'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_policy_ids_dashboard_summary, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_policy_ids_dashboard_summary, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/ids-summary'

      # query parameters
      query_params = {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsSummaryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_policy_ids_dashboard_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get statistics for all runtimes associated with this PolicyServiceInstance
    # Get statistics for all data NICs on all runtimes associated with this PolicyServiceInstance. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyServiceInstanceStatistics]
    def get_policy_service_instance_statistics(tier_0_id, locale_service_id, service_instance_id, opts = {})
      data, _status_code, _headers = get_policy_service_instance_statistics_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts)
      data
    end

    # Get statistics for all runtimes associated with this PolicyServiceInstance
    # Get statistics for all data NICs on all runtimes associated with this PolicyServiceInstance. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyServiceInstanceStatistics, Fixnum, Hash)>] PolicyServiceInstanceStatistics data, response status code and response headers
    def get_policy_service_instance_statistics_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_policy_service_instance_statistics ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.get_policy_service_instance_statistics"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.get_policy_service_instance_statistics"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.get_policy_service_instance_statistics"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/service-instances/{service-instance-id}/statistics'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceInstanceStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_policy_service_instance_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Groups used in Redirection rules for a given Service Profile.
    # List of Groups used in Redirection rules for a given Service Profile. 
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [ServiceProfileGroups]
    def get_policy_service_profile_groups(service_reference_id, service_profile_id, opts = {})
      data, _status_code, _headers = get_policy_service_profile_groups_with_http_info(service_reference_id, service_profile_id, opts)
      data
    end

    # Get Groups used in Redirection rules for a given Service Profile.
    # List of Groups used in Redirection rules for a given Service Profile. 
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(ServiceProfileGroups, Fixnum, Hash)>] ServiceProfileGroups data, response status code and response headers
    def get_policy_service_profile_groups_with_http_info(service_reference_id, service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_policy_service_profile_groups ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling SecurityApi.get_policy_service_profile_groups"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling SecurityApi.get_policy_service_profile_groups"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}/group-associations'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceProfileGroups')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_policy_service_profile_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyUrlCategorizationConfig
    # Gets a PolicyUrlCategorizationConfig. This returns the details of the config like whether the URL categorization is activated or deactivated, the id of the context profiles which are used to filter the categories, and the update frequency of the data from the cloud. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyUrlCategorizationConfig]
    def get_policy_url_categorization_config(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts = {})
      data, _status_code, _headers = get_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts)
      data
    end

    # Get PolicyUrlCategorizationConfig
    # Gets a PolicyUrlCategorizationConfig. This returns the details of the config like whether the URL categorization is activated or deactivated, the id of the context profiles which are used to filter the categories, and the update frequency of the data from the cloud. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyUrlCategorizationConfig, Fixnum, Hash)>] PolicyUrlCategorizationConfig data, response status code and response headers
    def get_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_policy_url_categorization_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SecurityApi.get_policy_url_categorization_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling SecurityApi.get_policy_url_categorization_config"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling SecurityApi.get_policy_url_categorization_config"
      end
      # verify the required parameter 'url_categorization_config_id' is set
      if @api_client.config.client_side_validation && url_categorization_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'url_categorization_config_id' when calling SecurityApi.get_policy_url_categorization_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'url-categorization-config-id' + '}', url_categorization_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyUrlCategorizationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_policy_url_categorization_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def get_preview_of_configuration_after_publish_of_draft(draft_id, opts = {})
      data, _status_code, _headers = get_preview_of_configuration_after_publish_of_draft_with_http_info(draft_id, opts)
      data
    end

    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def get_preview_of_configuration_after_publish_of_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_preview_of_configuration_after_publish_of_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.get_preview_of_configuration_after_publish_of_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}/complete'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_preview_of_configuration_after_publish_of_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get rule statistics
    # Get statistics of a rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [RuleStatisticsListResult]
    def get_rule_statistics(domain_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_rule_statistics_with_http_info(domain_id, security_policy_id, rule_id, opts)
      data
    end

    # Get rule statistics
    # Get statistics of a rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(RuleStatisticsListResult, Fixnum, Hash)>] RuleStatisticsListResult data, response status code and response headers
    def get_rule_statistics_with_http_info(domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.get_rule_statistics"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.get_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.get_rule_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get security policy statistics
    # Get statistics of a security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [SecurityPolicyStatisticsListResult]
    def get_security_policy_statistics(domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = get_security_policy_statistics_with_http_info(domain_id, security_policy_id, opts)
      data
    end

    # Get security policy statistics
    # Get statistics of a security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(SecurityPolicyStatisticsListResult, Fixnum, Hash)>] SecurityPolicyStatisticsListResult data, response status code and response headers
    def get_security_policy_statistics_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_security_policy_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.get_security_policy_statistics"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.get_security_policy_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_security_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Default API to read service insertion exclude list with system owned members filtered out
    # Read exclude list for service insertion 
    # @param [Hash] opts the optional parameters
    # @return [PolicySIExcludeList]
    def get_si_exclude_list(opts = {})
      data, _status_code, _headers = get_si_exclude_list_with_http_info(opts)
      data
    end

    # Default API to read service insertion exclude list with system owned members filtered out
    # Read exclude list for service insertion 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicySIExcludeList, Fixnum, Hash)>] PolicySIExcludeList data, response status code and response headers
    def get_si_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_si_exclude_list ...'
      end
      # resource path
      local_var_path = '/infra/settings/service-insertion/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicySIExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_si_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get service insertion configuration status
    # Get the current service insertion status configuration.
    # @param [Hash] opts the optional parameters
    # @return [PolicySIStatusConfiguration]
    def get_si_status(opts = {})
      data, _status_code, _headers = get_si_status_with_http_info(opts)
      data
    end

    # Get service insertion configuration status
    # Get the current service insertion status configuration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicySIStatusConfiguration, Fixnum, Hash)>] PolicySIStatusConfiguration data, response status code and response headers
    def get_si_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_si_status ...'
      end
      # resource path
      local_var_path = '/infra/settings/service-insertion/security/status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicySIStatusConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_si_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read idfw configuration for standalone host
    # Read identity firewall configuration for standalone host 
    # @param [Hash] opts the optional parameters
    # @return [StandaloneHostIdfwConfiguration]
    def get_standalone_host_idfw_configuration(opts = {})
      data, _status_code, _headers = get_standalone_host_idfw_configuration_with_http_info(opts)
      data
    end

    # Read idfw configuration for standalone host
    # Read identity firewall configuration for standalone host 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandaloneHostIdfwConfiguration, Fixnum, Hash)>] StandaloneHostIdfwConfiguration data, response status code and response headers
    def get_standalone_host_idfw_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_standalone_host_idfw_configuration ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/standalone-host-switch-setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StandaloneHostIdfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_standalone_host_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def get_tier0_flood_protection_profile_binding(tier0_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def get_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_tier0_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityApi.get_tier0_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.get_tier0_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_tier0_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def get_tier0_locale_services_flood_protection_profile_binding(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def get_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_tier0_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityApi.get_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.get_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.get_tier0_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_tier0_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def get_tier0_locale_services_session_timer_profile_binding(tier0_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def get_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_tier0_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityApi.get_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.get_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.get_tier0_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_tier0_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def get_tier0_session_timer_profile_binding(tier0_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def get_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_tier0_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityApi.get_tier0_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.get_tier0_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_tier0_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def get_tier1_flood_protection_profile_binding(tier1_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def get_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_tier1_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.get_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.get_tier1_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_tier1_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def get_tier1_locale_services_flood_protection_profile_binding(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def get_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_tier1_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.get_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.get_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.get_tier1_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_tier1_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def get_tier1_locale_services_session_timer_profile_binding(tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def get_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.get_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get statistics for all runtimes associated with this Tier1 PolicyServiceInstance
    # Get statistics for all data NICs on all runtimes associated with this Tier1 PolicyServiceInstance. 
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Tier1 Service instance id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyServiceInstanceStatistics]
    def get_tier1_policy_service_instance_statistics(tier_1_id, locale_service_id, service_instance_id, opts = {})
      data, _status_code, _headers = get_tier1_policy_service_instance_statistics_with_http_info(tier_1_id, locale_service_id, service_instance_id, opts)
      data
    end

    # Get statistics for all runtimes associated with this Tier1 PolicyServiceInstance
    # Get statistics for all data NICs on all runtimes associated with this Tier1 PolicyServiceInstance. 
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Tier1 Service instance id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyServiceInstanceStatistics, Fixnum, Hash)>] PolicyServiceInstanceStatistics data, response status code and response headers
    def get_tier1_policy_service_instance_statistics_with_http_info(tier_1_id, locale_service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_tier1_policy_service_instance_statistics ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.get_tier1_policy_service_instance_statistics"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.get_tier1_policy_service_instance_statistics"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.get_tier1_policy_service_instance_statistics"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/service-instances/{service-instance-id}/statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceInstanceStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_tier1_policy_service_instance_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def get_tier1_session_timer_profile_binding(tier1_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = get_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def get_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.get_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.get_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get TLS profile with id.
    # Return Tls profile. 
    # @param action_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [TlsProfile]
    def get_tls_profile(action_profile_id, opts = {})
      data, _status_code, _headers = get_tls_profile_with_http_info(action_profile_id, opts)
      data
    end

    # Get TLS profile with id.
    # Return Tls profile. 
    # @param action_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsProfile, Fixnum, Hash)>] TlsProfile data, response status code and response headers
    def get_tls_profile_with_http_info(action_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_tls_profile ...'
      end
      # verify the required parameter 'action_profile_id' is set
      if @api_client.config.client_side_validation && action_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'action_profile_id' when calling SecurityApi.get_tls_profile"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-action-profiles/{action-profile-id}'.sub('{' + 'action-profile-id' + '}', action_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_tls_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get TLS inspection FQDN state
    # Get TLS inspection FQDN state
    # @param tier_1_id 
    # @param fqdn_id 
    # @param [Hash] opts the optional parameters
    # @return [TlsStateObject]
    def get_tls_state_fqdn(tier_1_id, fqdn_id, opts = {})
      data, _status_code, _headers = get_tls_state_fqdn_with_http_info(tier_1_id, fqdn_id, opts)
      data
    end

    # Get TLS inspection FQDN state
    # Get TLS inspection FQDN state
    # @param tier_1_id 
    # @param fqdn_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsStateObject, Fixnum, Hash)>] TlsStateObject data, response status code and response headers
    def get_tls_state_fqdn_with_http_info(tier_1_id, fqdn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_tls_state_fqdn ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.get_tls_state_fqdn"
      end
      # verify the required parameter 'fqdn_id' is set
      if @api_client.config.client_side_validation && fqdn_id.nil?
        fail ArgumentError, "Missing the required parameter 'fqdn_id' when calling SecurityApi.get_tls_state_fqdn"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/tls-inspection-state/fqdns/{fqdn-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'fqdn-id' + '}', fqdn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsStateObject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_tls_state_fqdn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW user login events for a given user
    # It will get IDFW user login events for a given user. 
    # @param user_id User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwUserStats]
    def get_user_login_events(user_id, opts = {})
      data, _status_code, _headers = get_user_login_events_with_http_info(user_id, opts)
      data
    end

    # Get IDFW user login events for a given user
    # It will get IDFW user login events for a given user. 
    # @param user_id User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwUserStats, Fixnum, Hash)>] IdfwUserStats data, response status code and response headers
    def get_user_login_events_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_user_login_events ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SecurityApi.get_user_login_events"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/user-stats/{user-id}'.sub('{' + 'user-id' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwUserStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_user_login_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW user login events for a given VM
    # It will get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_id VM id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwVmStats]
    def get_user_login_events_for_avm(vm_id, opts = {})
      data, _status_code, _headers = get_user_login_events_for_avm_with_http_info(vm_id, opts)
      data
    end

    # Get IDFW user login events for a given VM
    # It will get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_id VM id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwVmStats, Fixnum, Hash)>] IdfwVmStats data, response status code and response headers
    def get_user_login_events_for_avm_with_http_info(vm_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_user_login_events_for_avm ...'
      end
      # verify the required parameter 'vm_id' is set
      if @api_client.config.client_side_validation && vm_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_id' when calling SecurityApi.get_user_login_events_for_avm"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/vm-stats/{vm-id}'.sub('{' + 'vm-id' + '}', vm_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwVmStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_user_login_events_for_avm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user session data
    # It will get user session data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwUserSessionDataAndMappings]
    def get_user_session_data(opts = {})
      data, _status_code, _headers = get_user_session_data_with_http_info(opts)
      data
    end

    # Get user session data
    # It will get user session data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwUserSessionDataAndMappings, Fixnum, Hash)>] IdfwUserSessionDataAndMappings data, response status code and response headers
    def get_user_session_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_user_session_data ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/user-session-data'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwUserSessionDataAndMappings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_user_session_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Gateway Policy
    # Get Gateway Policy 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def get_vpc_gateway_policy(org_id, project_id, vpc_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = get_vpc_gateway_policy_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, opts)
      data
    end

    # Get Gateway Policy
    # Get Gateway Policy 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def get_vpc_gateway_policy_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_vpc_gateway_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.get_vpc_gateway_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.get_vpc_gateway_policy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.get_vpc_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.get_vpc_gateway_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_vpc_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get gateway policy statistics
    # Get statistics of a gateway policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id Org id
    # @param project_id Project id
    # @param vpc_id VPC id
    # @param gateway_policy_id Gateway policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [SecurityPolicyStatisticsListResult]
    def get_vpc_gateway_policy_statistics(org_id, project_id, vpc_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = get_vpc_gateway_policy_statistics_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, opts)
      data
    end

    # Get gateway policy statistics
    # Get statistics of a gateway policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id Org id
    # @param project_id Project id
    # @param vpc_id VPC id
    # @param gateway_policy_id Gateway policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(SecurityPolicyStatisticsListResult, Fixnum, Hash)>] SecurityPolicyStatisticsListResult data, response status code and response headers
    def get_vpc_gateway_policy_statistics_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_vpc_gateway_policy_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.get_vpc_gateway_policy_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.get_vpc_gateway_policy_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.get_vpc_gateway_policy_statistics"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.get_vpc_gateway_policy_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_vpc_gateway_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read N-S Firewall Rule
    # Read N-S Firewall Rule GET /orgs/org1/projects/project1/vpcs/vpc-1/gateway-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def get_vpc_gateway_rule(org_id, project_id, vpc_id, gateway_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_vpc_gateway_rule_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, opts)
      data
    end

    # Read N-S Firewall Rule
    # Read N-S Firewall Rule GET /orgs/org1/projects/project1/vpcs/vpc-1/gateway-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def get_vpc_gateway_rule_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_vpc_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.get_vpc_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.get_vpc_gateway_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.get_vpc_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.get_vpc_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.get_vpc_gateway_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_vpc_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get rule statistics
    # Get statistics of N-S Firewall rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id Org id
    # @param project_id Project id
    # @param vpc_id VPC id
    # @param gateway_policy_id Gateway policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [RuleStatisticsListResult]
    def get_vpc_gateway_rule_statistics(org_id, project_id, vpc_id, gateway_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_vpc_gateway_rule_statistics_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, opts)
      data
    end

    # Get rule statistics
    # Get statistics of N-S Firewall rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id Org id
    # @param project_id Project id
    # @param vpc_id VPC id
    # @param gateway_policy_id Gateway policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(RuleStatisticsListResult, Fixnum, Hash)>] RuleStatisticsListResult data, response status code and response headers
    def get_vpc_gateway_rule_statistics_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_vpc_gateway_rule_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.get_vpc_gateway_rule_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.get_vpc_gateway_rule_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.get_vpc_gateway_rule_statistics"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.get_vpc_gateway_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.get_vpc_gateway_rule_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_vpc_gateway_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Group
    # Get VPC Group 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [Group]
    def get_vpc_group(org_id, project_id, vpc_id, group_id, opts = {})
      data, _status_code, _headers = get_vpc_group_with_http_info(org_id, project_id, vpc_id, group_id, opts)
      data
    end

    # Get VPC Group
    # Get VPC Group 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Group, Fixnum, Hash)>] Group data, response status code and response headers
    def get_vpc_group_with_http_info(org_id, project_id, vpc_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_vpc_group ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.get_vpc_group"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.get_vpc_group"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.get_vpc_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.get_vpc_group"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups/{group-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_vpc_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IP addresses that belong to this VPC Group
    # Get IP addresses that belong to this VPC Group. This API is applicable for Groups containing either VirtualMachine, VIF, Segment ,Segment Port or IP Address member type.For Groups containing other member types,an empty list is returned 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyGroupIPMembersListResult]
    def get_vpc_group_ip_members(org_id, project_id, vpc_id, group_id, opts = {})
      data, _status_code, _headers = get_vpc_group_ip_members_with_http_info(org_id, project_id, vpc_id, group_id, opts)
      data
    end

    # Get IP addresses that belong to this VPC Group
    # Get IP addresses that belong to this VPC Group. This API is applicable for Groups containing either VirtualMachine, VIF, Segment ,Segment Port or IP Address member type.For Groups containing other member types,an empty list is returned 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyGroupIPMembersListResult, Fixnum, Hash)>] PolicyGroupIPMembersListResult data, response status code and response headers
    def get_vpc_group_ip_members_with_http_info(org_id, project_id, vpc_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_vpc_group_ip_members ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.get_vpc_group_ip_members"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.get_vpc_group_ip_members"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.get_vpc_group_ip_members"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.get_vpc_group_ip_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_vpc_group_ip_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_vpc_group_ip_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups/{group-id}/members/ip-addresses'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyGroupIPMembersListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_vpc_group_ip_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get member types for a given VPC Group
    # It retrieves member types for a given VPC group. In case of nested VPC groups, it calculates member types of child groups as well. Considers member type for members added via static members and dynamic membership criteria. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [GroupMemberTypeListResult]
    def get_vpc_group_member_types(org_id, project_id, vpc_id, group_id, opts = {})
      data, _status_code, _headers = get_vpc_group_member_types_with_http_info(org_id, project_id, vpc_id, group_id, opts)
      data
    end

    # Get member types for a given VPC Group
    # It retrieves member types for a given VPC group. In case of nested VPC groups, it calculates member types of child groups as well. Considers member type for members added via static members and dynamic membership criteria. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupMemberTypeListResult, Fixnum, Hash)>] GroupMemberTypeListResult data, response status code and response headers
    def get_vpc_group_member_types_with_http_info(org_id, project_id, vpc_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_vpc_group_member_types ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.get_vpc_group_member_types"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.get_vpc_group_member_types"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.get_vpc_group_member_types"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.get_vpc_group_member_types"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups/{group-id}/member-types'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupMemberTypeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_vpc_group_member_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get subnets that belong to this VPC Group
    # Get subnets that belong to this VPC Group 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyGroupMembersListResult]
    def get_vpc_group_subnet_members(org_id, project_id, vpc_id, group_id, opts = {})
      data, _status_code, _headers = get_vpc_group_subnet_members_with_http_info(org_id, project_id, vpc_id, group_id, opts)
      data
    end

    # Get subnets that belong to this VPC Group
    # Get subnets that belong to this VPC Group 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyGroupMembersListResult, Fixnum, Hash)>] PolicyGroupMembersListResult data, response status code and response headers
    def get_vpc_group_subnet_members_with_http_info(org_id, project_id, vpc_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_vpc_group_subnet_members ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.get_vpc_group_subnet_members"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.get_vpc_group_subnet_members"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.get_vpc_group_subnet_members"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.get_vpc_group_subnet_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_vpc_group_subnet_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_vpc_group_subnet_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups/{group-id}/members/subnets'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyGroupMembersListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_vpc_group_subnet_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get subnet ports that belong to this VPC Group
    # Get subnet ports that belong to this VPC Group 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyGroupMembersListResult]
    def get_vpc_group_subnet_port_members(org_id, project_id, vpc_id, group_id, opts = {})
      data, _status_code, _headers = get_vpc_group_subnet_port_members_with_http_info(org_id, project_id, vpc_id, group_id, opts)
      data
    end

    # Get subnet ports that belong to this VPC Group
    # Get subnet ports that belong to this VPC Group 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyGroupMembersListResult, Fixnum, Hash)>] PolicyGroupMembersListResult data, response status code and response headers
    def get_vpc_group_subnet_port_members_with_http_info(org_id, project_id, vpc_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_vpc_group_subnet_port_members ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.get_vpc_group_subnet_port_members"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.get_vpc_group_subnet_port_members"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.get_vpc_group_subnet_port_members"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.get_vpc_group_subnet_port_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_vpc_group_subnet_port_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_vpc_group_subnet_port_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups/{group-id}/members/subnet-ports'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyGroupMembersListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_vpc_group_subnet_port_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Virtual Network Interface instances that belong to this Group
    # Get Virtual Network Interface instances that belong to this Group. This API is applicable for Groups containing VirtualNetworkInterface and VirtualMachine member types. For Groups containing other member types,an empty list is returned. target_id in response is external_id of VirtualNetworkInterface or VirtualMachine. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VirtualNetworkInterfaceListResult]
    def get_vpc_group_vif_members(org_id, project_id, vpc_id, group_id, opts = {})
      data, _status_code, _headers = get_vpc_group_vif_members_with_http_info(org_id, project_id, vpc_id, group_id, opts)
      data
    end

    # Get Virtual Network Interface instances that belong to this Group
    # Get Virtual Network Interface instances that belong to this Group. This API is applicable for Groups containing VirtualNetworkInterface and VirtualMachine member types. For Groups containing other member types,an empty list is returned. target_id in response is external_id of VirtualNetworkInterface or VirtualMachine. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VirtualNetworkInterfaceListResult, Fixnum, Hash)>] VirtualNetworkInterfaceListResult data, response status code and response headers
    def get_vpc_group_vif_members_with_http_info(org_id, project_id, vpc_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_vpc_group_vif_members ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.get_vpc_group_vif_members"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.get_vpc_group_vif_members"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.get_vpc_group_vif_members"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.get_vpc_group_vif_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_vpc_group_vif_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_vpc_group_vif_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups/{group-id}/members/vifs'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualNetworkInterfaceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_vpc_group_vif_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Virtual machines that belong to this VPC Group
    # Get Virtual machines that belong to this VPC Group. This API is applicable for Groups containing VirtualMachine,member type. For Groups containing other member types,an empty list is returned. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RealizedVirtualMachineListResult]
    def get_vpc_group_vm_members(org_id, project_id, vpc_id, group_id, opts = {})
      data, _status_code, _headers = get_vpc_group_vm_members_with_http_info(org_id, project_id, vpc_id, group_id, opts)
      data
    end

    # Get Virtual machines that belong to this VPC Group
    # Get Virtual machines that belong to this VPC Group. This API is applicable for Groups containing VirtualMachine,member type. For Groups containing other member types,an empty list is returned. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RealizedVirtualMachineListResult, Fixnum, Hash)>] RealizedVirtualMachineListResult data, response status code and response headers
    def get_vpc_group_vm_members_with_http_info(org_id, project_id, vpc_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_vpc_group_vm_members ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.get_vpc_group_vm_members"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.get_vpc_group_vm_members"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.get_vpc_group_vm_members"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.get_vpc_group_vm_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_vpc_group_vm_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_vpc_group_vm_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups/{group-id}/members/virtual-machines'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedVirtualMachineListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_vpc_group_vm_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get groups for which the given IP address is a member
    # Get policy groups for which the given IP address is a member. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param ip_address IPAddress
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyResourceReferenceForEPListResult]
    def get_vpc_groups_for_ip_address(org_id, project_id, vpc_id, ip_address, opts = {})
      data, _status_code, _headers = get_vpc_groups_for_ip_address_with_http_info(org_id, project_id, vpc_id, ip_address, opts)
      data
    end

    # Get groups for which the given IP address is a member
    # Get policy groups for which the given IP address is a member. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param ip_address IPAddress
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyResourceReferenceForEPListResult, Fixnum, Hash)>] PolicyResourceReferenceForEPListResult data, response status code and response headers
    def get_vpc_groups_for_ip_address_with_http_info(org_id, project_id, vpc_id, ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_vpc_groups_for_ip_address ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.get_vpc_groups_for_ip_address"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.get_vpc_groups_for_ip_address"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.get_vpc_groups_for_ip_address"
      end
      # verify the required parameter 'ip_address' is set
      if @api_client.config.client_side_validation && ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address' when calling SecurityApi.get_vpc_groups_for_ip_address"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_vpc_groups_for_ip_address, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_vpc_groups_for_ip_address, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/ip-address-group-associations'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ip_address'] = ip_address
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReferenceForEPListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_vpc_groups_for_ip_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get groups for which the given object is a member
    # Get policy groups for which the given object is a member. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param intent_path String path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyResourceReferenceForEPListResult]
    def get_vpc_groups_for_object(org_id, project_id, vpc_id, intent_path, opts = {})
      data, _status_code, _headers = get_vpc_groups_for_object_with_http_info(org_id, project_id, vpc_id, intent_path, opts)
      data
    end

    # Get groups for which the given object is a member
    # Get policy groups for which the given object is a member. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param intent_path String path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyResourceReferenceForEPListResult, Fixnum, Hash)>] PolicyResourceReferenceForEPListResult data, response status code and response headers
    def get_vpc_groups_for_object_with_http_info(org_id, project_id, vpc_id, intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_vpc_groups_for_object ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.get_vpc_groups_for_object"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.get_vpc_groups_for_object"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.get_vpc_groups_for_object"
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling SecurityApi.get_vpc_groups_for_object"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_vpc_groups_for_object, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_vpc_groups_for_object, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/group-associations'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReferenceForEPListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_vpc_groups_for_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get groups for which the given VIF is a member
    # Get policy groups for which the given VIF is a member. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param vif_external_id Virtual network interface external ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyResourceReferenceForEPListResult]
    def get_vpc_groups_for_vif(org_id, project_id, vpc_id, vif_external_id, opts = {})
      data, _status_code, _headers = get_vpc_groups_for_vif_with_http_info(org_id, project_id, vpc_id, vif_external_id, opts)
      data
    end

    # Get groups for which the given VIF is a member
    # Get policy groups for which the given VIF is a member. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param vif_external_id Virtual network interface external ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyResourceReferenceForEPListResult, Fixnum, Hash)>] PolicyResourceReferenceForEPListResult data, response status code and response headers
    def get_vpc_groups_for_vif_with_http_info(org_id, project_id, vpc_id, vif_external_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_vpc_groups_for_vif ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.get_vpc_groups_for_vif"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.get_vpc_groups_for_vif"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.get_vpc_groups_for_vif"
      end
      # verify the required parameter 'vif_external_id' is set
      if @api_client.config.client_side_validation && vif_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'vif_external_id' when calling SecurityApi.get_vpc_groups_for_vif"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_vpc_groups_for_vif, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_vpc_groups_for_vif, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/virtual-network-interface-group-associations'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'vif_external_id'] = vif_external_id
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReferenceForEPListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_vpc_groups_for_vif\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get groups for which the given VM is a member
    # Get policy groups for which the given VM is a member. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param vm_external_id Virtual machine external ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyResourceReferenceForEPListResult]
    def get_vpc_groups_for_vm(org_id, project_id, vpc_id, vm_external_id, opts = {})
      data, _status_code, _headers = get_vpc_groups_for_vm_with_http_info(org_id, project_id, vpc_id, vm_external_id, opts)
      data
    end

    # Get groups for which the given VM is a member
    # Get policy groups for which the given VM is a member. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param vm_external_id Virtual machine external ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyResourceReferenceForEPListResult, Fixnum, Hash)>] PolicyResourceReferenceForEPListResult data, response status code and response headers
    def get_vpc_groups_for_vm_with_http_info(org_id, project_id, vpc_id, vm_external_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_vpc_groups_for_vm ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.get_vpc_groups_for_vm"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.get_vpc_groups_for_vm"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.get_vpc_groups_for_vm"
      end
      # verify the required parameter 'vm_external_id' is set
      if @api_client.config.client_side_validation && vm_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_external_id' when calling SecurityApi.get_vpc_groups_for_vm"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_vpc_groups_for_vm, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.get_vpc_groups_for_vm, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/virtual-machine-group-associations'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'vm_external_id'] = vm_external_id
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReferenceForEPListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_vpc_groups_for_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read E-W Firewall Rule
    # Read Rule GET /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def get_vpc_policy_rule(org_id, project_id, vpc_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, opts)
      data
    end

    # Read E-W Firewall Rule
    # Read Rule GET /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def get_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_vpc_policy_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.get_vpc_policy_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.get_vpc_policy_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.get_vpc_policy_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.get_vpc_policy_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.get_vpc_policy_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_vpc_policy_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get SecurityPolicy
    # Get SecurityPolicy 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def get_vpc_security_policy(org_id, project_id, vpc_id, security_policy_id, opts = {})
      data, _status_code, _headers = get_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts)
      data
    end

    # Get SecurityPolicy
    # Get SecurityPolicy 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def get_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_vpc_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.get_vpc_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.get_vpc_security_policy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.get_vpc_security_policy"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.get_vpc_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_vpc_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get security policy statistics
    # Get statistics of a security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id Org id
    # @param project_id Project id
    # @param vpc_id VPC id
    # @param security_policy_id Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [SecurityPolicyStatisticsListResult]
    def get_vpc_security_policy_statistics(org_id, project_id, vpc_id, security_policy_id, opts = {})
      data, _status_code, _headers = get_vpc_security_policy_statistics_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts)
      data
    end

    # Get security policy statistics
    # Get statistics of a security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id Org id
    # @param project_id Project id
    # @param vpc_id VPC id
    # @param security_policy_id Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(SecurityPolicyStatisticsListResult, Fixnum, Hash)>] SecurityPolicyStatisticsListResult data, response status code and response headers
    def get_vpc_security_policy_statistics_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_vpc_security_policy_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.get_vpc_security_policy_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.get_vpc_security_policy_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.get_vpc_security_policy_statistics"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.get_vpc_security_policy_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_vpc_security_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VpcSecurityProfile
    # Get security profile with the specified ID. Currently only the default security profile at the project level can be queried using this API. 
    # @param org_id 
    # @param project_id 
    # @param vpc_security_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [VpcSecurityProfile]
    def get_vpc_security_profile(org_id, project_id, vpc_security_profile_id, opts = {})
      data, _status_code, _headers = get_vpc_security_profile_with_http_info(org_id, project_id, vpc_security_profile_id, opts)
      data
    end

    # Get VpcSecurityProfile
    # Get security profile with the specified ID. Currently only the default security profile at the project level can be queried using this API. 
    # @param org_id 
    # @param project_id 
    # @param vpc_security_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcSecurityProfile, Fixnum, Hash)>] VpcSecurityProfile data, response status code and response headers
    def get_vpc_security_profile_with_http_info(org_id, project_id, vpc_security_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_vpc_security_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.get_vpc_security_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.get_vpc_security_profile"
      end
      # verify the required parameter 'vpc_security_profile_id' is set
      if @api_client.config.client_side_validation && vpc_security_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_security_profile_id' when calling SecurityApi.get_vpc_security_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-security-profiles/{vpc-security-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-security-profile-id' + '}', vpc_security_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSecurityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_vpc_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get rule statistics
    # Get statistics of E-W Firewall rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id Org id
    # @param project_id Project id
    # @param vpc_id VPC id
    # @param security_policy_id Security policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [RuleStatisticsListResult]
    def get_vpc_security_rule_statistics(org_id, project_id, vpc_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_vpc_security_rule_statistics_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, opts)
      data
    end

    # Get rule statistics
    # Get statistics of E-W Firewall rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id Org id
    # @param project_id Project id
    # @param vpc_id VPC id
    # @param security_policy_id Security policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(RuleStatisticsListResult, Fixnum, Hash)>] RuleStatisticsListResult data, response status code and response headers
    def get_vpc_security_rule_statistics_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.get_vpc_security_rule_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.get_vpc_security_rule_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.get_vpc_security_rule_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.get_vpc_security_rule_statistics"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.get_vpc_security_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.get_vpc_security_rule_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_vpc_security_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a running export task
    # This operation cancels an export task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def global_infra_cancel_export_task(opts = {})
      data, _status_code, _headers = global_infra_cancel_export_task_with_http_info(opts)
      data
    end

    # Cancel a running export task
    # This operation cancels an export task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def global_infra_cancel_export_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_cancel_export_task ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/export?action=cancel'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_cancel_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a running import task
    # This operation cancels an import task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [ImportTask]
    def global_infra_cancel_import_task(opts = {})
      data, _status_code, _headers = global_infra_cancel_import_task_with_http_info(opts)
      data
    end

    # Cancel a running import task
    # This operation cancels an import task. Task needs to be in running state. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportTask, Fixnum, Hash)>] ImportTask data, response status code and response headers
    def global_infra_cancel_import_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_cancel_import_task ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/import?action=cancel'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_cancel_import_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete CPU and memory thresholds profile
    # Delete CPU and memory thresholds profile.
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_delete_cpu_mem_thresholds_profile(profile_id, opts = {})
      global_infra_delete_cpu_mem_thresholds_profile_with_http_info(profile_id, opts)
      nil
    end

    # Delete CPU and memory thresholds profile
    # Delete CPU and memory thresholds profile.
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_cpu_mem_thresholds_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_delete_cpu_mem_thresholds_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.global_infra_delete_cpu_mem_thresholds_profile"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/cpu-mem-thresholds-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_delete_cpu_mem_thresholds_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DNS security profile
    # Delete DNS security profile
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_delete_dns_security_profile(profile_id, opts = {})
      global_infra_delete_dns_security_profile_with_http_info(profile_id, opts)
      nil
    end

    # Delete DNS security profile
    # Delete DNS security profile
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_dns_security_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_delete_dns_security_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.global_infra_delete_dns_security_profile"
      end
      # resource path
      local_var_path = '/global-infra/dns-security-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_delete_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a manual draft
    # Delete a manual draft.
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_delete_draft(draft_id, opts = {})
      global_infra_delete_draft_with_http_info(draft_id, opts)
      nil
    end

    # Delete a manual draft
    # Delete a manual draft.
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_delete_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.global_infra_delete_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_delete_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile
    # API will delete Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_delete_flood_protection_profile(flood_protection_profile_id, opts = {})
      global_infra_delete_flood_protection_profile_with_http_info(flood_protection_profile_id, opts)
      nil
    end

    # Delete Flood Protection Profile
    # API will delete Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_flood_protection_profile_with_http_info(flood_protection_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_delete_flood_protection_profile ...'
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityApi.global_infra_delete_flood_protection_profile"
      end
      # resource path
      local_var_path = '/global-infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_delete_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the IDS Pcap File
    # Delete IDS Pcap file entry from corfu and from file system. 
    # @param id ID of IdsPcapFileMetadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_delete_ids_pcap_file(id, opts = {})
      global_infra_delete_ids_pcap_file_with_http_info(id, opts)
      nil
    end

    # Delete the IDS Pcap File
    # Delete IDS Pcap file entry from corfu and from file system. 
    # @param id ID of IdsPcapFileMetadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_ids_pcap_file_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_delete_ids_pcap_file ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SecurityApi.global_infra_delete_ids_pcap_file"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/pcaps/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_delete_ids_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Firewall Session Timer Profile
    # API will delete Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_delete_policy_firewall_session_timer_profile(firewall_session_timer_profile_id, opts = {})
      global_infra_delete_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, opts)
      nil
    end

    # Delete Firewall Session Timer Profile
    # API will delete Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_delete_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityApi.global_infra_delete_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/global-infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_delete_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download exported file
    # Download the exported file generated from the last export task. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_download_exported_file(opts = {})
      global_infra_download_exported_file_with_http_info(opts)
      nil
    end

    # Download exported file
    # Download the exported file generated from the last export task. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_download_exported_file_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_download_exported_file ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/export?action=download'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_download_exported_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download exported pcap file
    # Download the exported pcap file generated from the export IdsPcapFile api. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param file_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_download_exported_pcap_file(file_name, opts = {})
      global_infra_download_exported_pcap_file_with_http_info(file_name, opts)
      nil
    end

    # Download exported pcap file
    # Download the exported pcap file generated from the export IdsPcapFile api. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param file_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_download_exported_pcap_file_with_http_info(file_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_download_exported_pcap_file ...'
      end
      # verify the required parameter 'file_name' is set
      if @api_client.config.client_side_validation && file_name.nil?
        fail ArgumentError, "Missing the required parameter 'file_name' when calling SecurityApi.global_infra_download_exported_pcap_file"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/pcaps/{file-name}/download'.sub('{' + 'file-name' + '}', file_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_download_exported_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Request the IDS Pcap File Download
    # Trigger the process to collect all pcap files of all the pcap_ids mentioned in request payload. 
    # @param ids_pcap_export 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_export_ids_pcap_file(ids_pcap_export, opts = {})
      global_infra_export_ids_pcap_file_with_http_info(ids_pcap_export, opts)
      nil
    end

    # Request the IDS Pcap File Download
    # Trigger the process to collect all pcap files of all the pcap_ids mentioned in request payload. 
    # @param ids_pcap_export 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_export_ids_pcap_file_with_http_info(ids_pcap_export, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_export_ids_pcap_file ...'
      end
      # verify the required parameter 'ids_pcap_export' is set
      if @api_client.config.client_side_validation && ids_pcap_export.nil?
        fail ArgumentError, "Missing the required parameter 'ids_pcap_export' when calling SecurityApi.global_infra_export_ids_pcap_file"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/pcaps/export'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_pcap_export)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_export_ids_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Filter the firewall exclude list
    # Filter the firewall exclude list by the given object, to check whether the object is a member of this exclude list. 
    # @param intent_path Path of the intent object to be searched in the exclude list
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :deep_check Check all parents (default to false)
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @return [PolicyResourceReference]
    def global_infra_filter_firewall_exclude_list(intent_path, opts = {})
      data, _status_code, _headers = global_infra_filter_firewall_exclude_list_with_http_info(intent_path, opts)
      data
    end

    # Filter the firewall exclude list
    # Filter the firewall exclude list by the given object, to check whether the object is a member of this exclude list. 
    # @param intent_path Path of the intent object to be searched in the exclude list
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :deep_check Check all parents
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @return [Array<(PolicyResourceReference, Fixnum, Hash)>] PolicyResourceReference data, response status code and response headers
    def global_infra_filter_firewall_exclude_list_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_filter_firewall_exclude_list ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling SecurityApi.global_infra_filter_firewall_exclude_list"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/exclude-list?action=filter'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'deep_check'] = opts[:'deep_check'] if !opts[:'deep_check'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_filter_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def global_infra_get_aggregated_configuration_to_be_published_for_draft(draft_id, opts = {})
      data, _status_code, _headers = global_infra_get_aggregated_configuration_to_be_published_for_draft_with_http_info(draft_id, opts)
      data
    end

    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def global_infra_get_aggregated_configuration_to_be_published_for_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_aggregated_configuration_to_be_published_for_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.global_infra_get_aggregated_configuration_to_be_published_for_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}/aggregated'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_aggregated_configuration_to_be_published_for_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param [Hash] opts the optional parameters
    # @return [DnsSecurityProfileBindingMap]
    def global_infra_get_dns_security_profile_binding(domain_id, group_id, dns_security_profile_binding_map_id, opts = {})
      data, _status_code, _headers = global_infra_get_dns_security_profile_binding_with_http_info(domain_id, group_id, dns_security_profile_binding_map_id, opts)
      data
    end

    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DnsSecurityProfileBindingMap, Fixnum, Hash)>] DnsSecurityProfileBindingMap data, response status code and response headers
    def global_infra_get_dns_security_profile_binding_with_http_info(domain_id, group_id, dns_security_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_dns_security_profile_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_get_dns_security_profile_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.global_infra_get_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map_id' when calling SecurityApi.global_infra_get_dns_security_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps/{dns-security-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'dns-security-profile-binding-map-id' + '}', dns_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_dns_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of export task
    # Get the information of the latest export task. 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def global_infra_get_export_task(opts = {})
      data, _status_code, _headers = global_infra_get_export_task_with_http_info(opts)
      data
    end

    # Get the information of export task
    # Get the information of the latest export task. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def global_infra_get_export_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_export_task ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/export'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get policies filtered based on the given criteria
    # Get the list of policies filtered based on the given criteria. 
    # @param scope Scope filter criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @option opts [String] :parent_path Path of the parent object of the entities
    # @return [PolicyResourceReferenceForEPListResult]
    def global_infra_get_filtered_policies(scope, opts = {})
      data, _status_code, _headers = global_infra_get_filtered_policies_with_http_info(scope, opts)
      data
    end

    # Get policies filtered based on the given criteria
    # Get the list of policies filtered based on the given criteria. 
    # @param scope Scope filter criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @option opts [String] :parent_path Path of the parent object of the entities
    # @return [Array<(PolicyResourceReferenceForEPListResult, Fixnum, Hash)>] PolicyResourceReferenceForEPListResult data, response status code and response headers
    def global_infra_get_filtered_policies_with_http_info(scope, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_filtered_policies ...'
      end
      # verify the required parameter 'scope' is set
      if @api_client.config.client_side_validation && scope.nil?
        fail ArgumentError, "Missing the required parameter 'scope' when calling SecurityApi.global_infra_get_filtered_policies"
      end
      # resource path
      local_var_path = '/global-infra/firewall/policies'

      # query parameters
      query_params = {}
      query_params[:'scope'] = scope
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'parent_path'] = opts[:'parent_path'] if !opts[:'parent_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReferenceForEPListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_filtered_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get rules filtered based on the given criteria
    # Get the list of rules of given parent path of policy/section, filtered based on the given criteria. Parent path is mandatory. 
    # @param scope Scope filter criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @option opts [String] :parent_path Path of the parent object of the entities
    # @return [PolicyResourceReferenceForEPListResult]
    def global_infra_get_filtered_rules(scope, opts = {})
      data, _status_code, _headers = global_infra_get_filtered_rules_with_http_info(scope, opts)
      data
    end

    # Get rules filtered based on the given criteria
    # Get the list of rules of given parent path of policy/section, filtered based on the given criteria. Parent path is mandatory. 
    # @param scope Scope filter criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @option opts [String] :parent_path Path of the parent object of the entities
    # @return [Array<(PolicyResourceReferenceForEPListResult, Fixnum, Hash)>] PolicyResourceReferenceForEPListResult data, response status code and response headers
    def global_infra_get_filtered_rules_with_http_info(scope, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_filtered_rules ...'
      end
      # verify the required parameter 'scope' is set
      if @api_client.config.client_side_validation && scope.nil?
        fail ArgumentError, "Missing the required parameter 'scope' when calling SecurityApi.global_infra_get_filtered_rules"
      end
      # resource path
      local_var_path = '/global-infra/firewall/rules'

      # query parameters
      query_params = {}
      query_params[:'scope'] = scope
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'parent_path'] = opts[:'parent_path'] if !opts[:'parent_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReferenceForEPListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_filtered_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def global_infra_get_firewall_exclude_list(opts = {})
      data, _status_code, _headers = global_infra_get_firewall_exclude_list_with_http_info(opts)
      data
    end

    # Read security policy exclude list
    # Read exclude list for firewall 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def global_infra_get_firewall_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_firewall_exclude_list ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read firewall identity store
    # Return a firewall identity store based on the store identifier
    # @param identity_firewall_store_id identity firewall store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStore]
    def global_infra_get_firewall_identity_store(identity_firewall_store_id, opts = {})
      data, _status_code, _headers = global_infra_get_firewall_identity_store_with_http_info(identity_firewall_store_id, opts)
      data
    end

    # Read firewall identity store
    # Return a firewall identity store based on the store identifier
    # @param identity_firewall_store_id identity firewall store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStore, Fixnum, Hash)>] IdentityFirewallStore data, response status code and response headers
    def global_infra_get_firewall_identity_store_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_firewall_identity_store ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SecurityApi.global_infra_get_firewall_identity_store"
      end
      # resource path
      local_var_path = '/global-infra/identity-firewall-stores/{identity-firewall-store-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStore')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreEventLogServer]
    def global_infra_get_firewall_identity_store_event_log_server(identity_firewall_store_id, event_log_server_id, opts = {})
      data, _status_code, _headers = global_infra_get_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts)
      data
    end

    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreEventLogServer, Fixnum, Hash)>] IdentityFirewallStoreEventLogServer data, response status code and response headers
    def global_infra_get_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SecurityApi.global_infra_get_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling SecurityApi.global_infra_get_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/global-infra/identity-firewall-stores/{identity-firewall-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreEventLogServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreLdapServer]
    def global_infra_get_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, opts = {})
      data, _status_code, _headers = global_infra_get_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts)
      data
    end

    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreLdapServer, Fixnum, Hash)>] IdentityFirewallStoreLdapServer data, response status code and response headers
    def global_infra_get_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SecurityApi.global_infra_get_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SecurityApi.global_infra_get_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/global-infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall identity store sync statistics for the given identifier
    # Get Firewall identity store sync statistics for the given identifier
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryDomainSyncStats]
    def global_infra_get_firewall_identity_store_sync_stats(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = global_infra_get_firewall_identity_store_sync_stats_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # Get Firewall identity store sync statistics for the given identifier
    # Get Firewall identity store sync statistics for the given identifier
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryDomainSyncStats, Fixnum, Hash)>] DirectoryDomainSyncStats data, response status code and response headers
    def global_infra_get_firewall_identity_store_sync_stats_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_firewall_identity_store_sync_stats ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SecurityApi.global_infra_get_firewall_identity_store_sync_stats"
      end
      # resource path
      local_var_path = '/global-infra/firewall-identity-stores/{firewall-identity-store-id}/sync-stats'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomainSyncStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_firewall_identity_store_sync_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile
    # API will get Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfile]
    def global_infra_get_flood_protection_profile(flood_protection_profile_id, opts = {})
      data, _status_code, _headers = global_infra_get_flood_protection_profile_with_http_info(flood_protection_profile_id, opts)
      data
    end

    # Get Flood Protection Profile
    # API will get Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfile, Fixnum, Hash)>] FloodProtectionProfile data, response status code and response headers
    def global_infra_get_flood_protection_profile_with_http_info(flood_protection_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_flood_protection_profile ...'
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityApi.global_infra_get_flood_protection_profile"
      end
      # resource path
      local_var_path = '/global-infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get gateway policy statistics
    # Get statistics of a gateay policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [SecurityPolicyStatisticsListResult]
    def global_infra_get_gateway_policy_statistics(domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = global_infra_get_gateway_policy_statistics_with_http_info(domain_id, gateway_policy_id, opts)
      data
    end

    # Get gateway policy statistics
    # Get statistics of a gateay policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(SecurityPolicyStatisticsListResult, Fixnum, Hash)>] SecurityPolicyStatisticsListResult data, response status code and response headers
    def global_infra_get_gateway_policy_statistics_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_gateway_policy_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_get_gateway_policy_statistics"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.global_infra_get_gateway_policy_statistics"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_gateway_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get gateway rule statistics
    # Get statistics of a gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [RuleStatisticsListResult]
    def global_infra_get_gateway_rule_statistics(domain_id, gateway_policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_get_gateway_rule_statistics_with_http_info(domain_id, gateway_policy_id, rule_id, opts)
      data
    end

    # Get gateway rule statistics
    # Get statistics of a gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(RuleStatisticsListResult, Fixnum, Hash)>] RuleStatisticsListResult data, response status code and response headers
    def global_infra_get_gateway_rule_statistics_with_http_info(domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_gateway_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_get_gateway_rule_statistics"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.global_infra_get_gateway_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.global_infra_get_gateway_rule_statistics"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_gateway_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get global distributed firewall configuration for the specified site
    # Get global distributed firewall configuration for the specified site.
    # @param site_id Site ID
    # @param [Hash] opts the optional parameters
    # @return [GlobalDfwConfiguration]
    def global_infra_get_global_dfw_configuration_for_site(site_id, opts = {})
      data, _status_code, _headers = global_infra_get_global_dfw_configuration_for_site_with_http_info(site_id, opts)
      data
    end

    # Get global distributed firewall configuration for the specified site
    # Get global distributed firewall configuration for the specified site.
    # @param site_id Site ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalDfwConfiguration, Fixnum, Hash)>] GlobalDfwConfiguration data, response status code and response headers
    def global_infra_get_global_dfw_configuration_for_site_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_global_dfw_configuration_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SecurityApi.global_infra_get_global_dfw_configuration_for_site"
      end
      # resource path
      local_var_path = '/global-infra/sites/{site-id}/settings/firewall/security'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalDfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_global_dfw_configuration_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Global IDS signature.
    # Read global intrusion detection signature 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [GlobalIdsSignature]
    def global_infra_get_global_ids_signature_gm(signature_id, opts = {})
      data, _status_code, _headers = global_infra_get_global_ids_signature_gm_with_http_info(signature_id, opts)
      data
    end

    # Get Global IDS signature.
    # Read global intrusion detection signature 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalIdsSignature, Fixnum, Hash)>] GlobalIdsSignature data, response status code and response headers
    def global_infra_get_global_ids_signature_gm_with_http_info(signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_global_ids_signature_gm ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SecurityApi.global_infra_get_global_ids_signature_gm"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/gsm/global-signatures/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_global_ids_signature_gm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all IDFW Group VM details for a given Group
    # Get all Identity Firewall Group VM details for a given Group. 
    # @param group_path String Path of the group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyIdfwGroupVmDetailListResult]
    def global_infra_get_group_vm_details(group_path, opts = {})
      data, _status_code, _headers = global_infra_get_group_vm_details_with_http_info(group_path, opts)
      data
    end

    # Get all IDFW Group VM details for a given Group
    # Get all Identity Firewall Group VM details for a given Group. 
    # @param group_path String Path of the group
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyIdfwGroupVmDetailListResult, Fixnum, Hash)>] PolicyIdfwGroupVmDetailListResult data, response status code and response headers
    def global_infra_get_group_vm_details_with_http_info(group_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_group_vm_details ...'
      end
      # verify the required parameter 'group_path' is set
      if @api_client.config.client_side_validation && group_path.nil?
        fail ArgumentError, "Missing the required parameter 'group_path' when calling SecurityApi.global_infra_get_group_vm_details"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/group-vm-details'

      # query parameters
      query_params = {}
      query_params[:'group_path'] = group_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdfwGroupVmDetailListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_group_vm_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW system statistics data
    # It will get IDFW system statistics data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwSystemStats]
    def global_infra_get_idfw_system_statistics_data(opts = {})
      data, _status_code, _headers = global_infra_get_idfw_system_statistics_data_with_http_info(opts)
      data
    end

    # Get IDFW system statistics data
    # It will get IDFW system statistics data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwSystemStats, Fixnum, Hash)>] IdfwSystemStats data, response status code and response headers
    def global_infra_get_idfw_system_statistics_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_idfw_system_statistics_data ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/system-stats'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwSystemStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_idfw_system_statistics_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS gateway policy statistics
    # Get statistics of a IDS gateway policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsSecurityPolicyStatisticsListResult]
    def global_infra_get_ids_gateway_policy_statistics(domain_id, policy_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_gateway_policy_statistics_with_http_info(domain_id, policy_id, opts)
      data
    end

    # Get IDS gateway policy statistics
    # Get statistics of a IDS gateway policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsSecurityPolicyStatisticsListResult, Fixnum, Hash)>] IdsSecurityPolicyStatisticsListResult data, response status code and response headers
    def global_infra_get_ids_gateway_policy_statistics_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_ids_gateway_policy_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_get_ids_gateway_policy_statistics"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.global_infra_get_ids_gateway_policy_statistics"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_ids_gateway_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS gateway rule statistics
    # Get statistics of a IDS gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsRuleStatisticsListResult]
    def global_infra_get_ids_gateway_rule_statistics(domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_gateway_rule_statistics_with_http_info(domain_id, policy_id, rule_id, opts)
      data
    end

    # Get IDS gateway rule statistics
    # Get statistics of a IDS gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsRuleStatisticsListResult, Fixnum, Hash)>] IdsRuleStatisticsListResult data, response status code and response headers
    def global_infra_get_ids_gateway_rule_statistics_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_ids_gateway_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_get_ids_gateway_rule_statistics"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.global_infra_get_ids_gateway_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.global_infra_get_ids_gateway_rule_statistics"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_ids_gateway_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will get existing IDS Profile .
    # This routine will read intrusion detection profile for provided profile id 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [IdsProfile]
    def global_infra_get_ids_profile(profile_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_profile_with_http_info(profile_id, opts)
      data
    end

    # This routine will get existing IDS Profile .
    # This routine will read intrusion detection profile for provided profile id 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsProfile, Fixnum, Hash)>] IdsProfile data, response status code and response headers
    def global_infra_get_ids_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_ids_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.global_infra_get_ids_profile"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS profile signatures.
    # Get all the IDS signatures attached to the Profile. 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsProfileSignatures]
    def global_infra_get_ids_profile_signatures(profile_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_profile_signatures_with_http_info(profile_id, opts)
      data
    end

    # Get IDS profile signatures.
    # Get all the IDS signatures attached to the Profile. 
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsProfileSignatures, Fixnum, Hash)>] IdsProfileSignatures data, response status code and response headers
    def global_infra_get_ids_profile_signatures_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_ids_profile_signatures ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.global_infra_get_ids_profile_signatures"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/profiles/{profile-id}/effective-signatures'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfileSignatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_ids_profile_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS rule.
    # Read intrusion detection rule 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def global_infra_get_ids_rule(domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts)
      data
    end

    # Get IDS rule.
    # Read intrusion detection rule 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def global_infra_get_ids_rule_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_get_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.global_infra_get_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.global_infra_get_ids_rule"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS-IPS rule statistics
    # Get statistics of a IDS-IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsRuleStatisticsListResult]
    def global_infra_get_ids_rule_statistics(domain_id, ids_policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_rule_statistics_with_http_info(domain_id, ids_policy_id, rule_id, opts)
      data
    end

    # Get IDS-IPS rule statistics
    # Get statistics of a IDS-IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsRuleStatisticsListResult, Fixnum, Hash)>] IdsRuleStatisticsListResult data, response status code and response headers
    def global_infra_get_ids_rule_statistics_with_http_info(domain_id, ids_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_ids_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_get_ids_rule_statistics"
      end
      # verify the required parameter 'ids_policy_id' is set
      if @api_client.config.client_side_validation && ids_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ids_policy_id' when calling SecurityApi.global_infra_get_ids_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.global_infra_get_ids_rule_statistics"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{ids-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'ids-policy-id' + '}', ids_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_ids_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [IdsSecurityPolicy]
    def global_infra_get_ids_security_policy(domain_id, policy_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_security_policy_with_http_info(domain_id, policy_id, opts)
      data
    end

    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def global_infra_get_ids_security_policy_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_get_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.global_infra_get_ids_security_policy"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS security policy statistics
    # Get statistics of a IDS security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsSecurityPolicyStatisticsListResult]
    def global_infra_get_ids_security_policy_statistics(domain_id, ids_policy_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_security_policy_statistics_with_http_info(domain_id, ids_policy_id, opts)
      data
    end

    # Get IDS security policy statistics
    # Get statistics of a IDS security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param ids_policy_id IDS Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsSecurityPolicyStatisticsListResult, Fixnum, Hash)>] IdsSecurityPolicyStatisticsListResult data, response status code and response headers
    def global_infra_get_ids_security_policy_statistics_with_http_info(domain_id, ids_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_ids_security_policy_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_get_ids_security_policy_statistics"
      end
      # verify the required parameter 'ids_policy_id' is set
      if @api_client.config.client_side_validation && ids_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ids_policy_id' when calling SecurityApi.global_infra_get_ids_security_policy_statistics"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{ids-policy-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'ids-policy-id' + '}', ids_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_ids_security_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS signature version site mapping on GM
    # Read IDS signature version site mapping on GM 
    # @param mapping_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsSiteVersionMapping]
    def global_infra_get_ids_site_version_mapping(mapping_id, opts = {})
      data, _status_code, _headers = global_infra_get_ids_site_version_mapping_with_http_info(mapping_id, opts)
      data
    end

    # Read IDS signature version site mapping on GM
    # Read IDS signature version site mapping on GM 
    # @param mapping_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSiteVersionMapping, Fixnum, Hash)>] IdsSiteVersionMapping data, response status code and response headers
    def global_infra_get_ids_site_version_mapping_with_http_info(mapping_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_ids_site_version_mapping ...'
      end
      # verify the required parameter 'mapping_id' is set
      if @api_client.config.client_side_validation && mapping_id.nil?
        fail ArgumentError, "Missing the required parameter 'mapping_id' when calling SecurityApi.global_infra_get_ids_site_version_mapping"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/site-version-mappings/{mapping-id}'.sub('{' + 'mapping-id' + '}', mapping_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSiteVersionMapping')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_ids_site_version_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of import task
    # Get the information of the latest import task. 
    # @param [Hash] opts the optional parameters
    # @return [ImportTask]
    def global_infra_get_import_task(opts = {})
      data, _status_code, _headers = global_infra_get_import_task_with_http_info(opts)
      data
    end

    # Get the information of import task
    # Get the information of the latest import task. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportTask, Fixnum, Hash)>] ImportTask data, response status code and response headers
    def global_infra_get_import_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_import_task ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/import'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_import_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy exclude list including system and user excluded members
    # Read security policy exclude list including system and user excluded members. 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def global_infra_get_internal_firewall_exclude_list(opts = {})
      data, _status_code, _headers = global_infra_get_internal_firewall_exclude_list_with_http_info(opts)
      data
    end

    # Read security policy exclude list including system and user excluded members
    # Read security policy exclude list including system and user excluded members. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def global_infra_get_internal_firewall_exclude_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_internal_firewall_exclude_list ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/exclude-list?system_owned=true'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_internal_firewall_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IP reputation site mapping on GM.
    # Read IP reputation site mapping details for a given site. 
    # @param mapping_id mapping ID
    # @param [Hash] opts the optional parameters
    # @return [IPReputationSiteMapping]
    def global_infra_get_ip_reputation_site_mapping(mapping_id, opts = {})
      data, _status_code, _headers = global_infra_get_ip_reputation_site_mapping_with_http_info(mapping_id, opts)
      data
    end

    # Read IP reputation site mapping on GM.
    # Read IP reputation site mapping details for a given site. 
    # @param mapping_id mapping ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPReputationSiteMapping, Fixnum, Hash)>] IPReputationSiteMapping data, response status code and response headers
    def global_infra_get_ip_reputation_site_mapping_with_http_info(mapping_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_ip_reputation_site_mapping ...'
      end
      # verify the required parameter 'mapping_id' is set
      if @api_client.config.client_side_validation && mapping_id.nil?
        fail ArgumentError, "Missing the required parameter 'mapping_id' when calling SecurityApi.global_infra_get_ip_reputation_site_mapping"
      end
      # resource path
      local_var_path = '/global-infra/ip-reputation-site-mappings/{mapping-id}'.sub('{' + 'mapping-id' + '}', mapping_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPReputationSiteMapping')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_ip_reputation_site_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [PolicyDraftPaginatedAggregatedConfigurationResult]
    def global_infra_get_policy_draft_paginated_aggregated_configuration_result(draft_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_draft_paginated_aggregated_configuration_result_with_http_info(draft_id, opts)
      data
    end

    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [Array<(PolicyDraftPaginatedAggregatedConfigurationResult, Fixnum, Hash)>] PolicyDraftPaginatedAggregatedConfigurationResult data, response status code and response headers
    def global_infra_get_policy_draft_paginated_aggregated_configuration_result_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_policy_draft_paginated_aggregated_configuration_result ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.global_infra_get_policy_draft_paginated_aggregated_configuration_result"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}/aggregated_with_pagination'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftPaginatedAggregatedConfigurationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_policy_draft_paginated_aggregated_configuration_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall Flood Protection Profile Binding Map
    # API will get Firewall Flood Protection Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallFloodProtectionProfileBindingMap]
    def global_infra_get_policy_firewall_flood_protection_binding(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts)
      data
    end

    # Get Firewall Flood Protection Profile Binding Map
    # API will get Firewall Flood Protection Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMap, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMap data, response status code and response headers
    def global_infra_get_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_policy_firewall_flood_protection_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_get_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.global_infra_get_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling SecurityApi.global_infra_get_policy_firewall_flood_protection_binding"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_policy_firewall_flood_protection_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # IP Reputation feed configuration.
    # API to retrieve the current IP Reputation feed configuration. 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallIpReputationConfig]
    def global_infra_get_policy_firewall_ip_reputation_config(opts = {})
      data, _status_code, _headers = global_infra_get_policy_firewall_ip_reputation_config_with_http_info(opts)
      data
    end

    # IP Reputation feed configuration.
    # API to retrieve the current IP Reputation feed configuration. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallIpReputationConfig, Fixnum, Hash)>] PolicyFirewallIpReputationConfig data, response status code and response headers
    def global_infra_get_policy_firewall_ip_reputation_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_policy_firewall_ip_reputation_config ...'
      end
      # resource path
      local_var_path = '/global-infra/firewall-ip-reputation-feed'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallIpReputationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_policy_firewall_ip_reputation_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallScheduler]
    def global_infra_get_policy_firewall_scheduler(firewall_scheduler_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts)
      data
    end

    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallScheduler, Fixnum, Hash)>] PolicyFirewallScheduler data, response status code and response headers
    def global_infra_get_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling SecurityApi.global_infra_get_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/global-infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallScheduler')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall Session Timer Profile Binding Map
    # API will get Firewall Session Timer Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallSessionTimerProfileBindingMap]
    def global_infra_get_policy_firewall_session_timer_binding(domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_firewall_session_timer_binding_with_http_info(domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts)
      data
    end

    # Get Firewall Session Timer Profile Binding Map
    # API will get Firewall Session Timer Profile Binding Map 
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMap, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMap data, response status code and response headers
    def global_infra_get_policy_firewall_session_timer_binding_with_http_info(domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_policy_firewall_session_timer_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_get_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.global_infra_get_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'firewall_session_timer_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_binding_map_id' when calling SecurityApi.global_infra_get_policy_firewall_session_timer_binding"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps/{firewall-session-timer-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-session-timer-profile-binding-map-id' + '}', firewall_session_timer_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_policy_firewall_session_timer_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall Session Timer Profile
    # API will get Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallSessionTimerProfile]
    def global_infra_get_policy_firewall_session_timer_profile(firewall_session_timer_profile_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, opts)
      data
    end

    # Get Firewall Session Timer Profile
    # API will get Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallSessionTimerProfile, Fixnum, Hash)>] PolicyFirewallSessionTimerProfile data, response status code and response headers
    def global_infra_get_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityApi.global_infra_get_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/global-infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def global_infra_get_preview_of_configuration_after_publish_of_draft(draft_id, opts = {})
      data, _status_code, _headers = global_infra_get_preview_of_configuration_after_publish_of_draft_with_http_info(draft_id, opts)
      data
    end

    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def global_infra_get_preview_of_configuration_after_publish_of_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_preview_of_configuration_after_publish_of_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.global_infra_get_preview_of_configuration_after_publish_of_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}/complete'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_preview_of_configuration_after_publish_of_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get rule statistics
    # Get statistics of a rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [RuleStatisticsListResult]
    def global_infra_get_rule_statistics(domain_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_get_rule_statistics_with_http_info(domain_id, security_policy_id, rule_id, opts)
      data
    end

    # Get rule statistics
    # Get statistics of a rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(RuleStatisticsListResult, Fixnum, Hash)>] RuleStatisticsListResult data, response status code and response headers
    def global_infra_get_rule_statistics_with_http_info(domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_get_rule_statistics"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.global_infra_get_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.global_infra_get_rule_statistics"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get security policy statistics
    # Get statistics of a security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [SecurityPolicyStatisticsListResult]
    def global_infra_get_security_policy_statistics(domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = global_infra_get_security_policy_statistics_with_http_info(domain_id, security_policy_id, opts)
      data
    end

    # Get security policy statistics
    # Get statistics of a security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(SecurityPolicyStatisticsListResult, Fixnum, Hash)>] SecurityPolicyStatisticsListResult data, response status code and response headers
    def global_infra_get_security_policy_statistics_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_security_policy_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_get_security_policy_statistics"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.global_infra_get_security_policy_statistics"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/security-policies/{security-policy-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_security_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will get site security setting
    # This routine will get site security setting 
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [SiteSecuritySetting]
    def global_infra_get_site_security_setting(site_id, opts = {})
      data, _status_code, _headers = global_infra_get_site_security_setting_with_http_info(site_id, opts)
      data
    end

    # This routine will get site security setting
    # This routine will get site security setting 
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SiteSecuritySetting, Fixnum, Hash)>] SiteSecuritySetting data, response status code and response headers
    def global_infra_get_site_security_setting_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_site_security_setting ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SecurityApi.global_infra_get_site_security_setting"
      end
      # resource path
      local_var_path = '/global-infra/sites/{site-id}/security-setting'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SiteSecuritySetting')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_site_security_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def global_infra_get_tier0_flood_protection_profile_binding(tier0_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def global_infra_get_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_tier0_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityApi.global_infra_get_tier0_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.global_infra_get_tier0_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier0-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_tier0_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def global_infra_get_tier0_locale_services_flood_protection_profile_binding(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def global_infra_get_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_tier0_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityApi.global_infra_get_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.global_infra_get_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.global_infra_get_tier0_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_tier0_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def global_infra_get_tier0_locale_services_session_timer_profile_binding(tier0_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices. 
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def global_infra_get_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_tier0_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityApi.global_infra_get_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.global_infra_get_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.global_infra_get_tier0_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_tier0_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def global_infra_get_tier0_session_timer_profile_binding(tier0_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-0 Logical Router. 
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def global_infra_get_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_tier0_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityApi.global_infra_get_tier0_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.global_infra_get_tier0_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier0-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_tier0_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def global_infra_get_tier1_flood_protection_profile_binding(tier1_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def global_infra_get_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_tier1_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.global_infra_get_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.global_infra_get_tier1_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_tier1_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def global_infra_get_tier1_locale_services_flood_protection_profile_binding(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def global_infra_get_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_tier1_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.global_infra_get_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.global_infra_get_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.global_infra_get_tier1_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_tier1_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def global_infra_get_tier1_locale_services_session_timer_profile_binding(tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def global_infra_get_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.global_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.global_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.global_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def global_infra_get_tier1_session_timer_profile_binding(tier1_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router. 
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def global_infra_get_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.global_infra_get_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.global_infra_get_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDFW user login events for a given VM
    # It will get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_id VM id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwVmStats]
    def global_infra_get_user_login_events_for_avm(vm_id, opts = {})
      data, _status_code, _headers = global_infra_get_user_login_events_for_avm_with_http_info(vm_id, opts)
      data
    end

    # Get IDFW user login events for a given VM
    # It will get IDFW user login events for a given VM (all active plus up to 5 most recent archived entries). 
    # @param vm_id VM id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwVmStats, Fixnum, Hash)>] IdfwVmStats data, response status code and response headers
    def global_infra_get_user_login_events_for_avm_with_http_info(vm_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_user_login_events_for_avm ...'
      end
      # verify the required parameter 'vm_id' is set
      if @api_client.config.client_side_validation && vm_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_id' when calling SecurityApi.global_infra_get_user_login_events_for_avm"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/vm-stats/{vm-id}'.sub('{' + 'vm-id' + '}', vm_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwVmStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_user_login_events_for_avm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user session data
    # It will get user session data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwUserSessionDataAndMappings]
    def global_infra_get_user_session_data(opts = {})
      data, _status_code, _headers = global_infra_get_user_session_data_with_http_info(opts)
      data
    end

    # Get user session data
    # It will get user session data. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwUserSessionDataAndMappings, Fixnum, Hash)>] IdfwUserSessionDataAndMappings data, response status code and response headers
    def global_infra_get_user_session_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_get_user_session_data ...'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/idfw/user-session-data'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwUserSessionDataAndMappings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_get_user_session_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Invoke export task
    # Invoke export task. There can be only one export task run at any point of time. Hence invocation of another export task will be discarded, when there exist an already running export task. Exported configuration will be in a CSV format. This CSV file will be zipped into a ZIP file, that can be downloaded after the completion of export task. 
    # @param export_request_parameter 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def global_infra_invoke_export_task(export_request_parameter, opts = {})
      data, _status_code, _headers = global_infra_invoke_export_task_with_http_info(export_request_parameter, opts)
      data
    end

    # Invoke export task
    # Invoke export task. There can be only one export task run at any point of time. Hence invocation of another export task will be discarded, when there exist an already running export task. Exported configuration will be in a CSV format. This CSV file will be zipped into a ZIP file, that can be downloaded after the completion of export task. 
    # @param export_request_parameter 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def global_infra_invoke_export_task_with_http_info(export_request_parameter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_invoke_export_task ...'
      end
      # verify the required parameter 'export_request_parameter' is set
      if @api_client.config.client_side_validation && export_request_parameter.nil?
        fail ArgumentError, "Missing the required parameter 'export_request_parameter' when calling SecurityApi.global_infra_invoke_export_task"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/export'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(export_request_parameter)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_invoke_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get global distributed firewall configurations for all the sites
    # Get global distributed firewall configurations for all the sites.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalDfwConfigurationListResult]
    def global_infra_list_all_global_dfw_configurations(opts = {})
      data, _status_code, _headers = global_infra_list_all_global_dfw_configurations_with_http_info(opts)
      data
    end

    # Get global distributed firewall configurations for all the sites
    # Get global distributed firewall configurations for all the sites.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalDfwConfigurationListResult, Fixnum, Hash)>] GlobalDfwConfigurationListResult data, response status code and response headers
    def global_infra_list_all_global_dfw_configurations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_all_global_dfw_configurations ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_all_global_dfw_configurations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_all_global_dfw_configurations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/sites/settings/firewall/security'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalDfwConfigurationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_all_global_dfw_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all CPU and memory thresholds profiles
    # List all CPU and memory thresholds profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallCpuMemThresholdsProfileListResult]
    def global_infra_list_cpu_mem_thresholds_profiles(opts = {})
      data, _status_code, _headers = global_infra_list_cpu_mem_thresholds_profiles_with_http_info(opts)
      data
    end

    # List all CPU and memory thresholds profiles
    # List all CPU and memory thresholds profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallCpuMemThresholdsProfileListResult, Fixnum, Hash)>] PolicyFirewallCpuMemThresholdsProfileListResult data, response status code and response headers
    def global_infra_list_cpu_mem_thresholds_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_cpu_mem_thresholds_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_cpu_mem_thresholds_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_cpu_mem_thresholds_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/cpu-mem-thresholds-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallCpuMemThresholdsProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_cpu_mem_thresholds_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DnsSecurityProfileBindingMapListResult]
    def global_infra_list_dns_security_profile_bindings(domain_id, group_id, opts = {})
      data, _status_code, _headers = global_infra_list_dns_security_profile_bindings_with_http_info(domain_id, group_id, opts)
      data
    end

    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DnsSecurityProfileBindingMapListResult, Fixnum, Hash)>] DnsSecurityProfileBindingMapListResult data, response status code and response headers
    def global_infra_list_dns_security_profile_bindings_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_dns_security_profile_bindings ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_list_dns_security_profile_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.global_infra_list_dns_security_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_dns_security_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_dns_security_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_dns_security_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all DNS security profiles
    # List all DNS security profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DnsSecurityProfileListResult]
    def global_infra_list_dns_security_profiles(opts = {})
      data, _status_code, _headers = global_infra_list_dns_security_profiles_with_http_info(opts)
      data
    end

    # List all DNS security profiles
    # List all DNS security profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DnsSecurityProfileListResult, Fixnum, Hash)>] DnsSecurityProfileListResult data, response status code and response headers
    def global_infra_list_dns_security_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_dns_security_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_dns_security_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_dns_security_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dns-security-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_dns_security_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List policy drafts
    # List policy drafts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyDraftListResult]
    def global_infra_list_drafts(opts = {})
      data, _status_code, _headers = global_infra_list_drafts_with_http_info(opts)
      data
    end

    # List policy drafts
    # List policy drafts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyDraftListResult, Fixnum, Hash)>] PolicyDraftListResult data, response status code and response headers
    def global_infra_list_drafts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_drafts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_drafts, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_drafts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/drafts'

      # query parameters
      query_params = {}
      query_params[:'auto_drafts'] = opts[:'auto_drafts'] if !opts[:'auto_drafts'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_drafts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all firewall identity stores
    # List all firewall identity stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreListResults]
    def global_infra_list_firewall_identity_ad_stores(opts = {})
      data, _status_code, _headers = global_infra_list_firewall_identity_ad_stores_with_http_info(opts)
      data
    end

    # List all firewall identity stores
    # List all firewall identity stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreListResults, Fixnum, Hash)>] IdentityFirewallStoreListResults data, response status code and response headers
    def global_infra_list_firewall_identity_ad_stores_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_firewall_identity_ad_stores ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_firewall_identity_ad_stores, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_firewall_identity_ad_stores, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/identity-firewall-stores'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_firewall_identity_ad_stores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Session Timer Profile Binding Maps for all domains
    # API will list all Firewall Session Timer Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSessionTimerProfileBindingMapListResult]
    def global_infra_list_firewall_session_timer_bindings_across_domains(opts = {})
      data, _status_code, _headers = global_infra_list_firewall_session_timer_bindings_across_domains_with_http_info(opts)
      data
    end

    # List Firewall Session Timer Profile Binding Maps for all domains
    # API will list all Firewall Session Timer Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMapListResult data, response status code and response headers
    def global_infra_list_firewall_session_timer_bindings_across_domains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_firewall_session_timer_bindings_across_domains ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_firewall_session_timer_bindings_across_domains, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_firewall_session_timer_bindings_across_domains, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/firewall-session-timer-profile-binding-maps'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_firewall_session_timer_bindings_across_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles bindings.
    # @param flood_protection_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [FloodProtectionProfileBindingListResult]
    def global_infra_list_flood_protection_profile_bindings(flood_protection_profile_id, opts = {})
      data, _status_code, _headers = global_infra_list_flood_protection_profile_bindings_with_http_info(flood_protection_profile_id, opts)
      data
    end

    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles bindings.
    # @param flood_protection_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(FloodProtectionProfileBindingListResult, Fixnum, Hash)>] FloodProtectionProfileBindingListResult data, response status code and response headers
    def global_infra_list_flood_protection_profile_bindings_with_http_info(flood_protection_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_flood_protection_profile_bindings ...'
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityApi.global_infra_list_flood_protection_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_flood_protection_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_flood_protection_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/flood-protection-profiles/{flood-protection-profile-id}/bindings'.sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_flood_protection_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [FloodProtectionProfileListResult]
    def global_infra_list_flood_protection_profiles(opts = {})
      data, _status_code, _headers = global_infra_list_flood_protection_profiles_with_http_info(opts)
      data
    end

    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(FloodProtectionProfileListResult, Fixnum, Hash)>] FloodProtectionProfileListResult data, response status code and response headers
    def global_infra_list_flood_protection_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_flood_protection_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_flood_protection_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_flood_protection_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/flood-protection-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_flood_protection_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List gateway policies
    # List all gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GatewayPolicyListResult]
    def global_infra_list_gateway_policies_for_domain(domain_id, opts = {})
      data, _status_code, _headers = global_infra_list_gateway_policies_for_domain_with_http_info(domain_id, opts)
      data
    end

    # List gateway policies
    # List all gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def global_infra_list_gateway_policies_for_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_gateway_policies_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_list_gateway_policies_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_gateway_policies_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_gateway_policies_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/gateway-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_gateway_policies_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def global_infra_list_gateway_rules(domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = global_infra_list_gateway_rules_with_http_info(domain_id, gateway_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def global_infra_list_gateway_rules_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_gateway_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_list_gateway_rules"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.global_infra_list_gateway_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_gateway_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_gateway_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_gateway_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalIdsSignatureListResult]
    def global_infra_list_global_ids_signatures_gm(opts = {})
      data, _status_code, _headers = global_infra_list_global_ids_signatures_gm_with_http_info(opts)
      data
    end

    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalIdsSignatureListResult, Fixnum, Hash)>] GlobalIdsSignatureListResult data, response status code and response headers
    def global_infra_list_global_ids_signatures_gm_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_global_ids_signatures_gm ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_global_ids_signatures_gm, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_global_ids_signatures_gm, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/gsm/global-signatures'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_global_ids_signatures_gm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreLdapServerListResults]
    def global_infra_list_identity_firewall_store_ldap_servers(identity_firewall_store_id, opts = {})
      data, _status_code, _headers = global_infra_list_identity_firewall_store_ldap_servers_with_http_info(identity_firewall_store_id, opts)
      data
    end

    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreLdapServerListResults, Fixnum, Hash)>] IdentityFirewallStoreLdapServerListResults data, response status code and response headers
    def global_infra_list_identity_firewall_store_ldap_servers_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_identity_firewall_store_ldap_servers ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SecurityApi.global_infra_list_identity_firewall_store_ldap_servers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_identity_firewall_store_ldap_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_identity_firewall_store_ldap_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServerListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_identity_firewall_store_ldap_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS gateway policies
    # List all IDS gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsGatewayPolicyListResult]
    def global_infra_list_ids_gateway_policies(domain_id, opts = {})
      data, _status_code, _headers = global_infra_list_ids_gateway_policies_with_http_info(domain_id, opts)
      data
    end

    # List IDS gateway policies
    # List all IDS gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsGatewayPolicyListResult, Fixnum, Hash)>] IdsGatewayPolicyListResult data, response status code and response headers
    def global_infra_list_ids_gateway_policies_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_ids_gateway_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_list_ids_gateway_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_ids_gateway_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_ids_gateway_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-gateway-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsGatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_ids_gateway_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Gateway rules
    # List IDS Gateway rules
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsRuleListResult]
    def global_infra_list_ids_gateway_rules(domain_id, policy_id, opts = {})
      data, _status_code, _headers = global_infra_list_ids_gateway_rules_with_http_info(domain_id, policy_id, opts)
      data
    end

    # List IDS Gateway rules
    # List IDS Gateway rules
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsRuleListResult, Fixnum, Hash)>] IdsRuleListResult data, response status code and response headers
    def global_infra_list_ids_gateway_rules_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_ids_gateway_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_list_ids_gateway_rules"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.global_infra_list_ids_gateway_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_ids_gateway_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_ids_gateway_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_ids_gateway_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS PCAP file metadata
    # List IDS PCAP file metadata. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsPcapFileMetadataListResult]
    def global_infra_list_ids_pcap_files(opts = {})
      data, _status_code, _headers = global_infra_list_ids_pcap_files_with_http_info(opts)
      data
    end

    # List IDS PCAP file metadata
    # List IDS PCAP file metadata. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsPcapFileMetadataListResult, Fixnum, Hash)>] IdsPcapFileMetadataListResult data, response status code and response headers
    def global_infra_list_ids_pcap_files_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_ids_pcap_files ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_ids_pcap_files, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_ids_pcap_files, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/pcaps'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsPcapFileMetadataListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_ids_pcap_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will list IDS profiles
    # This routine will list all IDS profiles present in system. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsProfileListResult]
    def global_infra_list_ids_profiles(opts = {})
      data, _status_code, _headers = global_infra_list_ids_profiles_with_http_info(opts)
      data
    end

    # This routine will list IDS profiles
    # This routine will list all IDS profiles present in system. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsProfileListResult, Fixnum, Hash)>] IdsProfileListResult data, response status code and response headers
    def global_infra_list_ids_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_ids_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_ids_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_ids_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_ids_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS rules
    # List intrusion detection rules. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsRuleListResult]
    def global_infra_list_ids_rules(domain_id, policy_id, opts = {})
      data, _status_code, _headers = global_infra_list_ids_rules_with_http_info(domain_id, policy_id, opts)
      data
    end

    # List IDS rules
    # List intrusion detection rules. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsRuleListResult, Fixnum, Hash)>] IdsRuleListResult data, response status code and response headers
    def global_infra_list_ids_rules_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_ids_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_list_ids_rules"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.global_infra_list_ids_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_ids_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_ids_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_ids_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSecurityPolicyListResult]
    def global_infra_list_ids_security_policies(domain_id, opts = {})
      data, _status_code, _headers = global_infra_list_ids_security_policies_with_http_info(domain_id, opts)
      data
    end

    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSecurityPolicyListResult, Fixnum, Hash)>] IdsSecurityPolicyListResult data, response status code and response headers
    def global_infra_list_ids_security_policies_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_ids_security_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_list_ids_security_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_ids_security_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_ids_security_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_ids_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS signatures
    # List intrusion detection system signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSignatureListResult]
    def global_infra_list_ids_signatures(version_id, opts = {})
      data, _status_code, _headers = global_infra_list_ids_signatures_with_http_info(version_id, opts)
      data
    end

    # List IDS signatures
    # List intrusion detection system signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSignatureListResult, Fixnum, Hash)>] IdsSignatureListResult data, response status code and response headers
    def global_infra_list_ids_signatures_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_ids_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SecurityApi.global_infra_list_ids_signatures"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_ids_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_ids_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/signature-versions/{version-id}/signatures'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_ids_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS signature version site mappings on GM
    # List signature version site mappings on GM. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSiteVersionMappingListResult]
    def global_infra_list_ids_site_version_mapping(opts = {})
      data, _status_code, _headers = global_infra_list_ids_site_version_mapping_with_http_info(opts)
      data
    end

    # List IDS signature version site mappings on GM
    # List signature version site mappings on GM. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSiteVersionMappingListResult, Fixnum, Hash)>] IdsSiteVersionMappingListResult data, response status code and response headers
    def global_infra_list_ids_site_version_mapping_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_ids_site_version_mapping ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_ids_site_version_mapping, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_ids_site_version_mapping, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/site-version-mappings'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSiteVersionMappingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_ids_site_version_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IP reputation site mapping for all sites.
    # List IP reputation site mapping details. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPReputationSiteMappingListResult]
    def global_infra_list_ip_reputation_site_mapping(opts = {})
      data, _status_code, _headers = global_infra_list_ip_reputation_site_mapping_with_http_info(opts)
      data
    end

    # List IP reputation site mapping for all sites.
    # List IP reputation site mapping details. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPReputationSiteMappingListResult, Fixnum, Hash)>] IPReputationSiteMappingListResult data, response status code and response headers
    def global_infra_list_ip_reputation_site_mapping_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_ip_reputation_site_mapping ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_ip_reputation_site_mapping, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_ip_reputation_site_mapping, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/ip-reputation-site-mappings'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPReputationSiteMappingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_ip_reputation_site_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall CPU Memory Thresholds Profile Binding Maps
    # API will list all Firewall CPU Memory Thresholds Profile Binding Maps. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallCPUMemThresholdsProfileBindingMapListResult]
    def global_infra_list_policy_firewall_cpu_mem_thresholds_profile_binding_maps(opts = {})
      data, _status_code, _headers = global_infra_list_policy_firewall_cpu_mem_thresholds_profile_binding_maps_with_http_info(opts)
      data
    end

    # List Firewall CPU Memory Thresholds Profile Binding Maps
    # API will list all Firewall CPU Memory Thresholds Profile Binding Maps. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallCPUMemThresholdsProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallCPUMemThresholdsProfileBindingMapListResult data, response status code and response headers
    def global_infra_list_policy_firewall_cpu_mem_thresholds_profile_binding_maps_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_policy_firewall_cpu_mem_thresholds_profile_binding_maps ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_policy_firewall_cpu_mem_thresholds_profile_binding_maps, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_policy_firewall_cpu_mem_thresholds_profile_binding_maps, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/cpu-mem-thresholds-profile-binding-maps'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallCPUMemThresholdsProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_policy_firewall_cpu_mem_thresholds_profile_binding_maps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Flood Protection Profile Binding Maps
    # API will list all Firewall Flood Protection Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallFloodProtectionProfileBindingMapListResult]
    def global_infra_list_policy_firewall_flood_protection_bindings(domain_id, group_id, opts = {})
      data, _status_code, _headers = global_infra_list_policy_firewall_flood_protection_bindings_with_http_info(domain_id, group_id, opts)
      data
    end

    # List Firewall Flood Protection Profile Binding Maps
    # API will list all Firewall Flood Protection Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMapListResult data, response status code and response headers
    def global_infra_list_policy_firewall_flood_protection_bindings_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_policy_firewall_flood_protection_bindings ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_list_policy_firewall_flood_protection_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.global_infra_list_policy_firewall_flood_protection_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_policy_firewall_flood_protection_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_policy_firewall_flood_protection_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_policy_firewall_flood_protection_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSchedulerListResult]
    def global_infra_list_policy_firewall_schedulers(opts = {})
      data, _status_code, _headers = global_infra_list_policy_firewall_schedulers_with_http_info(opts)
      data
    end

    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSchedulerListResult, Fixnum, Hash)>] PolicyFirewallSchedulerListResult data, response status code and response headers
    def global_infra_list_policy_firewall_schedulers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_policy_firewall_schedulers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_policy_firewall_schedulers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_policy_firewall_schedulers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/firewall-schedulers'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSchedulerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_policy_firewall_schedulers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Session Timer Profile Binding Maps
    # API will list all Firewall Session Timer Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSessionTimerProfileBindingMapListResult]
    def global_infra_list_policy_firewall_session_timer_bindings(domain_id, group_id, opts = {})
      data, _status_code, _headers = global_infra_list_policy_firewall_session_timer_bindings_with_http_info(domain_id, group_id, opts)
      data
    end

    # List Firewall Session Timer Profile Binding Maps
    # API will list all Firewall Session Timer Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMapListResult data, response status code and response headers
    def global_infra_list_policy_firewall_session_timer_bindings_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_policy_firewall_session_timer_bindings ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_list_policy_firewall_session_timer_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.global_infra_list_policy_firewall_session_timer_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_policy_firewall_session_timer_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_policy_firewall_session_timer_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_policy_firewall_session_timer_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Session Timer Profiles
    # API will list all Firewall Session Timer Profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSessionTimerProfileListResult]
    def global_infra_list_policy_firewall_session_timer_profiles(opts = {})
      data, _status_code, _headers = global_infra_list_policy_firewall_session_timer_profiles_with_http_info(opts)
      data
    end

    # List Firewall Session Timer Profiles
    # API will list all Firewall Session Timer Profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSessionTimerProfileListResult, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileListResult data, response status code and response headers
    def global_infra_list_policy_firewall_session_timer_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_policy_firewall_session_timer_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_policy_firewall_session_timer_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_policy_firewall_session_timer_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/firewall-session-timer-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_policy_firewall_session_timer_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List security policies
    # List all security policies for a domain. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityPolicyListResult]
    def global_infra_list_security_policies_for_domain(domain_id, opts = {})
      data, _status_code, _headers = global_infra_list_security_policies_for_domain_with_http_info(domain_id, opts)
      data
    end

    # List security policies
    # List all security policies for a domain. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityPolicyListResult, Fixnum, Hash)>] SecurityPolicyListResult data, response status code and response headers
    def global_infra_list_security_policies_for_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_security_policies_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_list_security_policies_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_security_policies_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_security_policies_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/security-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_security_policies_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def global_infra_list_security_rules(domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = global_infra_list_security_rules_with_http_info(domain_id, security_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def global_infra_list_security_rules_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_security_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_list_security_rules"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.global_infra_list_security_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_security_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_security_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/security-policies/{security-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_security_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Session Timer Profiles
    # API will list all Session Timer Profiles bindings.
    # @param session_timer_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SessionTimerProfileBindingListResult]
    def global_infra_list_session_timer_profile_bindings(session_timer_profile_id, opts = {})
      data, _status_code, _headers = global_infra_list_session_timer_profile_bindings_with_http_info(session_timer_profile_id, opts)
      data
    end

    # List Session Timer Profiles
    # API will list all Session Timer Profiles bindings.
    # @param session_timer_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SessionTimerProfileBindingListResult, Fixnum, Hash)>] SessionTimerProfileBindingListResult data, response status code and response headers
    def global_infra_list_session_timer_profile_bindings_with_http_info(session_timer_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_list_session_timer_profile_bindings ...'
      end
      # verify the required parameter 'session_timer_profile_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_id' when calling SecurityApi.global_infra_list_session_timer_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_session_timer_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_list_session_timer_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/session-timer-profiles/{session-timer-profile-id}/bindings'.sub('{' + 'session-timer-profile-id' + '}', session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_list_session_timer_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update CPU and memory thresholds profile
    # Create or update CPU and memory thresholds profile.
    # @param profile_id 
    # @param policy_firewall_cpu_mem_thresholds_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_patch_cpu_mem_thresholds_profile(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts = {})
      global_infra_patch_cpu_mem_thresholds_profile_with_http_info(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts)
      nil
    end

    # Create or update CPU and memory thresholds profile
    # Create or update CPU and memory thresholds profile.
    # @param profile_id 
    # @param policy_firewall_cpu_mem_thresholds_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_cpu_mem_thresholds_profile_with_http_info(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_patch_cpu_mem_thresholds_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.global_infra_patch_cpu_mem_thresholds_profile"
      end
      # verify the required parameter 'policy_firewall_cpu_mem_thresholds_profile' is set
      if @api_client.config.client_side_validation && policy_firewall_cpu_mem_thresholds_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_cpu_mem_thresholds_profile' when calling SecurityApi.global_infra_patch_cpu_mem_thresholds_profile"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/cpu-mem-thresholds-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_cpu_mem_thresholds_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_patch_cpu_mem_thresholds_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_patch_dns_security_profile(profile_id, dns_security_profile, opts = {})
      global_infra_patch_dns_security_profile_with_http_info(profile_id, dns_security_profile, opts)
      nil
    end

    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_dns_security_profile_with_http_info(profile_id, dns_security_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_patch_dns_security_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.global_infra_patch_dns_security_profile"
      end
      # verify the required parameter 'dns_security_profile' is set
      if @api_client.config.client_side_validation && dns_security_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile' when calling SecurityApi.global_infra_patch_dns_security_profile"
      end
      # resource path
      local_var_path = '/global-infra/dns-security-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dns_security_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_patch_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_patch_draft(draft_id, policy_draft, opts = {})
      global_infra_patch_draft_with_http_info(draft_id, policy_draft, opts)
      nil
    end

    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_draft_with_http_info(draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_patch_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.global_infra_patch_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling SecurityApi.global_infra_patch_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_patch_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile
    # API will create/update Flood Protection Profile
    # @param flood_protection_profile_id Firewall Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_patch_flood_protection_profile(flood_protection_profile_id, flood_protection_profile, opts = {})
      global_infra_patch_flood_protection_profile_with_http_info(flood_protection_profile_id, flood_protection_profile, opts)
      nil
    end

    # Create or update Flood Protection Profile
    # API will create/update Flood Protection Profile
    # @param flood_protection_profile_id Firewall Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_flood_protection_profile_with_http_info(flood_protection_profile_id, flood_protection_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_patch_flood_protection_profile ...'
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityApi.global_infra_patch_flood_protection_profile"
      end
      # verify the required parameter 'flood_protection_profile' is set
      if @api_client.config.client_side_validation && flood_protection_profile.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile' when calling SecurityApi.global_infra_patch_flood_protection_profile"
      end
      # resource path
      local_var_path = '/global-infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_patch_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Firewall Session Timer Profile
    # API will create/update Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_patch_policy_firewall_session_timer_profile(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      global_infra_patch_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts)
      nil
    end

    # Create or update Firewall Session Timer Profile
    # API will create/update Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_patch_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityApi.global_infra_patch_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'policy_firewall_session_timer_profile' is set
      if @api_client.config.client_side_validation && policy_firewall_session_timer_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_session_timer_profile' when calling SecurityApi.global_infra_patch_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/global-infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_session_timer_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_patch_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # IP reputation feed actions.
    # This API can be used to activate or deactivate auto-download of IP reputation feed, it can also be used to trigger download of IP reputation feed when required. Once auto-download is activated, IP reputation feed will be downloaded at regular intervals of 720 mins(12 hrs). Auto-download of IP reputation feed can be activated using the action 'enable_auto_download', to deactivate use action 'disable_auto_download' and to trigger a download use action 'download'. For Global Manager, the only action that is supported is action=download. The enforcement_point_path of the site where the feed is to be downloaded should be provided along with the action 
    # @param operation action
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyFirewallIpReputationConfig]
    def global_infra_post_policy_firewall_ip_reputation_config(operation, opts = {})
      data, _status_code, _headers = global_infra_post_policy_firewall_ip_reputation_config_with_http_info(operation, opts)
      data
    end

    # IP reputation feed actions.
    # This API can be used to activate or deactivate auto-download of IP reputation feed, it can also be used to trigger download of IP reputation feed when required. Once auto-download is activated, IP reputation feed will be downloaded at regular intervals of 720 mins(12 hrs). Auto-download of IP reputation feed can be activated using the action &#39;enable_auto_download&#39;, to deactivate use action &#39;disable_auto_download&#39; and to trigger a download use action &#39;download&#39;. For Global Manager, the only action that is supported is action&#x3D;download. The enforcement_point_path of the site where the feed is to be downloaded should be provided along with the action 
    # @param operation action
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyFirewallIpReputationConfig, Fixnum, Hash)>] PolicyFirewallIpReputationConfig data, response status code and response headers
    def global_infra_post_policy_firewall_ip_reputation_config_with_http_info(operation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_post_policy_firewall_ip_reputation_config ...'
      end
      # verify the required parameter 'operation' is set
      if @api_client.config.client_side_validation && operation.nil?
        fail ArgumentError, "Missing the required parameter 'operation' when calling SecurityApi.global_infra_post_policy_firewall_ip_reputation_config"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['enable_auto_download', 'disable_auto_download', 'download'].include?(operation)
        fail ArgumentError, "invalid value for 'operation', must be one of enable_auto_download, disable_auto_download, download"
      end
      # resource path
      local_var_path = '/global-infra/firewall-ip-reputation-feed'

      # query parameters
      query_params = {}
      query_params[:'operation'] = operation
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallIpReputationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_post_policy_firewall_ip_reputation_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. If there are additional changes on top of draft configuration, pass it as a request body, in form of Infra object. Otherwise, if there are no additional changes, then pass empty Infra object as a request body. 
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_publish_draft(draft_id, infra, opts = {})
      global_infra_publish_draft_with_http_info(draft_id, infra, opts)
      nil
    end

    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. If there are additional changes on top of draft configuration, pass it as a request body, in form of Infra object. Otherwise, if there are no additional changes, then pass empty Infra object as a request body. 
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_publish_draft_with_http_info(draft_id, infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_publish_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.global_infra_publish_draft"
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling SecurityApi.global_infra_publish_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}?action=publish'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_publish_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def global_infra_put_draft(draft_id, policy_draft, opts = {})
      data, _status_code, _headers = global_infra_put_draft_with_http_info(draft_id, policy_draft, opts)
      data
    end

    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def global_infra_put_draft_with_http_info(draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_put_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.global_infra_put_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling SecurityApi.global_infra_put_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_put_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the CPU and memory thresholds profile
    # Read the CPU and memory thresholds profile.
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallCpuMemThresholdsProfile]
    def global_infra_read_cpu_mem_thresholds_profile(profile_id, opts = {})
      data, _status_code, _headers = global_infra_read_cpu_mem_thresholds_profile_with_http_info(profile_id, opts)
      data
    end

    # Read the CPU and memory thresholds profile
    # Read the CPU and memory thresholds profile.
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallCpuMemThresholdsProfile, Fixnum, Hash)>] PolicyFirewallCpuMemThresholdsProfile data, response status code and response headers
    def global_infra_read_cpu_mem_thresholds_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_read_cpu_mem_thresholds_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.global_infra_read_cpu_mem_thresholds_profile"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/cpu-mem-thresholds-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallCpuMemThresholdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_read_cpu_mem_thresholds_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder for the given tier-0 instance
    # Read the DNS Forwarder for the given tier-0 instance
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [DnsSecurityProfile]
    def global_infra_read_dns_security_profile(profile_id, opts = {})
      data, _status_code, _headers = global_infra_read_dns_security_profile_with_http_info(profile_id, opts)
      data
    end

    # Read the DNS Forwarder for the given tier-0 instance
    # Read the DNS Forwarder for the given tier-0 instance
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DnsSecurityProfile, Fixnum, Hash)>] DnsSecurityProfile data, response status code and response headers
    def global_infra_read_dns_security_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_read_dns_security_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.global_infra_read_dns_security_profile"
      end
      # resource path
      local_var_path = '/global-infra/dns-security-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_read_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read draft
    # Read a draft for a given draft identifier. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def global_infra_read_draft(draft_id, opts = {})
      data, _status_code, _headers = global_infra_read_draft_with_http_info(draft_id, opts)
      data
    end

    # Read draft
    # Read a draft for a given draft identifier. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def global_infra_read_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_read_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.global_infra_read_draft"
      end
      # resource path
      local_var_path = '/global-infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_read_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read gateway policy
    # Read gateway policy for a domain. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def global_infra_read_gateway_policy_for_domain(domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = global_infra_read_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, opts)
      data
    end

    # Read gateway policy
    # Read gateway policy for a domain. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def global_infra_read_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_read_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_read_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.global_infra_read_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_read_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def global_infra_read_gateway_rule(domain_id, gateway_policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_read_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def global_infra_read_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_read_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_read_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.global_infra_read_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.global_infra_read_gateway_rule"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_read_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS gateway policy
    # Read IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsGatewayPolicy]
    def global_infra_read_ids_gateway_policy(domain_id, policy_id, opts = {})
      data, _status_code, _headers = global_infra_read_ids_gateway_policy_with_http_info(domain_id, policy_id, opts)
      data
    end

    # Read IDS gateway policy
    # Read IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsGatewayPolicy, Fixnum, Hash)>] IdsGatewayPolicy data, response status code and response headers
    def global_infra_read_ids_gateway_policy_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_read_ids_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_read_ids_gateway_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.global_infra_read_ids_gateway_policy"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsGatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_read_ids_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS rule
    # Read IDS rule
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def global_infra_read_ids_gateway_rule(domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_read_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, opts)
      data
    end

    # Read IDS rule
    # Read IDS rule
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def global_infra_read_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_read_ids_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_read_ids_gateway_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.global_infra_read_ids_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.global_infra_read_ids_gateway_rule"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_read_ids_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Security Feature
    # Read Security Feature. 
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityFeatures]
    def global_infra_read_security_feature(tier_1_id, opts = {})
      data, _status_code, _headers = global_infra_read_security_feature_with_http_info(tier_1_id, opts)
      data
    end

    # Read Security Feature
    # Read Security Feature. 
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def global_infra_read_security_feature_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_read_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.global_infra_read_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['MALWAREPREVENTION', 'IDFW', 'IDPS', 'TLS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of MALWAREPREVENTION, IDFW, IDPS, TLS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_read_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_read_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_read_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy
    # Read security policy for a domain. 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def global_infra_read_security_policy_for_domain(domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = global_infra_read_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts)
      data
    end

    # Read security policy
    # Read security policy for a domain. 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def global_infra_read_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_read_security_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_read_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.global_infra_read_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_read_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def global_infra_read_security_rule(domain_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_read_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def global_infra_read_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_read_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.global_infra_read_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.global_infra_read_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.global_infra_read_security_rule"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_read_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Security Feature
    # Read Security Feature. 
    # @param tier_0_id tier0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Tier0SecurityFeatures]
    def global_infra_read_tier0_security_feature(tier_0_id, opts = {})
      data, _status_code, _headers = global_infra_read_tier0_security_feature_with_http_info(tier_0_id, opts)
      data
    end

    # Read Security Feature
    # Read Security Feature. 
    # @param tier_0_id tier0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(Tier0SecurityFeatures, Fixnum, Hash)>] Tier0SecurityFeatures data, response status code and response headers
    def global_infra_read_tier0_security_feature_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_read_tier0_security_feature ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.global_infra_read_tier0_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['IDFW', 'IDPS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of IDFW, IDPS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_read_tier0_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.global_infra_read_tier0_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/security-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tier0SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_read_tier0_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset IDS-IPS rule statistics
    # Sets IDS-IPS rule statistics counter to zero. - no enforcement point path specified: Reset of stats will be executed for    each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given    enforcement point. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category Aggregation statistic category (default to IDPSDFW)
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_reset_ids_rule_stats(opts = {})
      global_infra_reset_ids_rule_stats_with_http_info(opts)
      nil
    end

    # Reset IDS-IPS rule statistics
    # Sets IDS-IPS rule statistics counter to zero. - no enforcement point path specified: Reset of stats will be executed for    each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given    enforcement point. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category Aggregation statistic category
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_reset_ids_rule_stats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_reset_ids_rule_stats ...'
      end
      if @api_client.config.client_side_validation && opts[:'category'] && !['IDPSDFW', 'IDPSEDGE'].include?(opts[:'category'])
        fail ArgumentError, 'invalid value for "category", must be one of IDPSDFW, IDPSEDGE'
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/stats?action=reset'

      # query parameters
      query_params = {}
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_reset_ids_rule_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset firewall rule statistics
    # Sets firewall rule statistics counter to zero. This operation is supported for given category, for example: DFW i.e. for all layer3 firewall (transport nodes only) rules or EDGE i.e. for all layer3 edge firewall (edge nodes only) rules. - no enforcement point path specified:   On global manager, it is mandatory to give an enforcement point path.   On local manager, reset of stats will be executed for each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given enforcement point. 
    # @param category Aggregation statistic category
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_reset_rule_stats(category, opts = {})
      global_infra_reset_rule_stats_with_http_info(category, opts)
      nil
    end

    # Reset firewall rule statistics
    # Sets firewall rule statistics counter to zero. This operation is supported for given category, for example: DFW i.e. for all layer3 firewall (transport nodes only) rules or EDGE i.e. for all layer3 edge firewall (edge nodes only) rules. - no enforcement point path specified:   On global manager, it is mandatory to give an enforcement point path.   On local manager, reset of stats will be executed for each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given enforcement point. 
    # @param category Aggregation statistic category
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_reset_rule_stats_with_http_info(category, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_reset_rule_stats ...'
      end
      # verify the required parameter 'category' is set
      if @api_client.config.client_side_validation && category.nil?
        fail ArgumentError, "Missing the required parameter 'category' when calling SecurityApi.global_infra_reset_rule_stats"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['DFW', 'EDGE', 'BRIDGEFIREWALL'].include?(category)
        fail ArgumentError, "invalid value for 'category', must be one of DFW, EDGE, BRIDGEFIREWALL"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/stats?action=reset'

      # query parameters
      query_params = {}
      query_params[:'category'] = category
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_reset_rule_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_test_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, action, opts = {})
      global_infra_test_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, action, opts)
      nil
    end

    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_test_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_test_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SecurityApi.global_infra_test_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SecurityApi.global_infra_test_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling SecurityApi.global_infra_test_firewall_identity_store_ldap_server"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CONNECTIVITY'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CONNECTIVITY"
      end
      # resource path
      local_var_path = '/global-infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_test_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update CPU and memory thresholds profile
    # Create or update CPU and memory thresholds profile.
    # @param profile_id 
    # @param policy_firewall_cpu_mem_thresholds_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [PolicyFirewallCpuMemThresholdsProfile]
    def global_infra_update_cpu_mem_thresholds_profile(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts = {})
      data, _status_code, _headers = global_infra_update_cpu_mem_thresholds_profile_with_http_info(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts)
      data
    end

    # Create or update CPU and memory thresholds profile
    # Create or update CPU and memory thresholds profile.
    # @param profile_id 
    # @param policy_firewall_cpu_mem_thresholds_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(PolicyFirewallCpuMemThresholdsProfile, Fixnum, Hash)>] PolicyFirewallCpuMemThresholdsProfile data, response status code and response headers
    def global_infra_update_cpu_mem_thresholds_profile_with_http_info(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_update_cpu_mem_thresholds_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.global_infra_update_cpu_mem_thresholds_profile"
      end
      # verify the required parameter 'policy_firewall_cpu_mem_thresholds_profile' is set
      if @api_client.config.client_side_validation && policy_firewall_cpu_mem_thresholds_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_cpu_mem_thresholds_profile' when calling SecurityApi.global_infra_update_cpu_mem_thresholds_profile"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/cpu-mem-thresholds-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_cpu_mem_thresholds_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallCpuMemThresholdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_update_cpu_mem_thresholds_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [DnsSecurityProfile]
    def global_infra_update_dns_security_profile(profile_id, dns_security_profile, opts = {})
      data, _status_code, _headers = global_infra_update_dns_security_profile_with_http_info(profile_id, dns_security_profile, opts)
      data
    end

    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(DnsSecurityProfile, Fixnum, Hash)>] DnsSecurityProfile data, response status code and response headers
    def global_infra_update_dns_security_profile_with_http_info(profile_id, dns_security_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_update_dns_security_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.global_infra_update_dns_security_profile"
      end
      # verify the required parameter 'dns_security_profile' is set
      if @api_client.config.client_side_validation && dns_security_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile' when calling SecurityApi.global_infra_update_dns_security_profile"
      end
      # resource path
      local_var_path = '/global-infra/dns-security-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dns_security_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_update_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Flood Protection Profile
    # API will update Firewall Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [FloodProtectionProfile]
    def global_infra_update_flood_protection_profile(flood_protection_profile_id, flood_protection_profile, opts = {})
      data, _status_code, _headers = global_infra_update_flood_protection_profile_with_http_info(flood_protection_profile_id, flood_protection_profile, opts)
      data
    end

    # Update Firewall Flood Protection Profile
    # API will update Firewall Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(FloodProtectionProfile, Fixnum, Hash)>] FloodProtectionProfile data, response status code and response headers
    def global_infra_update_flood_protection_profile_with_http_info(flood_protection_profile_id, flood_protection_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_update_flood_protection_profile ...'
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityApi.global_infra_update_flood_protection_profile"
      end
      # verify the required parameter 'flood_protection_profile' is set
      if @api_client.config.client_side_validation && flood_protection_profile.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile' when calling SecurityApi.global_infra_update_flood_protection_profile"
      end
      # resource path
      local_var_path = '/global-infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_update_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Session Timer Profile
    # API will update Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [PolicyFirewallSessionTimerProfile]
    def global_infra_update_policy_firewall_session_timer_profile(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      data, _status_code, _headers = global_infra_update_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts)
      data
    end

    # Update Firewall Session Timer Profile
    # API will update Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(PolicyFirewallSessionTimerProfile, Fixnum, Hash)>] PolicyFirewallSessionTimerProfile data, response status code and response headers
    def global_infra_update_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_update_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityApi.global_infra_update_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'policy_firewall_session_timer_profile' is set
      if @api_client.config.client_side_validation && policy_firewall_session_timer_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_session_timer_profile' when calling SecurityApi.global_infra_update_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/global-infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_session_timer_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_update_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-0 logical router. 
    # Get filtered view of gateway rules associated with the Tier-0. The gateay policies are returned in the order of category and precedence. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def global_infra_view_tier0_gateway_firewall(tier_0_id, opts = {})
      data, _status_code, _headers = global_infra_view_tier0_gateway_firewall_with_http_info(tier_0_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-0 logical router. 
    # Get filtered view of gateway rules associated with the Tier-0. The gateay policies are returned in the order of category and precedence. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def global_infra_view_tier0_gateway_firewall_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_view_tier0_gateway_firewall ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.global_infra_view_tier0_gateway_firewall"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/gateway-firewall'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_view_tier0_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-0 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-0 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_0_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def global_infra_view_tier0_locale_services_gateway_firewall(tier_0_id, locale_services_id, opts = {})
      data, _status_code, _headers = global_infra_view_tier0_locale_services_gateway_firewall_with_http_info(tier_0_id, locale_services_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-0 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-0 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_0_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def global_infra_view_tier0_locale_services_gateway_firewall_with_http_info(tier_0_id, locale_services_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_view_tier0_locale_services_gateway_firewall ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.global_infra_view_tier0_locale_services_gateway_firewall"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.global_infra_view_tier0_locale_services_gateway_firewall"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/locale-services/{locale-services-id}/gateway-firewall'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_view_tier0_locale_services_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-1. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def global_infra_view_tier1_gateway_firewall(tier_1_id, opts = {})
      data, _status_code, _headers = global_infra_view_tier1_gateway_firewall_with_http_info(tier_1_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-1. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def global_infra_view_tier1_gateway_firewall_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_view_tier1_gateway_firewall ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.global_infra_view_tier1_gateway_firewall"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/gateway-firewall'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_view_tier1_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-1 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def global_infra_view_tier1_locale_services_gateway_firewall(tier_1_id, locale_services_id, opts = {})
      data, _status_code, _headers = global_infra_view_tier1_locale_services_gateway_firewall_with_http_info(tier_1_id, locale_services_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-1 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def global_infra_view_tier1_locale_services_gateway_firewall_with_http_info(tier_1_id, locale_services_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.global_infra_view_tier1_locale_services_gateway_firewall ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.global_infra_view_tier1_locale_services_gateway_firewall"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.global_infra_view_tier1_locale_services_gateway_firewall"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/locale-services/{locale-services-id}/gateway-firewall'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#global_infra_view_tier1_locale_services_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Import K8s network policies to DFW Security Policies
    # This is used to import a set of K8s network policies into DFW security policies 
    # @param network_policy_import_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :on_error Action to take when error occurs (default to ABORT)
    # @return [NetworkPolicyImportResponse]
    def import_k8s_n_pto_dfw(network_policy_import_request, opts = {})
      data, _status_code, _headers = import_k8s_n_pto_dfw_with_http_info(network_policy_import_request, opts)
      data
    end

    # Import K8s network policies to DFW Security Policies
    # This is used to import a set of K8s network policies into DFW security policies 
    # @param network_policy_import_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :on_error Action to take when error occurs
    # @return [Array<(NetworkPolicyImportResponse, Fixnum, Hash)>] NetworkPolicyImportResponse data, response status code and response headers
    def import_k8s_n_pto_dfw_with_http_info(network_policy_import_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.import_k8s_n_pto_dfw ...'
      end
      # verify the required parameter 'network_policy_import_request' is set
      if @api_client.config.client_side_validation && network_policy_import_request.nil?
        fail ArgumentError, "Missing the required parameter 'network_policy_import_request' when calling SecurityApi.import_k8s_n_pto_dfw"
      end
      if @api_client.config.client_side_validation && opts[:'on_error'] && !['ABORT', 'CONTINUE'].include?(opts[:'on_error'])
        fail ArgumentError, 'invalid value for "on_error", must be one of ABORT, CONTINUE'
      end
      # resource path
      local_var_path = '/infra/import-k8s-np-to-dfw'

      # query parameters
      query_params = {}
      query_params[:'on_error'] = opts[:'on_error'] if !opts[:'on_error'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(network_policy_import_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NetworkPolicyImportResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#import_k8s_n_pto_dfw\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Invoke export task
    # Invoke export task. There can be only one export task run at any point of time. Hence invocation of another export task will be discarded, when there exist an already running export task. Exported configuration will be in a CSV format. This CSV file will be zipped into a ZIP file, that can be downloaded after the completion of export task. 
    # @param export_request_parameter 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def invoke_export_task(export_request_parameter, opts = {})
      data, _status_code, _headers = invoke_export_task_with_http_info(export_request_parameter, opts)
      data
    end

    # Invoke export task
    # Invoke export task. There can be only one export task run at any point of time. Hence invocation of another export task will be discarded, when there exist an already running export task. Exported configuration will be in a CSV format. This CSV file will be zipped into a ZIP file, that can be downloaded after the completion of export task. 
    # @param export_request_parameter 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def invoke_export_task_with_http_info(export_request_parameter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.invoke_export_task ...'
      end
      # verify the required parameter 'export_request_parameter' is set
      if @api_client.config.client_side_validation && export_request_parameter.nil?
        fail ArgumentError, "Missing the required parameter 'export_request_parameter' when calling SecurityApi.invoke_export_task"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/export'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(export_request_parameter)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#invoke_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get global distributed firewall configurations for all the sites
    # Get global distributed firewall configurations for all the sites.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalDfwConfigurationListResult]
    def list_all_global_dfw_configurations(opts = {})
      data, _status_code, _headers = list_all_global_dfw_configurations_with_http_info(opts)
      data
    end

    # Get global distributed firewall configurations for all the sites
    # Get global distributed firewall configurations for all the sites.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalDfwConfigurationListResult, Fixnum, Hash)>] GlobalDfwConfigurationListResult data, response status code and response headers
    def list_all_global_dfw_configurations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_all_global_dfw_configurations ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_all_global_dfw_configurations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_all_global_dfw_configurations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/settings/firewall/security'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalDfwConfigurationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_all_global_dfw_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of Bridge Firewall Policies
    # Paginated list of all bridge firewall policies. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [BridgeFirewallPolicyListResult]
    def list_bridge_firewall_policies(domain_id, opts = {})
      data, _status_code, _headers = list_bridge_firewall_policies_with_http_info(domain_id, opts)
      data
    end

    # List of Bridge Firewall Policies
    # Paginated list of all bridge firewall policies. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(BridgeFirewallPolicyListResult, Fixnum, Hash)>] BridgeFirewallPolicyListResult data, response status code and response headers
    def list_bridge_firewall_policies_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_bridge_firewall_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.list_bridge_firewall_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_bridge_firewall_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_bridge_firewall_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeFirewallPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_bridge_firewall_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Bridge Firewall Rules
    # Paginated list of all Bridge Firewall Rules. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def list_bridge_firewall_rules(domain_id, bridge_firewall_policy_id, opts = {})
      data, _status_code, _headers = list_bridge_firewall_rules_with_http_info(domain_id, bridge_firewall_policy_id, opts)
      data
    end

    # List Bridge Firewall Rules
    # Paginated list of all Bridge Firewall Rules. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def list_bridge_firewall_rules_with_http_info(domain_id, bridge_firewall_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_bridge_firewall_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.list_bridge_firewall_rules"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling SecurityApi.list_bridge_firewall_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_bridge_firewall_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_bridge_firewall_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_bridge_firewall_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read all BYOD service instance objects under a tier-0
    # Read all BYOD service instance objects under a tier-0
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ByodPolicyServiceInstanceListResult]
    def list_byod_policy_service_instances_for_tier0(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_byod_policy_service_instances_for_tier0_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # Read all BYOD service instance objects under a tier-0
    # Read all BYOD service instance objects under a tier-0
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ByodPolicyServiceInstanceListResult, Fixnum, Hash)>] ByodPolicyServiceInstanceListResult data, response status code and response headers
    def list_byod_policy_service_instances_for_tier0_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_byod_policy_service_instances_for_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.list_byod_policy_service_instances_for_tier0"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.list_byod_policy_service_instances_for_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_byod_policy_service_instances_for_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_byod_policy_service_instances_for_tier0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/byod-service-instances'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ByodPolicyServiceInstanceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_byod_policy_service_instances_for_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List CommunicationEntries
    # List CommunicationEntries  <br> This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies/security-policy-id/rules 
    # @param domain_id 
    # @param communication_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [CommunicationEntryListResult]
    def list_communication_entry(domain_id, communication_map_id, opts = {})
      data, _status_code, _headers = list_communication_entry_with_http_info(domain_id, communication_map_id, opts)
      data
    end

    # List CommunicationEntries
    # List CommunicationEntries  &lt;br&gt; This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies/security-policy-id/rules 
    # @param domain_id 
    # @param communication_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(CommunicationEntryListResult, Fixnum, Hash)>] CommunicationEntryListResult data, response status code and response headers
    def list_communication_entry_with_http_info(domain_id, communication_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_communication_entry ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.list_communication_entry"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling SecurityApi.list_communication_entry"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_communication_entry, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_communication_entry, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}/communication-entries'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationEntryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List communication maps
    # List all communication maps for a domain.  <br> This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [CommunicationMapListResult]
    def list_communication_maps_for_domain(domain_id, opts = {})
      data, _status_code, _headers = list_communication_maps_for_domain_with_http_info(domain_id, opts)
      data
    end

    # List communication maps
    # List all communication maps for a domain.  &lt;br&gt; This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(CommunicationMapListResult, Fixnum, Hash)>] CommunicationMapListResult data, response status code and response headers
    def list_communication_maps_for_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_communication_maps_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.list_communication_maps_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_communication_maps_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_communication_maps_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_communication_maps_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List compute cluster idfw Configuration
    # API will list all compute cluster wise identity firewall configuration 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ComputeClusterIdfwConfigurationListResult]
    def list_compute_cluster_idfw_configuration(opts = {})
      data, _status_code, _headers = list_compute_cluster_idfw_configuration_with_http_info(opts)
      data
    end

    # List compute cluster idfw Configuration
    # API will list all compute cluster wise identity firewall configuration 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ComputeClusterIdfwConfigurationListResult, Fixnum, Hash)>] ComputeClusterIdfwConfigurationListResult data, response status code and response headers
    def list_compute_cluster_idfw_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_compute_cluster_idfw_configuration ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_compute_cluster_idfw_configuration, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_compute_cluster_idfw_configuration, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/idfw/cluster'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeClusterIdfwConfigurationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_compute_cluster_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all container cluster span of a security policy
    # List all container cluster span of a security policy 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityPolicyContainerClusterListResult]
    def list_container_clusters_for_security_policy(domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = list_container_clusters_for_security_policy_with_http_info(domain_id, security_policy_id, opts)
      data
    end

    # List all container cluster span of a security policy
    # List all container cluster span of a security policy 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityPolicyContainerClusterListResult, Fixnum, Hash)>] SecurityPolicyContainerClusterListResult data, response status code and response headers
    def list_container_clusters_for_security_policy_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_container_clusters_for_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.list_container_clusters_for_security_policy"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.list_container_clusters_for_security_policy"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_container_clusters_for_security_policy, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_container_clusters_for_security_policy, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/container-cluster-span'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyContainerClusterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_container_clusters_for_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all CPU and memory thresholds profiles
    # List all CPU and memory thresholds profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallCpuMemThresholdsProfileListResult]
    def list_cpu_mem_thresholds_profiles(opts = {})
      data, _status_code, _headers = list_cpu_mem_thresholds_profiles_with_http_info(opts)
      data
    end

    # List all CPU and memory thresholds profiles
    # List all CPU and memory thresholds profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallCpuMemThresholdsProfileListResult, Fixnum, Hash)>] PolicyFirewallCpuMemThresholdsProfileListResult data, response status code and response headers
    def list_cpu_mem_thresholds_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_cpu_mem_thresholds_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_cpu_mem_thresholds_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_cpu_mem_thresholds_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/cpu-mem-thresholds-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallCpuMemThresholdsProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_cpu_mem_thresholds_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DnsSecurityProfileBindingMapListResult]
    def list_dns_security_profile_bindings(domain_id, group_id, opts = {})
      data, _status_code, _headers = list_dns_security_profile_bindings_with_http_info(domain_id, group_id, opts)
      data
    end

    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DnsSecurityProfileBindingMapListResult, Fixnum, Hash)>] DnsSecurityProfileBindingMapListResult data, response status code and response headers
    def list_dns_security_profile_bindings_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_dns_security_profile_bindings ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.list_dns_security_profile_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.list_dns_security_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_dns_security_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_dns_security_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_dns_security_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all DNS security profiles
    # List all DNS security profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DnsSecurityProfileListResult]
    def list_dns_security_profiles(opts = {})
      data, _status_code, _headers = list_dns_security_profiles_with_http_info(opts)
      data
    end

    # List all DNS security profiles
    # List all DNS security profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DnsSecurityProfileListResult, Fixnum, Hash)>] DnsSecurityProfileListResult data, response status code and response headers
    def list_dns_security_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_dns_security_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_dns_security_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_dns_security_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dns-security-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_dns_security_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List policy drafts
    # List policy drafts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyDraftListResult]
    def list_drafts(opts = {})
      data, _status_code, _headers = list_drafts_with_http_info(opts)
      data
    end

    # List policy drafts
    # List policy drafts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyDraftListResult, Fixnum, Hash)>] PolicyDraftListResult data, response status code and response headers
    def list_drafts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_drafts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_drafts, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_drafts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/drafts'

      # query parameters
      query_params = {}
      query_params[:'auto_drafts'] = opts[:'auto_drafts'] if !opts[:'auto_drafts'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_drafts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Endpoint policies
    # List all Endpoint policies across all domains ordered by precedence. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EndpointPolicyListResult]
    def list_endpoint_policies_across_all_domains(opts = {})
      data, _status_code, _headers = list_endpoint_policies_across_all_domains_with_http_info(opts)
      data
    end

    # List Endpoint policies
    # List all Endpoint policies across all domains ordered by precedence. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EndpointPolicyListResult, Fixnum, Hash)>] EndpointPolicyListResult data, response status code and response headers
    def list_endpoint_policies_across_all_domains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_endpoint_policies_across_all_domains ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_endpoint_policies_across_all_domains, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_endpoint_policies_across_all_domains, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/endpoint-policies'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EndpointPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_endpoint_policies_across_all_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Endpoint rules
    # List Endpoint rules
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EndpointRuleListResult]
    def list_endpoint_rule(domain_id, endpoint_policy_id, opts = {})
      data, _status_code, _headers = list_endpoint_rule_with_http_info(domain_id, endpoint_policy_id, opts)
      data
    end

    # List Endpoint rules
    # List Endpoint rules
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EndpointRuleListResult, Fixnum, Hash)>] EndpointRuleListResult data, response status code and response headers
    def list_endpoint_rule_with_http_info(domain_id, endpoint_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_endpoint_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.list_endpoint_rule"
      end
      # verify the required parameter 'endpoint_policy_id' is set
      if @api_client.config.client_side_validation && endpoint_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy_id' when calling SecurityApi.list_endpoint_rule"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_endpoint_rule, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_endpoint_rule, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}/endpoint-rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'endpoint-policy-id' + '}', endpoint_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EndpointRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_endpoint_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Flood Protection Profile Binding Maps for all domains
    # API will list all Firewall Flood Protection Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallFloodProtectionProfileBindingMapListResult]
    def list_firewall_flood_protection_bindings_across_domains(opts = {})
      data, _status_code, _headers = list_firewall_flood_protection_bindings_across_domains_with_http_info(opts)
      data
    end

    # List Firewall Flood Protection Profile Binding Maps for all domains
    # API will list all Firewall Flood Protection Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMapListResult data, response status code and response headers
    def list_firewall_flood_protection_bindings_across_domains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_firewall_flood_protection_bindings_across_domains ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_firewall_flood_protection_bindings_across_domains, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_firewall_flood_protection_bindings_across_domains, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/firewall-flood-protection-profile-binding-maps'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_firewall_flood_protection_bindings_across_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all firewall identity stores
    # List all firewall identity stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreListResults]
    def list_firewall_identity_ad_stores(opts = {})
      data, _status_code, _headers = list_firewall_identity_ad_stores_with_http_info(opts)
      data
    end

    # List all firewall identity stores
    # List all firewall identity stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreListResults, Fixnum, Hash)>] IdentityFirewallStoreListResults data, response status code and response headers
    def list_firewall_identity_ad_stores_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_firewall_identity_ad_stores ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_firewall_identity_ad_stores, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_firewall_identity_ad_stores, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/identity-firewall-stores'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_firewall_identity_ad_stores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List members of a directory group
    # A member group could be either direct member of the group specified by group_id or nested member of it. Both direct member groups and nested member groups are returned. Directory group member sync must be enabled to get the correct results.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryGroupMemberListResults]
    def list_firewall_identity_store_group_member_groups(firewall_identity_store_id, group_id, opts = {})
      data, _status_code, _headers = list_firewall_identity_store_group_member_groups_with_http_info(firewall_identity_store_id, group_id, opts)
      data
    end

    # List members of a directory group
    # A member group could be either direct member of the group specified by group_id or nested member of it. Both direct member groups and nested member groups are returned. Directory group member sync must be enabled to get the correct results.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryGroupMemberListResults, Fixnum, Hash)>] DirectoryGroupMemberListResults data, response status code and response headers
    def list_firewall_identity_store_group_member_groups_with_http_info(firewall_identity_store_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_firewall_identity_store_group_member_groups ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SecurityApi.list_firewall_identity_store_group_member_groups"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.list_firewall_identity_store_group_member_groups"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_firewall_identity_store_group_member_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_firewall_identity_store_group_member_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/groups/{group-id}/member-groups'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryGroupMemberListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_firewall_identity_store_group_member_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all configured domain LDAP servers
    # List all configured domain LDAP servers <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryLdapServerListResults]
    def list_firewall_identity_store_ldap_servers(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = list_firewall_identity_store_ldap_servers_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # List all configured domain LDAP servers
    # List all configured domain LDAP servers &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryLdapServerListResults, Fixnum, Hash)>] DirectoryLdapServerListResults data, response status code and response headers
    def list_firewall_identity_store_ldap_servers_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_firewall_identity_store_ldap_servers ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SecurityApi.list_firewall_identity_store_ldap_servers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_firewall_identity_store_ldap_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_firewall_identity_store_ldap_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServerListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_firewall_identity_store_ldap_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all firewall identity stores
    # List all firewall identity stores <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryDomainListResults]
    def list_firewall_identity_stores(opts = {})
      data, _status_code, _headers = list_firewall_identity_stores_with_http_info(opts)
      data
    end

    # List all firewall identity stores
    # List all firewall identity stores &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryDomainListResults, Fixnum, Hash)>] DirectoryDomainListResults data, response status code and response headers
    def list_firewall_identity_stores_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_firewall_identity_stores ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_firewall_identity_stores, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_firewall_identity_stores, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomainListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_firewall_identity_stores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Session Timer Profile Binding Maps for all domains
    # API will list all Firewall Session Timer Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSessionTimerProfileBindingMapListResult]
    def list_firewall_session_timer_bindings_across_domains(opts = {})
      data, _status_code, _headers = list_firewall_session_timer_bindings_across_domains_with_http_info(opts)
      data
    end

    # List Firewall Session Timer Profile Binding Maps for all domains
    # API will list all Firewall Session Timer Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMapListResult data, response status code and response headers
    def list_firewall_session_timer_bindings_across_domains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_firewall_session_timer_bindings_across_domains ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_firewall_session_timer_bindings_across_domains, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_firewall_session_timer_bindings_across_domains, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/firewall-session-timer-profile-binding-maps'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_firewall_session_timer_bindings_across_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles bindings.
    # @param flood_protection_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [FloodProtectionProfileBindingListResult]
    def list_flood_protection_profile_bindings(flood_protection_profile_id, opts = {})
      data, _status_code, _headers = list_flood_protection_profile_bindings_with_http_info(flood_protection_profile_id, opts)
      data
    end

    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles bindings.
    # @param flood_protection_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(FloodProtectionProfileBindingListResult, Fixnum, Hash)>] FloodProtectionProfileBindingListResult data, response status code and response headers
    def list_flood_protection_profile_bindings_with_http_info(flood_protection_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_flood_protection_profile_bindings ...'
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityApi.list_flood_protection_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_flood_protection_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_flood_protection_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/flood-protection-profiles/{flood-protection-profile-id}/bindings'.sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_flood_protection_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [FloodProtectionProfileListResult]
    def list_flood_protection_profiles(opts = {})
      data, _status_code, _headers = list_flood_protection_profiles_with_http_info(opts)
      data
    end

    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(FloodProtectionProfileListResult, Fixnum, Hash)>] FloodProtectionProfileListResult data, response status code and response headers
    def list_flood_protection_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_flood_protection_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_flood_protection_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_flood_protection_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/flood-protection-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_flood_protection_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List gateway policies
    # List all gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GatewayPolicyListResult]
    def list_gateway_policies_for_domain(domain_id, opts = {})
      data, _status_code, _headers = list_gateway_policies_for_domain_with_http_info(domain_id, opts)
      data
    end

    # List gateway policies
    # List all gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def list_gateway_policies_for_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_gateway_policies_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.list_gateway_policies_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_gateway_policies_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_gateway_policies_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_gateway_policies_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def list_gateway_rules(domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = list_gateway_rules_with_http_info(domain_id, gateway_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def list_gateway_rules_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_gateway_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.list_gateway_rules"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.list_gateway_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_gateway_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_gateway_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_gateway_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalIdsSignatureListResult]
    def list_global_ids_signatures(opts = {})
      data, _status_code, _headers = list_global_ids_signatures_with_http_info(opts)
      data
    end

    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalIdsSignatureListResult, Fixnum, Hash)>] GlobalIdsSignatureListResult data, response status code and response headers
    def list_global_ids_signatures_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_global_ids_signatures ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_global_ids_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_global_ids_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_global_ids_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalIdsSignatureListResult]
    def list_global_ids_signatures_gm(opts = {})
      data, _status_code, _headers = list_global_ids_signatures_gm_with_http_info(opts)
      data
    end

    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalIdsSignatureListResult, Fixnum, Hash)>] GlobalIdsSignatureListResult data, response status code and response headers
    def list_global_ids_signatures_gm_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_global_ids_signatures_gm ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_global_ids_signatures_gm, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_global_ids_signatures_gm, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/gsm/global-signatures'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_global_ids_signatures_gm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List group's children groups and Users
    # A member group could be either direct member of the group specified by group_id or nested member of it. Both direct member groups and nested member groups are returned. 
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param include_users include users filter
    # @param [Hash] opts the optional parameters
    # @return [IdentityFirewallStoreUserOrGrouptListResults]
    def list_group_children(identity_firewall_store_id, group_id, include_users, opts = {})
      data, _status_code, _headers = list_group_children_with_http_info(identity_firewall_store_id, group_id, include_users, opts)
      data
    end

    # List group&#39;s children groups and Users
    # A member group could be either direct member of the group specified by group_id or nested member of it. Both direct member groups and nested member groups are returned. 
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param include_users include users filter
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentityFirewallStoreUserOrGrouptListResults, Fixnum, Hash)>] IdentityFirewallStoreUserOrGrouptListResults data, response status code and response headers
    def list_group_children_with_http_info(identity_firewall_store_id, group_id, include_users, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_group_children ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SecurityApi.list_group_children"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.list_group_children"
      end
      # verify the required parameter 'include_users' is set
      if @api_client.config.client_side_validation && include_users.nil?
        fail ArgumentError, "Missing the required parameter 'include_users' when calling SecurityApi.list_group_children"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/groups/{group-id}/children'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include_users'] = include_users

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreUserOrGrouptListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_group_children\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Group Monitoring Profile Binding Maps
    # API will list all Group Monitoring Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GroupMonitoringProfileBindingMapListResult]
    def list_group_monitoring_bindings(domain_id, group_id, opts = {})
      data, _status_code, _headers = list_group_monitoring_bindings_with_http_info(domain_id, group_id, opts)
      data
    end

    # List Group Monitoring Profile Binding Maps
    # API will list all Group Monitoring Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GroupMonitoringProfileBindingMapListResult, Fixnum, Hash)>] GroupMonitoringProfileBindingMapListResult data, response status code and response headers
    def list_group_monitoring_bindings_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_group_monitoring_bindings ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.list_group_monitoring_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.list_group_monitoring_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_group_monitoring_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_group_monitoring_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/group-monitoring-profile-binding-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupMonitoringProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_group_monitoring_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List group's all direct and grand parent groups
    # Returns all the direct and grand parent groups of a group.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @return [IdentityFirewallStoreUserOrGrouptListResults]
    def list_group_parent_groups(identity_firewall_store_id, group_id, opts = {})
      data, _status_code, _headers = list_group_parent_groups_with_http_info(identity_firewall_store_id, group_id, opts)
      data
    end

    # List group&#39;s all direct and grand parent groups
    # Returns all the direct and grand parent groups of a group.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param group_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentityFirewallStoreUserOrGrouptListResults, Fixnum, Hash)>] IdentityFirewallStoreUserOrGrouptListResults data, response status code and response headers
    def list_group_parent_groups_with_http_info(identity_firewall_store_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_group_parent_groups ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SecurityApi.list_group_parent_groups"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.list_group_parent_groups"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/groups/{group-id}/parent-groups'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreUserOrGrouptListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_group_parent_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreLdapServerListResults]
    def list_identity_firewall_store_ldap_servers(identity_firewall_store_id, opts = {})
      data, _status_code, _headers = list_identity_firewall_store_ldap_servers_with_http_info(identity_firewall_store_id, opts)
      data
    end

    # List all configured domain LDAP servers
    # List all configured domain LDAP servers
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreLdapServerListResults, Fixnum, Hash)>] IdentityFirewallStoreLdapServerListResults data, response status code and response headers
    def list_identity_firewall_store_ldap_servers_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_identity_firewall_store_ldap_servers ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SecurityApi.list_identity_firewall_store_ldap_servers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_identity_firewall_store_ldap_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_identity_firewall_store_ldap_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServerListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_identity_firewall_store_ldap_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDFW status for Transport Nodes in a Compute Collection
    # This API will list all transport node and statuses based on idfw enabled compute collection ID. 
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwTransportNodeStatusListResult]
    def list_idfw_status_for_all_transport_nodes_in_a_compute_collection(compute_collection_id, opts = {})
      data, _status_code, _headers = list_idfw_status_for_all_transport_nodes_in_a_compute_collection_with_http_info(compute_collection_id, opts)
      data
    end

    # List IDFW status for Transport Nodes in a Compute Collection
    # This API will list all transport node and statuses based on idfw enabled compute collection ID. 
    # @param compute_collection_id Compute colelction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwTransportNodeStatusListResult, Fixnum, Hash)>] IdfwTransportNodeStatusListResult data, response status code and response headers
    def list_idfw_status_for_all_transport_nodes_in_a_compute_collection_with_http_info(compute_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_idfw_status_for_all_transport_nodes_in_a_compute_collection ...'
      end
      # verify the required parameter 'compute_collection_id' is set
      if @api_client.config.client_side_validation && compute_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'compute_collection_id' when calling SecurityApi.list_idfw_status_for_all_transport_nodes_in_a_compute_collection"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/compute-collections/{compute-collection-id}/transport-nodes/status'.sub('{' + 'compute-collection-id' + '}', compute_collection_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwTransportNodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_idfw_status_for_all_transport_nodes_in_a_compute_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS cluster configs
    # List intrusion detection system cluster configs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsClusterConfigListResult]
    def list_ids_cluster_configs(opts = {})
      data, _status_code, _headers = list_ids_cluster_configs_with_http_info(opts)
      data
    end

    # List IDS cluster configs
    # List intrusion detection system cluster configs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsClusterConfigListResult, Fixnum, Hash)>] IdsClusterConfigListResult data, response status code and response headers
    def list_ids_cluster_configs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_ids_cluster_configs ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_cluster_configs, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_cluster_configs, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/cluster-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsClusterConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_ids_cluster_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Custom Signature Versions
    # List IDS Custom Signature Versions. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsCustomSignatureVersionListResult]
    def list_ids_custom_signature_versions(opts = {})
      data, _status_code, _headers = list_ids_custom_signature_versions_with_http_info(opts)
      data
    end

    # List IDS Custom Signature Versions
    # List IDS Custom Signature Versions. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsCustomSignatureVersionListResult, Fixnum, Hash)>] IdsCustomSignatureVersionListResult data, response status code and response headers
    def list_ids_custom_signature_versions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_ids_custom_signature_versions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_custom_signature_versions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_custom_signature_versions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureVersionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_ids_custom_signature_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Custom Signatures
    # List IDS Custom Signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :include Custom signatures to be returned
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsCustomSignatureListResult]
    def list_ids_custom_signatures(version_id, opts = {})
      data, _status_code, _headers = list_ids_custom_signatures_with_http_info(version_id, opts)
      data
    end

    # List IDS Custom Signatures
    # List IDS Custom Signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :include Custom signatures to be returned
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsCustomSignatureListResult, Fixnum, Hash)>] IdsCustomSignatureListResult data, response status code and response headers
    def list_ids_custom_signatures_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_ids_custom_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SecurityApi.list_ids_custom_signatures"
      end
      if @api_client.config.client_side_validation && opts[:'include'] && !['PREVIEW_CUSTOM_SIGNATURES', 'CUSTOM_SIGNATURES'].include?(opts[:'include'])
        fail ArgumentError, 'invalid value for "include", must be one of PREVIEW_CUSTOM_SIGNATURES, CUSTOM_SIGNATURES'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_custom_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_custom_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_ids_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS gateway policies
    # List all IDS gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsGatewayPolicyListResult]
    def list_ids_gateway_policies(domain_id, opts = {})
      data, _status_code, _headers = list_ids_gateway_policies_with_http_info(domain_id, opts)
      data
    end

    # List IDS gateway policies
    # List all IDS gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsGatewayPolicyListResult, Fixnum, Hash)>] IdsGatewayPolicyListResult data, response status code and response headers
    def list_ids_gateway_policies_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_ids_gateway_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.list_ids_gateway_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_gateway_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_gateway_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsGatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_ids_gateway_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Gateway rules
    # List IDS Gateway rules
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsRuleListResult]
    def list_ids_gateway_rules(domain_id, policy_id, opts = {})
      data, _status_code, _headers = list_ids_gateway_rules_with_http_info(domain_id, policy_id, opts)
      data
    end

    # List IDS Gateway rules
    # List IDS Gateway rules
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsRuleListResult, Fixnum, Hash)>] IdsRuleListResult data, response status code and response headers
    def list_ids_gateway_rules_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_ids_gateway_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.list_ids_gateway_rules"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.list_ids_gateway_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_gateway_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_gateway_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_ids_gateway_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS PCAP file metadata
    # List IDS PCAP file metadata. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsPcapFileMetadataListResult]
    def list_ids_pcap_files(opts = {})
      data, _status_code, _headers = list_ids_pcap_files_with_http_info(opts)
      data
    end

    # List IDS PCAP file metadata
    # List IDS PCAP file metadata. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsPcapFileMetadataListResult, Fixnum, Hash)>] IdsPcapFileMetadataListResult data, response status code and response headers
    def list_ids_pcap_files_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_ids_pcap_files ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_pcap_files, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_pcap_files, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/pcaps'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsPcapFileMetadataListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_ids_pcap_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will list IDS profiles
    # This routine will list all IDS profiles present in system. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsProfileListResult]
    def list_ids_profiles(opts = {})
      data, _status_code, _headers = list_ids_profiles_with_http_info(opts)
      data
    end

    # This routine will list IDS profiles
    # This routine will list all IDS profiles present in system. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsProfileListResult, Fixnum, Hash)>] IdsProfileListResult data, response status code and response headers
    def list_ids_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_ids_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_ids_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS rules
    # List intrusion detection rules. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsRuleListResult]
    def list_ids_rules(domain_id, policy_id, opts = {})
      data, _status_code, _headers = list_ids_rules_with_http_info(domain_id, policy_id, opts)
      data
    end

    # List IDS rules
    # List intrusion detection rules. 
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsRuleListResult, Fixnum, Hash)>] IdsRuleListResult data, response status code and response headers
    def list_ids_rules_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_ids_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.list_ids_rules"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.list_ids_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_ids_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSecurityPolicyListResult]
    def list_ids_security_policies(domain_id, opts = {})
      data, _status_code, _headers = list_ids_security_policies_with_http_info(domain_id, opts)
      data
    end

    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSecurityPolicyListResult, Fixnum, Hash)>] IdsSecurityPolicyListResult data, response status code and response headers
    def list_ids_security_policies_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_ids_security_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.list_ids_security_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_security_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_security_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_ids_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all threshold configurations for IDS system signature
    # List all threshold configurations for IDS signatures. This API is applicable only for 'System' signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsThresholdConfigListResult]
    def list_ids_signature_threshold_configs(opts = {})
      data, _status_code, _headers = list_ids_signature_threshold_configs_with_http_info(opts)
      data
    end

    # List all threshold configurations for IDS system signature
    # List all threshold configurations for IDS signatures. This API is applicable only for &#39;System&#39; signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsThresholdConfigListResult, Fixnum, Hash)>] IdsThresholdConfigListResult data, response status code and response headers
    def list_ids_signature_threshold_configs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_ids_signature_threshold_configs ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_signature_threshold_configs, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_signature_threshold_configs, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/threshold-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsThresholdConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_ids_signature_threshold_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS signatures
    # List intrusion detection system signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSignatureListResult]
    def list_ids_signatures(version_id, opts = {})
      data, _status_code, _headers = list_ids_signatures_with_http_info(version_id, opts)
      data
    end

    # List IDS signatures
    # List intrusion detection system signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSignatureListResult, Fixnum, Hash)>] IdsSignatureListResult data, response status code and response headers
    def list_ids_signatures_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_ids_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SecurityApi.list_ids_signatures"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_ids_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signature-versions/{version-id}/signatures'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_ids_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Malware Prevention profiles
    # List Malware Prevention profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MalwarePreventionProfileListResult]
    def list_malware_prevention_profiles(opts = {})
      data, _status_code, _headers = list_malware_prevention_profiles_with_http_info(opts)
      data
    end

    # List Malware Prevention profiles
    # List Malware Prevention profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MalwarePreventionProfileListResult, Fixnum, Hash)>] MalwarePreventionProfileListResult data, response status code and response headers
    def list_malware_prevention_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_malware_prevention_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_malware_prevention_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_malware_prevention_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/malware-prevention-service/profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MalwarePreventionProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_malware_prevention_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Malware Prevention signatures
    # List Malware Prevention signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [MalwarePreventionSignatureListResult]
    def list_malware_prevention_signatures(opts = {})
      data, _status_code, _headers = list_malware_prevention_signatures_with_http_info(opts)
      data
    end

    # List Malware Prevention signatures
    # List Malware Prevention signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(MalwarePreventionSignatureListResult, Fixnum, Hash)>] MalwarePreventionSignatureListResult data, response status code and response headers
    def list_malware_prevention_signatures_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_malware_prevention_signatures ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_malware_prevention_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_malware_prevention_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/malware-prevention-service/signatures'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MalwarePreventionSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_malware_prevention_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall CPU Memory Thresholds Profile Binding Maps
    # API will list all Firewall CPU Memory Thresholds Profile Binding Maps. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallCPUMemThresholdsProfileBindingMapListResult]
    def list_policy_firewall_cpu_mem_thresholds_profile_binding_maps(opts = {})
      data, _status_code, _headers = list_policy_firewall_cpu_mem_thresholds_profile_binding_maps_with_http_info(opts)
      data
    end

    # List Firewall CPU Memory Thresholds Profile Binding Maps
    # API will list all Firewall CPU Memory Thresholds Profile Binding Maps. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallCPUMemThresholdsProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallCPUMemThresholdsProfileBindingMapListResult data, response status code and response headers
    def list_policy_firewall_cpu_mem_thresholds_profile_binding_maps_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_policy_firewall_cpu_mem_thresholds_profile_binding_maps ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_policy_firewall_cpu_mem_thresholds_profile_binding_maps, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_policy_firewall_cpu_mem_thresholds_profile_binding_maps, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/cpu-mem-thresholds-profile-binding-maps'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallCPUMemThresholdsProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_policy_firewall_cpu_mem_thresholds_profile_binding_maps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Flood Protection Profile Binding Maps
    # API will list all Firewall Flood Protection Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallFloodProtectionProfileBindingMapListResult]
    def list_policy_firewall_flood_protection_bindings(domain_id, group_id, opts = {})
      data, _status_code, _headers = list_policy_firewall_flood_protection_bindings_with_http_info(domain_id, group_id, opts)
      data
    end

    # List Firewall Flood Protection Profile Binding Maps
    # API will list all Firewall Flood Protection Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMapListResult data, response status code and response headers
    def list_policy_firewall_flood_protection_bindings_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_policy_firewall_flood_protection_bindings ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.list_policy_firewall_flood_protection_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.list_policy_firewall_flood_protection_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_policy_firewall_flood_protection_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_policy_firewall_flood_protection_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_policy_firewall_flood_protection_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSchedulerListResult]
    def list_policy_firewall_schedulers(opts = {})
      data, _status_code, _headers = list_policy_firewall_schedulers_with_http_info(opts)
      data
    end

    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSchedulerListResult, Fixnum, Hash)>] PolicyFirewallSchedulerListResult data, response status code and response headers
    def list_policy_firewall_schedulers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_policy_firewall_schedulers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_policy_firewall_schedulers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_policy_firewall_schedulers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-schedulers'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSchedulerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_policy_firewall_schedulers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Session Timer Profile Binding Maps
    # API will list all Firewall Session Timer Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSessionTimerProfileBindingMapListResult]
    def list_policy_firewall_session_timer_bindings(domain_id, group_id, opts = {})
      data, _status_code, _headers = list_policy_firewall_session_timer_bindings_with_http_info(domain_id, group_id, opts)
      data
    end

    # List Firewall Session Timer Profile Binding Maps
    # API will list all Firewall Session Timer Profile Binding Maps in current group id. 
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMapListResult data, response status code and response headers
    def list_policy_firewall_session_timer_bindings_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_policy_firewall_session_timer_bindings ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.list_policy_firewall_session_timer_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.list_policy_firewall_session_timer_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_policy_firewall_session_timer_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_policy_firewall_session_timer_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_policy_firewall_session_timer_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Session Timer Profiles
    # API will list all Firewall Session Timer Profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSessionTimerProfileListResult]
    def list_policy_firewall_session_timer_profiles(opts = {})
      data, _status_code, _headers = list_policy_firewall_session_timer_profiles_with_http_info(opts)
      data
    end

    # List Firewall Session Timer Profiles
    # API will list all Firewall Session Timer Profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSessionTimerProfileListResult, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileListResult data, response status code and response headers
    def list_policy_firewall_session_timer_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_policy_firewall_session_timer_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_policy_firewall_session_timer_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_policy_firewall_session_timer_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-session-timer-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_policy_firewall_session_timer_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all service chain mappings for given service profile.
    # List all service chain mappings in the system for the given service profile. If no explicit enforcement point is provided in the request, will return for default. Else, will return for specified points. 
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [ServiceChainMappingListResult]
    def list_policy_service_chain_mappings(service_reference_id, service_profile_id, opts = {})
      data, _status_code, _headers = list_policy_service_chain_mappings_with_http_info(service_reference_id, service_profile_id, opts)
      data
    end

    # List all service chain mappings for given service profile.
    # List all service chain mappings in the system for the given service profile. If no explicit enforcement point is provided in the request, will return for default. Else, will return for specified points. 
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(ServiceChainMappingListResult, Fixnum, Hash)>] ServiceChainMappingListResult data, response status code and response headers
    def list_policy_service_chain_mappings_with_http_info(service_reference_id, service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_policy_service_chain_mappings ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling SecurityApi.list_policy_service_chain_mappings"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling SecurityApi.list_policy_service_chain_mappings"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}/service-chain-mappings'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceChainMappingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_policy_service_chain_mappings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List service chains
    # List all the service chains available for service insertion 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyServiceChainListResult]
    def list_policy_service_chains(opts = {})
      data, _status_code, _headers = list_policy_service_chains_with_http_info(opts)
      data
    end

    # List service chains
    # List all the service chains available for service insertion 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyServiceChainListResult, Fixnum, Hash)>] PolicyServiceChainListResult data, response status code and response headers
    def list_policy_service_chains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_policy_service_chains ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_policy_service_chains, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_policy_service_chains, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/service-chains'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceChainListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_policy_service_chains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all service instance endpoint
    # List all service instance endpoint
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceInstanceEndpointListResult]
    def list_policy_service_instance_endpoints(tier_0_id, locale_service_id, service_instance_id, opts = {})
      data, _status_code, _headers = list_policy_service_instance_endpoints_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts)
      data
    end

    # List all service instance endpoint
    # List all service instance endpoint
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceInstanceEndpointListResult, Fixnum, Hash)>] ServiceInstanceEndpointListResult data, response status code and response headers
    def list_policy_service_instance_endpoints_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_policy_service_instance_endpoints ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.list_policy_service_instance_endpoints"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.list_policy_service_instance_endpoints"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.list_policy_service_instance_endpoints"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_policy_service_instance_endpoints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_policy_service_instance_endpoints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}/service-instance-endpoints'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInstanceEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_policy_service_instance_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List service profiles
    # List all the service profiles available for given service reference 
    # @param service_reference_id Service reference id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyServiceProfileListResult]
    def list_policy_service_profiles(service_reference_id, opts = {})
      data, _status_code, _headers = list_policy_service_profiles_with_http_info(service_reference_id, opts)
      data
    end

    # List service profiles
    # List all the service profiles available for given service reference 
    # @param service_reference_id Service reference id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyServiceProfileListResult, Fixnum, Hash)>] PolicyServiceProfileListResult data, response status code and response headers
    def list_policy_service_profiles_with_http_info(service_reference_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_policy_service_profiles ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling SecurityApi.list_policy_service_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_policy_service_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_policy_service_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_policy_service_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of URL categories.
    # Gets the list of categories. This will provide all the supported categories along with their ids. Few examples of these categories are Shopping, Social Networks, Streaming sites, etc. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyUrlCategoryListResult]
    def list_policy_url_categories(opts = {})
      data, _status_code, _headers = list_policy_url_categories_with_http_info(opts)
      data
    end

    # Get the list of URL categories.
    # Gets the list of categories. This will provide all the supported categories along with their ids. Few examples of these categories are Shopping, Social Networks, Streaming sites, etc. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyUrlCategoryListResult, Fixnum, Hash)>] PolicyUrlCategoryListResult data, response status code and response headers
    def list_policy_url_categories_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_policy_url_categories ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_policy_url_categories, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_policy_url_categories, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/url-categories'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyUrlCategoryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_policy_url_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of reputation severity
    # Gets the list of reputation severities. This will provide all the supported severities along with their ids, min and max reputaitons. The min_reputation and max_reputation specify the range of the reputations which belong to a particular severity. For instance, any reputation between 1 to 20 belongs to the severity 'High Risk'. Similary a reputation between 81 to 100 belong to the severity 'Trustworthy'. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyUrlReputationSeverityListResult]
    def list_policy_url_reputation_severities(opts = {})
      data, _status_code, _headers = list_policy_url_reputation_severities_with_http_info(opts)
      data
    end

    # Get the list of reputation severity
    # Gets the list of reputation severities. This will provide all the supported severities along with their ids, min and max reputaitons. The min_reputation and max_reputation specify the range of the reputations which belong to a particular severity. For instance, any reputation between 1 to 20 belongs to the severity &#39;High Risk&#39;. Similary a reputation between 81 to 100 belong to the severity &#39;Trustworthy&#39;. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyUrlReputationSeverityListResult, Fixnum, Hash)>] PolicyUrlReputationSeverityListResult data, response status code and response headers
    def list_policy_url_reputation_severities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_policy_url_reputation_severities ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_policy_url_reputation_severities, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_policy_url_reputation_severities, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/url-reputation-severities'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyUrlReputationSeverityListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_policy_url_reputation_severities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List redirection policies for a domain
    # List redirection policies for a domain
    # @param domain_id Domain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RedirectionPolicyListResult]
    def list_redirection_policies(domain_id, opts = {})
      data, _status_code, _headers = list_redirection_policies_with_http_info(domain_id, opts)
      data
    end

    # List redirection policies for a domain
    # List redirection policies for a domain
    # @param domain_id Domain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RedirectionPolicyListResult, Fixnum, Hash)>] RedirectionPolicyListResult data, response status code and response headers
    def list_redirection_policies_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_redirection_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.list_redirection_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_redirection_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_redirection_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_redirection_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List redirection policies
    # List all redirection policies across all domains ordered by precedence. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RedirectionPolicyListResult]
    def list_redirection_policies_across_all_domains(opts = {})
      data, _status_code, _headers = list_redirection_policies_across_all_domains_with_http_info(opts)
      data
    end

    # List redirection policies
    # List all redirection policies across all domains ordered by precedence. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RedirectionPolicyListResult, Fixnum, Hash)>] RedirectionPolicyListResult data, response status code and response headers
    def list_redirection_policies_across_all_domains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_redirection_policies_across_all_domains ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_redirection_policies_across_all_domains, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_redirection_policies_across_all_domains, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/redirection-policies'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_redirection_policies_across_all_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RedirectionRuleListResult]
    def list_redirection_rules(domain_id, redirection_policy_id, opts = {})
      data, _status_code, _headers = list_redirection_rules_with_http_info(domain_id, redirection_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RedirectionRuleListResult, Fixnum, Hash)>] RedirectionRuleListResult data, response status code and response headers
    def list_redirection_rules_with_http_info(domain_id, redirection_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_redirection_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.list_redirection_rules"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling SecurityApi.list_redirection_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_redirection_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_redirection_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_redirection_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List security policies
    # List all security policies for a domain. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityPolicyListResult]
    def list_security_policies_for_domain(domain_id, opts = {})
      data, _status_code, _headers = list_security_policies_for_domain_with_http_info(domain_id, opts)
      data
    end

    # List security policies
    # List all security policies for a domain. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityPolicyListResult, Fixnum, Hash)>] SecurityPolicyListResult data, response status code and response headers
    def list_security_policies_for_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_security_policies_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.list_security_policies_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_security_policies_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_security_policies_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_security_policies_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def list_security_rules(domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = list_security_rules_with_http_info(domain_id, security_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def list_security_rules_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_security_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.list_security_rules"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.list_security_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_security_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_security_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_security_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all Service Definitions registered on given enforcement point.
    # List all Service Definitions registered on given enforcement point. 
    # @param enforcement_point_id Enforcement point id
    # @param [Hash] opts the optional parameters
    # @return [ServiceInsertionServiceListResult]
    def list_service_definitions(enforcement_point_id, opts = {})
      data, _status_code, _headers = list_service_definitions_with_http_info(enforcement_point_id, opts)
      data
    end

    # List all Service Definitions registered on given enforcement point.
    # List all Service Definitions registered on given enforcement point. 
    # @param enforcement_point_id Enforcement point id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInsertionServiceListResult, Fixnum, Hash)>] ServiceInsertionServiceListResult data, response status code and response headers
    def list_service_definitions_with_http_info(enforcement_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_service_definitions ...'
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling SecurityApi.list_service_definitions"
      end
      # resource path
      local_var_path = '/enforcement-points/{enforcement-point-id}/service-definitions'.sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_service_definitions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List service references
    # List all the partner service references available for service insertion 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceReferenceListResult]
    def list_service_references(opts = {})
      data, _status_code, _headers = list_service_references_with_http_info(opts)
      data
    end

    # List service references
    # List all the partner service references available for service insertion 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceReferenceListResult, Fixnum, Hash)>] ServiceReferenceListResult data, response status code and response headers
    def list_service_references_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_service_references ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_service_references, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_service_references, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/service-references'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceReferenceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_service_references\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Session Timer Profiles
    # API will list all Session Timer Profiles bindings.
    # @param session_timer_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SessionTimerProfileBindingListResult]
    def list_session_timer_profile_bindings(session_timer_profile_id, opts = {})
      data, _status_code, _headers = list_session_timer_profile_bindings_with_http_info(session_timer_profile_id, opts)
      data
    end

    # List Session Timer Profiles
    # API will list all Session Timer Profiles bindings.
    # @param session_timer_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SessionTimerProfileBindingListResult, Fixnum, Hash)>] SessionTimerProfileBindingListResult data, response status code and response headers
    def list_session_timer_profile_bindings_with_http_info(session_timer_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_session_timer_profile_bindings ...'
      end
      # verify the required parameter 'session_timer_profile_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_id' when calling SecurityApi.list_session_timer_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_session_timer_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_session_timer_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/session-timer-profiles/{session-timer-profile-id}/bindings'.sub('{' + 'session-timer-profile-id' + '}', session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_session_timer_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read all Tier1 BYOD service instance objects under a tier-1
    # Read all Tier1 BYOD service instance objects under a tier-1
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ByodPolicyServiceInstanceListResult]
    def list_tier1_byod_policy_service_instances(tier_1_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_tier1_byod_policy_service_instances_with_http_info(tier_1_id, locale_service_id, opts)
      data
    end

    # Read all Tier1 BYOD service instance objects under a tier-1
    # Read all Tier1 BYOD service instance objects under a tier-1
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ByodPolicyServiceInstanceListResult, Fixnum, Hash)>] ByodPolicyServiceInstanceListResult data, response status code and response headers
    def list_tier1_byod_policy_service_instances_with_http_info(tier_1_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_tier1_byod_policy_service_instances ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.list_tier1_byod_policy_service_instances"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.list_tier1_byod_policy_service_instances"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_tier1_byod_policy_service_instances, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_tier1_byod_policy_service_instances, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/byod-service-instances'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ByodPolicyServiceInstanceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_tier1_byod_policy_service_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all Tier1 service instance endpoint
    # List all Tier1 service instance endpoint
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceInstanceEndpointListResult]
    def list_tier1_policy_service_instance_endpoints(tier_1_id, locale_service_id, service_instance_id, opts = {})
      data, _status_code, _headers = list_tier1_policy_service_instance_endpoints_with_http_info(tier_1_id, locale_service_id, service_instance_id, opts)
      data
    end

    # List all Tier1 service instance endpoint
    # List all Tier1 service instance endpoint
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceInstanceEndpointListResult, Fixnum, Hash)>] ServiceInstanceEndpointListResult data, response status code and response headers
    def list_tier1_policy_service_instance_endpoints_with_http_info(tier_1_id, locale_service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_tier1_policy_service_instance_endpoints ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.list_tier1_policy_service_instance_endpoints"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.list_tier1_policy_service_instance_endpoints"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.list_tier1_policy_service_instance_endpoints"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_tier1_policy_service_instance_endpoints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_tier1_policy_service_instance_endpoints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}/service-instance-endpoints'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInstanceEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_tier1_policy_service_instance_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all virtual endpoints
    # List all virtual endpoints
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VirtualEndpointListResult]
    def list_tier1_virtual_endpoints(tier_1_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_tier1_virtual_endpoints_with_http_info(tier_1_id, locale_service_id, opts)
      data
    end

    # List all virtual endpoints
    # List all virtual endpoints
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VirtualEndpointListResult, Fixnum, Hash)>] VirtualEndpointListResult data, response status code and response headers
    def list_tier1_virtual_endpoints_with_http_info(tier_1_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_tier1_virtual_endpoints ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.list_tier1_virtual_endpoints"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.list_tier1_virtual_endpoints"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_tier1_virtual_endpoints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_tier1_virtual_endpoints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/endpoints/virtual-endpoints'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_tier1_virtual_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List TLS policies
    # List all TLS policies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TlsPolicyListResult]
    def list_tls_policies(opts = {})
      data, _status_code, _headers = list_tls_policies_with_http_info(opts)
      data
    end

    # List TLS policies
    # List all TLS policies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TlsPolicyListResult, Fixnum, Hash)>] TlsPolicyListResult data, response status code and response headers
    def list_tls_policies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_tls_policies ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_tls_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_tls_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tls-inspection-policies'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_tls_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tls profiles available.
    # List all the Tls profiles available by requested resource_type. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TlsProfileListResult]
    def list_tls_profiles(opts = {})
      data, _status_code, _headers = list_tls_profiles_with_http_info(opts)
      data
    end

    # Get Tls profiles available.
    # List all the Tls profiles available by requested resource_type. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TlsProfileListResult, Fixnum, Hash)>] TlsProfileListResult data, response status code and response headers
    def list_tls_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_tls_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_tls_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_tls_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tls-inspection-action-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_tls_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List TLS rules
    # List TLS rules
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TlsRuleListResult]
    def list_tls_rules(policy_id, opts = {})
      data, _status_code, _headers = list_tls_rules_with_http_info(policy_id, opts)
      data
    end

    # List TLS rules
    # List TLS rules
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TlsRuleListResult, Fixnum, Hash)>] TlsRuleListResult data, response status code and response headers
    def list_tls_rules_with_http_info(policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_tls_rules ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.list_tls_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_tls_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_tls_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}/rules'.sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_tls_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # TLS inspection execution state details for the tier1
    # TLS inspection execution state details for the tier1 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :failed_domains TLS inspection failed domain filter (default to true)
    # @option opts [String] :fqdn Fully Qualified Domain Name
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TlsStateObjectListResult]
    def list_tls_state(tier_1_id, opts = {})
      data, _status_code, _headers = list_tls_state_with_http_info(tier_1_id, opts)
      data
    end

    # TLS inspection execution state details for the tier1
    # TLS inspection execution state details for the tier1 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :failed_domains TLS inspection failed domain filter
    # @option opts [String] :fqdn Fully Qualified Domain Name
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TlsStateObjectListResult, Fixnum, Hash)>] TlsStateObjectListResult data, response status code and response headers
    def list_tls_state_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_tls_state ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.list_tls_state"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_tls_state, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_tls_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/tls-inspection-state'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'failed_domains'] = opts[:'failed_domains'] if !opts[:'failed_domains'].nil?
      query_params[:'fqdn'] = opts[:'fqdn'] if !opts[:'fqdn'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsStateObjectListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_tls_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # TLS inspection execution state fqdn details for the tier1
    # TLS inspection execution state fqdn details for the tier1 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :failed_domains TLS inspection failed domain filter (default to true)
    # @option opts [String] :fqdn Fully Qualified Domain Name
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TlsStateObjectListResult]
    def list_tls_state_fqdns(tier_1_id, opts = {})
      data, _status_code, _headers = list_tls_state_fqdns_with_http_info(tier_1_id, opts)
      data
    end

    # TLS inspection execution state fqdn details for the tier1
    # TLS inspection execution state fqdn details for the tier1 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :failed_domains TLS inspection failed domain filter
    # @option opts [String] :fqdn Fully Qualified Domain Name
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TlsStateObjectListResult, Fixnum, Hash)>] TlsStateObjectListResult data, response status code and response headers
    def list_tls_state_fqdns_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_tls_state_fqdns ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.list_tls_state_fqdns"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_tls_state_fqdns, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_tls_state_fqdns, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/tls-inspection-state/fqdns'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'failed_domains'] = opts[:'failed_domains'] if !opts[:'failed_domains'].nil?
      query_params[:'fqdn'] = opts[:'fqdn'] if !opts[:'fqdn'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsStateObjectListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_tls_state_fqdns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List user's all direct and grand parent groups
    # Returns all the direct and grand parent groups of a user.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param user_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @return [IdentityFirewallStoreUserOrGrouptListResults]
    def list_user_parent_groups(identity_firewall_store_id, user_id, opts = {})
      data, _status_code, _headers = list_user_parent_groups_with_http_info(identity_firewall_store_id, user_id, opts)
      data
    end

    # List user&#39;s all direct and grand parent groups
    # Returns all the direct and grand parent groups of a user.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param user_id Directory group identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentityFirewallStoreUserOrGrouptListResults, Fixnum, Hash)>] IdentityFirewallStoreUserOrGrouptListResults data, response status code and response headers
    def list_user_parent_groups_with_http_info(identity_firewall_store_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_user_parent_groups ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SecurityApi.list_user_parent_groups"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SecurityApi.list_user_parent_groups"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/users/{user-id}/parent-groups'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'user-id' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreUserOrGrouptListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_user_parent_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List users by user name
    # Return all the users based on the user name.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param filter_value Name search filter value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdentityFirewallStoreUserOrGrouptListResults]
    def list_users_by_user_name(identity_firewall_store_id, filter_value, opts = {})
      data, _status_code, _headers = list_users_by_user_name_with_http_info(identity_firewall_store_id, filter_value, opts)
      data
    end

    # List users by user name
    # Return all the users based on the user name.
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param filter_value Name search filter value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdentityFirewallStoreUserOrGrouptListResults, Fixnum, Hash)>] IdentityFirewallStoreUserOrGrouptListResults data, response status code and response headers
    def list_users_by_user_name_with_http_info(identity_firewall_store_id, filter_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_users_by_user_name ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SecurityApi.list_users_by_user_name"
      end
      # verify the required parameter 'filter_value' is set
      if @api_client.config.client_side_validation && filter_value.nil?
        fail ArgumentError, "Missing the required parameter 'filter_value' when calling SecurityApi.list_users_by_user_name"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_users_by_user_name, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_users_by_user_name, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/users'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter_value'] = filter_value
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreUserOrGrouptListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_users_by_user_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all virtual endpoints
    # List all virtual endpoints
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VirtualEndpointListResult]
    def list_virtual_endpoints_for_tier0(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = list_virtual_endpoints_for_tier0_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # List all virtual endpoints
    # List all virtual endpoints
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VirtualEndpointListResult, Fixnum, Hash)>] VirtualEndpointListResult data, response status code and response headers
    def list_virtual_endpoints_for_tier0_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_virtual_endpoints_for_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.list_virtual_endpoints_for_tier0"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.list_virtual_endpoints_for_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_virtual_endpoints_for_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_virtual_endpoints_for_tier0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/endpoints/virtual-endpoints'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualEndpointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_virtual_endpoints_for_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDFW status of VMs by transport node id
    # This API will list all VMs and statuses based on transport node ID of idfw enabled compute collection. 
    # @param transport_node_id Transport node id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdfwVirtualMachineStatusListResult]
    def list_virtual_machine_idfw_status_by_transport_node(transport_node_id, opts = {})
      data, _status_code, _headers = list_virtual_machine_idfw_status_by_transport_node_with_http_info(transport_node_id, opts)
      data
    end

    # List IDFW status of VMs by transport node id
    # This API will list all VMs and statuses based on transport node ID of idfw enabled compute collection. 
    # @param transport_node_id Transport node id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdfwVirtualMachineStatusListResult, Fixnum, Hash)>] IdfwVirtualMachineStatusListResult data, response status code and response headers
    def list_virtual_machine_idfw_status_by_transport_node_with_http_info(transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_virtual_machine_idfw_status_by_transport_node ...'
      end
      # verify the required parameter 'transport_node_id' is set
      if @api_client.config.client_side_validation && transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_id' when calling SecurityApi.list_virtual_machine_idfw_status_by_transport_node"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/transport-nodes/{transport-node-id}/vms/status'.sub('{' + 'transport-node-id' + '}', transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdfwVirtualMachineStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_virtual_machine_idfw_status_by_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of VPC gateway policies
    # Paginated list of VPC gateway policies. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GatewayPolicyListResult]
    def list_vpc_gateway_policies(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_gateway_policies_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List of VPC gateway policies
    # Paginated list of VPC gateway policies. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def list_vpc_gateway_policies_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_vpc_gateway_policies ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.list_vpc_gateway_policies"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.list_vpc_gateway_policies"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.list_vpc_gateway_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_vpc_gateway_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_vpc_gateway_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_vpc_gateway_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List N-S Firewall Rules
    # List N-S Firewall Rules GET /orgs/org1/projects/project1/vpcs/vpc-1/gateway-policies/default/rules 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def list_vpc_gateway_rules(org_id, project_id, vpc_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = list_vpc_gateway_rules_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, opts)
      data
    end

    # List N-S Firewall Rules
    # List N-S Firewall Rules GET /orgs/org1/projects/project1/vpcs/vpc-1/gateway-policies/default/rules 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def list_vpc_gateway_rules_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_vpc_gateway_rules ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.list_vpc_gateway_rules"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.list_vpc_gateway_rules"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.list_vpc_gateway_rules"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.list_vpc_gateway_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_vpc_gateway_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_vpc_gateway_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}/rules'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_vpc_gateway_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List VPC Groups
    # Paginated list of VPC Groups. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :member_types Comma Separated Member types
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GroupListResult]
    def list_vpc_groups(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_groups_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List VPC Groups
    # Paginated list of VPC Groups. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :member_types Comma Separated Member types
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GroupListResult, Fixnum, Hash)>] GroupListResult data, response status code and response headers
    def list_vpc_groups_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_vpc_groups ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.list_vpc_groups"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.list_vpc_groups"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.list_vpc_groups"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_vpc_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_vpc_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'member_types'] = opts[:'member_types'] if !opts[:'member_types'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_vpc_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List E-W Firewall Rules
    # List Rules GET /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def list_vpc_policy_rules(org_id, project_id, vpc_id, security_policy_id, opts = {})
      data, _status_code, _headers = list_vpc_policy_rules_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts)
      data
    end

    # List E-W Firewall Rules
    # List Rules GET /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def list_vpc_policy_rules_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_vpc_policy_rules ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.list_vpc_policy_rules"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.list_vpc_policy_rules"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.list_vpc_policy_rules"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.list_vpc_policy_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_vpc_policy_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_vpc_policy_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_vpc_policy_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of VPC security policies
    # Paginated list of VPC security policies. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityPolicyListResult]
    def list_vpc_security_policies(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_security_policies_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List of VPC security policies
    # Paginated list of VPC security policies. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityPolicyListResult, Fixnum, Hash)>] SecurityPolicyListResult data, response status code and response headers
    def list_vpc_security_policies_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_vpc_security_policies ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.list_vpc_security_policies"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.list_vpc_security_policies"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.list_vpc_security_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_vpc_security_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_vpc_security_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_vpc_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of VpcSecurityProfiles
    # Paginated list of VpcSecurityProfiles. Note: Currently this API will return only a single default security profile at the project level. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VpcSecurityProfileListResult]
    def list_vpc_security_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = list_vpc_security_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # List of VpcSecurityProfiles
    # Paginated list of VpcSecurityProfiles. Note: Currently this API will return only a single default security profile at the project level. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VpcSecurityProfileListResult, Fixnum, Hash)>] VpcSecurityProfileListResult data, response status code and response headers
    def list_vpc_security_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.list_vpc_security_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.list_vpc_security_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.list_vpc_security_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_vpc_security_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.list_vpc_security_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-security-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSecurityProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#list_vpc_security_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Change the state of IDS Signature Version
    # Make this IDS Signature version as ACTIVE version and other versions as NOTACTIVE. 
    # @param ids_signature_version 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def make_version_as_active(ids_signature_version, opts = {})
      make_version_as_active_with_http_info(ids_signature_version, opts)
      nil
    end

    # Change the state of IDS Signature Version
    # Make this IDS Signature version as ACTIVE version and other versions as NOTACTIVE. 
    # @param ids_signature_version 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def make_version_as_active_with_http_info(ids_signature_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.make_version_as_active ...'
      end
      # verify the required parameter 'ids_signature_version' is set
      if @api_client.config.client_side_validation && ids_signature_version.nil?
        fail ArgumentError, "Missing the required parameter 'ids_signature_version' when calling SecurityApi.make_version_as_active"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signature-versions?action=make_active_version'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_signature_version)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#make_version_as_active\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a running export task
    # This operation cancels an export task. Task needs to be in running state. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def orgs_org_id_projects_project_id_infra_cancel_export_task(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_cancel_export_task_with_http_info(org_id, project_id, opts)
      data
    end

    # Cancel a running export task
    # This operation cancels an export task. Task needs to be in running state. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_cancel_export_task_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_cancel_export_task ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_cancel_export_task"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_cancel_export_task"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/export?action=cancel'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_cancel_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a running import task
    # This operation cancels an import task. Task needs to be in running state. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [ImportTask]
    def orgs_org_id_projects_project_id_infra_cancel_import_task(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_cancel_import_task_with_http_info(org_id, project_id, opts)
      data
    end

    # Cancel a running import task
    # This operation cancels an import task. Task needs to be in running state. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportTask, Fixnum, Hash)>] ImportTask data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_cancel_import_task_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_cancel_import_task ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_cancel_import_task"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_cancel_import_task"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/import?action=cancel'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_cancel_import_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain_with_http_info(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts)
      data
    end

    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain_with_http_info(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/gateway-policies/&lt;gateway-policy-id&gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts)
      data
    end

    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/gateway-policies/&amp;lt;gateway-policy-id&amp;gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will create or update IDS profile
    # This routine will create or update IDS profile. User can provide Profile Severity, Criteria and can also Override the Signature in the request
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [IdsProfile]
    def orgs_org_id_projects_project_id_infra_create_or_update_ids_profile(org_id, project_id, profile_id, ids_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_ids_profile_with_http_info(org_id, project_id, profile_id, ids_profile, opts)
      data
    end

    # This routine will create or update IDS profile
    # This routine will create or update IDS profile. User can provide Profile Severity, Criteria and can also Override the Signature in the request
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsProfile, Fixnum, Hash)>] IdsProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_ids_profile_with_http_info(org_id, project_id, profile_id, ids_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_profile"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_profile"
      end
      # verify the required parameter 'ids_profile' is set
      if @api_client.config.client_side_validation && ids_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ids_profile' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_create_or_update_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update IDS rule
    # Update intrusion detection system rule.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def orgs_org_id_projects_project_id_infra_create_or_update_ids_rule(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # create or update IDS rule
    # Update intrusion detection system rule.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_create_or_update_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update IDS security policy
    # Update intrusion detection system security policy for a domain.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [IdsSecurityPolicy]
    def orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy(org_id, project_id, domain_id, policy_id, ids_security_policy, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, ids_security_policy, opts)
      data
    end

    # create or update IDS security policy
    # Update intrusion detection system security policy for a domain.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_create_or_update_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create or update security configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [SecurityFeatures]
    def orgs_org_id_projects_project_id_infra_create_or_update_security_feature(org_id, project_id, tier_1_id, security_features, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_security_feature_with_http_info(org_id, project_id, tier_1_id, security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create or update security configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_security_feature_with_http_info(org_id, project_id, tier_1_id, security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_security_feature ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_security_feature"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_security_feature"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_security_feature"
      end
      # verify the required parameter 'security_features' is set
      if @api_client.config.client_side_validation && security_features.nil?
        fail ArgumentError, "Missing the required parameter 'security_features' when calling SecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_security_feature"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_create_or_update_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DNS security profile
    # Delete DNS security profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_dns_security_profile(org_id, project_id, profile_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_dns_security_profile_with_http_info(org_id, project_id, profile_id, opts)
      nil
    end

    # Delete DNS security profile
    # Delete DNS security profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_dns_security_profile_with_http_info(org_id, project_id, profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_delete_dns_security_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_dns_security_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_dns_security_profile"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_dns_security_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dns-security-profiles/{profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_delete_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DNS security profile binding map
    # API will delete DNS security profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_dns_security_profile_binding(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_dns_security_profile_binding_with_http_info(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, opts)
      nil
    end

    # Delete DNS security profile binding map
    # API will delete DNS security profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_dns_security_profile_binding_with_http_info(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_delete_dns_security_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_dns_security_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_dns_security_profile_binding"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_dns_security_profile_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_dns_security_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps/{dns-security-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'dns-security-profile-binding-map-id' + '}', dns_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_delete_dns_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a manual draft
    # Delete a manual draft.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_draft(org_id, project_id, draft_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_draft_with_http_info(org_id, project_id, draft_id, opts)
      nil
    end

    # Delete a manual draft
    # Delete a manual draft.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_draft_with_http_info(org_id, project_id, draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_delete_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_delete_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile
    # API will delete Flood Protection Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_flood_protection_profile(org_id, project_id, flood_protection_profile_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_flood_protection_profile_with_http_info(org_id, project_id, flood_protection_profile_id, opts)
      nil
    end

    # Delete Flood Protection Profile
    # API will delete Flood Protection Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_flood_protection_profile_with_http_info(org_id, project_id, flood_protection_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_delete_flood_protection_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_flood_protection_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_flood_protection_profile"
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_flood_protection_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_delete_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete GatewayPolicy
    # Delete GatewayPolicy
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_gateway_policy(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_gateway_policy_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts)
      nil
    end

    # Delete GatewayPolicy
    # Delete GatewayPolicy
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_gateway_policy_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_delete_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete rule
    # Delete rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_gateway_rule(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts)
      nil
    end

    # Delete rule
    # Delete rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_delete_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the IDS Pcap File
    # Delete IDS Pcap file entry from corfu and from file system. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param id ID of IdsPcapFileMetadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ids_pcap_file(org_id, project_id, id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ids_pcap_file_with_http_info(org_id, project_id, id, opts)
      nil
    end

    # Delete the IDS Pcap File
    # Delete IDS Pcap file entry from corfu and from file system. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param id ID of IdsPcapFileMetadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ids_pcap_file_with_http_info(org_id, project_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_delete_ids_pcap_file ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_ids_pcap_file"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_ids_pcap_file"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_ids_pcap_file"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/pcaps/{id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_delete_ids_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will Delete existing IDS profile
    # This routine will delete IDS profile for provided profile id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ids_profile(org_id, project_id, profile_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ids_profile_with_http_info(org_id, project_id, profile_id, opts)
      nil
    end

    # This routine will Delete existing IDS profile
    # This routine will delete IDS profile for provided profile id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ids_profile_with_http_info(org_id, project_id, profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_delete_ids_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_ids_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_ids_profile"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_ids_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_delete_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS rule
    # Delete intrusion detection rule. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ids_rule(org_id, project_id, domain_id, policy_id, rule_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, opts)
      nil
    end

    # Delete IDS rule
    # Delete intrusion detection rule. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_delete_ids_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_ids_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_ids_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_ids_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_delete_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IDS security policy
    # Delete intrusion detection system security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_ids_security_policy(org_id, project_id, domain_id, policy_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, opts)
      nil
    end

    # Delete IDS security policy
    # Delete intrusion detection system security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_delete_ids_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_ids_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_ids_security_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_ids_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_delete_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Firewall Flood Protection Profile Binding
    # API will delete Firewall Flood Protection Profile Binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_policy_firewall_flood_protection_binding(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_policy_firewall_flood_protection_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts)
      nil
    end

    # Delete Firewall Flood Protection Profile Binding
    # API will delete Firewall Flood Protection Profile Binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_policy_firewall_flood_protection_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_flood_protection_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_flood_protection_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_delete_policy_firewall_flood_protection_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Policy Firewall Scheduler
    # Deletes the specified PolicyFirewallScheduler. If scheduler is consumed in a security policy, it won't get deleted. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler(org_id, project_id, firewall_scheduler_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, opts)
      nil
    end

    # Delete Policy Firewall Scheduler
    # Deletes the specified PolicyFirewallScheduler. If scheduler is consumed in a security policy, it won&#39;t get deleted. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler"
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_delete_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Firewall Session Timer Profile Binding
    # API will delete Firewall Session Timer Profile Binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_binding(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts)
      nil
    end

    # Delete Firewall Session Timer Profile Binding
    # API will delete Firewall Session Timer Profile Binding
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'firewall_session_timer_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_binding_map_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps/{firewall-session-timer-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-session-timer-profile-binding-map-id' + '}', firewall_session_timer_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Firewall Session Timer Profile
    # API will delete Firewall Session Timer Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_profile(org_id, project_id, firewall_session_timer_profile_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_profile_with_http_info(org_id, project_id, firewall_session_timer_profile_id, opts)
      nil
    end

    # Delete Firewall Session Timer Profile
    # API will delete Firewall Session Timer Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_profile_with_http_info(org_id, project_id, firewall_session_timer_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_delete_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a security policy from this domain
    # Deletes the security policy along with all the rules 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain(org_id, project_id, domain_id, security_policy_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, opts)
      nil
    end

    # Deletes a security policy from this domain
    # Deletes the security policy along with all the rules 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_delete_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete rule
    # Delete rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_security_rule(org_id, project_id, domain_id, security_policy_id, rule_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, opts)
      nil
    end

    # Delete rule
    # Delete rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_delete_security_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_security_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_security_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_security_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_delete_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile Binding for Tier-1 Logical Router
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_flood_protection_profile_binding(org_id, project_id, tier1_id, flood_protection_profile_binding_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, flood_protection_profile_binding_id, opts)
      nil
    end

    # Delete Flood Protection Profile Binding for Tier-1 Logical Router
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_delete_tier1_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_flood_protection_profile_binding(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, opts)
      nil
    end

    # Delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Flood Protection Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, opts)
      nil
    end

    # Delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_delete_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Session Timer Profile Binding for Tier-1 Logical Router
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding(org_id, project_id, tier1_id, session_timer_profile_binding_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, opts)
      nil
    end

    # Delete Session Timer Profile Binding for Tier-1 Logical Router
    # API will delete Session Timer Profile Binding for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_delete_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download exported file
    # Download the exported file generated from the last export task. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_download_exported_file(org_id, project_id, opts = {})
      orgs_org_id_projects_project_id_infra_download_exported_file_with_http_info(org_id, project_id, opts)
      nil
    end

    # Download exported file
    # Download the exported file generated from the last export task. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_download_exported_file_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_download_exported_file ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_download_exported_file"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_download_exported_file"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/export?action=download'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_download_exported_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download exported pcap file
    # Download the exported pcap file generated from the export IdsPcapFile api. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param file_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_download_exported_pcap_file(org_id, project_id, file_name, opts = {})
      orgs_org_id_projects_project_id_infra_download_exported_pcap_file_with_http_info(org_id, project_id, file_name, opts)
      nil
    end

    # Download exported pcap file
    # Download the exported pcap file generated from the export IdsPcapFile api. The request should have proper headers set to download the file. Please add the below two headers, if it is not already present Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param file_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_download_exported_pcap_file_with_http_info(org_id, project_id, file_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_download_exported_pcap_file ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_download_exported_pcap_file"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_download_exported_pcap_file"
      end
      # verify the required parameter 'file_name' is set
      if @api_client.config.client_side_validation && file_name.nil?
        fail ArgumentError, "Missing the required parameter 'file_name' when calling SecurityApi.orgs_org_id_projects_project_id_infra_download_exported_pcap_file"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/pcaps/{file-name}/download'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'file-name' + '}', file_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_download_exported_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export Custom signatures into a file.
    # API can be used for user to export the existing custom signatures. Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param include Custom signatures to be exported
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_export_ids_custom_signatures(org_id, project_id, version_id, include, opts = {})
      orgs_org_id_projects_project_id_infra_export_ids_custom_signatures_with_http_info(org_id, project_id, version_id, include, opts)
      nil
    end

    # Export Custom signatures into a file.
    # API can be used for user to export the existing custom signatures. Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param include Custom signatures to be exported
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_export_ids_custom_signatures_with_http_info(org_id, project_id, version_id, include, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_export_ids_custom_signatures ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_export_ids_custom_signatures"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_export_ids_custom_signatures"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_export_ids_custom_signatures"
      end
      # verify the required parameter 'include' is set
      if @api_client.config.client_side_validation && include.nil?
        fail ArgumentError, "Missing the required parameter 'include' when calling SecurityApi.orgs_org_id_projects_project_id_infra_export_ids_custom_signatures"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['VALID', 'INVALID', 'ALL'].include?(include)
        fail ArgumentError, "invalid value for 'include', must be one of VALID, INVALID, ALL"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures/export'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = include

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_export_ids_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Request the IDS Pcap File Download
    # Trigger the process to collect all pcap files of all the pcap_ids mentioned in request payload. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ids_pcap_export 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_export_ids_pcap_file(org_id, project_id, ids_pcap_export, opts = {})
      orgs_org_id_projects_project_id_infra_export_ids_pcap_file_with_http_info(org_id, project_id, ids_pcap_export, opts)
      nil
    end

    # Request the IDS Pcap File Download
    # Trigger the process to collect all pcap files of all the pcap_ids mentioned in request payload. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ids_pcap_export 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_export_ids_pcap_file_with_http_info(org_id, project_id, ids_pcap_export, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_export_ids_pcap_file ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_export_ids_pcap_file"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_export_ids_pcap_file"
      end
      # verify the required parameter 'ids_pcap_export' is set
      if @api_client.config.client_side_validation && ids_pcap_export.nil?
        fail ArgumentError, "Missing the required parameter 'ids_pcap_export' when calling SecurityApi.orgs_org_id_projects_project_id_infra_export_ids_pcap_file"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/pcaps/export'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_pcap_export)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_export_ids_pcap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft(org_id, project_id, draft_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft_with_http_info(org_id, project_id, draft_id, opts)
      data
    end

    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarchical payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft_with_http_info(org_id, project_id, draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}/aggregated'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_aggregated_configuration_to_be_published_for_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get dfw firewall configuration
    # Get the current dfw firewall configurations.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [DfwFirewallConfiguration]
    def orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration_with_http_info(org_id, project_id, opts)
      data
    end

    # Get dfw firewall configuration
    # Get the current dfw firewall configurations.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfwFirewallConfiguration, Fixnum, Hash)>] DfwFirewallConfiguration data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DfwFirewallConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param [Hash] opts the optional parameters
    # @return [DnsSecurityProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_get_dns_security_profile_binding(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_dns_security_profile_binding_with_http_info(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, opts)
      data
    end

    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DnsSecurityProfileBindingMap, Fixnum, Hash)>] DnsSecurityProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_dns_security_profile_binding_with_http_info(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_dns_security_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_dns_security_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_dns_security_profile_binding"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_dns_security_profile_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_dns_security_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps/{dns-security-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'dns-security-profile-binding-map-id' + '}', dns_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_dns_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of export task
    # Get the information of the latest export task. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def orgs_org_id_projects_project_id_infra_get_export_task(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_export_task_with_http_info(org_id, project_id, opts)
      data
    end

    # Get the information of export task
    # Get the information of the latest export task. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_export_task_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_export_task ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_export_task"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_export_task"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/export'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get policies filtered based on the given criteria
    # Get the list of policies filtered based on the given criteria. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param scope Scope filter criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @option opts [String] :parent_path Path of the parent object of the entities
    # @return [PolicyResourceReferenceForEPListResult]
    def orgs_org_id_projects_project_id_infra_get_filtered_policies(org_id, project_id, scope, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_filtered_policies_with_http_info(org_id, project_id, scope, opts)
      data
    end

    # Get policies filtered based on the given criteria
    # Get the list of policies filtered based on the given criteria. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param scope Scope filter criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @option opts [String] :parent_path Path of the parent object of the entities
    # @return [Array<(PolicyResourceReferenceForEPListResult, Fixnum, Hash)>] PolicyResourceReferenceForEPListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_filtered_policies_with_http_info(org_id, project_id, scope, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_filtered_policies ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_filtered_policies"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_filtered_policies"
      end
      # verify the required parameter 'scope' is set
      if @api_client.config.client_side_validation && scope.nil?
        fail ArgumentError, "Missing the required parameter 'scope' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_filtered_policies"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall/policies'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'scope'] = scope
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'parent_path'] = opts[:'parent_path'] if !opts[:'parent_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReferenceForEPListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_filtered_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get rules filtered based on the given criteria
    # Get the list of rules of given parent path of policy/section, filtered based on the given criteria. Parent path is mandatory. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param scope Scope filter criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @option opts [String] :parent_path Path of the parent object of the entities
    # @return [PolicyResourceReferenceForEPListResult]
    def orgs_org_id_projects_project_id_infra_get_filtered_rules(org_id, project_id, scope, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_filtered_rules_with_http_info(org_id, project_id, scope, opts)
      data
    end

    # Get rules filtered based on the given criteria
    # Get the list of rules of given parent path of policy/section, filtered based on the given criteria. Parent path is mandatory. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param scope Scope filter criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Path of the enforcement point
    # @option opts [String] :parent_path Path of the parent object of the entities
    # @return [Array<(PolicyResourceReferenceForEPListResult, Fixnum, Hash)>] PolicyResourceReferenceForEPListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_filtered_rules_with_http_info(org_id, project_id, scope, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_filtered_rules ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_filtered_rules"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_filtered_rules"
      end
      # verify the required parameter 'scope' is set
      if @api_client.config.client_side_validation && scope.nil?
        fail ArgumentError, "Missing the required parameter 'scope' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_filtered_rules"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall/rules'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'scope'] = scope
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'parent_path'] = opts[:'parent_path'] if !opts[:'parent_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReferenceForEPListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_filtered_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile
    # API will get Flood Protection Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfile]
    def orgs_org_id_projects_project_id_infra_get_flood_protection_profile(org_id, project_id, flood_protection_profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_flood_protection_profile_with_http_info(org_id, project_id, flood_protection_profile_id, opts)
      data
    end

    # Get Flood Protection Profile
    # API will get Flood Protection Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfile, Fixnum, Hash)>] FloodProtectionProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_flood_protection_profile_with_http_info(org_id, project_id, flood_protection_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_flood_protection_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_flood_protection_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_flood_protection_profile"
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_flood_protection_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get gateway policy statistics
    # Get statistics of a gateay policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [SecurityPolicyStatisticsListResult]
    def orgs_org_id_projects_project_id_infra_get_gateway_policy_statistics(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_gateway_policy_statistics_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts)
      data
    end

    # Get gateway policy statistics
    # Get statistics of a gateay policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(SecurityPolicyStatisticsListResult, Fixnum, Hash)>] SecurityPolicyStatisticsListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_gateway_policy_statistics_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_policy_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_policy_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_policy_statistics"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_policy_statistics"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_policy_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_gateway_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get gateway rule statistics
    # Get statistics of a gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [RuleStatisticsListResult]
    def orgs_org_id_projects_project_id_infra_get_gateway_rule_statistics(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_gateway_rule_statistics_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts)
      data
    end

    # Get gateway rule statistics
    # Get statistics of a gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(RuleStatisticsListResult, Fixnum, Hash)>] RuleStatisticsListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_gateway_rule_statistics_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_rule_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_rule_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_rule_statistics"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_rule_statistics"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_rule_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_gateway_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Geo IP Blocked Events
    # Get Geo IP Blocked Events. The system will return the latest 25k events stored. User can use optional request parameters like source_country_code or source_ip_address to filter the response. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for getting next page of records
    # @option opts [String] :destination_country_code Comma Separated Destination Country Codes of Geo IP Blocked Event
    # @option opts [String] :destination_ip_address Comma Separated Destination IP Addresses of Geo IP Blocked Event
    # @option opts [String] :direction Comma Separated Directions of Traffic
    # @option opts [BOOLEAN] :include_all_projects  (default to false)
    # @option opts [Integer] :page_size Maximum number of results to return in this page (default to 500)
    # @option opts [String] :rule_id Comma Separated Gateway Firewall Rule Ids of Geo IP Blocked Event
    # @option opts [String] :source_country_code Comma Separated Source Country Codes of Geo IP Blocked Event
    # @option opts [String] :source_ip_address Comma Separated Source IP Addresses of Geo IP Blocked Event
    # @return [GeoIpBlockedEventsList]
    def orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events_with_http_info(org_id, project_id, opts)
      data
    end

    # Get Geo IP Blocked Events
    # Get Geo IP Blocked Events. The system will return the latest 25k events stored. User can use optional request parameters like source_country_code or source_ip_address to filter the response. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for getting next page of records
    # @option opts [String] :destination_country_code Comma Separated Destination Country Codes of Geo IP Blocked Event
    # @option opts [String] :destination_ip_address Comma Separated Destination IP Addresses of Geo IP Blocked Event
    # @option opts [String] :direction Comma Separated Directions of Traffic
    # @option opts [BOOLEAN] :include_all_projects 
    # @option opts [Integer] :page_size Maximum number of results to return in this page
    # @option opts [String] :rule_id Comma Separated Gateway Firewall Rule Ids of Geo IP Blocked Event
    # @option opts [String] :source_country_code Comma Separated Source Country Codes of Geo IP Blocked Event
    # @option opts [String] :source_ip_address Comma Separated Source IP Addresses of Geo IP Blocked Event
    # @return [Array<(GeoIpBlockedEventsList, Fixnum, Hash)>] GeoIpBlockedEventsList data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/geo-ip/blocked-events'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'destination_country_code'] = opts[:'destination_country_code'] if !opts[:'destination_country_code'].nil?
      query_params[:'destination_ip_address'] = opts[:'destination_ip_address'] if !opts[:'destination_ip_address'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'include_all_projects'] = opts[:'include_all_projects'] if !opts[:'include_all_projects'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'rule_id'] = opts[:'rule_id'] if !opts[:'rule_id'].nil?
      query_params[:'source_country_code'] = opts[:'source_country_code'] if !opts[:'source_country_code'].nil?
      query_params[:'source_ip_address'] = opts[:'source_ip_address'] if !opts[:'source_ip_address'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpBlockedEventsList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Geo IP Look Up
    # Gets Country Code for the IP Address provided. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_address IPv4 or IPv6 address
    # @param [Hash] opts the optional parameters
    # @return [GeoIpLookUp]
    def orgs_org_id_projects_project_id_infra_get_geo_ip_look_up(org_id, project_id, ip_address, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_geo_ip_look_up_with_http_info(org_id, project_id, ip_address, opts)
      data
    end

    # Get Geo IP Look Up
    # Gets Country Code for the IP Address provided. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_address IPv4 or IPv6 address
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeoIpLookUp, Fixnum, Hash)>] GeoIpLookUp data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_geo_ip_look_up_with_http_info(org_id, project_id, ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_geo_ip_look_up ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_geo_ip_look_up"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_geo_ip_look_up"
      end
      # verify the required parameter 'ip_address' is set
      if @api_client.config.client_side_validation && ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_geo_ip_look_up"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/geo-ip/look-up'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ip_address'] = ip_address

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpLookUp')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_geo_ip_look_up\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature
    # Get IDS Custom Signature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param sig_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignature]
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signature(org_id, project_id, version_id, sig_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_custom_signature_with_http_info(org_id, project_id, version_id, sig_id, opts)
      data
    end

    # Get IDS Custom Signature
    # Get IDS Custom Signature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param sig_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignature, Fixnum, Hash)>] IdsCustomSignature data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signature_with_http_info(org_id, project_id, version_id, sig_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature"
      end
      # verify the required parameter 'sig_id' is set
      if @api_client.config.client_side_validation && sig_id.nil?
        fail ArgumentError, "Missing the required parameter 'sig_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures/{sig-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'version-id' + '}', version_id.to_s).sub('{' + 'sig-id' + '}', sig_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_ids_custom_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature Version
    # Get IDS Custom Signature Version. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignatureVersion]
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version(org_id, project_id, version_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version_with_http_info(org_id, project_id, version_id, opts)
      data
    end

    # Get IDS Custom Signature Version
    # Get IDS Custom Signature Version. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignatureVersion, Fixnum, Hash)>] IdsCustomSignatureVersion data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version_with_http_info(org_id, project_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureVersion')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature difference
    # Get published and unpublished custom signatures difference. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignaturesDiff]
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff(org_id, project_id, version_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff_with_http_info(org_id, project_id, version_id, opts)
      data
    end

    # Get IDS Custom Signature difference
    # Get published and unpublished custom signatures difference. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignaturesDiff, Fixnum, Hash)>] IdsCustomSignaturesDiff data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff_with_http_info(org_id, project_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures-diff'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignaturesDiff')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will get existing IDS Profile .
    # This routine will read intrusion detection profile for provided profile id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [IdsProfile]
    def orgs_org_id_projects_project_id_infra_get_ids_profile(org_id, project_id, profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_profile_with_http_info(org_id, project_id, profile_id, opts)
      data
    end

    # This routine will get existing IDS Profile .
    # This routine will read intrusion detection profile for provided profile id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsProfile, Fixnum, Hash)>] IdsProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_profile_with_http_info(org_id, project_id, profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_profile"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS rule.
    # Read intrusion detection rule 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def orgs_org_id_projects_project_id_infra_get_ids_rule(org_id, project_id, domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, opts)
      data
    end

    # Get IDS rule.
    # Read intrusion detection rule 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS-IPS rule statistics
    # Get statistics of a IDS-IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsRuleStatisticsListResult]
    def orgs_org_id_projects_project_id_infra_get_ids_rule_statistics(org_id, project_id, domain_id, ids_policy_id, rule_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_rule_statistics_with_http_info(org_id, project_id, domain_id, ids_policy_id, rule_id, opts)
      data
    end

    # Get IDS-IPS rule statistics
    # Get statistics of a IDS-IPS rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain id
    # @param ids_policy_id IDS policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsRuleStatisticsListResult, Fixnum, Hash)>] IdsRuleStatisticsListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_rule_statistics_with_http_info(org_id, project_id, domain_id, ids_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_rule_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_rule_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_rule_statistics"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_rule_statistics"
      end
      # verify the required parameter 'ids_policy_id' is set
      if @api_client.config.client_side_validation && ids_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ids_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_rule_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{ids-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'ids-policy-id' + '}', ids_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_ids_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [IdsSecurityPolicy]
    def orgs_org_id_projects_project_id_infra_get_ids_security_policy(org_id, project_id, domain_id, policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, opts)
      data
    end

    # Get IDS security policy.
    # Read intrusion detection system security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS security policy statistics
    # Get statistics of a IDS security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain id
    # @param ids_policy_id IDS Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsSecurityPolicyStatisticsListResult]
    def orgs_org_id_projects_project_id_infra_get_ids_security_policy_statistics(org_id, project_id, domain_id, ids_policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_security_policy_statistics_with_http_info(org_id, project_id, domain_id, ids_policy_id, opts)
      data
    end

    # Get IDS security policy statistics
    # Get statistics of a IDS security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain id
    # @param ids_policy_id IDS Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsSecurityPolicyStatisticsListResult, Fixnum, Hash)>] IdsSecurityPolicyStatisticsListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_security_policy_statistics_with_http_info(org_id, project_id, domain_id, ids_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy_statistics"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy_statistics"
      end
      # verify the required parameter 'ids_policy_id' is set
      if @api_client.config.client_side_validation && ids_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ids_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_ids_security_policy_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{ids-policy-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'ids-policy-id' + '}', ids_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_ids_security_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of import task
    # Get the information of the latest import task. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [ImportTask]
    def orgs_org_id_projects_project_id_infra_get_import_task(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_import_task_with_http_info(org_id, project_id, opts)
      data
    end

    # Get the information of import task
    # Get the information of the latest import task. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportTask, Fixnum, Hash)>] ImportTask data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_import_task_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_import_task ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_import_task"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_import_task"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/import'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_import_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of gateways where an intrusion event was detected
    # Get the list of gateways where an intrusion event matching a signature was detected. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsIpList]
    def orgs_org_id_projects_project_id_infra_get_policy_affected_ips(org_id, project_id, policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_affected_ips_with_http_info(org_id, project_id, policy_ids_event_data_request, opts)
      data
    end

    # Get the list of gateways where an intrusion event was detected
    # Get the list of gateways where an intrusion event matching a signature was detected. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsIpList, Fixnum, Hash)>] PolicyIdsIpList data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_affected_ips_with_http_info(org_id, project_id, policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_affected_ips ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_affected_ips"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_affected_ips"
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_affected_ips"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_affected_ips, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_affected_ips, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/affected-ips'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsIpList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_policy_affected_ips\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of the users affected for that signature
    # Get the list of the users affected pertaining to a specific signature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsUserList]
    def orgs_org_id_projects_project_id_infra_get_policy_affected_users(org_id, project_id, policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_affected_users_with_http_info(org_id, project_id, policy_ids_event_data_request, opts)
      data
    end

    # Get the list of the users affected for that signature
    # Get the list of the users affected pertaining to a specific signature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsUserList, Fixnum, Hash)>] PolicyIdsUserList data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_affected_users_with_http_info(org_id, project_id, policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_affected_users ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_affected_users"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_affected_users"
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_affected_users"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_affected_users, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_affected_users, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/affected-users'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsUserList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_policy_affected_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of the VMs affected for that signature
    # Get the list of the VMs affected pertaining to a specific signature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsVmList]
    def orgs_org_id_projects_project_id_infra_get_policy_affected_vms(org_id, project_id, policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_affected_vms_with_http_info(org_id, project_id, policy_ids_event_data_request, opts)
      data
    end

    # Get the list of the VMs affected for that signature
    # Get the list of the VMs affected pertaining to a specific signature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsVmList, Fixnum, Hash)>] PolicyIdsVmList data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_affected_vms_with_http_info(org_id, project_id, policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_affected_vms ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_affected_vms"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_affected_vms"
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_affected_vms"
      end
      if @api_client.config.client_side_validation && opts[:'context'] && !['ALL_PROJECTS'].include?(opts[:'context'])
        fail ArgumentError, 'invalid value for "context", must be one of ALL_PROJECTS'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_affected_vms, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_affected_vms, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/affected-vms'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsVmList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_policy_affected_vms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of the IDS events that are detected, grouped by signature id.
    # Get the list of the IDS events that are detected with the total number of intrusions detected, their severity and the time they occurred, grouped by signature id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyIdsEventsBySignatureResult]
    def orgs_org_id_projects_project_id_infra_get_policy_all_ids_events(org_id, project_id, policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_all_ids_events_with_http_info(org_id, project_id, policy_ids_event_data_request, opts)
      data
    end

    # Get the list of the IDS events that are detected, grouped by signature id.
    # Get the list of the IDS events that are detected with the total number of intrusions detected, their severity and the time they occurred, grouped by signature id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyIdsEventsBySignatureResult, Fixnum, Hash)>] PolicyIdsEventsBySignatureResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_all_ids_events_with_http_info(org_id, project_id, policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_all_ids_events ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_all_ids_events"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_all_ids_events"
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_all_ids_events"
      end
      if @api_client.config.client_side_validation && opts[:'context'] && !['ALL_PROJECTS'].include?(opts[:'context'])
        fail ArgumentError, 'invalid value for "context", must be one of ALL_PROJECTS'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/ids-events'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsEventsBySignatureResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_policy_all_ids_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [PolicyDraftPaginatedAggregatedConfigurationResult]
    def orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result(org_id, project_id, draft_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result_with_http_info(org_id, project_id, draft_id, opts)
      data
    end

    # Get paginated aggregated configuration for the draft
    # Get a paginated aggregated configuration of a given draft. This aggregated configuration is the differnece between the current published firewall configuration and a firewall configuration stored in a given draft. For an initial API call, if request_id is present in a response, then this is a paginated aggregated configuration of a given draft, containing all the security policies from the aggregated configuration. Using this request_id, more granular aggregated configuration, at security policy level, can be fetched from subsequent API calls. Absence of request_id suggests that whole aggregated configuration has been returned as a response to initial API call, as the size of aggregated configuration is not big enough to need pagination. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :request_id Request identifier to track subsequent API calls
    # @option opts [String] :root_path Path of the root object of subtree
    # @return [Array<(PolicyDraftPaginatedAggregatedConfigurationResult, Fixnum, Hash)>] PolicyDraftPaginatedAggregatedConfigurationResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result_with_http_info(org_id, project_id, draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}/aggregated_with_pagination'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?
      query_params[:'root_path'] = opts[:'root_path'] if !opts[:'root_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftPaginatedAggregatedConfigurationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_policy_draft_paginated_aggregated_configuration_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall Flood Protection Profile Binding Map
    # API will get Firewall Flood Protection Profile Binding Map 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallFloodProtectionProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_get_policy_firewall_flood_protection_binding(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_firewall_flood_protection_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts)
      data
    end

    # Get Firewall Flood Protection Profile Binding Map
    # API will get Firewall Flood Protection Profile Binding Map 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMap, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_firewall_flood_protection_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_flood_protection_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_flood_protection_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_policy_firewall_flood_protection_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallScheduler]
    def orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler(org_id, project_id, firewall_scheduler_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, opts)
      data
    end

    # Get PolicyFirewallScheduler
    # Get a PolicyFirewallScheduler by id 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallScheduler, Fixnum, Hash)>] PolicyFirewallScheduler data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler"
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallScheduler')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall Session Timer Profile Binding Map
    # API will get Firewall Session Timer Profile Binding Map 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallSessionTimerProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_binding(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts)
      data
    end

    # Get Firewall Session Timer Profile Binding Map
    # API will get Firewall Session Timer Profile Binding Map 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain-ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMap, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'firewall_session_timer_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_binding_map_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps/{firewall-session-timer-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-session-timer-profile-binding-map-id' + '}', firewall_session_timer_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Firewall Session Timer Profile
    # API will get Firewall Session Timer Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallSessionTimerProfile]
    def orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_profile(org_id, project_id, firewall_session_timer_profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_profile_with_http_info(org_id, project_id, firewall_session_timer_profile_id, opts)
      data
    end

    # Get Firewall Session Timer Profile
    # API will get Firewall Session Timer Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallSessionTimerProfile, Fixnum, Hash)>] PolicyFirewallSessionTimerProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_profile_with_http_info(org_id, project_id, firewall_session_timer_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the summary of the intrusions that were detected.
    # Get the summary of all the intrusions that are detected grouped by signature with details including signature name, id, severity, attack type, protocol, first and recent occurence, and affected users and VMs. The following filter criteria are supported: attack target, attack type, gateway name, IP address, product affected, signature ID and VM name. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsSummaryListResult]
    def orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary(org_id, project_id, policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary_with_http_info(org_id, project_id, policy_ids_event_data_request, opts)
      data
    end

    # Get the summary of the intrusions that were detected.
    # Get the summary of all the intrusions that are detected grouped by signature with details including signature name, id, severity, attack type, protocol, first and recent occurence, and affected users and VMs. The following filter criteria are supported: attack target, attack type, gateway name, IP address, product affected, signature ID and VM name. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsSummaryListResult, Fixnum, Hash)>] PolicyIdsSummaryListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary_with_http_info(org_id, project_id, policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary"
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary"
      end
      if @api_client.config.client_side_validation && opts[:'context'] && !['ALL_PROJECTS'].include?(opts[:'context'])
        fail ArgumentError, 'invalid value for "context", must be one of ALL_PROJECTS'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/ids-summary'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsSummaryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft(org_id, project_id, draft_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft_with_http_info(org_id, project_id, draft_id, opts)
      data
    end

    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarchical payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft_with_http_info(org_id, project_id, draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}/complete'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_preview_of_configuration_after_publish_of_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get rule statistics
    # Get statistics of a rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [RuleStatisticsListResult]
    def orgs_org_id_projects_project_id_infra_get_rule_statistics(org_id, project_id, domain_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_rule_statistics_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, opts)
      data
    end

    # Get rule statistics
    # Get statistics of a rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(RuleStatisticsListResult, Fixnum, Hash)>] RuleStatisticsListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_rule_statistics_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_rule_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_rule_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_rule_statistics"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_rule_statistics"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_rule_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get security policy statistics
    # Get statistics of a security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [SecurityPolicyStatisticsListResult]
    def orgs_org_id_projects_project_id_infra_get_security_policy_statistics(org_id, project_id, domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_security_policy_statistics_with_http_info(org_id, project_id, domain_id, security_policy_id, opts)
      data
    end

    # Get security policy statistics
    # Get statistics of a security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain id
    # @param security_policy_id Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(SecurityPolicyStatisticsListResult, Fixnum, Hash)>] SecurityPolicyStatisticsListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_security_policy_statistics_with_http_info(org_id, project_id, domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_security_policy_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_security_policy_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_security_policy_statistics"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_security_policy_statistics"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_security_policy_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_security_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_get_tier1_flood_protection_profile_binding(org_id, project_id, tier1_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_tier1_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_get_tier1_locale_services_flood_protection_profile_binding(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_locale_services_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, opts)
      data
    end

    # Get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_locale_services_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_tier1_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding(org_id, project_id, tier1_id, session_timer_profile_binding_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, opts)
      data
    end

    # Get Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will get Session Timer Profile Binding Map for Tier-1 Logical Router. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_get_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Import K8s network policies to DFW Security Policies
    # This is used to import a set of K8s network policies into DFW security policies 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param network_policy_import_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :on_error Action to take when error occurs (default to ABORT)
    # @return [NetworkPolicyImportResponse]
    def orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw(org_id, project_id, network_policy_import_request, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw_with_http_info(org_id, project_id, network_policy_import_request, opts)
      data
    end

    # Import K8s network policies to DFW Security Policies
    # This is used to import a set of K8s network policies into DFW security policies 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param network_policy_import_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :on_error Action to take when error occurs
    # @return [Array<(NetworkPolicyImportResponse, Fixnum, Hash)>] NetworkPolicyImportResponse data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw_with_http_info(org_id, project_id, network_policy_import_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw"
      end
      # verify the required parameter 'network_policy_import_request' is set
      if @api_client.config.client_side_validation && network_policy_import_request.nil?
        fail ArgumentError, "Missing the required parameter 'network_policy_import_request' when calling SecurityApi.orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw"
      end
      if @api_client.config.client_side_validation && opts[:'on_error'] && !['ABORT', 'CONTINUE'].include?(opts[:'on_error'])
        fail ArgumentError, 'invalid value for "on_error", must be one of ABORT, CONTINUE'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/import-k8s-np-to-dfw'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'on_error'] = opts[:'on_error'] if !opts[:'on_error'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(network_policy_import_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NetworkPolicyImportResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_import_k8s_n_pto_dfw\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Invoke export task
    # Invoke export task. There can be only one export task run at any point of time. Hence invocation of another export task will be discarded, when there exist an already running export task. Exported configuration will be in a CSV format. This CSV file will be zipped into a ZIP file, that can be downloaded after the completion of export task. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param export_request_parameter 
    # @param [Hash] opts the optional parameters
    # @return [ExportTask]
    def orgs_org_id_projects_project_id_infra_invoke_export_task(org_id, project_id, export_request_parameter, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_invoke_export_task_with_http_info(org_id, project_id, export_request_parameter, opts)
      data
    end

    # Invoke export task
    # Invoke export task. There can be only one export task run at any point of time. Hence invocation of another export task will be discarded, when there exist an already running export task. Exported configuration will be in a CSV format. This CSV file will be zipped into a ZIP file, that can be downloaded after the completion of export task. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param export_request_parameter 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportTask, Fixnum, Hash)>] ExportTask data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_invoke_export_task_with_http_info(org_id, project_id, export_request_parameter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_invoke_export_task ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_invoke_export_task"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_invoke_export_task"
      end
      # verify the required parameter 'export_request_parameter' is set
      if @api_client.config.client_side_validation && export_request_parameter.nil?
        fail ArgumentError, "Missing the required parameter 'export_request_parameter' when calling SecurityApi.orgs_org_id_projects_project_id_infra_invoke_export_task"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/export'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(export_request_parameter)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExportTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_invoke_export_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DnsSecurityProfileBindingMapListResult]
    def orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings(org_id, project_id, domain_id, group_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings_with_http_info(org_id, project_id, domain_id, group_id, opts)
      data
    end

    # Get DNS security profile binding map
    # API will get DNS security profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DnsSecurityProfileBindingMapListResult, Fixnum, Hash)>] DnsSecurityProfileBindingMapListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings_with_http_info(org_id, project_id, domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_dns_security_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all DNS security profiles
    # List all DNS security profiles
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DnsSecurityProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_dns_security_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_dns_security_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # List all DNS security profiles
    # List all DNS security profiles
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DnsSecurityProfileListResult, Fixnum, Hash)>] DnsSecurityProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_dns_security_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_dns_security_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_dns_security_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_dns_security_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_dns_security_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_dns_security_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dns-security-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_dns_security_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List policy drafts
    # List policy drafts.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyDraftListResult]
    def orgs_org_id_projects_project_id_infra_list_drafts(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_drafts_with_http_info(org_id, project_id, opts)
      data
    end

    # List policy drafts
    # List policy drafts.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyDraftListResult, Fixnum, Hash)>] PolicyDraftListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_drafts_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_drafts ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_drafts"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_drafts"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_drafts, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_drafts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'auto_drafts'] = opts[:'auto_drafts'] if !opts[:'auto_drafts'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_drafts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Flood Protection Profile Binding Maps for all domains
    # API will list all Firewall Flood Protection Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallFloodProtectionProfileBindingMapListResult]
    def orgs_org_id_projects_project_id_infra_list_firewall_flood_protection_bindings_across_domains(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_firewall_flood_protection_bindings_across_domains_with_http_info(org_id, project_id, opts)
      data
    end

    # List Firewall Flood Protection Profile Binding Maps for all domains
    # API will list all Firewall Flood Protection Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMapListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_firewall_flood_protection_bindings_across_domains_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_firewall_flood_protection_bindings_across_domains ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_firewall_flood_protection_bindings_across_domains"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_firewall_flood_protection_bindings_across_domains"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_firewall_flood_protection_bindings_across_domains, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_firewall_flood_protection_bindings_across_domains, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/firewall-flood-protection-profile-binding-maps'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_firewall_flood_protection_bindings_across_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Session Timer Profile Binding Maps for all domains
    # API will list all Firewall Session Timer Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSessionTimerProfileBindingMapListResult]
    def orgs_org_id_projects_project_id_infra_list_firewall_session_timer_bindings_across_domains(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_firewall_session_timer_bindings_across_domains_with_http_info(org_id, project_id, opts)
      data
    end

    # List Firewall Session Timer Profile Binding Maps for all domains
    # API will list all Firewall Session Timer Profile Binding Maps across all domains. This API returns the binding maps order by the sequence number. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMapListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_firewall_session_timer_bindings_across_domains_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_firewall_session_timer_bindings_across_domains ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_firewall_session_timer_bindings_across_domains"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_firewall_session_timer_bindings_across_domains"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_firewall_session_timer_bindings_across_domains, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_firewall_session_timer_bindings_across_domains, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/firewall-session-timer-profile-binding-maps'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_firewall_session_timer_bindings_across_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles bindings.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param flood_protection_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [FloodProtectionProfileBindingListResult]
    def orgs_org_id_projects_project_id_infra_list_flood_protection_profile_bindings(org_id, project_id, flood_protection_profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_flood_protection_profile_bindings_with_http_info(org_id, project_id, flood_protection_profile_id, opts)
      data
    end

    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles bindings.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param flood_protection_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(FloodProtectionProfileBindingListResult, Fixnum, Hash)>] FloodProtectionProfileBindingListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_flood_protection_profile_bindings_with_http_info(org_id, project_id, flood_protection_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profile_bindings ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profile_bindings"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profile_bindings"
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/flood-protection-profiles/{flood-protection-profile-id}/bindings'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_flood_protection_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [FloodProtectionProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_flood_protection_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_flood_protection_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # List Flood Protection Profiles
    # API will list all Flood Protection Profiles
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(FloodProtectionProfileListResult, Fixnum, Hash)>] FloodProtectionProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_flood_protection_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_flood_protection_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/flood-protection-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_flood_protection_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List gateway policies
    # List all gateway policies for specified Domain.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GatewayPolicyListResult]
    def orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain(org_id, project_id, domain_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain_with_http_info(org_id, project_id, domain_id, opts)
      data
    end

    # List gateway policies
    # List all gateway policies for specified Domain.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain_with_http_info(org_id, project_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def orgs_org_id_projects_project_id_infra_list_gateway_rules(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_gateway_rules_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_gateway_rules_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_rules ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_rules"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_rules"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_rules"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_gateway_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Custom Signature Versions
    # List IDS Custom Signature Versions. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsCustomSignatureVersionListResult]
    def orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions_with_http_info(org_id, project_id, opts)
      data
    end

    # List IDS Custom Signature Versions
    # List IDS Custom Signature Versions. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsCustomSignatureVersionListResult, Fixnum, Hash)>] IdsCustomSignatureVersionListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureVersionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Custom Signatures
    # List IDS Custom Signatures. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :include Custom signatures to be returned
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsCustomSignatureListResult]
    def orgs_org_id_projects_project_id_infra_list_ids_custom_signatures(org_id, project_id, version_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ids_custom_signatures_with_http_info(org_id, project_id, version_id, opts)
      data
    end

    # List IDS Custom Signatures
    # List IDS Custom Signatures. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :include Custom signatures to be returned
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsCustomSignatureListResult, Fixnum, Hash)>] IdsCustomSignatureListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ids_custom_signatures_with_http_info(org_id, project_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures"
      end
      if @api_client.config.client_side_validation && opts[:'include'] && !['PREVIEW_CUSTOM_SIGNATURES', 'CUSTOM_SIGNATURES'].include?(opts[:'include'])
        fail ArgumentError, 'invalid value for "include", must be one of PREVIEW_CUSTOM_SIGNATURES, CUSTOM_SIGNATURES'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_ids_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS PCAP file metadata
    # List IDS PCAP file metadata. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsPcapFileMetadataListResult]
    def orgs_org_id_projects_project_id_infra_list_ids_pcap_files(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ids_pcap_files_with_http_info(org_id, project_id, opts)
      data
    end

    # List IDS PCAP file metadata
    # List IDS PCAP file metadata. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsPcapFileMetadataListResult, Fixnum, Hash)>] IdsPcapFileMetadataListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ids_pcap_files_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_pcap_files ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_pcap_files"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_pcap_files"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_pcap_files, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_pcap_files, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/pcaps'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsPcapFileMetadataListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_ids_pcap_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will list IDS profiles
    # This routine will list all IDS profiles present in system. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_ids_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ids_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # This routine will list IDS profiles
    # This routine will list all IDS profiles present in system. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsProfileListResult, Fixnum, Hash)>] IdsProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ids_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_ids_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS rules
    # List intrusion detection rules. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsRuleListResult]
    def orgs_org_id_projects_project_id_infra_list_ids_rules(org_id, project_id, domain_id, policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ids_rules_with_http_info(org_id, project_id, domain_id, policy_id, opts)
      data
    end

    # List IDS rules
    # List intrusion detection rules. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsRuleListResult, Fixnum, Hash)>] IdsRuleListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ids_rules_with_http_info(org_id, project_id, domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_rules ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_rules"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_rules"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_rules"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_ids_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSecurityPolicyListResult]
    def orgs_org_id_projects_project_id_infra_list_ids_security_policies(org_id, project_id, domain_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ids_security_policies_with_http_info(org_id, project_id, domain_id, opts)
      data
    end

    # List IDS security policies
    # List intrusion detection system security policies. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSecurityPolicyListResult, Fixnum, Hash)>] IdsSecurityPolicyListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ids_security_policies_with_http_info(org_id, project_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_security_policies ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_security_policies"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_security_policies"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_security_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_security_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_ids_security_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_ids_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Flood Protection Profile Binding Maps
    # API will list all Firewall Flood Protection Profile Binding Maps in current group id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallFloodProtectionProfileBindingMapListResult]
    def orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings(org_id, project_id, domain_id, group_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings_with_http_info(org_id, project_id, domain_id, group_id, opts)
      data
    end

    # List Firewall Flood Protection Profile Binding Maps
    # API will list all Firewall Flood Protection Profile Binding Maps in current group id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMapListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings_with_http_info(org_id, project_id, domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_policy_firewall_flood_protection_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSchedulerListResult]
    def orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers_with_http_info(org_id, project_id, opts)
      data
    end

    # Get PolicyFirewallSchedulers
    # Get all PolicyFirewallSchedulers 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSchedulerListResult, Fixnum, Hash)>] PolicyFirewallSchedulerListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-schedulers'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSchedulerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_policy_firewall_schedulers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Session Timer Profile Binding Maps
    # API will list all Firewall Session Timer Profile Binding Maps in current group id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSessionTimerProfileBindingMapListResult]
    def orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings(org_id, project_id, domain_id, group_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings_with_http_info(org_id, project_id, domain_id, group_id, opts)
      data
    end

    # List Firewall Session Timer Profile Binding Maps
    # API will list all Firewall Session Timer Profile Binding Maps in current group id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMapListResult, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMapListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings_with_http_info(org_id, project_id, domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Session Timer Profiles
    # API will list all Firewall Session Timer Profiles
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFirewallSessionTimerProfileListResult]
    def orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # List Firewall Session Timer Profiles
    # API will list all Firewall Session Timer Profiles
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFirewallSessionTimerProfileListResult, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-session-timer-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_policy_firewall_session_timer_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List security policies
    # List all security policies for a domain. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityPolicyListResult]
    def orgs_org_id_projects_project_id_infra_list_security_policies_for_domain(org_id, project_id, domain_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_security_policies_for_domain_with_http_info(org_id, project_id, domain_id, opts)
      data
    end

    # List security policies
    # List all security policies for a domain. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityPolicyListResult, Fixnum, Hash)>] SecurityPolicyListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_security_policies_for_domain_with_http_info(org_id, project_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_security_policies_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_security_policies_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_security_policies_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_security_policies_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_security_policies_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_security_policies_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_security_policies_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def orgs_org_id_projects_project_id_infra_list_security_rules(org_id, project_id, domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_security_rules_with_http_info(org_id, project_id, domain_id, security_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_security_rules_with_http_info(org_id, project_id, domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_security_rules ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_security_rules"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_security_rules"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_security_rules"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_security_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_security_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_security_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_security_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Session Timer Profiles
    # API will list all Session Timer Profiles bindings.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param session_timer_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SessionTimerProfileBindingListResult]
    def orgs_org_id_projects_project_id_infra_list_session_timer_profile_bindings(org_id, project_id, session_timer_profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_session_timer_profile_bindings_with_http_info(org_id, project_id, session_timer_profile_id, opts)
      data
    end

    # List Session Timer Profiles
    # API will list all Session Timer Profiles bindings.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param session_timer_profile_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SessionTimerProfileBindingListResult, Fixnum, Hash)>] SessionTimerProfileBindingListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_session_timer_profile_bindings_with_http_info(org_id, project_id, session_timer_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_list_session_timer_profile_bindings ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_session_timer_profile_bindings"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_session_timer_profile_bindings"
      end
      # verify the required parameter 'session_timer_profile_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_session_timer_profile_bindings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_session_timer_profile_bindings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_list_session_timer_profile_bindings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/session-timer-profiles/{session-timer-profile-id}/bindings'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'session-timer-profile-id' + '}', session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_list_session_timer_profile_bindings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\"enable_firewall\": false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration(org_id, project_id, dfw_firewall_configuration, opts = {})
      orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration_with_http_info(org_id, project_id, dfw_firewall_configuration, opts)
      nil
    end

    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\&quot;enable_firewall\&quot;: false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration_with_http_info(org_id, project_id, dfw_firewall_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration"
      end
      # verify the required parameter 'dfw_firewall_configuration' is set
      if @api_client.config.client_side_validation && dfw_firewall_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'dfw_firewall_configuration' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dfw_firewall_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_dns_security_profile(org_id, project_id, profile_id, dns_security_profile, opts = {})
      orgs_org_id_projects_project_id_infra_patch_dns_security_profile_with_http_info(org_id, project_id, profile_id, dns_security_profile, opts)
      nil
    end

    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_dns_security_profile_with_http_info(org_id, project_id, profile_id, dns_security_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile"
      end
      # verify the required parameter 'dns_security_profile' is set
      if @api_client.config.client_side_validation && dns_security_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dns-security-profiles/{profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dns_security_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DNS security profile binding map
    # API will create or update DNS security profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param dns_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts = {})
      orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding_with_http_info(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts)
      nil
    end

    # Create or update DNS security profile binding map
    # API will create or update DNS security profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param dns_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding_with_http_info(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps/{dns-security-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'dns-security-profile-binding-map-id' + '}', dns_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dns_security_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_dns_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_draft(org_id, project_id, draft_id, policy_draft, opts = {})
      orgs_org_id_projects_project_id_infra_patch_draft_with_http_info(org_id, project_id, draft_id, policy_draft, opts)
      nil
    end

    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_draft_with_http_info(org_id, project_id, draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile
    # API will create/update Flood Protection Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param flood_protection_profile_id Firewall Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_flood_protection_profile(org_id, project_id, flood_protection_profile_id, flood_protection_profile, opts = {})
      orgs_org_id_projects_project_id_infra_patch_flood_protection_profile_with_http_info(org_id, project_id, flood_protection_profile_id, flood_protection_profile, opts)
      nil
    end

    # Create or update Flood Protection Profile
    # API will create/update Flood Protection Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param flood_protection_profile_id Firewall Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_flood_protection_profile_with_http_info(org_id, project_id, flood_protection_profile_id, flood_protection_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_flood_protection_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_flood_protection_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_flood_protection_profile"
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_flood_protection_profile"
      end
      # verify the required parameter 'flood_protection_profile' is set
      if @api_client.config.client_side_validation && flood_protection_profile.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_flood_protection_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts = {})
      orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain_with_http_info(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts)
      nil
    end

    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain_with_http_info(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/gateway-policies/&lt;gateway-policy-id&gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_gateway_rule(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts = {})
      orgs_org_id_projects_project_id_infra_patch_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts)
      nil
    end

    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/gateway-policies/&amp;lt;gateway-policy-id&amp;gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will create IDS profile.
    # User can provide Profile Severity, Criteria and Override the Signature in the request
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_ids_profile(org_id, project_id, profile_id, ids_profile, opts = {})
      orgs_org_id_projects_project_id_infra_patch_ids_profile_with_http_info(org_id, project_id, profile_id, ids_profile, opts)
      nil
    end

    # This routine will create IDS profile.
    # User can provide Profile Severity, Criteria and Override the Signature in the request
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_ids_profile_with_http_info(org_id, project_id, profile_id, ids_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_ids_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_ids_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_ids_profile"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_ids_profile"
      end
      # verify the required parameter 'ids_profile' is set
      if @api_client.config.client_side_validation && ids_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ids_profile' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_ids_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS rule
    # Patch intrusion detection system rule.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_ids_rule(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts = {})
      orgs_org_id_projects_project_id_infra_patch_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts)
      nil
    end

    # Patch IDS rule
    # Patch intrusion detection system rule.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_ids_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_ids_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_ids_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_ids_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_ids_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS security policy
    # Patch intrusion detection system security policy for a domain.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_ids_security_policy(org_id, project_id, domain_id, policy_id, ids_security_policy, opts = {})
      orgs_org_id_projects_project_id_infra_patch_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, ids_security_policy, opts)
      nil
    end

    # Patch IDS security policy
    # Patch intrusion detection system security policy for a domain.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_ids_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_ids_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_ids_security_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_ids_security_policy"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_ids_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Firewall Flood Protection Profile Binding Map
    # API will create or update Firewall Flood Protection profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map_with_http_info(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Firewall Flood Protection Profile Binding Map
    # API will create or update Firewall Flood Protection profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map_with_http_info(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'policy_firewall_flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_flood_protection_profile_binding_map' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_policy_firewall_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyFirewallScheduler
    # Creates/Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \"days\", \"start_date\", \"time_interval\", \"end_date\" is required if \"recurring\" field is true. Also \"start_time\" and \"end_time\" should not be present. And if \"recurring\" field is false then \"start_date\" and \"end_date\" is mandatory, \"start_time\" and \"end_time\" is optional. Also the fields \"days\" and \"time_interval\" should not be present. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler(org_id, project_id, firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, policy_firewall_scheduler, opts)
      nil
    end

    # Create or Update PolicyFirewallScheduler
    # Creates/Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \&quot;days\&quot;, \&quot;start_date\&quot;, \&quot;time_interval\&quot;, \&quot;end_date\&quot; is required if \&quot;recurring\&quot; field is true. Also \&quot;start_time\&quot; and \&quot;end_time\&quot; should not be present. And if \&quot;recurring\&quot; field is false then \&quot;start_date\&quot; and \&quot;end_date\&quot; is mandatory, \&quot;start_time\&quot; and \&quot;end_time\&quot; is optional. Also the fields \&quot;days\&quot; and \&quot;time_interval\&quot; should not be present. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler"
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler"
      end
      # verify the required parameter 'policy_firewall_scheduler' is set
      if @api_client.config.client_side_validation && policy_firewall_scheduler.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_scheduler' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_scheduler)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Firewall Session Timer Profile
    # API will create/update Firewall Session Timer Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile(org_id, project_id, firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_with_http_info(org_id, project_id, firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts)
      nil
    end

    # Create or update Firewall Session Timer Profile
    # API will create/update Firewall Session Timer Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_with_http_info(org_id, project_id, firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'policy_firewall_session_timer_profile' is set
      if @api_client.config.client_side_validation && policy_firewall_session_timer_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_session_timer_profile' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_session_timer_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Firewall Session Timer Profile Binding Map
    # API will create or update Firewall Session Timer profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param policy_firewall_session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts = {})
      orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map_with_http_info(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Firewall Session Timer Profile Binding Map
    # API will create or update Firewall Session Timer profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param policy_firewall_session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map_with_http_info(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map"
      end
      # verify the required parameter 'firewall_session_timer_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_binding_map_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map"
      end
      # verify the required parameter 'policy_firewall_session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_session_timer_profile_binding_map' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps/{firewall-session-timer-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-session-timer-profile-binding-map-id' + '}', firewall_session_timer_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_policy_firewall_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create a security configuration if it is not already present, otherwise update the security configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [SecurityFeatures]
    def orgs_org_id_projects_project_id_infra_patch_security_feature(org_id, project_id, tier_1_id, security_features, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_patch_security_feature_with_http_info(org_id, project_id, tier_1_id, security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create a security configuration if it is not already present, otherwise update the security configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_security_feature_with_http_info(org_id, project_id, tier_1_id, security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_security_feature ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_security_feature"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_security_feature"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_security_feature"
      end
      # verify the required parameter 'security_features' is set
      if @api_client.config.client_side_validation && security_features.nil?
        fail ArgumentError, "Missing the required parameter 'security_features' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_security_feature"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch security policy
    # Patch the security policy for a domain. If a security policy for the given security-policy-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain(org_id, project_id, domain_id, security_policy_id, security_policy, opts = {})
      orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, security_policy, opts)
      nil
    end

    # Patch security policy
    # Patch the security policy for a domain. If a security policy for the given security-policy-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a rule
    # Patch the rule. If Rule corresponding to the the given rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/security-policies/&lt;security-policy-id&gt; 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_security_rule(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts = {})
      orgs_org_id_projects_project_id_infra_patch_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts)
      nil
    end

    # Patch a rule
    # Patch the rule. If Rule corresponding to the the given rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/security-policies/&amp;lt;security-policy-id&amp;gt; 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_security_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_security_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_security_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_security_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_tier1_flood_protection_profile_binding_map(org_id, project_id, tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      orgs_org_id_projects_project_id_infra_patch_tier1_flood_protection_profile_binding_map_with_http_info(org_id, project_id, tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_tier1_flood_protection_profile_binding_map_with_http_info(org_id, project_id, tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_tier1_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map_with_http_info(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map_with_http_info(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_tier1_locale_services_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map(org_id, project_id, tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityApi.orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_patch_tier1_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. If there are additional changes on top of draft configuration, pass it as a request body, in form of Infra object. Otherwise, if there are no additional changes, then pass empty Infra object as a request body. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_publish_draft(org_id, project_id, draft_id, infra, opts = {})
      orgs_org_id_projects_project_id_infra_publish_draft_with_http_info(org_id, project_id, draft_id, infra, opts)
      nil
    end

    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. If there are additional changes on top of draft configuration, pass it as a request body, in form of Infra object. Otherwise, if there are no additional changes, then pass empty Infra object as a request body. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_publish_draft_with_http_info(org_id, project_id, draft_id, infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_publish_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_publish_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_publish_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_publish_draft"
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling SecurityApi.orgs_org_id_projects_project_id_infra_publish_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}?action=publish'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_publish_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\"enable_firewall\": false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [DfwFirewallConfiguration]
    def orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration(org_id, project_id, dfw_firewall_configuration, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration_with_http_info(org_id, project_id, dfw_firewall_configuration, opts)
      data
    end

    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\&quot;enable_firewall\&quot;: false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfwFirewallConfiguration, Fixnum, Hash)>] DfwFirewallConfiguration data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration_with_http_info(org_id, project_id, dfw_firewall_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration"
      end
      # verify the required parameter 'dfw_firewall_configuration' is set
      if @api_client.config.client_side_validation && dfw_firewall_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'dfw_firewall_configuration' when calling SecurityApi.orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dfw_firewall_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DfwFirewallConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def orgs_org_id_projects_project_id_infra_put_draft(org_id, project_id, draft_id, policy_draft, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_put_draft_with_http_info(org_id, project_id, draft_id, policy_draft, opts)
      data
    end

    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_put_draft_with_http_info(org_id, project_id, draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_put_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_put_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_put_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_put_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling SecurityApi.orgs_org_id_projects_project_id_infra_put_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_put_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder for the given tier-0 instance
    # Read the DNS Forwarder for the given tier-0 instance
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [DnsSecurityProfile]
    def orgs_org_id_projects_project_id_infra_read_dns_security_profile(org_id, project_id, profile_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_dns_security_profile_with_http_info(org_id, project_id, profile_id, opts)
      data
    end

    # Read the DNS Forwarder for the given tier-0 instance
    # Read the DNS Forwarder for the given tier-0 instance
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DnsSecurityProfile, Fixnum, Hash)>] DnsSecurityProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_dns_security_profile_with_http_info(org_id, project_id, profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_read_dns_security_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_dns_security_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_dns_security_profile"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_dns_security_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dns-security-profiles/{profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_read_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read draft
    # Read a draft for a given draft identifier. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def orgs_org_id_projects_project_id_infra_read_draft(org_id, project_id, draft_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_draft_with_http_info(org_id, project_id, draft_id, opts)
      data
    end

    # Read draft
    # Read a draft for a given draft identifier. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_draft_with_http_info(org_id, project_id, draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_read_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_draft"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_draft"
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_draft"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/drafts/{draft-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_read_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read gateway policy
    # Read gateway policy for a domain. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts)
      data
    end

    # Read gateway policy
    # Read gateway policy for a domain. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def orgs_org_id_projects_project_id_infra_read_gateway_rule(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_read_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Security Feature
    # Read Security Feature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityFeatures]
    def orgs_org_id_projects_project_id_infra_read_security_feature(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_security_feature_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # Read Security Feature
    # Read Security Feature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_security_feature_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_read_security_feature ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_security_feature"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_security_feature"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['MALWAREPREVENTION', 'IDFW', 'IDPS', 'TLS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of MALWAREPREVENTION, IDFW, IDPS, TLS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_read_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy
    # Read security policy for a domain. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def orgs_org_id_projects_project_id_infra_read_security_policy_for_domain(org_id, project_id, domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, opts)
      data
    end

    # Read security policy
    # Read security policy for a domain. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_read_security_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_security_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_security_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_read_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def orgs_org_id_projects_project_id_infra_read_security_rule(org_id, project_id, domain_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_read_security_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_security_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_security_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_read_security_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_read_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of gateway policy
    # This is used to set a precedence of a gateway policy w.r.t others. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [GatewayPolicy]
    def orgs_org_id_projects_project_id_infra_revise_gateway_policy(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_revise_gateway_policy_with_http_info(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts)
      data
    end

    # Revise the positioning of gateway policy
    # This is used to set a precedence of a gateway policy w.r.t others. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_revise_gateway_policy_with_http_info(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_policy"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_policy"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_revise_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of gateway rule
    # This is used to re-order a gateway rule within a gateway policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [Rule]
    def orgs_org_id_projects_project_id_infra_revise_gateway_rule(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_revise_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of gateway rule
    # This is used to re-order a gateway rule within a gateway policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_revise_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_revise_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS rule
    # This is used to re-order a rule within a security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsRule]
    def orgs_org_id_projects_project_id_infra_revise_ids_rule(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_revise_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # Revise the positioning of IDS rule
    # This is used to re-order a rule within a security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_revise_ids_rule_with_http_info(org_id, project_id, domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_revise_ids_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_ids_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_ids_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_ids_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_ids_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_revise_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param policy_id 
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsSecurityPolicy]
    def orgs_org_id_projects_project_id_infra_revise_ids_security_policy(org_id, project_id, domain_id, policy_id, ids_security_policy, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_revise_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, ids_security_policy, opts)
      data
    end

    # Revise the positioning of IDS security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param policy_id 
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_revise_ids_security_policy_with_http_info(org_id, project_id, domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_revise_ids_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_ids_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_ids_security_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_ids_security_policy"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_ids_security_policy"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_revise_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [SecurityPolicy]
    def orgs_org_id_projects_project_id_infra_revise_security_policies(org_id, project_id, domain_id, security_policy_id, security_policy, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_revise_security_policies_with_http_info(org_id, project_id, domain_id, security_policy_id, security_policy, opts)
      data
    end

    # Revise the positioning of security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_revise_security_policies_with_http_info(org_id, project_id, domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_revise_security_policies ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_security_policies"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_security_policies"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_security_policies"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_security_policies"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_security_policies"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_revise_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of rule
    # This is used to re-order a rule within a security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [Rule]
    def orgs_org_id_projects_project_id_infra_revise_security_rule(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_revise_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of rule
    # This is used to re-order a rule within a security policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_revise_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_revise_security_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_security_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_security_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.orgs_org_id_projects_project_id_infra_revise_security_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_revise_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [DnsSecurityProfile]
    def orgs_org_id_projects_project_id_infra_update_dns_security_profile(org_id, project_id, profile_id, dns_security_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_dns_security_profile_with_http_info(org_id, project_id, profile_id, dns_security_profile, opts)
      data
    end

    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(DnsSecurityProfile, Fixnum, Hash)>] DnsSecurityProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_dns_security_profile_with_http_info(org_id, project_id, profile_id, dns_security_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile"
      end
      # verify the required parameter 'dns_security_profile' is set
      if @api_client.config.client_side_validation && dns_security_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dns-security-profiles/{profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dns_security_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_update_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update DNS security profile binding map
    # API will update DNS security profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param dns_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [DnsSecurityProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding_with_http_info(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts)
      data
    end

    # Update DNS security profile binding map
    # API will update DNS security profile binding map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param dns_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DnsSecurityProfileBindingMap, Fixnum, Hash)>] DnsSecurityProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding_with_http_info(org_id, project_id, domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps/{dns-security-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'dns-security-profile-binding-map-id' + '}', dns_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dns_security_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_update_dns_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Flood Protection Profile
    # API will update Firewall Flood Protection Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [FloodProtectionProfile]
    def orgs_org_id_projects_project_id_infra_update_flood_protection_profile(org_id, project_id, flood_protection_profile_id, flood_protection_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_flood_protection_profile_with_http_info(org_id, project_id, flood_protection_profile_id, flood_protection_profile, opts)
      data
    end

    # Update Firewall Flood Protection Profile
    # API will update Firewall Flood Protection Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(FloodProtectionProfile, Fixnum, Hash)>] FloodProtectionProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_flood_protection_profile_with_http_info(org_id, project_id, flood_protection_profile_id, flood_protection_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_update_flood_protection_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_flood_protection_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_flood_protection_profile"
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_flood_protection_profile"
      end
      # verify the required parameter 'flood_protection_profile' is set
      if @api_client.config.client_side_validation && flood_protection_profile.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_flood_protection_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_update_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Flood Protection Profile Binding Map
    # API will update Firewall Flood Protection Profile Binding Map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallFloodProtectionProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts)
      data
    end

    # Update Firewall Flood Protection Profile Binding Map
    # API will update Firewall Flood Protection Profile Binding Map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMap, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'policy_firewall_flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_flood_protection_profile_binding_map' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_update_policy_firewall_flood_protection_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyFirewallScheduler
    # Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \"days\", \"start_date\", \"time_interval\", \"end_date\" is required if \"recurring\" field is true. Also \"start_time\" and \"end_time\" should not be present. And if \"recurring\" field is false then \"start_date\" and \"end_date\" is mandatory, \"start_time\" and \"end_time\" is optional. Also the fields \"days\" and \"time_interval\" should not be present. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallScheduler]
    def orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler(org_id, project_id, firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, policy_firewall_scheduler, opts)
      data
    end

    # Create or Update PolicyFirewallScheduler
    # Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \&quot;days\&quot;, \&quot;start_date\&quot;, \&quot;time_interval\&quot;, \&quot;end_date\&quot; is required if \&quot;recurring\&quot; field is true. Also \&quot;start_time\&quot; and \&quot;end_time\&quot; should not be present. And if \&quot;recurring\&quot; field is false then \&quot;start_date\&quot; and \&quot;end_date\&quot; is mandatory, \&quot;start_time\&quot; and \&quot;end_time\&quot; is optional. Also the fields \&quot;days\&quot; and \&quot;time_interval\&quot; should not be present. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallScheduler, Fixnum, Hash)>] PolicyFirewallScheduler data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler_with_http_info(org_id, project_id, firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler"
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler"
      end
      # verify the required parameter 'policy_firewall_scheduler' is set
      if @api_client.config.client_side_validation && policy_firewall_scheduler.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_scheduler' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_scheduler)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallScheduler')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_update_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Session Timer Profile Binding Map
    # API will update Firewall Session Timer Profile Binding Map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param policy_firewall_session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallSessionTimerProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts)
      data
    end

    # Update Firewall Session Timer Profile Binding Map
    # API will update Firewall Session Timer Profile Binding Map
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param policy_firewall_session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMap, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding_with_http_info(org_id, project_id, domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'firewall_session_timer_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_binding_map_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'policy_firewall_session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_session_timer_profile_binding_map' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps/{firewall-session-timer-profile-binding-map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-session-timer-profile-binding-map-id' + '}', firewall_session_timer_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Session Timer Profile
    # API will update Firewall Session Timer Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [PolicyFirewallSessionTimerProfile]
    def orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_profile(org_id, project_id, firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_profile_with_http_info(org_id, project_id, firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts)
      data
    end

    # Update Firewall Session Timer Profile
    # API will update Firewall Session Timer Profile
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(PolicyFirewallSessionTimerProfile, Fixnum, Hash)>] PolicyFirewallSessionTimerProfile data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_profile_with_http_info(org_id, project_id, firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'policy_firewall_session_timer_profile' is set
      if @api_client.config.client_side_validation && policy_firewall_session_timer_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_session_timer_profile' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_session_timer_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_update_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security policy
    # Create or Update the security policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a security policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def orgs_org_id_projects_project_id_infra_update_security_policy_for_domain(org_id, project_id, domain_id, security_policy_id, security_policy, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, security_policy, opts)
      data
    end

    # Create or Update security policy
    # Create or Update the security policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a security policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_security_policy_for_domain_with_http_info(org_id, project_id, domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_update_security_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_security_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_security_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_update_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a rule
    # Update the rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you wish to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/security-policies/&lt;security-policy-id&gt; 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def orgs_org_id_projects_project_id_infra_update_security_rule(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts)
      data
    end

    # Create or update a rule
    # Update the rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you wish to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/security-policies/&amp;lt;security-policy-id&amp;gt; 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_security_rule_with_http_info(org_id, project_id, domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_update_security_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_security_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_security_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_security_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_update_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_update_tier1_flood_protection_profile_binding(org_id, project_id, tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_tier1_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      data
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_tier1_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_update_tier1_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      data
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_update_tier1_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      data
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_update_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding(org_id, project_id, tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      data
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding_with_http_info(org_id, project_id, tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityApi.orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_update_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-1. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1. The gateway policies are returned in the order of category and sequence number. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def orgs_org_id_projects_project_id_infra_view_tier1_gateway_firewall(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_view_tier1_gateway_firewall_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-1. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1. The gateway policies are returned in the order of category and sequence number. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_view_tier1_gateway_firewall_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_view_tier1_gateway_firewall ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_view_tier1_gateway_firewall"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_view_tier1_gateway_firewall"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_view_tier1_gateway_firewall"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/gateway-firewall'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_view_tier1_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-1 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def orgs_org_id_projects_project_id_infra_view_tier1_locale_services_gateway_firewall(org_id, project_id, tier_1_id, locale_services_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_view_tier1_locale_services_gateway_firewall_with_http_info(org_id, project_id, tier_1_id, locale_services_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-1 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_view_tier1_locale_services_gateway_firewall_with_http_info(org_id, project_id, tier_1_id, locale_services_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.orgs_org_id_projects_project_id_infra_view_tier1_locale_services_gateway_firewall ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_view_tier1_locale_services_gateway_firewall"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_view_tier1_locale_services_gateway_firewall"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_view_tier1_locale_services_gateway_firewall"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.orgs_org_id_projects_project_id_infra_view_tier1_locale_services_gateway_firewall"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/locale-services/{locale-services-id}/gateway-firewall'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#orgs_org_id_projects_project_id_infra_view_tier1_locale_services_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Bridge Firewall Policy
    # Patch the Bridge Firewall Policy. If a Bridge Firewall Policy with the policy-id is not already present, create a new Bridge Firewall Policy. If it already exists, update the Bridge Firewall Policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param bridge_firewall_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_bridge_firewall_policy(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts = {})
      patch_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts)
      nil
    end

    # Create or update Bridge Firewall Policy
    # Patch the Bridge Firewall Policy. If a Bridge Firewall Policy with the policy-id is not already present, create a new Bridge Firewall Policy. If it already exists, update the Bridge Firewall Policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param bridge_firewall_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_bridge_firewall_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling SecurityApi.patch_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy' when calling SecurityApi.patch_bridge_firewall_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bridge_firewall_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_bridge_firewall_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Bridge Firewall Rule
    # Patch the Bridge Firewall Rule. If a Rule for the given Rule-id is not present, the object will get created and if it is present it will be updated. Performance Note: If you want to edit several rules in a bridge firewall policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/bridge-policies/&lt;bridge-firewall-policy-id&gt; 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_bridge_firewall_rule(domain_id, bridge_firewall_policy_id, rule_id, rule, opts = {})
      patch_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, rule, opts)
      nil
    end

    # Create or update Bridge Firewall Rule
    # Patch the Bridge Firewall Rule. If a Rule for the given Rule-id is not present, the object will get created and if it is present it will be updated. Performance Note: If you want to edit several rules in a bridge firewall policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/bridge-policies/&amp;lt;bridge-firewall-policy-id&amp;gt; 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_bridge_firewall_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_bridge_firewall_rule"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling SecurityApi.patch_bridge_firewall_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.patch_bridge_firewall_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.patch_bridge_firewall_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_bridge_firewall_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create BYOD service instance
    # Create BYOD Service Instance which represent instance of service definition created on manager. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id BYOD Service instance id
    # @param byod_policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_byod_policy_service_instance(tier_0_id, locale_service_id, service_instance_id, byod_policy_service_instance, opts = {})
      patch_byod_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, byod_policy_service_instance, opts)
      nil
    end

    # Create BYOD service instance
    # Create BYOD Service Instance which represent instance of service definition created on manager. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id BYOD Service instance id
    # @param byod_policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_byod_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, byod_policy_service_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_byod_policy_service_instance ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.patch_byod_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.patch_byod_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.patch_byod_policy_service_instance"
      end
      # verify the required parameter 'byod_policy_service_instance' is set
      if @api_client.config.client_side_validation && byod_policy_service_instance.nil?
        fail ArgumentError, "Missing the required parameter 'byod_policy_service_instance' when calling SecurityApi.patch_byod_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(byod_policy_service_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_byod_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a CommunicationEntry
    # Patch the CommunicationEntry. If a communication entry for the given communication-entry-id is not present, the object will get created and if it is present it will be updated. This is a full replace   <br> This API is deprecated. Please use the following API instead. PATCH /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param communication_entry 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_communication_entry(domain_id, communication_map_id, communication_entry_id, communication_entry, opts = {})
      patch_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, communication_entry, opts)
      nil
    end

    # Patch a CommunicationEntry
    # Patch the CommunicationEntry. If a communication entry for the given communication-entry-id is not present, the object will get created and if it is present it will be updated. This is a full replace   &lt;br&gt; This API is deprecated. Please use the following API instead. PATCH /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param communication_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, communication_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_communication_entry ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_communication_entry"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling SecurityApi.patch_communication_entry"
      end
      # verify the required parameter 'communication_entry_id' is set
      if @api_client.config.client_side_validation && communication_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry_id' when calling SecurityApi.patch_communication_entry"
      end
      # verify the required parameter 'communication_entry' is set
      if @api_client.config.client_side_validation && communication_entry.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry' when calling SecurityApi.patch_communication_entry"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}/communication-entries/{communication-entry-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s).sub('{' + 'communication-entry-id' + '}', communication_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch communication map
    # Patch the communication map for a domain. If a communication map for the given communication-map-id is not present, the object will get created and if it is present it will be updated. This is a full replace  <br> This API is deprecated. Please use the following API instead. PATCH /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_communication_map_for_domain(domain_id, communication_map_id, communication_map, opts = {})
      patch_communication_map_for_domain_with_http_info(domain_id, communication_map_id, communication_map, opts)
      nil
    end

    # Patch communication map
    # Patch the communication map for a domain. If a communication map for the given communication-map-id is not present, the object will get created and if it is present it will be updated. This is a full replace  &lt;br&gt; This API is deprecated. Please use the following API instead. PATCH /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_communication_map_for_domain_with_http_info(domain_id, communication_map_id, communication_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_communication_map_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_communication_map_for_domain"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling SecurityApi.patch_communication_map_for_domain"
      end
      # verify the required parameter 'communication_map' is set
      if @api_client.config.client_side_validation && communication_map.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map' when calling SecurityApi.patch_communication_map_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_communication_map_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch compute cluster idfw configuration
    # Patch compute cluster identity firewall configuration.
    # @param cluster_id Cluster ID
    # @param compute_cluster_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_compute_cluster_idfw_configuration(cluster_id, compute_cluster_idfw_configuration, opts = {})
      patch_compute_cluster_idfw_configuration_with_http_info(cluster_id, compute_cluster_idfw_configuration, opts)
      nil
    end

    # Patch compute cluster idfw configuration
    # Patch compute cluster identity firewall configuration.
    # @param cluster_id Cluster ID
    # @param compute_cluster_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_compute_cluster_idfw_configuration_with_http_info(cluster_id, compute_cluster_idfw_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_compute_cluster_idfw_configuration ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling SecurityApi.patch_compute_cluster_idfw_configuration"
      end
      # verify the required parameter 'compute_cluster_idfw_configuration' is set
      if @api_client.config.client_side_validation && compute_cluster_idfw_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'compute_cluster_idfw_configuration' when calling SecurityApi.patch_compute_cluster_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/cluster/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(compute_cluster_idfw_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_compute_cluster_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a container cluster as a span of this security policy
    # Add a container cluster as a span of this security policy. If there already exists another object containing the same container cluster path, an error will be thrown. The container cluster path cannot be modified If the path has to be modified, then delete this entity and add a new entity with the desired container cluster path 
    # @param domain_id 
    # @param security_policy_id 
    # @param container_cluster_id 
    # @param security_policy_container_cluster 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_container_cluster_span(domain_id, security_policy_id, container_cluster_id, security_policy_container_cluster, opts = {})
      patch_container_cluster_span_with_http_info(domain_id, security_policy_id, container_cluster_id, security_policy_container_cluster, opts)
      nil
    end

    # Add a container cluster as a span of this security policy
    # Add a container cluster as a span of this security policy. If there already exists another object containing the same container cluster path, an error will be thrown. The container cluster path cannot be modified If the path has to be modified, then delete this entity and add a new entity with the desired container cluster path 
    # @param domain_id 
    # @param security_policy_id 
    # @param container_cluster_id 
    # @param security_policy_container_cluster 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_container_cluster_span_with_http_info(domain_id, security_policy_id, container_cluster_id, security_policy_container_cluster, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_container_cluster_span ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_container_cluster_span"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.patch_container_cluster_span"
      end
      # verify the required parameter 'container_cluster_id' is set
      if @api_client.config.client_side_validation && container_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'container_cluster_id' when calling SecurityApi.patch_container_cluster_span"
      end
      # verify the required parameter 'security_policy_container_cluster' is set
      if @api_client.config.client_side_validation && security_policy_container_cluster.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_container_cluster' when calling SecurityApi.patch_container_cluster_span"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/container-cluster-span/{container-cluster-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'container-cluster-id' + '}', container_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy_container_cluster)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_container_cluster_span\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update CPU and memory thresholds profile
    # Create or update CPU and memory thresholds profile.
    # @param profile_id 
    # @param policy_firewall_cpu_mem_thresholds_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_cpu_mem_thresholds_profile(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts = {})
      patch_cpu_mem_thresholds_profile_with_http_info(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts)
      nil
    end

    # Create or update CPU and memory thresholds profile
    # Create or update CPU and memory thresholds profile.
    # @param profile_id 
    # @param policy_firewall_cpu_mem_thresholds_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_cpu_mem_thresholds_profile_with_http_info(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_cpu_mem_thresholds_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.patch_cpu_mem_thresholds_profile"
      end
      # verify the required parameter 'policy_firewall_cpu_mem_thresholds_profile' is set
      if @api_client.config.client_side_validation && policy_firewall_cpu_mem_thresholds_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_cpu_mem_thresholds_profile' when calling SecurityApi.patch_cpu_mem_thresholds_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/cpu-mem-thresholds-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_cpu_mem_thresholds_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_cpu_mem_thresholds_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\"enable_firewall\": false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_dfw_firewall_configuration(dfw_firewall_configuration, opts = {})
      patch_dfw_firewall_configuration_with_http_info(dfw_firewall_configuration, opts)
      nil
    end

    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\&quot;enable_firewall\&quot;: false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_dfw_firewall_configuration_with_http_info(dfw_firewall_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_dfw_firewall_configuration ...'
      end
      # verify the required parameter 'dfw_firewall_configuration' is set
      if @api_client.config.client_side_validation && dfw_firewall_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'dfw_firewall_configuration' when calling SecurityApi.patch_dfw_firewall_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dfw_firewall_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_dns_security_profile(profile_id, dns_security_profile, opts = {})
      patch_dns_security_profile_with_http_info(profile_id, dns_security_profile, opts)
      nil
    end

    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_dns_security_profile_with_http_info(profile_id, dns_security_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_dns_security_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.patch_dns_security_profile"
      end
      # verify the required parameter 'dns_security_profile' is set
      if @api_client.config.client_side_validation && dns_security_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile' when calling SecurityApi.patch_dns_security_profile"
      end
      # resource path
      local_var_path = '/infra/dns-security-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dns_security_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DNS security profile binding map
    # API will create or update DNS security profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param dns_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_dns_security_profile_binding(domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts = {})
      patch_dns_security_profile_binding_with_http_info(domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts)
      nil
    end

    # Create or update DNS security profile binding map
    # API will create or update DNS security profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param dns_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_dns_security_profile_binding_with_http_info(domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_dns_security_profile_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_dns_security_profile_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.patch_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map_id' when calling SecurityApi.patch_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map' when calling SecurityApi.patch_dns_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps/{dns-security-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'dns-security-profile-binding-map-id' + '}', dns_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dns_security_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_dns_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_draft(draft_id, policy_draft, opts = {})
      patch_draft_with_http_info(draft_id, policy_draft, opts)
      nil
    end

    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_draft_with_http_info(draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.patch_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling SecurityApi.patch_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Endpoint policy
    # Create or update the Endpoint policy. 
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param endpoint_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_endpoint_policy(domain_id, endpoint_policy_id, endpoint_policy, opts = {})
      patch_endpoint_policy_with_http_info(domain_id, endpoint_policy_id, endpoint_policy, opts)
      nil
    end

    # Create or update Endpoint policy
    # Create or update the Endpoint policy. 
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param endpoint_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_endpoint_policy_with_http_info(domain_id, endpoint_policy_id, endpoint_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_endpoint_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_endpoint_policy"
      end
      # verify the required parameter 'endpoint_policy_id' is set
      if @api_client.config.client_side_validation && endpoint_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy_id' when calling SecurityApi.patch_endpoint_policy"
      end
      # verify the required parameter 'endpoint_policy' is set
      if @api_client.config.client_side_validation && endpoint_policy.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy' when calling SecurityApi.patch_endpoint_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'endpoint-policy-id' + '}', endpoint_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(endpoint_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_endpoint_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Endpoint rule
    # Create a Endpoint rule with the endpoint-rule-id is not already present, otherwise update the Endpoint Rule. 
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param endpoint_rule_id Endpoint rule id
    # @param endpoint_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_endpoint_rule(domain_id, endpoint_policy_id, endpoint_rule_id, endpoint_rule, opts = {})
      patch_endpoint_rule_with_http_info(domain_id, endpoint_policy_id, endpoint_rule_id, endpoint_rule, opts)
      nil
    end

    # Update Endpoint rule
    # Create a Endpoint rule with the endpoint-rule-id is not already present, otherwise update the Endpoint Rule. 
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param endpoint_rule_id Endpoint rule id
    # @param endpoint_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_endpoint_rule_with_http_info(domain_id, endpoint_policy_id, endpoint_rule_id, endpoint_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_endpoint_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_endpoint_rule"
      end
      # verify the required parameter 'endpoint_policy_id' is set
      if @api_client.config.client_side_validation && endpoint_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy_id' when calling SecurityApi.patch_endpoint_rule"
      end
      # verify the required parameter 'endpoint_rule_id' is set
      if @api_client.config.client_side_validation && endpoint_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_rule_id' when calling SecurityApi.patch_endpoint_rule"
      end
      # verify the required parameter 'endpoint_rule' is set
      if @api_client.config.client_side_validation && endpoint_rule.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_rule' when calling SecurityApi.patch_endpoint_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}/endpoint-rules/{endpoint-rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'endpoint-policy-id' + '}', endpoint_policy_id.to_s).sub('{' + 'endpoint-rule-id' + '}', endpoint_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(endpoint_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_endpoint_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch exclusion list for security policy
    # Patch exclusion list for security policy. 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_exclude_list(policy_exclude_list, opts = {})
      patch_exclude_list_with_http_info(policy_exclude_list, opts)
      nil
    end

    # Patch exclusion list for security policy
    # Patch exclusion list for security policy. 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_exclude_list_with_http_info(policy_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_exclude_list ...'
      end
      # verify the required parameter 'policy_exclude_list' is set
      if @api_client.config.client_side_validation && policy_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_exclude_list' when calling SecurityApi.patch_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile
    # API will create/update Flood Protection Profile
    # @param flood_protection_profile_id Firewall Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_flood_protection_profile(flood_protection_profile_id, flood_protection_profile, opts = {})
      patch_flood_protection_profile_with_http_info(flood_protection_profile_id, flood_protection_profile, opts)
      nil
    end

    # Create or update Flood Protection Profile
    # API will create/update Flood Protection Profile
    # @param flood_protection_profile_id Firewall Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_flood_protection_profile_with_http_info(flood_protection_profile_id, flood_protection_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_flood_protection_profile ...'
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityApi.patch_flood_protection_profile"
      end
      # verify the required parameter 'flood_protection_profile' is set
      if @api_client.config.client_side_validation && flood_protection_profile.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile' when calling SecurityApi.patch_flood_protection_profile"
      end
      # resource path
      local_var_path = '/infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update FqdnAnalysisConfig
    # Creates/Updates a FqdnAnalysisConfig object. If FqdnAnalysisConfig object does not exists for the passed edge-cluster node, create a new FqdnAnalysisConfig object. If it already exists, patch it. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param fqdn_analysis_config 
    # @param [Hash] opts the optional parameters
    # @return [FqdnAnalysisConfig]
    def patch_fqdn_analysis_config(site_id, enforcement_point_id, edge_cluster_id, fqdn_analysis_config, opts = {})
      data, _status_code, _headers = patch_fqdn_analysis_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, fqdn_analysis_config, opts)
      data
    end

    # Create or Update FqdnAnalysisConfig
    # Creates/Updates a FqdnAnalysisConfig object. If FqdnAnalysisConfig object does not exists for the passed edge-cluster node, create a new FqdnAnalysisConfig object. If it already exists, patch it. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param fqdn_analysis_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FqdnAnalysisConfig, Fixnum, Hash)>] FqdnAnalysisConfig data, response status code and response headers
    def patch_fqdn_analysis_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, fqdn_analysis_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_fqdn_analysis_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SecurityApi.patch_fqdn_analysis_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling SecurityApi.patch_fqdn_analysis_config"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling SecurityApi.patch_fqdn_analysis_config"
      end
      # verify the required parameter 'fqdn_analysis_config' is set
      if @api_client.config.client_side_validation && fqdn_analysis_config.nil?
        fail ArgumentError, "Missing the required parameter 'fqdn_analysis_config' when calling SecurityApi.patch_fqdn_analysis_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/fqdn-analysis-config'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(fqdn_analysis_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FqdnAnalysisConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_fqdn_analysis_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_gateway_policy_for_domain(domain_id, gateway_policy_id, gateway_policy, opts = {})
      patch_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts)
      nil
    end

    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.patch_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling SecurityApi.patch_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/gateway-policies/&lt;gateway-policy-id&gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_gateway_rule(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      patch_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts)
      nil
    end

    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/gateway-policies/&amp;lt;gateway-policy-id&amp;gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.patch_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.patch_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.patch_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Geo IP Setting Configuration
    # This API can be used to activate or deactivate auto-download of Geo IP Bundle. Once auto-download is activated, Geo IP Bundle will be downloaded at regular intervals of 720 minutes (12 hrs). 
    # @param geo_ip_setting 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_geo_ip_setting(geo_ip_setting, opts = {})
      patch_geo_ip_setting_with_http_info(geo_ip_setting, opts)
      nil
    end

    # Patch Geo IP Setting Configuration
    # This API can be used to activate or deactivate auto-download of Geo IP Bundle. Once auto-download is activated, Geo IP Bundle will be downloaded at regular intervals of 720 minutes (12 hrs). 
    # @param geo_ip_setting 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_geo_ip_setting_with_http_info(geo_ip_setting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_geo_ip_setting ...'
      end
      # verify the required parameter 'geo_ip_setting' is set
      if @api_client.config.client_side_validation && geo_ip_setting.nil?
        fail ArgumentError, "Missing the required parameter 'geo_ip_setting' when calling SecurityApi.patch_geo_ip_setting"
      end
      # resource path
      local_var_path = '/infra/geo-ip/setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(geo_ip_setting)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_geo_ip_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Global IDS Signature
    # Patch global intrusion detection system signature.
    # @param signature_id Signature ID
    # @param global_ids_signature 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_global_ids_signature(signature_id, global_ids_signature, opts = {})
      patch_global_ids_signature_with_http_info(signature_id, global_ids_signature, opts)
      nil
    end

    # Patch Global IDS Signature
    # Patch global intrusion detection system signature.
    # @param signature_id Signature ID
    # @param global_ids_signature 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_global_ids_signature_with_http_info(signature_id, global_ids_signature, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_global_ids_signature ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SecurityApi.patch_global_ids_signature"
      end
      # verify the required parameter 'global_ids_signature' is set
      if @api_client.config.client_side_validation && global_ids_signature.nil?
        fail ArgumentError, "Missing the required parameter 'global_ids_signature' when calling SecurityApi.patch_global_ids_signature"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_ids_signature)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_global_ids_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Group Monitoring Profile Binding Map
    # API will create group monitoring profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param group_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_group_monitoring_binding(domain_id, group_id, group_monitoring_profile_binding_map_id, group_monitoring_profile_binding_map, opts = {})
      patch_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, group_monitoring_profile_binding_map, opts)
      nil
    end

    # Create Group Monitoring Profile Binding Map
    # API will create group monitoring profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param group_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, group_monitoring_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_group_monitoring_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_group_monitoring_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.patch_group_monitoring_binding"
      end
      # verify the required parameter 'group_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && group_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_monitoring_profile_binding_map_id' when calling SecurityApi.patch_group_monitoring_binding"
      end
      # verify the required parameter 'group_monitoring_profile_binding_map' is set
      if @api_client.config.client_side_validation && group_monitoring_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'group_monitoring_profile_binding_map' when calling SecurityApi.patch_group_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/group-monitoring-profile-binding-maps/{group-monitoring-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'group-monitoring-profile-binding-map-id' + '}', group_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group_monitoring_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_group_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS config on cluster level
    # Patch intrusion detection system on cluster level.
    # @param cluster_config_id User entered ID
    # @param ids_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_cluster_config(cluster_config_id, ids_cluster_config, opts = {})
      patch_ids_cluster_config_with_http_info(cluster_config_id, ids_cluster_config, opts)
      nil
    end

    # Patch IDS config on cluster level
    # Patch intrusion detection system on cluster level.
    # @param cluster_config_id User entered ID
    # @param ids_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_cluster_config_with_http_info(cluster_config_id, ids_cluster_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_ids_cluster_config ...'
      end
      # verify the required parameter 'cluster_config_id' is set
      if @api_client.config.client_side_validation && cluster_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_config_id' when calling SecurityApi.patch_ids_cluster_config"
      end
      # verify the required parameter 'ids_cluster_config' is set
      if @api_client.config.client_side_validation && ids_cluster_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_cluster_config' when calling SecurityApi.patch_ids_cluster_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/cluster-configs/{cluster-config-id}'.sub('{' + 'cluster-config-id' + '}', cluster_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_cluster_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_ids_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS custom signature settings
    # Patch IDS custom signature settings. 
    # @param version_id 
    # @param ids_custom_signature_settings 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_custom_signature_settings(version_id, ids_custom_signature_settings, opts = {})
      patch_ids_custom_signature_settings_with_http_info(version_id, ids_custom_signature_settings, opts)
      nil
    end

    # Patch IDS custom signature settings
    # Patch IDS custom signature settings. 
    # @param version_id 
    # @param ids_custom_signature_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_custom_signature_settings_with_http_info(version_id, ids_custom_signature_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_ids_custom_signature_settings ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SecurityApi.patch_ids_custom_signature_settings"
      end
      # verify the required parameter 'ids_custom_signature_settings' is set
      if @api_client.config.client_side_validation && ids_custom_signature_settings.nil?
        fail ArgumentError, "Missing the required parameter 'ids_custom_signature_settings' when calling SecurityApi.patch_ids_custom_signature_settings"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/settings'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_custom_signature_settings)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_ids_custom_signature_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update IDS gateway policy
    # Update the IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_gateway_policy(domain_id, policy_id, ids_gateway_policy, opts = {})
      patch_ids_gateway_policy_with_http_info(domain_id, policy_id, ids_gateway_policy, opts)
      nil
    end

    # Update IDS gateway policy
    # Update the IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_gateway_policy_with_http_info(domain_id, policy_id, ids_gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_ids_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_ids_gateway_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.patch_ids_gateway_policy"
      end
      # verify the required parameter 'ids_gateway_policy' is set
      if @api_client.config.client_side_validation && ids_gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_gateway_policy' when calling SecurityApi.patch_ids_gateway_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_ids_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update IDS gateway rule
    # Update the gateway rule. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_gateway_rule(domain_id, policy_id, rule_id, ids_rule, opts = {})
      patch_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      nil
    end

    # Update IDS gateway rule
    # Update the gateway rule. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_ids_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_ids_gateway_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.patch_ids_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.patch_ids_gateway_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling SecurityApi.patch_ids_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_ids_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This routine will create IDS profile.
    # User can provide Profile Severity, Criteria and Override the Signature in the request
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_profile(profile_id, ids_profile, opts = {})
      patch_ids_profile_with_http_info(profile_id, ids_profile, opts)
      nil
    end

    # This routine will create IDS profile.
    # User can provide Profile Severity, Criteria and Override the Signature in the request
    # @param profile_id Profile ID
    # @param ids_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_profile_with_http_info(profile_id, ids_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_ids_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.patch_ids_profile"
      end
      # verify the required parameter 'ids_profile' is set
      if @api_client.config.client_side_validation && ids_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ids_profile' when calling SecurityApi.patch_ids_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_ids_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS rule
    # Patch intrusion detection system rule.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_rule(domain_id, policy_id, rule_id, ids_rule, opts = {})
      patch_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      nil
    end

    # Patch IDS rule
    # Patch intrusion detection system rule.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param rule_id Rule ID
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.patch_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.patch_ids_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling SecurityApi.patch_ids_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS security policy
    # Patch intrusion detection system security policy for a domain.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_security_policy(domain_id, policy_id, ids_security_policy, opts = {})
      patch_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts)
      nil
    end

    # Patch IDS security policy
    # Patch intrusion detection system security policy for a domain.
    # @param domain_id Domain ID
    # @param policy_id Policy ID
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.patch_ids_security_policy"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling SecurityApi.patch_ids_security_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Intrusion detection system settings
    # Intrusion detection system settings. 
    # @param ids_settings 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_settings(ids_settings, opts = {})
      patch_ids_settings_with_http_info(ids_settings, opts)
      nil
    end

    # Patch Intrusion detection system settings
    # Intrusion detection system settings. 
    # @param ids_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_settings_with_http_info(ids_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_ids_settings ...'
      end
      # verify the required parameter 'ids_settings' is set
      if @api_client.config.client_side_validation && ids_settings.nil?
        fail ArgumentError, "Missing the required parameter 'ids_settings' when calling SecurityApi.patch_ids_settings"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_settings)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_ids_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch threshold configuration for IDS system signature
    # Patch threshold and rate filter configuration for IDS signature globally. This API is applicable only for 'System' signatures. Either or both of threshold and rate filter configuration can be provided. 
    # @param signature_id Signature ID
    # @param ids_threshold_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_signature_threshold_config(signature_id, ids_threshold_config, opts = {})
      patch_ids_signature_threshold_config_with_http_info(signature_id, ids_threshold_config, opts)
      nil
    end

    # Patch threshold configuration for IDS system signature
    # Patch threshold and rate filter configuration for IDS signature globally. This API is applicable only for &#39;System&#39; signatures. Either or both of threshold and rate filter configuration can be provided. 
    # @param signature_id Signature ID
    # @param ids_threshold_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_signature_threshold_config_with_http_info(signature_id, ids_threshold_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_ids_signature_threshold_config ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SecurityApi.patch_ids_signature_threshold_config"
      end
      # verify the required parameter 'ids_threshold_config' is set
      if @api_client.config.client_side_validation && ids_threshold_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_threshold_config' when calling SecurityApi.patch_ids_signature_threshold_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/threshold-configs/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_threshold_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_ids_signature_threshold_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS configuration
    # Patch intrusion detection system configuration on standalone hosts.
    # @param ids_standalone_host_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_standalone_host_config(ids_standalone_host_config, opts = {})
      patch_ids_standalone_host_config_with_http_info(ids_standalone_host_config, opts)
      nil
    end

    # Patch IDS configuration
    # Patch intrusion detection system configuration on standalone hosts.
    # @param ids_standalone_host_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_standalone_host_config_with_http_info(ids_standalone_host_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_ids_standalone_host_config ...'
      end
      # verify the required parameter 'ids_standalone_host_config' is set
      if @api_client.config.client_side_validation && ids_standalone_host_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_standalone_host_config' when calling SecurityApi.patch_ids_standalone_host_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/ids-standalone-host-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_standalone_host_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_ids_standalone_host_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration for Segment
    # Create a Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityFeatures]
    def patch_infra_segment_security_feature(segment_id, segment_security_features, opts = {})
      data, _status_code, _headers = patch_infra_segment_security_feature_with_http_info(segment_id, segment_security_features, opts)
      data
    end

    # Create or Update security configuration for Segment
    # Create a Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def patch_infra_segment_security_feature_with_http_info(segment_id, segment_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_infra_segment_security_feature ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SecurityApi.patch_infra_segment_security_feature"
      end
      # verify the required parameter 'segment_security_features' is set
      if @api_client.config.client_side_validation && segment_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_features' when calling SecurityApi.patch_infra_segment_security_feature"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/security-config'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_infra_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Malware Prevention profile
    # Patch Malware Prevention profile.
    # @param profile_id Profile ID
    # @param malware_prevention_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_malware_prevention_profile(profile_id, malware_prevention_profile, opts = {})
      patch_malware_prevention_profile_with_http_info(profile_id, malware_prevention_profile, opts)
      nil
    end

    # Patch Malware Prevention profile
    # Patch Malware Prevention profile.
    # @param profile_id Profile ID
    # @param malware_prevention_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_malware_prevention_profile_with_http_info(profile_id, malware_prevention_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_malware_prevention_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.patch_malware_prevention_profile"
      end
      # verify the required parameter 'malware_prevention_profile' is set
      if @api_client.config.client_side_validation && malware_prevention_profile.nil?
        fail ArgumentError, "Missing the required parameter 'malware_prevention_profile' when calling SecurityApi.patch_malware_prevention_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/malware-prevention-service/profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(malware_prevention_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_malware_prevention_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id is not already present, create a new firewall identity store. If it already exists, update the firewall identity store with specified attributes. 
    # @param identity_firewall_store_id firewall identity store ID
    # @param identity_firewall_store 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def patch_or_create_firewall_identity_store(identity_firewall_store_id, identity_firewall_store, opts = {})
      patch_or_create_firewall_identity_store_with_http_info(identity_firewall_store_id, identity_firewall_store, opts)
      nil
    end

    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id is not already present, create a new firewall identity store. If it already exists, update the firewall identity store with specified attributes. 
    # @param identity_firewall_store_id firewall identity store ID
    # @param identity_firewall_store 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_or_create_firewall_identity_store_with_http_info(identity_firewall_store_id, identity_firewall_store, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_or_create_firewall_identity_store ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SecurityApi.patch_or_create_firewall_identity_store"
      end
      # verify the required parameter 'identity_firewall_store' is set
      if @api_client.config.client_side_validation && identity_firewall_store.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store' when calling SecurityApi.patch_or_create_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_or_create_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a LDAP server for Firewall Identity store
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one. 
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param identity_firewall_store_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreLdapServer]
    def patch_or_create_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts = {})
      data, _status_code, _headers = patch_or_create_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts)
      data
    end

    # Create a LDAP server for Firewall Identity store
    # More than one LDAP server can be created and only one LDAP server is used to synchronize directory objects. If more than one LDAP server is configured, NSX will try all the servers until it is able to successfully connect to one. 
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param identity_firewall_store_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreLdapServer, Fixnum, Hash)>] IdentityFirewallStoreLdapServer data, response status code and response headers
    def patch_or_create_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_or_create_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SecurityApi.patch_or_create_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SecurityApi.patch_or_create_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'identity_firewall_store_ldap_server' is set
      if @api_client.config.client_side_validation && identity_firewall_store_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_ldap_server' when calling SecurityApi.patch_or_create_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_or_create_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch exclusion list
    # Patch exclusion list. 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_pmaas_exclude_list(policy_exclude_list, opts = {})
      patch_pmaas_exclude_list_with_http_info(policy_exclude_list, opts)
      nil
    end

    # Patch exclusion list
    # Patch exclusion list. 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_pmaas_exclude_list_with_http_info(policy_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_pmaas_exclude_list ...'
      end
      # verify the required parameter 'policy_exclude_list' is set
      if @api_client.config.client_side_validation && policy_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_exclude_list' when calling SecurityApi.patch_pmaas_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list/global'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_pmaas_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Firewall CPU Memory Thresholds Profile Binding Map
    # API will create or update Firewall CPU Memory Thresholds Profile binding map.
    # @param cpu_mem_thresholds_profile_binding_map_id Firewall CPU Memory Thresholds Profile Binding Map ID
    # @param policy_firewall_cpu_mem_thresholds_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_firewall_cpu_mem_thresholds_profile_binding_map(cpu_mem_thresholds_profile_binding_map_id, policy_firewall_cpu_mem_thresholds_profile_binding_map, opts = {})
      patch_policy_firewall_cpu_mem_thresholds_profile_binding_map_with_http_info(cpu_mem_thresholds_profile_binding_map_id, policy_firewall_cpu_mem_thresholds_profile_binding_map, opts)
      nil
    end

    # Create or update Firewall CPU Memory Thresholds Profile Binding Map
    # API will create or update Firewall CPU Memory Thresholds Profile binding map.
    # @param cpu_mem_thresholds_profile_binding_map_id Firewall CPU Memory Thresholds Profile Binding Map ID
    # @param policy_firewall_cpu_mem_thresholds_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_firewall_cpu_mem_thresholds_profile_binding_map_with_http_info(cpu_mem_thresholds_profile_binding_map_id, policy_firewall_cpu_mem_thresholds_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_policy_firewall_cpu_mem_thresholds_profile_binding_map ...'
      end
      # verify the required parameter 'cpu_mem_thresholds_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && cpu_mem_thresholds_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'cpu_mem_thresholds_profile_binding_map_id' when calling SecurityApi.patch_policy_firewall_cpu_mem_thresholds_profile_binding_map"
      end
      # verify the required parameter 'policy_firewall_cpu_mem_thresholds_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_cpu_mem_thresholds_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_cpu_mem_thresholds_profile_binding_map' when calling SecurityApi.patch_policy_firewall_cpu_mem_thresholds_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/cpu-mem-thresholds-profile-binding-maps/{cpu-mem-thresholds-profile-binding-map-id}'.sub('{' + 'cpu-mem-thresholds-profile-binding-map-id' + '}', cpu_mem_thresholds_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_cpu_mem_thresholds_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_policy_firewall_cpu_mem_thresholds_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Firewall Flood Protection Profile Binding Map
    # API will create or update Firewall Flood Protection profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_firewall_flood_protection_profile_binding_map(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      patch_policy_firewall_flood_protection_profile_binding_map_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Firewall Flood Protection Profile Binding Map
    # API will create or update Firewall Flood Protection profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_firewall_flood_protection_profile_binding_map_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_policy_firewall_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling SecurityApi.patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'policy_firewall_flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_flood_protection_profile_binding_map' when calling SecurityApi.patch_policy_firewall_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_policy_firewall_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyFirewallScheduler
    # Creates/Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \"days\", \"start_date\", \"time_interval\", \"end_date\" is required if \"recurring\" field is true. Also \"start_time\" and \"end_time\" should not be present. And if \"recurring\" field is false then \"start_date\" and \"end_date\" is mandatory, \"start_time\" and \"end_time\" is optional. Also the fields \"days\" and \"time_interval\" should not be present. 
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_firewall_scheduler(firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      patch_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, policy_firewall_scheduler, opts)
      nil
    end

    # Create or Update PolicyFirewallScheduler
    # Creates/Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \&quot;days\&quot;, \&quot;start_date\&quot;, \&quot;time_interval\&quot;, \&quot;end_date\&quot; is required if \&quot;recurring\&quot; field is true. Also \&quot;start_time\&quot; and \&quot;end_time\&quot; should not be present. And if \&quot;recurring\&quot; field is false then \&quot;start_date\&quot; and \&quot;end_date\&quot; is mandatory, \&quot;start_time\&quot; and \&quot;end_time\&quot; is optional. Also the fields \&quot;days\&quot; and \&quot;time_interval\&quot; should not be present. 
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling SecurityApi.patch_policy_firewall_scheduler"
      end
      # verify the required parameter 'policy_firewall_scheduler' is set
      if @api_client.config.client_side_validation && policy_firewall_scheduler.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_scheduler' when calling SecurityApi.patch_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_scheduler)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Firewall Session Timer Profile
    # API will create/update Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_policy_firewall_session_timer_profile(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      patch_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts)
      nil
    end

    # Create or update Firewall Session Timer Profile
    # API will create/update Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityApi.patch_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'policy_firewall_session_timer_profile' is set
      if @api_client.config.client_side_validation && policy_firewall_session_timer_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_session_timer_profile' when calling SecurityApi.patch_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_session_timer_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Firewall Session Timer Profile Binding Map
    # API will create or update Firewall Session Timer profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param policy_firewall_session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_firewall_session_timer_profile_binding_map(domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts = {})
      patch_policy_firewall_session_timer_profile_binding_map_with_http_info(domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Firewall Session Timer Profile Binding Map
    # API will create or update Firewall Session Timer profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param policy_firewall_session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_firewall_session_timer_profile_binding_map_with_http_info(domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_policy_firewall_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_policy_firewall_session_timer_profile_binding_map"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.patch_policy_firewall_session_timer_profile_binding_map"
      end
      # verify the required parameter 'firewall_session_timer_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_binding_map_id' when calling SecurityApi.patch_policy_firewall_session_timer_profile_binding_map"
      end
      # verify the required parameter 'policy_firewall_session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_session_timer_profile_binding_map' when calling SecurityApi.patch_policy_firewall_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps/{firewall-session-timer-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-session-timer-profile-binding-map-id' + '}', firewall_session_timer_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_policy_firewall_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service instance
    # Create Service Instance. Please note that, only display_name, description and deployment_spec_name are allowed to be modified in an exisiting entity. If the deployment spec name is changed, it will trigger the upgrade operation for the SVMs. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_service_instance(tier_0_id, locale_service_id, service_instance_id, policy_service_instance, opts = {})
      patch_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, policy_service_instance, opts)
      nil
    end

    # Create service instance
    # Create Service Instance. Please note that, only display_name, description and deployment_spec_name are allowed to be modified in an exisiting entity. If the deployment spec name is changed, it will trigger the upgrade operation for the SVMs. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, policy_service_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_policy_service_instance ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.patch_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.patch_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.patch_policy_service_instance"
      end
      # verify the required parameter 'policy_service_instance' is set
      if @api_client.config.client_side_validation && policy_service_instance.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_instance' when calling SecurityApi.patch_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/service-instances/{service-instance-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service profile
    # Create Service profile to specify vendor template attri- butes for a given 3rd party service.
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param policy_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_service_profile(service_reference_id, service_profile_id, policy_service_profile, opts = {})
      patch_policy_service_profile_with_http_info(service_reference_id, service_profile_id, policy_service_profile, opts)
      nil
    end

    # Create service profile
    # Create Service profile to specify vendor template attri- butes for a given 3rd party service.
    # @param service_reference_id Service reference id
    # @param service_profile_id Service profile id
    # @param policy_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_service_profile_with_http_info(service_reference_id, service_profile_id, policy_service_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_policy_service_profile ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling SecurityApi.patch_policy_service_profile"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling SecurityApi.patch_policy_service_profile"
      end
      # verify the required parameter 'policy_service_profile' is set
      if @api_client.config.client_side_validation && policy_service_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_profile' when calling SecurityApi.patch_policy_service_profile"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_policy_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyUrlCategorizationConfig
    # Creates/Updates a PolicyUrlCategorizationConfig. Creating or updating the PolicyUrlCategorizationConfig will activate or deactivate URL categorization for the given edge cluster. If the context_profiles field is empty, the edge cluster will detect all the categories of URLs. If context_profiles field has any context profiles, the edge cluster will detect only the categories listed within those context profiles. The context profiles should have attribute type URL_CATEGORY. The update_frequency specifies how frequently in minutes, the edge cluster will get updates about the URL data from the URL categorization cloud service. If the update_frequency is not specified, the default update frequency will be 30 min. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param policy_url_categorization_config 
    # @param [Hash] opts the optional parameters
    # @return [PolicyUrlCategorizationConfig]
    def patch_policy_url_categorization_config(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts = {})
      data, _status_code, _headers = patch_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts)
      data
    end

    # Create or Update PolicyUrlCategorizationConfig
    # Creates/Updates a PolicyUrlCategorizationConfig. Creating or updating the PolicyUrlCategorizationConfig will activate or deactivate URL categorization for the given edge cluster. If the context_profiles field is empty, the edge cluster will detect all the categories of URLs. If context_profiles field has any context profiles, the edge cluster will detect only the categories listed within those context profiles. The context profiles should have attribute type URL_CATEGORY. The update_frequency specifies how frequently in minutes, the edge cluster will get updates about the URL data from the URL categorization cloud service. If the update_frequency is not specified, the default update frequency will be 30 min. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param policy_url_categorization_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyUrlCategorizationConfig, Fixnum, Hash)>] PolicyUrlCategorizationConfig data, response status code and response headers
    def patch_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_policy_url_categorization_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SecurityApi.patch_policy_url_categorization_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling SecurityApi.patch_policy_url_categorization_config"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling SecurityApi.patch_policy_url_categorization_config"
      end
      # verify the required parameter 'url_categorization_config_id' is set
      if @api_client.config.client_side_validation && url_categorization_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'url_categorization_config_id' when calling SecurityApi.patch_policy_url_categorization_config"
      end
      # verify the required parameter 'policy_url_categorization_config' is set
      if @api_client.config.client_side_validation && policy_url_categorization_config.nil?
        fail ArgumentError, "Missing the required parameter 'policy_url_categorization_config' when calling SecurityApi.patch_policy_url_categorization_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'url-categorization-config-id' + '}', url_categorization_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_url_categorization_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyUrlCategorizationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_policy_url_categorization_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update redirection policy
    # Create or update the redirection policy. Performance Note: If you want to edit several rules in a redirection policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param redirection_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_redirection_policy(domain_id, redirection_policy_id, redirection_policy, opts = {})
      patch_redirection_policy_with_http_info(domain_id, redirection_policy_id, redirection_policy, opts)
      nil
    end

    # Create or update redirection policy
    # Create or update the redirection policy. Performance Note: If you want to edit several rules in a redirection policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param redirection_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_redirection_policy_with_http_info(domain_id, redirection_policy_id, redirection_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_redirection_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_redirection_policy"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling SecurityApi.patch_redirection_policy"
      end
      # verify the required parameter 'redirection_policy' is set
      if @api_client.config.client_side_validation && redirection_policy.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy' when calling SecurityApi.patch_redirection_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(redirection_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_redirection_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update redirection rule
    # Create a rule with the rule-id is not already present, otherwise update the rule. Performance Note: If you want to edit several rules in a redirection policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/redirection-policies/&lt;red-policy-id&gt; 
    # @param domain_id Domain id
    # @param redirection_policy_id RedirectionPolicy id
    # @param rule_id rule id
    # @param redirection_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_redirection_rule(domain_id, redirection_policy_id, rule_id, redirection_rule, opts = {})
      patch_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, redirection_rule, opts)
      nil
    end

    # Update redirection rule
    # Create a rule with the rule-id is not already present, otherwise update the rule. Performance Note: If you want to edit several rules in a redirection policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/redirection-policies/&amp;lt;red-policy-id&amp;gt; 
    # @param domain_id Domain id
    # @param redirection_policy_id RedirectionPolicy id
    # @param rule_id rule id
    # @param redirection_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, redirection_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_redirection_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_redirection_rule"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling SecurityApi.patch_redirection_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.patch_redirection_rule"
      end
      # verify the required parameter 'redirection_rule' is set
      if @api_client.config.client_side_validation && redirection_rule.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_rule' when calling SecurityApi.patch_redirection_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(redirection_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_redirection_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create a security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [SecurityFeatures]
    def patch_security_feature(tier_1_id, security_features, opts = {})
      data, _status_code, _headers = patch_security_feature_with_http_info(tier_1_id, security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create a security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def patch_security_feature_with_http_info(tier_1_id, security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.patch_security_feature"
      end
      # verify the required parameter 'security_features' is set
      if @api_client.config.client_side_validation && security_features.nil?
        fail ArgumentError, "Missing the required parameter 'security_features' when calling SecurityApi.patch_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch security policy
    # Patch the security policy for a domain. If a security policy for the given security-policy-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_security_policy_for_domain(domain_id, security_policy_id, security_policy, opts = {})
      patch_security_policy_for_domain_with_http_info(domain_id, security_policy_id, security_policy, opts)
      nil
    end

    # Patch security policy
    # Patch the security policy for a domain. If a security policy for the given security-policy-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_security_policy_for_domain_with_http_info(domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_security_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.patch_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling SecurityApi.patch_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a rule
    # Patch the rule. If Rule corresponding to the the given rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/security-policies/&lt;security-policy-id&gt; 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_security_rule(domain_id, security_policy_id, rule_id, rule, opts = {})
      patch_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts)
      nil
    end

    # Patch a rule
    # Patch the rule. If Rule corresponding to the the given rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace. Performance Note: If you want to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/security-policies/&amp;lt;security-policy-id&amp;gt; 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.patch_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.patch_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.patch_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.patch_security_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service chain
    # Create Service chain representing the sequence in which 3rd party services must be consumed. 
    # @param service_chain_id Service chain id
    # @param policy_service_chain 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_service_chain(service_chain_id, policy_service_chain, opts = {})
      patch_service_chain_with_http_info(service_chain_id, policy_service_chain, opts)
      nil
    end

    # Create service chain
    # Create Service chain representing the sequence in which 3rd party services must be consumed. 
    # @param service_chain_id Service chain id
    # @param policy_service_chain 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_service_chain_with_http_info(service_chain_id, policy_service_chain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_service_chain ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling SecurityApi.patch_service_chain"
      end
      # verify the required parameter 'policy_service_chain' is set
      if @api_client.config.client_side_validation && policy_service_chain.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_chain' when calling SecurityApi.patch_service_chain"
      end
      # resource path
      local_var_path = '/infra/service-chains/{service-chain-id}'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_chain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_service_chain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service instance endpoint
    # Create Service instance endpoint. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Service instance endpoint id
    # @param service_instance_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_service_instance_endpoint(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, service_instance_endpoint, opts = {})
      patch_service_instance_endpoint_with_http_info(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, service_instance_endpoint, opts)
      nil
    end

    # Create service instance endpoint
    # Create Service instance endpoint. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Service instance endpoint id
    # @param service_instance_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_service_instance_endpoint_with_http_info(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, service_instance_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_service_instance_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.patch_service_instance_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.patch_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.patch_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_endpoint_id' is set
      if @api_client.config.client_side_validation && service_instance_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_endpoint_id' when calling SecurityApi.patch_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_endpoint' is set
      if @api_client.config.client_side_validation && service_instance_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_endpoint' when calling SecurityApi.patch_service_instance_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}/service-instance-endpoints/{service-instance-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s).sub('{' + 'service-instance-endpoint-id' + '}', service_instance_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_instance_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_service_instance_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service reference
    # Create Service Reference representing the intent to consume a given 3rd party service. 
    # @param service_reference_id Service reference id
    # @param service_reference 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_service_reference(service_reference_id, service_reference, opts = {})
      patch_service_reference_with_http_info(service_reference_id, service_reference, opts)
      nil
    end

    # Create service reference
    # Create Service Reference representing the intent to consume a given 3rd party service. 
    # @param service_reference_id Service reference id
    # @param service_reference 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_service_reference_with_http_info(service_reference_id, service_reference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_service_reference ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling SecurityApi.patch_service_reference"
      end
      # verify the required parameter 'service_reference' is set
      if @api_client.config.client_side_validation && service_reference.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference' when calling SecurityApi.patch_service_reference"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_reference)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_service_reference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch service insertion exclusion list for security policy
    # Patch service insertion exclusion list for security policy. 
    # @param policy_si_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_si_exclude_list(policy_si_exclude_list, opts = {})
      patch_si_exclude_list_with_http_info(policy_si_exclude_list, opts)
      nil
    end

    # Patch service insertion exclusion list for security policy
    # Patch service insertion exclusion list for security policy. 
    # @param policy_si_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_si_exclude_list_with_http_info(policy_si_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_si_exclude_list ...'
      end
      # verify the required parameter 'policy_si_exclude_list' is set
      if @api_client.config.client_side_validation && policy_si_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_si_exclude_list' when calling SecurityApi.patch_si_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/service-insertion/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_si_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_si_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update service insertion status configuration
    # Update service insertion status. 
    # @param policy_si_status_configuration 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_si_status(policy_si_status_configuration, opts = {})
      patch_si_status_with_http_info(policy_si_status_configuration, opts)
      nil
    end

    # Update service insertion status configuration
    # Update service insertion status. 
    # @param policy_si_status_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_si_status_with_http_info(policy_si_status_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_si_status ...'
      end
      # verify the required parameter 'policy_si_status_configuration' is set
      if @api_client.config.client_side_validation && policy_si_status_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'policy_si_status_configuration' when calling SecurityApi.patch_si_status"
      end
      # resource path
      local_var_path = '/infra/settings/service-insertion/security/status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_si_status_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_si_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch idfw configuration for standalone host
    # Patch identity firewall configuration for standalone host
    # @param standalone_host_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_standalone_host_idfw_configuration(standalone_host_idfw_configuration, opts = {})
      patch_standalone_host_idfw_configuration_with_http_info(standalone_host_idfw_configuration, opts)
      nil
    end

    # Patch idfw configuration for standalone host
    # Patch identity firewall configuration for standalone host
    # @param standalone_host_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_standalone_host_idfw_configuration_with_http_info(standalone_host_idfw_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_standalone_host_idfw_configuration ...'
      end
      # verify the required parameter 'standalone_host_idfw_configuration' is set
      if @api_client.config.client_side_validation && standalone_host_idfw_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'standalone_host_idfw_configuration' when calling SecurityApi.patch_standalone_host_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/standalone-host-switch-setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(standalone_host_idfw_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_standalone_host_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier0_flood_protection_profile_binding_map(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      patch_tier0_flood_protection_profile_binding_map_with_http_info(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier0_flood_protection_profile_binding_map_with_http_info(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_tier0_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityApi.patch_tier0_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.patch_tier0_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityApi.patch_tier0_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_tier0_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier0_local_services_session_timer_profile_binding_map(tier0_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      patch_tier0_local_services_session_timer_profile_binding_map_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier0_local_services_session_timer_profile_binding_map_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_tier0_local_services_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityApi.patch_tier0_local_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.patch_tier0_local_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.patch_tier0_local_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityApi.patch_tier0_local_services_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_tier0_local_services_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier0_locale_services_flood_protection_profile_binding_map(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      patch_tier0_locale_services_flood_protection_profile_binding_map_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier0_locale_services_flood_protection_profile_binding_map_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_tier0_locale_services_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityApi.patch_tier0_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.patch_tier0_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.patch_tier0_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityApi.patch_tier0_locale_services_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_tier0_locale_services_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create a T0 security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_0_id tier0 id
    # @param tier0_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Tier0SecurityFeatures]
    def patch_tier0_security_feature(tier_0_id, tier0_security_features, opts = {})
      data, _status_code, _headers = patch_tier0_security_feature_with_http_info(tier_0_id, tier0_security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create a T0 security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_0_id tier0 id
    # @param tier0_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tier0SecurityFeatures, Fixnum, Hash)>] Tier0SecurityFeatures data, response status code and response headers
    def patch_tier0_security_feature_with_http_info(tier_0_id, tier0_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_tier0_security_feature ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.patch_tier0_security_feature"
      end
      # verify the required parameter 'tier0_security_features' is set
      if @api_client.config.client_side_validation && tier0_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_security_features' when calling SecurityApi.patch_tier0_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/security-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tier0_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tier0SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_tier0_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier0_session_timer_profile_binding_map(tier0_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      patch_tier0_session_timer_profile_binding_map_with_http_info(tier0_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier0_session_timer_profile_binding_map_with_http_info(tier0_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_tier0_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityApi.patch_tier0_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.patch_tier0_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityApi.patch_tier0_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_tier0_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Tier1 BYOD service instance
    # Create Tier1 BYOD Service Instance which represents instance of service definition created on manager. 
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Tier1 BYOD Service instance id
    # @param byod_policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier1_byod_policy_service_instance(tier_1_id, locale_service_id, service_instance_id, byod_policy_service_instance, opts = {})
      patch_tier1_byod_policy_service_instance_with_http_info(tier_1_id, locale_service_id, service_instance_id, byod_policy_service_instance, opts)
      nil
    end

    # Create Tier1 BYOD service instance
    # Create Tier1 BYOD Service Instance which represents instance of service definition created on manager. 
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Tier1 BYOD Service instance id
    # @param byod_policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier1_byod_policy_service_instance_with_http_info(tier_1_id, locale_service_id, service_instance_id, byod_policy_service_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_tier1_byod_policy_service_instance ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.patch_tier1_byod_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.patch_tier1_byod_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.patch_tier1_byod_policy_service_instance"
      end
      # verify the required parameter 'byod_policy_service_instance' is set
      if @api_client.config.client_side_validation && byod_policy_service_instance.nil?
        fail ArgumentError, "Missing the required parameter 'byod_policy_service_instance' when calling SecurityApi.patch_tier1_byod_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(byod_policy_service_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_tier1_byod_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier1_flood_protection_profile_binding_map(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      patch_tier1_flood_protection_profile_binding_map_with_http_info(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier1_flood_protection_profile_binding_map_with_http_info(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_tier1_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.patch_tier1_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.patch_tier1_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityApi.patch_tier1_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_tier1_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier1_locale_services_flood_protection_profile_binding_map(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      patch_tier1_locale_services_flood_protection_profile_binding_map_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      nil
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier1_locale_services_flood_protection_profile_binding_map_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_tier1_locale_services_flood_protection_profile_binding_map ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityApi.patch_tier1_locale_services_flood_protection_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_tier1_locale_services_flood_protection_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier1_locale_services_session_timer_profile_binding_map(tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      patch_tier1_locale_services_session_timer_profile_binding_map_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier1_locale_services_session_timer_profile_binding_map_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_tier1_locale_services_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityApi.patch_tier1_locale_services_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_tier1_locale_services_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Tier1 service instance
    # Create Tier1 Service Instance. Please note that, only display_name, description and deployment_spec_name are allowed to be modified in an exisiting entity. If the deployment spec name is changed, it will trigger the upgrade operation for the SVMs. 
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Tier1 Service instance id
    # @param policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier1_policy_service_instance(tier_1_id, locale_service_id, service_instance_id, policy_service_instance, opts = {})
      patch_tier1_policy_service_instance_with_http_info(tier_1_id, locale_service_id, service_instance_id, policy_service_instance, opts)
      nil
    end

    # Create Tier1 service instance
    # Create Tier1 Service Instance. Please note that, only display_name, description and deployment_spec_name are allowed to be modified in an exisiting entity. If the deployment spec name is changed, it will trigger the upgrade operation for the SVMs. 
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Tier1 Service instance id
    # @param policy_service_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier1_policy_service_instance_with_http_info(tier_1_id, locale_service_id, service_instance_id, policy_service_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_tier1_policy_service_instance ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.patch_tier1_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.patch_tier1_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.patch_tier1_policy_service_instance"
      end
      # verify the required parameter 'policy_service_instance' is set
      if @api_client.config.client_side_validation && policy_service_instance.nil?
        fail ArgumentError, "Missing the required parameter 'policy_service_instance' when calling SecurityApi.patch_tier1_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/service-instances/{service-instance-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_service_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_tier1_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration for Tier1 Segment
    # Create a Tier1 Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityFeatures]
    def patch_tier1_segment_security_feature(tier_1_id, segment_id, segment_security_features, opts = {})
      data, _status_code, _headers = patch_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, segment_security_features, opts)
      data
    end

    # Create or Update security configuration for Tier1 Segment
    # Create a Tier1 Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def patch_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, segment_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_tier1_segment_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.patch_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SecurityApi.patch_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_security_features' is set
      if @api_client.config.client_side_validation && segment_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_features' when calling SecurityApi.patch_tier1_segment_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_tier1_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Tier1 service instance endpoint
    # Create Tier1 Service instance endpoint. 
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Tier1 Service instance endpoint id
    # @param service_instance_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier1_service_instance_endpoint(tier_1_id, locale_service_id, service_instance_id, service_instance_endpoint_id, service_instance_endpoint, opts = {})
      patch_tier1_service_instance_endpoint_with_http_info(tier_1_id, locale_service_id, service_instance_id, service_instance_endpoint_id, service_instance_endpoint, opts)
      nil
    end

    # Create Tier1 service instance endpoint
    # Create Tier1 Service instance endpoint. 
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Tier1 Service instance endpoint id
    # @param service_instance_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier1_service_instance_endpoint_with_http_info(tier_1_id, locale_service_id, service_instance_id, service_instance_endpoint_id, service_instance_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_tier1_service_instance_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.patch_tier1_service_instance_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.patch_tier1_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.patch_tier1_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_endpoint_id' is set
      if @api_client.config.client_side_validation && service_instance_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_endpoint_id' when calling SecurityApi.patch_tier1_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_endpoint' is set
      if @api_client.config.client_side_validation && service_instance_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_endpoint' when calling SecurityApi.patch_tier1_service_instance_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}/service-instance-endpoints/{service-instance-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s).sub('{' + 'service-instance-endpoint-id' + '}', service_instance_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_instance_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_tier1_service_instance_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier1_session_timer_profile_binding_map(tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      patch_tier1_session_timer_profile_binding_map_with_http_info(tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      nil
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier1_session_timer_profile_binding_map_with_http_info(tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_tier1_session_timer_profile_binding_map ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.patch_tier1_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.patch_tier1_session_timer_profile_binding_map"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityApi.patch_tier1_session_timer_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_tier1_session_timer_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update virtual endpoint
    # Create or update virtual endpoint. 
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param virtual_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [VirtualEndpoint]
    def patch_tier1_virtual_endpoint(tier_1_id, locale_service_id, virtual_endpoint_id, virtual_endpoint, opts = {})
      data, _status_code, _headers = patch_tier1_virtual_endpoint_with_http_info(tier_1_id, locale_service_id, virtual_endpoint_id, virtual_endpoint, opts)
      data
    end

    # Create or update virtual endpoint
    # Create or update virtual endpoint. 
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param virtual_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VirtualEndpoint, Fixnum, Hash)>] VirtualEndpoint data, response status code and response headers
    def patch_tier1_virtual_endpoint_with_http_info(tier_1_id, locale_service_id, virtual_endpoint_id, virtual_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_tier1_virtual_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.patch_tier1_virtual_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.patch_tier1_virtual_endpoint"
      end
      # verify the required parameter 'virtual_endpoint_id' is set
      if @api_client.config.client_side_validation && virtual_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_endpoint_id' when calling SecurityApi.patch_tier1_virtual_endpoint"
      end
      # verify the required parameter 'virtual_endpoint' is set
      if @api_client.config.client_side_validation && virtual_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_endpoint' when calling SecurityApi.patch_tier1_virtual_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/endpoints/virtual-endpoints/{virtual-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'virtual-endpoint-id' + '}', virtual_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(virtual_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_tier1_virtual_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update TLS policy
    # Update the TLS policy. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a TLS policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param policy_id Firewall TLS inspection poicy id
    # @param tls_policy 
    # @param [Hash] opts the optional parameters
    # @return [TlsPolicy]
    def patch_tls_policy(policy_id, tls_policy, opts = {})
      data, _status_code, _headers = patch_tls_policy_with_http_info(policy_id, tls_policy, opts)
      data
    end

    # Update TLS policy
    # Update the TLS policy. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a TLS policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param policy_id Firewall TLS inspection poicy id
    # @param tls_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsPolicy, Fixnum, Hash)>] TlsPolicy data, response status code and response headers
    def patch_tls_policy_with_http_info(policy_id, tls_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_tls_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.patch_tls_policy"
      end
      # verify the required parameter 'tls_policy' is set
      if @api_client.config.client_side_validation && tls_policy.nil?
        fail ArgumentError, "Missing the required parameter 'tls_policy' when calling SecurityApi.patch_tls_policy"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_tls_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Tls profile.
    # Create a Tls profile with values provided. It creates profile based on the resource_type in the payload. Each action profile supports the following 3 pre-defined config setting defaults:     Balanced, High Fidelity and High Security.  1 - External Profile Balanced (default) Sample intent path: /infra/tls-inspection-action-profiles/external-balanced-profile API payload: <pre> {     \"tls_config_setting\": \"BALANCED\",     \"resource_type\": \"TlsInspectionExternalProfile\",     \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",     \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\" } </pre> Profile with default settings: <pre> {     \"tls_config_setting\": \"BALANCED\",     \"invalid_cert_action\": \"ALLOW\",     \"decryption_fail_action\": \"BYPASS\",     \"crypto_enforcement\": \"ENFORCE\",     \"client_min_tls_version\": \"TLS_V1_1\",     \"client_max_tls_version\": \"TLS_V1_2\",     \"server_min_tls_version\": \"TLS_V1_1\",     \"server_max_tls_version\": \"TLS_V1_2\",     \"client_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",         \"TLS_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_RSA_WITH_AES_256_CBC_SHA256\"     ],     \"server_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",         \"TLS_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_RSA_WITH_AES_256_CBC_SHA256\"     ],     \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",     \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\",     \"ocsp_must_staple\": false,     \"resource_type\": \"TlsInspectionExternalProfile\",     \"id\": \"external-balanced-profile\",     \"display_name\": \"external-balanced-profile\",     \"path\": \"/infra/tls-inspection-action-profiles/external-balanced-profile\",     \"relative_path\": \"external-balanced-profile\",     \"parent_path\": \"/infra\",     \"unique_id\": \"bb236080-e49d-4475-9eb3-b749b075164a\",     \"marked_for_delete\": false,     \"overridden\": false,     \"trusted_ca_bundles\": [         \"/infra/cabundles/default_trusted_public_ca_bundle\"     ],     \"crls\": [         \"/infra/crls/nsx_default_public_crl\"     ],     \"idle_connection_timeout\": 5400,     \"_system_owned\": false,     \"_protection\": \"NOT_PROTECTED\",     \"_create_user\": \"admin\",     \"_create_time\": 1622225641015,     \"_last_modified_user\": \"admin\",     \"_last_modified_time\": 1622225641015,     \"_revision\": 0 } </pre>  2 - External Profile High Fidelity Sample intent path: /infra/tls-inspection-action-profiles/external-high-fidelity-profile Sample intent path: <pre> {     \"tls_config_setting\": \"HIGH_FIDELITY\",     \"resource_type\": \"TlsInspectionExternalProfile\",     \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",     \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\" } </pre> Profile with default settings: <pre> {     \"tls_config_setting\": \"HIGH_FIDELITY\",     \"invalid_cert_action\": \"ALLOW\",     \"decryption_fail_action\": \"BYPASS\",     \"crypto_enforcement\": \"TRANSPARENT\",     \"client_min_tls_version\": \"\",     \"client_max_tls_version\": \"\",     \"server_min_tls_version\": \"\",     \"server_max_tls_version\": \"\",     \"client_cipher_suite\": [],     \"server_cipher_suite\": [],     \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",     \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\",     \"ocsp_must_staple\": false,     \"resource_type\": \"TlsInspectionExternalProfile\",     \"id\": \"external-high-fidelity-profile\",     \"display_name\": \"external-high-fidelity-profile\",     \"path\": \"/infra/tls-inspection-action-profiles/external-high-fidelity-profile\",     \"relative_path\": \"external-high-fidelity-profile\",     \"parent_path\": \"/infra\",     \"unique_id\": \"bb6c8604-c8eb-44dd-aded-7407e0ca887c\",     \"marked_for_delete\": false,     \"overridden\": false,     \"trusted_ca_bundles\": [         \"/infra/cabundles/default_trusted_public_ca_bundle\"     ],     \"crls\": [         \"/infra/crls/nsx_default_public_crl\"     ],     \"idle_connection_timeout\": 5400,     \"_system_owned\": false,     \"_protection\": \"NOT_PROTECTED\",     \"_create_user\": \"admin\",     \"_create_time\": 1622225537386,     \"_last_modified_user\": \"admin\",     \"_last_modified_time\": 1622225537386,     \"_revision\": 0 } </pre>  3 - External Profile High Security Sample intent path:/infra/tls-inspection-action-profiles/external-high-security-profile Sample intent path: <pre> {     \"tls_config_setting\": \"HIGH_SECURITY\",     \"resource_type\": \"TlsInspectionExternalProfile\",     \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",     \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\" } </pre> Profile with default settings: <pre> {    \"tls_config_setting\": \"HIGH_SECURITY\",    \"invalid_cert_action\": \"BLOCK\",    \"decryption_fail_action\": \"BLOCK\",    \"crypto_enforcement\": \"ENFORCE\",    \"client_min_tls_version\": \"TLS_V1_2\",    \"client_max_tls_version\": \"TLS_V1_2\",    \"server_min_tls_version\": \"TLS_V1_2\",    \"server_max_tls_version\": \"TLS_V1_2\",    \"client_cipher_suite\": [        \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",        \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\"    ],    \"server_cipher_suite\": [        \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",        \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\"    ],    \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",    \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\",    \"ocsp_must_staple\": false,    \"resource_type\": \"TlsInspectionExternalProfile\",    \"id\": \"external-high-security-profile\",    \"display_name\": \"external-high-security-profile\",    \"path\": \"/infra/tls-inspection-action-profiles/external-high-security-profile\",    \"relative_path\": \"external-high-security-profile\",    \"parent_path\": \"/infra\",    \"unique_id\": \"e19cbc40-c679-4f32-9e40-aa5eedf7f254\",    \"marked_for_delete\": false,    \"overridden\": false,    \"trusted_ca_bundles\": [        \"/infra/cabundles/default_trusted_public_ca_bundle\"    ],    \"crls\": [        \"/infra/crls/nsx_default_public_crl\"    ],    \"idle_connection_timeout\": 5400,    \"_system_owned\": false,    \"_protection\": \"NOT_PROTECTED\",    \"_create_user\": \"admin\",    \"_create_time\": 1622141786963,    \"_last_modified_user\": \"admin\",    \"_last_modified_time\": 1622225387352,    \"_revision\": 4 } </pre>  4 - Internal Profile Balanced Sample intent path:/infra/tls-inspection-action-profiles/internal-balanced-profile Sample intent path: <pre> {     \"tls_config_setting\": \"BALANCED\",     \"resource_type\": \"TlsInspectionInternalProfile\",     \"server_certs_key\": [\"/infra/certificates/server-cert-1\"],     \"default_cert_key\": \"/infra/certificates/server-cert-1\" } </pre> Profile with default settings: <pre> {     \"tls_config_setting\": \"BALANCED\",     \"decryption_fail_action\": \"BYPASS\",     \"crypto_enforcement\": \"ENFORCE\",     \"client_min_tls_version\": \"TLS_V1_1\",     \"client_max_tls_version\": \"TLS_V1_2\",     \"server_min_tls_version\": \"TLS_V1_1\",     \"server_max_tls_version\": \"TLS_V1_2\",     \"client_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",         \"TLS_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_RSA_WITH_AES_256_CBC_SHA256\"     ],     \"server_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",         \"TLS_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_RSA_WITH_AES_256_CBC_SHA256\"     ],     \"server_certs_key\": [         \"/infra/certificates/server-cert-1\"     ],     \"default_cert_key\": \"/infra/certificates/server-cert-1\",     \"ocsp_must_staple\": false,     \"certificate_validation\": false,     \"resource_type\": \"TlsInspectionInternalProfile\",     \"id\": \"internal-balanced-profile\",     \"display_name\": \"internal-balanced-profile\",     \"path\": \"/infra/tls-inspection-action-profiles/internal-balanced-profile\",     \"relative_path\": \"internal-balanced-profile\",     \"parent_path\": \"/infra\",     \"unique_id\": \"b8486763-843a-4894-8dfd-5bceebb10cd3\",     \"marked_for_delete\": false,     \"overridden\": false,     \"trusted_ca_bundles\": [         \"/infra/cabundles/default_trusted_public_ca_bundle\"     ],     \"crls\": [         \"/infra/crls/nsx_default_public_crl\"     ],     \"idle_connection_timeout\": 5400,     \"_system_owned\": false,     \"_protection\": \"NOT_PROTECTED\",     \"_create_user\": \"admin\",     \"_create_time\": 1622071598527,     \"_last_modified_user\": \"admin\",     \"_last_modified_time\": 1622071598527,     \"_revision\": 0 } </pre>  5 - Internal Profile High Fidelity Sample intent path:/infra/tls-inspection-action-profiles/internal-high-fidelity-profile Sample intent path: <pre> {     \"tls_config_setting\": \"HIGH_FIDELITY\",     \"resource_type\": \"TlsInspectionInternalProfile\",     \"server_certs_key\": [\"/infra/certificates/server-cert-1\"],     \"default_cert_key\": \"/infra/certificates/server-cert-1\" } </pre> Profile with default settings: <pre> {     \"tls_config_setting\": \"HIGH_FIDELITY\",     \"decryption_fail_action\": \"BYPASS\",     \"crypto_enforcement\": \"TRANSPARENT\",     \"client_min_tls_version\": \"\",     \"client_max_tls_version\": \"\",     \"server_min_tls_version\": \"\",     \"server_max_tls_version\": \"\",     \"client_cipher_suite\": [],     \"server_cipher_suite\": [],     \"server_certs_key\": [         \"/infra/certificates/server-cert-1\"     ],     \"default_cert_key\": \"/infra/certificates/server-cert-1\",     \"ocsp_must_staple\": false,     \"certificate_validation\": false,     \"resource_type\": \"TlsInspectionInternalProfile\",     \"id\": \"internal-high-fidelity-profile\",     \"display_name\": \"internal-high-fidelity-profile\",     \"path\": \"/infra/tls-inspection-action-profiles/internal-high-fidelity-profile\",     \"relative_path\": \"internal-high-fidelity-profile\",     \"parent_path\": \"/infra\",     \"unique_id\": \"27609d17-e642-4a7a-b414-176b3f7eca8d\",     \"marked_for_delete\": false,     \"overridden\": false,     \"trusted_ca_bundles\": [         \"/infra/cabundles/default_trusted_public_ca_bundle\"     ],     \"crls\": [         \"/infra/crls/nsx_default_public_crl\"     ],     \"idle_connection_timeout\": 5400,     \"_system_owned\": false,     \"_protection\": \"NOT_PROTECTED\",     \"_create_user\": \"admin\",     \"_create_time\": 1622071452299,     \"_last_modified_user\": \"admin\",     \"_last_modified_time\": 1622071452299,     \"_revision\": 0 } </pre>  6 - Internal Profile High Security Sample intent path:/infra/tls-inspection-action-profiles/internal-high-security-profile Sample intent path: <pre> {     \"tls_config_setting\": \"HIGH_SECURITY\",     \"resource_type\": \"TlsInspectionInternalProfile\",     \"server_certs_key\": [\"/infra/certificates/server-cert-1\"],     \"default_cert_key\": \"/infra/certificates/server-cert-1\" } </pre>  Profile with default settings: <pre> {     \"tls_config_setting\": \"HIGH_SECURITY\",     \"decryption_fail_action\": \"BLOCK\",     \"crypto_enforcement\": \"ENFORCE\",     \"client_min_tls_version\": \"TLS_V1_2\",     \"client_max_tls_version\": \"TLS_V1_2\",     \"server_min_tls_version\": \"TLS_V1_2\",     \"server_max_tls_version\": \"TLS_V1_2\",     \"client_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\"     ],     \"server_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\"     ],     \"server_certs_key\": [         \"/infra/certificates/server-cert-1\"     ],     \"default_cert_key\": \"/infra/certificates/server-cert-1\",     \"ocsp_must_staple\": false,     \"certificate_validation\": false,     \"resource_type\": \"TlsInspectionInternalProfile\",     \"id\": \"internal-high-security-profile\",     \"display_name\": \"internal-high-security-profile\",     \"path\": \"/infra/tls-inspection-action-profiles/internal-high-security-profile\",     \"relative_path\": \"internal-high-security-profile\",     \"parent_path\": \"/infra\",     \"unique_id\": \"52e3e7e8-718d-4eaf-a177-501f196c421a\",     \"marked_for_delete\": false,     \"overridden\": false,     \"trusted_ca_bundles\": [         \"/infra/cabundles/default_trusted_public_ca_bundle\"     ],     \"crls\": [         \"/infra/crls/nsx_default_public_crl\"     ],     \"idle_connection_timeout\": 5400,     \"_system_owned\": false,     \"_protection\": \"NOT_PROTECTED\",     \"_create_user\": \"admin\",     \"_create_time\": 1622071359539,     \"_last_modified_user\": \"admin\",     \"_last_modified_time\": 1622071359539,     \"_revision\": 0 } </pre> 
    # @param action_profile_id 
    # @param tls_profile 
    # @param [Hash] opts the optional parameters
    # @return [TlsProfile]
    def patch_tls_profile(action_profile_id, tls_profile, opts = {})
      data, _status_code, _headers = patch_tls_profile_with_http_info(action_profile_id, tls_profile, opts)
      data
    end

    # Create a Tls profile.
    # Create a Tls profile with values provided. It creates profile based on the resource_type in the payload. Each action profile supports the following 3 pre-defined config setting defaults:     Balanced, High Fidelity and High Security.  1 - External Profile Balanced (default) Sample intent path: /infra/tls-inspection-action-profiles/external-balanced-profile API payload: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;BALANCED\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,     \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,     \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot; } &lt;/pre&gt; Profile with default settings: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;BALANCED\&quot;,     \&quot;invalid_cert_action\&quot;: \&quot;ALLOW\&quot;,     \&quot;decryption_fail_action\&quot;: \&quot;BYPASS\&quot;,     \&quot;crypto_enforcement\&quot;: \&quot;ENFORCE\&quot;,     \&quot;client_min_tls_version\&quot;: \&quot;TLS_V1_1\&quot;,     \&quot;client_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;server_min_tls_version\&quot;: \&quot;TLS_V1_1\&quot;,     \&quot;server_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;client_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_256_CBC_SHA256\&quot;     ],     \&quot;server_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_256_CBC_SHA256\&quot;     ],     \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,     \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot;,     \&quot;ocsp_must_staple\&quot;: false,     \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,     \&quot;id\&quot;: \&quot;external-balanced-profile\&quot;,     \&quot;display_name\&quot;: \&quot;external-balanced-profile\&quot;,     \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/external-balanced-profile\&quot;,     \&quot;relative_path\&quot;: \&quot;external-balanced-profile\&quot;,     \&quot;parent_path\&quot;: \&quot;/infra\&quot;,     \&quot;unique_id\&quot;: \&quot;bb236080-e49d-4475-9eb3-b749b075164a\&quot;,     \&quot;marked_for_delete\&quot;: false,     \&quot;overridden\&quot;: false,     \&quot;trusted_ca_bundles\&quot;: [         \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;     ],     \&quot;crls\&quot;: [         \&quot;/infra/crls/nsx_default_public_crl\&quot;     ],     \&quot;idle_connection_timeout\&quot;: 5400,     \&quot;_system_owned\&quot;: false,     \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,     \&quot;_create_user\&quot;: \&quot;admin\&quot;,     \&quot;_create_time\&quot;: 1622225641015,     \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,     \&quot;_last_modified_time\&quot;: 1622225641015,     \&quot;_revision\&quot;: 0 } &lt;/pre&gt;  2 - External Profile High Fidelity Sample intent path: /infra/tls-inspection-action-profiles/external-high-fidelity-profile Sample intent path: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_FIDELITY\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,     \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,     \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot; } &lt;/pre&gt; Profile with default settings: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_FIDELITY\&quot;,     \&quot;invalid_cert_action\&quot;: \&quot;ALLOW\&quot;,     \&quot;decryption_fail_action\&quot;: \&quot;BYPASS\&quot;,     \&quot;crypto_enforcement\&quot;: \&quot;TRANSPARENT\&quot;,     \&quot;client_min_tls_version\&quot;: \&quot;\&quot;,     \&quot;client_max_tls_version\&quot;: \&quot;\&quot;,     \&quot;server_min_tls_version\&quot;: \&quot;\&quot;,     \&quot;server_max_tls_version\&quot;: \&quot;\&quot;,     \&quot;client_cipher_suite\&quot;: [],     \&quot;server_cipher_suite\&quot;: [],     \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,     \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot;,     \&quot;ocsp_must_staple\&quot;: false,     \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,     \&quot;id\&quot;: \&quot;external-high-fidelity-profile\&quot;,     \&quot;display_name\&quot;: \&quot;external-high-fidelity-profile\&quot;,     \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/external-high-fidelity-profile\&quot;,     \&quot;relative_path\&quot;: \&quot;external-high-fidelity-profile\&quot;,     \&quot;parent_path\&quot;: \&quot;/infra\&quot;,     \&quot;unique_id\&quot;: \&quot;bb6c8604-c8eb-44dd-aded-7407e0ca887c\&quot;,     \&quot;marked_for_delete\&quot;: false,     \&quot;overridden\&quot;: false,     \&quot;trusted_ca_bundles\&quot;: [         \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;     ],     \&quot;crls\&quot;: [         \&quot;/infra/crls/nsx_default_public_crl\&quot;     ],     \&quot;idle_connection_timeout\&quot;: 5400,     \&quot;_system_owned\&quot;: false,     \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,     \&quot;_create_user\&quot;: \&quot;admin\&quot;,     \&quot;_create_time\&quot;: 1622225537386,     \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,     \&quot;_last_modified_time\&quot;: 1622225537386,     \&quot;_revision\&quot;: 0 } &lt;/pre&gt;  3 - External Profile High Security Sample intent path:/infra/tls-inspection-action-profiles/external-high-security-profile Sample intent path: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_SECURITY\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,     \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,     \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot; } &lt;/pre&gt; Profile with default settings: &lt;pre&gt; {    \&quot;tls_config_setting\&quot;: \&quot;HIGH_SECURITY\&quot;,    \&quot;invalid_cert_action\&quot;: \&quot;BLOCK\&quot;,    \&quot;decryption_fail_action\&quot;: \&quot;BLOCK\&quot;,    \&quot;crypto_enforcement\&quot;: \&quot;ENFORCE\&quot;,    \&quot;client_min_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,    \&quot;client_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,    \&quot;server_min_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,    \&quot;server_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,    \&quot;client_cipher_suite\&quot;: [        \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,        \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;    ],    \&quot;server_cipher_suite\&quot;: [        \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,        \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;    ],    \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,    \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot;,    \&quot;ocsp_must_staple\&quot;: false,    \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,    \&quot;id\&quot;: \&quot;external-high-security-profile\&quot;,    \&quot;display_name\&quot;: \&quot;external-high-security-profile\&quot;,    \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/external-high-security-profile\&quot;,    \&quot;relative_path\&quot;: \&quot;external-high-security-profile\&quot;,    \&quot;parent_path\&quot;: \&quot;/infra\&quot;,    \&quot;unique_id\&quot;: \&quot;e19cbc40-c679-4f32-9e40-aa5eedf7f254\&quot;,    \&quot;marked_for_delete\&quot;: false,    \&quot;overridden\&quot;: false,    \&quot;trusted_ca_bundles\&quot;: [        \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;    ],    \&quot;crls\&quot;: [        \&quot;/infra/crls/nsx_default_public_crl\&quot;    ],    \&quot;idle_connection_timeout\&quot;: 5400,    \&quot;_system_owned\&quot;: false,    \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,    \&quot;_create_user\&quot;: \&quot;admin\&quot;,    \&quot;_create_time\&quot;: 1622141786963,    \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,    \&quot;_last_modified_time\&quot;: 1622225387352,    \&quot;_revision\&quot;: 4 } &lt;/pre&gt;  4 - Internal Profile Balanced Sample intent path:/infra/tls-inspection-action-profiles/internal-balanced-profile Sample intent path: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;BALANCED\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;server_certs_key\&quot;: [\&quot;/infra/certificates/server-cert-1\&quot;],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot; } &lt;/pre&gt; Profile with default settings: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;BALANCED\&quot;,     \&quot;decryption_fail_action\&quot;: \&quot;BYPASS\&quot;,     \&quot;crypto_enforcement\&quot;: \&quot;ENFORCE\&quot;,     \&quot;client_min_tls_version\&quot;: \&quot;TLS_V1_1\&quot;,     \&quot;client_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;server_min_tls_version\&quot;: \&quot;TLS_V1_1\&quot;,     \&quot;server_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;client_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_256_CBC_SHA256\&quot;     ],     \&quot;server_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_256_CBC_SHA256\&quot;     ],     \&quot;server_certs_key\&quot;: [         \&quot;/infra/certificates/server-cert-1\&quot;     ],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot;,     \&quot;ocsp_must_staple\&quot;: false,     \&quot;certificate_validation\&quot;: false,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;id\&quot;: \&quot;internal-balanced-profile\&quot;,     \&quot;display_name\&quot;: \&quot;internal-balanced-profile\&quot;,     \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/internal-balanced-profile\&quot;,     \&quot;relative_path\&quot;: \&quot;internal-balanced-profile\&quot;,     \&quot;parent_path\&quot;: \&quot;/infra\&quot;,     \&quot;unique_id\&quot;: \&quot;b8486763-843a-4894-8dfd-5bceebb10cd3\&quot;,     \&quot;marked_for_delete\&quot;: false,     \&quot;overridden\&quot;: false,     \&quot;trusted_ca_bundles\&quot;: [         \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;     ],     \&quot;crls\&quot;: [         \&quot;/infra/crls/nsx_default_public_crl\&quot;     ],     \&quot;idle_connection_timeout\&quot;: 5400,     \&quot;_system_owned\&quot;: false,     \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,     \&quot;_create_user\&quot;: \&quot;admin\&quot;,     \&quot;_create_time\&quot;: 1622071598527,     \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,     \&quot;_last_modified_time\&quot;: 1622071598527,     \&quot;_revision\&quot;: 0 } &lt;/pre&gt;  5 - Internal Profile High Fidelity Sample intent path:/infra/tls-inspection-action-profiles/internal-high-fidelity-profile Sample intent path: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_FIDELITY\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;server_certs_key\&quot;: [\&quot;/infra/certificates/server-cert-1\&quot;],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot; } &lt;/pre&gt; Profile with default settings: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_FIDELITY\&quot;,     \&quot;decryption_fail_action\&quot;: \&quot;BYPASS\&quot;,     \&quot;crypto_enforcement\&quot;: \&quot;TRANSPARENT\&quot;,     \&quot;client_min_tls_version\&quot;: \&quot;\&quot;,     \&quot;client_max_tls_version\&quot;: \&quot;\&quot;,     \&quot;server_min_tls_version\&quot;: \&quot;\&quot;,     \&quot;server_max_tls_version\&quot;: \&quot;\&quot;,     \&quot;client_cipher_suite\&quot;: [],     \&quot;server_cipher_suite\&quot;: [],     \&quot;server_certs_key\&quot;: [         \&quot;/infra/certificates/server-cert-1\&quot;     ],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot;,     \&quot;ocsp_must_staple\&quot;: false,     \&quot;certificate_validation\&quot;: false,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;id\&quot;: \&quot;internal-high-fidelity-profile\&quot;,     \&quot;display_name\&quot;: \&quot;internal-high-fidelity-profile\&quot;,     \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/internal-high-fidelity-profile\&quot;,     \&quot;relative_path\&quot;: \&quot;internal-high-fidelity-profile\&quot;,     \&quot;parent_path\&quot;: \&quot;/infra\&quot;,     \&quot;unique_id\&quot;: \&quot;27609d17-e642-4a7a-b414-176b3f7eca8d\&quot;,     \&quot;marked_for_delete\&quot;: false,     \&quot;overridden\&quot;: false,     \&quot;trusted_ca_bundles\&quot;: [         \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;     ],     \&quot;crls\&quot;: [         \&quot;/infra/crls/nsx_default_public_crl\&quot;     ],     \&quot;idle_connection_timeout\&quot;: 5400,     \&quot;_system_owned\&quot;: false,     \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,     \&quot;_create_user\&quot;: \&quot;admin\&quot;,     \&quot;_create_time\&quot;: 1622071452299,     \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,     \&quot;_last_modified_time\&quot;: 1622071452299,     \&quot;_revision\&quot;: 0 } &lt;/pre&gt;  6 - Internal Profile High Security Sample intent path:/infra/tls-inspection-action-profiles/internal-high-security-profile Sample intent path: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_SECURITY\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;server_certs_key\&quot;: [\&quot;/infra/certificates/server-cert-1\&quot;],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot; } &lt;/pre&gt;  Profile with default settings: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_SECURITY\&quot;,     \&quot;decryption_fail_action\&quot;: \&quot;BLOCK\&quot;,     \&quot;crypto_enforcement\&quot;: \&quot;ENFORCE\&quot;,     \&quot;client_min_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;client_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;server_min_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;server_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;client_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;     ],     \&quot;server_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;     ],     \&quot;server_certs_key\&quot;: [         \&quot;/infra/certificates/server-cert-1\&quot;     ],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot;,     \&quot;ocsp_must_staple\&quot;: false,     \&quot;certificate_validation\&quot;: false,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;id\&quot;: \&quot;internal-high-security-profile\&quot;,     \&quot;display_name\&quot;: \&quot;internal-high-security-profile\&quot;,     \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/internal-high-security-profile\&quot;,     \&quot;relative_path\&quot;: \&quot;internal-high-security-profile\&quot;,     \&quot;parent_path\&quot;: \&quot;/infra\&quot;,     \&quot;unique_id\&quot;: \&quot;52e3e7e8-718d-4eaf-a177-501f196c421a\&quot;,     \&quot;marked_for_delete\&quot;: false,     \&quot;overridden\&quot;: false,     \&quot;trusted_ca_bundles\&quot;: [         \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;     ],     \&quot;crls\&quot;: [         \&quot;/infra/crls/nsx_default_public_crl\&quot;     ],     \&quot;idle_connection_timeout\&quot;: 5400,     \&quot;_system_owned\&quot;: false,     \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,     \&quot;_create_user\&quot;: \&quot;admin\&quot;,     \&quot;_create_time\&quot;: 1622071359539,     \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,     \&quot;_last_modified_time\&quot;: 1622071359539,     \&quot;_revision\&quot;: 0 } &lt;/pre&gt; 
    # @param action_profile_id 
    # @param tls_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsProfile, Fixnum, Hash)>] TlsProfile data, response status code and response headers
    def patch_tls_profile_with_http_info(action_profile_id, tls_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_tls_profile ...'
      end
      # verify the required parameter 'action_profile_id' is set
      if @api_client.config.client_side_validation && action_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'action_profile_id' when calling SecurityApi.patch_tls_profile"
      end
      # verify the required parameter 'tls_profile' is set
      if @api_client.config.client_side_validation && tls_profile.nil?
        fail ArgumentError, "Missing the required parameter 'tls_profile' when calling SecurityApi.patch_tls_profile"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-action-profiles/{action-profile-id}'.sub('{' + 'action-profile-id' + '}', action_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_tls_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update TLS rule
    # Update the TLS rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a TLS policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/tls-inspection-policies/&lt;policy-id&gt; 
    # @param policy_id 
    # @param rule_id 
    # @param tls_rule 
    # @param [Hash] opts the optional parameters
    # @return [TlsRule]
    def patch_tls_rule(policy_id, rule_id, tls_rule, opts = {})
      data, _status_code, _headers = patch_tls_rule_with_http_info(policy_id, rule_id, tls_rule, opts)
      data
    end

    # Update TLS rule
    # Update the TLS rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a TLS policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/tls-inspection-policies/&amp;lt;policy-id&amp;gt; 
    # @param policy_id 
    # @param rule_id 
    # @param tls_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsRule, Fixnum, Hash)>] TlsRule data, response status code and response headers
    def patch_tls_rule_with_http_info(policy_id, rule_id, tls_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_tls_rule ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.patch_tls_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.patch_tls_rule"
      end
      # verify the required parameter 'tls_rule' is set
      if @api_client.config.client_side_validation && tls_rule.nil?
        fail ArgumentError, "Missing the required parameter 'tls_rule' when calling SecurityApi.patch_tls_rule"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_tls_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update virtual endpoint
    # Create or update virtual endpoint. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param virtual_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [VirtualEndpoint]
    def patch_virtual_endpoint(tier_0_id, locale_service_id, virtual_endpoint_id, virtual_endpoint, opts = {})
      data, _status_code, _headers = patch_virtual_endpoint_with_http_info(tier_0_id, locale_service_id, virtual_endpoint_id, virtual_endpoint, opts)
      data
    end

    # Create or update virtual endpoint
    # Create or update virtual endpoint. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param virtual_endpoint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VirtualEndpoint, Fixnum, Hash)>] VirtualEndpoint data, response status code and response headers
    def patch_virtual_endpoint_with_http_info(tier_0_id, locale_service_id, virtual_endpoint_id, virtual_endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_virtual_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.patch_virtual_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.patch_virtual_endpoint"
      end
      # verify the required parameter 'virtual_endpoint_id' is set
      if @api_client.config.client_side_validation && virtual_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_endpoint_id' when calling SecurityApi.patch_virtual_endpoint"
      end
      # verify the required parameter 'virtual_endpoint' is set
      if @api_client.config.client_side_validation && virtual_endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_endpoint' when calling SecurityApi.patch_virtual_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/endpoints/virtual-endpoints/{virtual-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'virtual-endpoint-id' + '}', virtual_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(virtual_endpoint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_virtual_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Gateway Policy
    # If a GatewayPolicy with the policy-id is not already present, create a new GatewayPolicy. If it already exists, update the GatewayPolicy. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_gateway_policy(org_id, project_id, vpc_id, gateway_policy_id, gateway_policy, opts = {})
      patch_vpc_gateway_policy_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, gateway_policy, opts)
      nil
    end

    # Create or update Gateway Policy
    # If a GatewayPolicy with the policy-id is not already present, create a new GatewayPolicy. If it already exists, update the GatewayPolicy. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_gateway_policy_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_vpc_gateway_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.patch_vpc_gateway_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.patch_vpc_gateway_policy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.patch_vpc_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.patch_vpc_gateway_policy"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling SecurityApi.patch_vpc_gateway_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_vpc_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch N-S Firewall Rule
    # Patch the N-S Firewall Rule. If a Rule for the given Rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace PATCH /orgs/org1/projects/project1/vpcs/vpc-1/gateway-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_gateway_rule(org_id, project_id, vpc_id, gateway_policy_id, rule_id, rule, opts = {})
      patch_vpc_gateway_rule_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, rule, opts)
      nil
    end

    # Patch N-S Firewall Rule
    # Patch the N-S Firewall Rule. If a Rule for the given Rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace PATCH /orgs/org1/projects/project1/vpcs/vpc-1/gateway-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_gateway_rule_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_vpc_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.patch_vpc_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.patch_vpc_gateway_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.patch_vpc_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.patch_vpc_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.patch_vpc_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.patch_vpc_gateway_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_vpc_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update VPC Group
    # If a VPC group with the group-id is not already present, create a new VPC group. If it already exists, update the group. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_group(org_id, project_id, vpc_id, group_id, group, opts = {})
      patch_vpc_group_with_http_info(org_id, project_id, vpc_id, group_id, group, opts)
      nil
    end

    # Create or update VPC Group
    # If a VPC group with the group-id is not already present, create a new VPC group. If it already exists, update the group. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_group_with_http_info(org_id, project_id, vpc_id, group_id, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_vpc_group ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.patch_vpc_group"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.patch_vpc_group"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.patch_vpc_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.patch_vpc_group"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling SecurityApi.patch_vpc_group"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups/{group-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_vpc_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch E-W Firewall Rule
    # Patch the E-W Firewall Rule. If a Rule for the given Rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace PATCH /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_policy_rule(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts = {})
      patch_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts)
      nil
    end

    # Patch E-W Firewall Rule
    # Patch the E-W Firewall Rule. If a Rule for the given Rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace PATCH /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_vpc_policy_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.patch_vpc_policy_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.patch_vpc_policy_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.patch_vpc_policy_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.patch_vpc_policy_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.patch_vpc_policy_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.patch_vpc_policy_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_vpc_policy_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update SecurityPolicy
    # If a SecurityPolicy with the policy-id is not already present, create a new SecurityPolicy. If it already exists, update the SecurityPolicy. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_security_policy(org_id, project_id, vpc_id, security_policy_id, security_policy, opts = {})
      patch_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, security_policy, opts)
      nil
    end

    # Create or update SecurityPolicy
    # If a SecurityPolicy with the policy-id is not already present, create a new SecurityPolicy. If it already exists, update the SecurityPolicy. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_vpc_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.patch_vpc_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.patch_vpc_security_policy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.patch_vpc_security_policy"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.patch_vpc_security_policy"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling SecurityApi.patch_vpc_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_vpc_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Security Profile
    # Update existing default security profile. Note: Currently, user will not be able to create new security profiles. 
    # @param org_id 
    # @param project_id 
    # @param vpc_security_profile_id 
    # @param vpc_security_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_security_profile(org_id, project_id, vpc_security_profile_id, vpc_security_profile, opts = {})
      patch_vpc_security_profile_with_http_info(org_id, project_id, vpc_security_profile_id, vpc_security_profile, opts)
      nil
    end

    # Update Security Profile
    # Update existing default security profile. Note: Currently, user will not be able to create new security profiles. 
    # @param org_id 
    # @param project_id 
    # @param vpc_security_profile_id 
    # @param vpc_security_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_security_profile_with_http_info(org_id, project_id, vpc_security_profile_id, vpc_security_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.patch_vpc_security_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.patch_vpc_security_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.patch_vpc_security_profile"
      end
      # verify the required parameter 'vpc_security_profile_id' is set
      if @api_client.config.client_side_validation && vpc_security_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_security_profile_id' when calling SecurityApi.patch_vpc_security_profile"
      end
      # verify the required parameter 'vpc_security_profile' is set
      if @api_client.config.client_side_validation && vpc_security_profile.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_security_profile' when calling SecurityApi.patch_vpc_security_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-security-profiles/{vpc-security-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-security-profile-id' + '}', vpc_security_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_security_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#patch_vpc_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Post User Login/Logout events for IDFW
    # API to receive User Login and Logout events for IDFW 
    # @param login_logout_event_collection 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_login_logout_events(login_logout_event_collection, opts = {})
      post_login_logout_events_with_http_info(login_logout_event_collection, opts)
      nil
    end

    # Post User Login/Logout events for IDFW
    # API to receive User Login and Logout events for IDFW 
    # @param login_logout_event_collection 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_login_logout_events_with_http_info(login_logout_event_collection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.post_login_logout_events ...'
      end
      # verify the required parameter 'login_logout_event_collection' is set
      if @api_client.config.client_side_validation && login_logout_event_collection.nil?
        fail ArgumentError, "Missing the required parameter 'login_logout_event_collection' when calling SecurityApi.post_login_logout_events"
      end
      # resource path
      local_var_path = '/system/input/login-logout-events'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(login_logout_event_collection)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#post_login_logout_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # IP reputation feed actions.
    # This API can be used to activate or deactivate auto-download of IP reputation feed, it can also be used to trigger download of IP reputation feed when required. Once auto-download is activated, IP reputation feed will be downloaded at regular intervals of 720 mins(12 hrs). Auto-download of IP reputation feed can be activated using the action 'enable_auto_download', to deactivate use action 'disable_auto_download' and to trigger a download use action 'download'. For Global Manager, the only action that is supported is action=download. The enforcement_point_path of the site where the feed is to be downloaded should be provided along with the action 
    # @param operation action
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyFirewallIpReputationConfig]
    def post_policy_firewall_ip_reputation_config(operation, opts = {})
      data, _status_code, _headers = post_policy_firewall_ip_reputation_config_with_http_info(operation, opts)
      data
    end

    # IP reputation feed actions.
    # This API can be used to activate or deactivate auto-download of IP reputation feed, it can also be used to trigger download of IP reputation feed when required. Once auto-download is activated, IP reputation feed will be downloaded at regular intervals of 720 mins(12 hrs). Auto-download of IP reputation feed can be activated using the action &#39;enable_auto_download&#39;, to deactivate use action &#39;disable_auto_download&#39; and to trigger a download use action &#39;download&#39;. For Global Manager, the only action that is supported is action&#x3D;download. The enforcement_point_path of the site where the feed is to be downloaded should be provided along with the action 
    # @param operation action
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyFirewallIpReputationConfig, Fixnum, Hash)>] PolicyFirewallIpReputationConfig data, response status code and response headers
    def post_policy_firewall_ip_reputation_config_with_http_info(operation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.post_policy_firewall_ip_reputation_config ...'
      end
      # verify the required parameter 'operation' is set
      if @api_client.config.client_side_validation && operation.nil?
        fail ArgumentError, "Missing the required parameter 'operation' when calling SecurityApi.post_policy_firewall_ip_reputation_config"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['enable_auto_download', 'disable_auto_download', 'download'].include?(operation)
        fail ArgumentError, "invalid value for 'operation', must be one of enable_auto_download, disable_auto_download, download"
      end
      # resource path
      local_var_path = '/infra/firewall-ip-reputation-feed'

      # query parameters
      query_params = {}
      query_params[:'operation'] = operation
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallIpReputationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#post_policy_firewall_ip_reputation_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. If there are additional changes on top of draft configuration, pass it as a request body, in form of Infra object. Otherwise, if there are no additional changes, then pass empty Infra object as a request body. 
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def publish_draft(draft_id, infra, opts = {})
      publish_draft_with_http_info(draft_id, infra, opts)
      nil
    end

    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. If there are additional changes on top of draft configuration, pass it as a request body, in form of Infra object. Otherwise, if there are no additional changes, then pass empty Infra object as a request body. 
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def publish_draft_with_http_info(draft_id, infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.publish_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.publish_draft"
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling SecurityApi.publish_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}?action=publish'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#publish_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update compute cluster idfw configuration
    # Update the compute cluster idfw configuration
    # @param cluster_id Cluster ID
    # @param compute_cluster_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [ComputeClusterIdfwConfiguration]
    def put_compute_cluster_idfw_configuration(cluster_id, compute_cluster_idfw_configuration, opts = {})
      data, _status_code, _headers = put_compute_cluster_idfw_configuration_with_http_info(cluster_id, compute_cluster_idfw_configuration, opts)
      data
    end

    # Create or update compute cluster idfw configuration
    # Update the compute cluster idfw configuration
    # @param cluster_id Cluster ID
    # @param compute_cluster_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComputeClusterIdfwConfiguration, Fixnum, Hash)>] ComputeClusterIdfwConfiguration data, response status code and response headers
    def put_compute_cluster_idfw_configuration_with_http_info(cluster_id, compute_cluster_idfw_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.put_compute_cluster_idfw_configuration ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling SecurityApi.put_compute_cluster_idfw_configuration"
      end
      # verify the required parameter 'compute_cluster_idfw_configuration' is set
      if @api_client.config.client_side_validation && compute_cluster_idfw_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'compute_cluster_idfw_configuration' when calling SecurityApi.put_compute_cluster_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/cluster/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(compute_cluster_idfw_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComputeClusterIdfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#put_compute_cluster_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\"enable_firewall\": false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [DfwFirewallConfiguration]
    def put_dfw_firewall_configuration(dfw_firewall_configuration, opts = {})
      data, _status_code, _headers = put_dfw_firewall_configuration_with_http_info(dfw_firewall_configuration, opts)
      data
    end

    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\&quot;enable_firewall\&quot;: false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfwFirewallConfiguration, Fixnum, Hash)>] DfwFirewallConfiguration data, response status code and response headers
    def put_dfw_firewall_configuration_with_http_info(dfw_firewall_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.put_dfw_firewall_configuration ...'
      end
      # verify the required parameter 'dfw_firewall_configuration' is set
      if @api_client.config.client_side_validation && dfw_firewall_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'dfw_firewall_configuration' when calling SecurityApi.put_dfw_firewall_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dfw_firewall_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DfwFirewallConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#put_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def put_draft(draft_id, policy_draft, opts = {})
      data, _status_code, _headers = put_draft_with_http_info(draft_id, policy_draft, opts)
      data
    end

    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def put_draft_with_http_info(draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.put_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.put_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling SecurityApi.put_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#put_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update exclusion list for security policy
    # Update the exclusion list for security policy 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def put_exclude_list(policy_exclude_list, opts = {})
      data, _status_code, _headers = put_exclude_list_with_http_info(policy_exclude_list, opts)
      data
    end

    # Create or update exclusion list for security policy
    # Update the exclusion list for security policy 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def put_exclude_list_with_http_info(policy_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.put_exclude_list ...'
      end
      # verify the required parameter 'policy_exclude_list' is set
      if @api_client.config.client_side_validation && policy_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_exclude_list' when calling SecurityApi.put_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#put_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update FqdnAnalysisConfig
    # Creates/Updates FqdnAnalysisConfig Object for the given edge cluster. If FqdnAnalysisConfig object is not already present, creates it. If it already exists, replace with this object. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param fqdn_analysis_config 
    # @param [Hash] opts the optional parameters
    # @return [FqdnAnalysisConfig]
    def put_fqdn_analysis_config(site_id, enforcement_point_id, edge_cluster_id, fqdn_analysis_config, opts = {})
      data, _status_code, _headers = put_fqdn_analysis_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, fqdn_analysis_config, opts)
      data
    end

    # Create or Update FqdnAnalysisConfig
    # Creates/Updates FqdnAnalysisConfig Object for the given edge cluster. If FqdnAnalysisConfig object is not already present, creates it. If it already exists, replace with this object. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param fqdn_analysis_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FqdnAnalysisConfig, Fixnum, Hash)>] FqdnAnalysisConfig data, response status code and response headers
    def put_fqdn_analysis_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, fqdn_analysis_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.put_fqdn_analysis_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SecurityApi.put_fqdn_analysis_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling SecurityApi.put_fqdn_analysis_config"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling SecurityApi.put_fqdn_analysis_config"
      end
      # verify the required parameter 'fqdn_analysis_config' is set
      if @api_client.config.client_side_validation && fqdn_analysis_config.nil?
        fail ArgumentError, "Missing the required parameter 'fqdn_analysis_config' when calling SecurityApi.put_fqdn_analysis_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/fqdn-analysis-config'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(fqdn_analysis_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FqdnAnalysisConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#put_fqdn_analysis_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update exclusion list
    # Update the exclusion list 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [PolicyExcludeList]
    def put_pmaas_exclude_list(policy_exclude_list, opts = {})
      data, _status_code, _headers = put_pmaas_exclude_list_with_http_info(policy_exclude_list, opts)
      data
    end

    # Create or update exclusion list
    # Update the exclusion list 
    # @param policy_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExcludeList, Fixnum, Hash)>] PolicyExcludeList data, response status code and response headers
    def put_pmaas_exclude_list_with_http_info(policy_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.put_pmaas_exclude_list ...'
      end
      # verify the required parameter 'policy_exclude_list' is set
      if @api_client.config.client_side_validation && policy_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_exclude_list' when calling SecurityApi.put_pmaas_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/exclude-list/global'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#put_pmaas_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyUrlCategorizationConfig
    # Creates/Updates a PolicyUrlCategorizationConfig. Creating or updating the PolicyUrlCategorizationConfig will activate or deactivate URL categorization for the given edge cluster. If the context_profiles field is empty, the edge cluster will detect all the categories of URLs. If context_profiles field has any context profiles, the edge cluster will detect only the categories listed within those context profiles. The context profiles should have attribute type URL_CATEGORY. The update_frequency specifies how frequently in minutes, the edge cluster will get updates about the URL data from the URL categorization cloud service. If the update_frequency is not specified, the default update frequency will be 30 min. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param policy_url_categorization_config 
    # @param [Hash] opts the optional parameters
    # @return [PolicyUrlCategorizationConfig]
    def put_policy_url_categorization_config(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts = {})
      data, _status_code, _headers = put_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts)
      data
    end

    # Create or Update PolicyUrlCategorizationConfig
    # Creates/Updates a PolicyUrlCategorizationConfig. Creating or updating the PolicyUrlCategorizationConfig will activate or deactivate URL categorization for the given edge cluster. If the context_profiles field is empty, the edge cluster will detect all the categories of URLs. If context_profiles field has any context profiles, the edge cluster will detect only the categories listed within those context profiles. The context profiles should have attribute type URL_CATEGORY. The update_frequency specifies how frequently in minutes, the edge cluster will get updates about the URL data from the URL categorization cloud service. If the update_frequency is not specified, the default update frequency will be 30 min. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param policy_url_categorization_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyUrlCategorizationConfig, Fixnum, Hash)>] PolicyUrlCategorizationConfig data, response status code and response headers
    def put_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.put_policy_url_categorization_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling SecurityApi.put_policy_url_categorization_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling SecurityApi.put_policy_url_categorization_config"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling SecurityApi.put_policy_url_categorization_config"
      end
      # verify the required parameter 'url_categorization_config_id' is set
      if @api_client.config.client_side_validation && url_categorization_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'url_categorization_config_id' when calling SecurityApi.put_policy_url_categorization_config"
      end
      # verify the required parameter 'policy_url_categorization_config' is set
      if @api_client.config.client_side_validation && policy_url_categorization_config.nil?
        fail ArgumentError, "Missing the required parameter 'policy_url_categorization_config' when calling SecurityApi.put_policy_url_categorization_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'url-categorization-config-id' + '}', url_categorization_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_url_categorization_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyUrlCategorizationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#put_policy_url_categorization_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update idfw configuration for standalone host
    # Update the idfw configuration for standalone host
    # @param standalone_host_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [StandaloneHostIdfwConfiguration]
    def put_standalone_host_idfw_configuration(standalone_host_idfw_configuration, opts = {})
      data, _status_code, _headers = put_standalone_host_idfw_configuration_with_http_info(standalone_host_idfw_configuration, opts)
      data
    end

    # Create or update idfw configuration for standalone host
    # Update the idfw configuration for standalone host
    # @param standalone_host_idfw_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandaloneHostIdfwConfiguration, Fixnum, Hash)>] StandaloneHostIdfwConfiguration data, response status code and response headers
    def put_standalone_host_idfw_configuration_with_http_info(standalone_host_idfw_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.put_standalone_host_idfw_configuration ...'
      end
      # verify the required parameter 'standalone_host_idfw_configuration' is set
      if @api_client.config.client_side_validation && standalone_host_idfw_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'standalone_host_idfw_configuration' when calling SecurityApi.put_standalone_host_idfw_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/idfw/standalone-host-switch-setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(standalone_host_idfw_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StandaloneHostIdfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#put_standalone_host_idfw_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read all service instance objects under a tier-0
    # Read all service instance objects under a tier-0
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyServiceInstanceListResult]
    def read_all_policy_service_instances_for_tier0(tier_0_id, locale_service_id, opts = {})
      data, _status_code, _headers = read_all_policy_service_instances_for_tier0_with_http_info(tier_0_id, locale_service_id, opts)
      data
    end

    # Read all service instance objects under a tier-0
    # Read all service instance objects under a tier-0
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyServiceInstanceListResult, Fixnum, Hash)>] PolicyServiceInstanceListResult data, response status code and response headers
    def read_all_policy_service_instances_for_tier0_with_http_info(tier_0_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_all_policy_service_instances_for_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.read_all_policy_service_instances_for_tier0"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.read_all_policy_service_instances_for_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.read_all_policy_service_instances_for_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.read_all_policy_service_instances_for_tier0, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/service-instances'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceInstanceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_all_policy_service_instances_for_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read all service instance objects under a tier-1
    # Read all service instance objects under a tier-1
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyServiceInstanceListResult]
    def read_all_policy_service_instances_for_tier1(tier_1_id, locale_service_id, opts = {})
      data, _status_code, _headers = read_all_policy_service_instances_for_tier1_with_http_info(tier_1_id, locale_service_id, opts)
      data
    end

    # Read all service instance objects under a tier-1
    # Read all service instance objects under a tier-1
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyServiceInstanceListResult, Fixnum, Hash)>] PolicyServiceInstanceListResult data, response status code and response headers
    def read_all_policy_service_instances_for_tier1_with_http_info(tier_1_id, locale_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_all_policy_service_instances_for_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.read_all_policy_service_instances_for_tier1"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.read_all_policy_service_instances_for_tier1"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.read_all_policy_service_instances_for_tier1, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.read_all_policy_service_instances_for_tier1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/service-instances'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceInstanceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_all_policy_service_instances_for_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read BYOD service instance
    # Read BYOD service instance
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id BYOD Service instance id
    # @param [Hash] opts the optional parameters
    # @return [ByodPolicyServiceInstance]
    def read_byod_policy_service_instance(tier_0_id, locale_service_id, service_instance_id, opts = {})
      data, _status_code, _headers = read_byod_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts)
      data
    end

    # Read BYOD service instance
    # Read BYOD service instance
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id BYOD Service instance id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ByodPolicyServiceInstance, Fixnum, Hash)>] ByodPolicyServiceInstance data, response status code and response headers
    def read_byod_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_byod_policy_service_instance ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.read_byod_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.read_byod_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.read_byod_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ByodPolicyServiceInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_byod_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read CommunicationEntry
    # Read CommunicationEntry  <br> This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param [Hash] opts the optional parameters
    # @return [CommunicationEntry]
    def read_communication_entry(domain_id, communication_map_id, communication_entry_id, opts = {})
      data, _status_code, _headers = read_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, opts)
      data
    end

    # Read CommunicationEntry
    # Read CommunicationEntry  &lt;br&gt; This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommunicationEntry, Fixnum, Hash)>] CommunicationEntry data, response status code and response headers
    def read_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_communication_entry ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.read_communication_entry"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling SecurityApi.read_communication_entry"
      end
      # verify the required parameter 'communication_entry_id' is set
      if @api_client.config.client_side_validation && communication_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry_id' when calling SecurityApi.read_communication_entry"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}/communication-entries/{communication-entry-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s).sub('{' + 'communication-entry-id' + '}', communication_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read communication-map
    # Read communication-map for a domain.  <br> This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param [Hash] opts the optional parameters
    # @return [CommunicationMap]
    def read_communication_map_for_domain(domain_id, communication_map_id, opts = {})
      data, _status_code, _headers = read_communication_map_for_domain_with_http_info(domain_id, communication_map_id, opts)
      data
    end

    # Read communication-map
    # Read communication-map for a domain.  &lt;br&gt; This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommunicationMap, Fixnum, Hash)>] CommunicationMap data, response status code and response headers
    def read_communication_map_for_domain_with_http_info(domain_id, communication_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_communication_map_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.read_communication_map_for_domain"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling SecurityApi.read_communication_map_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_communication_map_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read container cluster for a security policy
    # Read container cluster for a security policy. 
    # @param domain_id 
    # @param security_policy_id 
    # @param antrea_cluster_1 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicyContainerCluster]
    def read_container_cluster_span_for_security_policy(domain_id, security_policy_id, antrea_cluster_1, opts = {})
      data, _status_code, _headers = read_container_cluster_span_for_security_policy_with_http_info(domain_id, security_policy_id, antrea_cluster_1, opts)
      data
    end

    # Read container cluster for a security policy
    # Read container cluster for a security policy. 
    # @param domain_id 
    # @param security_policy_id 
    # @param antrea_cluster_1 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicyContainerCluster, Fixnum, Hash)>] SecurityPolicyContainerCluster data, response status code and response headers
    def read_container_cluster_span_for_security_policy_with_http_info(domain_id, security_policy_id, antrea_cluster_1, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_container_cluster_span_for_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.read_container_cluster_span_for_security_policy"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.read_container_cluster_span_for_security_policy"
      end
      # verify the required parameter 'antrea_cluster_1' is set
      if @api_client.config.client_side_validation && antrea_cluster_1.nil?
        fail ArgumentError, "Missing the required parameter 'antrea_cluster_1' when calling SecurityApi.read_container_cluster_span_for_security_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/container-cluster-span/{antrea-cluster-1}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'antrea-cluster-1' + '}', antrea_cluster_1.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyContainerCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_container_cluster_span_for_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the CPU and memory thresholds profile
    # Read the CPU and memory thresholds profile.
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallCpuMemThresholdsProfile]
    def read_cpu_mem_thresholds_profile(profile_id, opts = {})
      data, _status_code, _headers = read_cpu_mem_thresholds_profile_with_http_info(profile_id, opts)
      data
    end

    # Read the CPU and memory thresholds profile
    # Read the CPU and memory thresholds profile.
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallCpuMemThresholdsProfile, Fixnum, Hash)>] PolicyFirewallCpuMemThresholdsProfile data, response status code and response headers
    def read_cpu_mem_thresholds_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_cpu_mem_thresholds_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.read_cpu_mem_thresholds_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/cpu-mem-thresholds-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallCpuMemThresholdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_cpu_mem_thresholds_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder for the given tier-0 instance
    # Read the DNS Forwarder for the given tier-0 instance
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [DnsSecurityProfile]
    def read_dns_security_profile(profile_id, opts = {})
      data, _status_code, _headers = read_dns_security_profile_with_http_info(profile_id, opts)
      data
    end

    # Read the DNS Forwarder for the given tier-0 instance
    # Read the DNS Forwarder for the given tier-0 instance
    # @param profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DnsSecurityProfile, Fixnum, Hash)>] DnsSecurityProfile data, response status code and response headers
    def read_dns_security_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_dns_security_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.read_dns_security_profile"
      end
      # resource path
      local_var_path = '/infra/dns-security-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read draft
    # Read a draft for a given draft identifier. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def read_draft(draft_id, opts = {})
      data, _status_code, _headers = read_draft_with_http_info(draft_id, opts)
      data
    end

    # Read draft
    # Read a draft for a given draft identifier. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def read_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling SecurityApi.read_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Endpoint policy
    # Read Endpoint policy. 
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param [Hash] opts the optional parameters
    # @return [EndpointPolicy]
    def read_endpoint_policy(domain_id, endpoint_policy_id, opts = {})
      data, _status_code, _headers = read_endpoint_policy_with_http_info(domain_id, endpoint_policy_id, opts)
      data
    end

    # Read Endpoint policy
    # Read Endpoint policy. 
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param [Hash] opts the optional parameters
    # @return [Array<(EndpointPolicy, Fixnum, Hash)>] EndpointPolicy data, response status code and response headers
    def read_endpoint_policy_with_http_info(domain_id, endpoint_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_endpoint_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.read_endpoint_policy"
      end
      # verify the required parameter 'endpoint_policy_id' is set
      if @api_client.config.client_side_validation && endpoint_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy_id' when calling SecurityApi.read_endpoint_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'endpoint-policy-id' + '}', endpoint_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EndpointPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_endpoint_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Endpoint rule
    # Read Endpoint rule
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param endpoint_rule_id Endpoint rule id
    # @param [Hash] opts the optional parameters
    # @return [EndpointRule]
    def read_endpoint_rule(domain_id, endpoint_policy_id, endpoint_rule_id, opts = {})
      data, _status_code, _headers = read_endpoint_rule_with_http_info(domain_id, endpoint_policy_id, endpoint_rule_id, opts)
      data
    end

    # Read Endpoint rule
    # Read Endpoint rule
    # @param domain_id Domain id
    # @param endpoint_policy_id Endpoint policy id
    # @param endpoint_rule_id Endpoint rule id
    # @param [Hash] opts the optional parameters
    # @return [Array<(EndpointRule, Fixnum, Hash)>] EndpointRule data, response status code and response headers
    def read_endpoint_rule_with_http_info(domain_id, endpoint_policy_id, endpoint_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_endpoint_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.read_endpoint_rule"
      end
      # verify the required parameter 'endpoint_policy_id' is set
      if @api_client.config.client_side_validation && endpoint_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_policy_id' when calling SecurityApi.read_endpoint_rule"
      end
      # verify the required parameter 'endpoint_rule_id' is set
      if @api_client.config.client_side_validation && endpoint_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_rule_id' when calling SecurityApi.read_endpoint_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}/endpoint-rules/{endpoint-rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'endpoint-policy-id' + '}', endpoint_policy_id.to_s).sub('{' + 'endpoint-rule-id' + '}', endpoint_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EndpointRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_endpoint_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read firewall identity store
    # Return a firewall identity store based on the store identifier <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryDomain]
    def read_firewall_identity_store(firewall_identity_store_id, opts = {})
      data, _status_code, _headers = read_firewall_identity_store_with_http_info(firewall_identity_store_id, opts)
      data
    end

    # Read firewall identity store
    # Return a firewall identity store based on the store identifier &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;
    # @param firewall_identity_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryDomain, Fixnum, Hash)>] DirectoryDomain data, response status code and response headers
    def read_firewall_identity_store_with_http_info(firewall_identity_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_firewall_identity_store ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SecurityApi.read_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/event-log-servers/&lt;event-log-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryEventLogServer]
    def read_firewall_identity_store_event_log_server(firewall_identity_store_id, event_log_server_id, opts = {})
      data, _status_code, _headers = read_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, opts)
      data
    end

    # Get a specific Event Log server for a given Firewall Identity store
    # Get a specific Event Log server for a given Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/event-log-servers/&amp;lt;event-log-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryEventLogServer, Fixnum, Hash)>] DirectoryEventLogServer data, response status code and response headers
    def read_firewall_identity_store_event_log_server_with_http_info(firewall_identity_store_id, event_log_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SecurityApi.read_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling SecurityApi.read_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryEventLogServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store <br> <br> Use the following Policy API - <br> GET /infra/identity-firewall-stores/&lt;identity-firewall-store-id&gt;/ldap-servers/&lt;ldap-server-id&gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryLdapServer]
    def read_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, opts = {})
      data, _status_code, _headers = read_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, opts)
      data
    end

    # Get a specific LDAP server for a given Firewall Identity store
    # Get a specific LDAP server for a given Firewall Identity store &lt;br&gt; &lt;br&gt; Use the following Policy API - &lt;br&gt; GET /infra/identity-firewall-stores/&amp;lt;identity-firewall-store-id&amp;gt;/ldap-servers/&amp;lt;ldap-server-id&amp;gt;
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryLdapServer, Fixnum, Hash)>] DirectoryLdapServer data, response status code and response headers
    def read_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SecurityApi.read_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SecurityApi.read_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read gateway policy
    # Read gateway policy for a domain. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def read_gateway_policy_for_domain(domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = read_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, opts)
      data
    end

    # Read gateway policy
    # Read gateway policy for a domain. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def read_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.read_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.read_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def read_gateway_rule(domain_id, gateway_policy_id, rule_id, opts = {})
      data, _status_code, _headers = read_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def read_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.read_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.read_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.read_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS gateway policy
    # Read IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsGatewayPolicy]
    def read_ids_gateway_policy(domain_id, policy_id, opts = {})
      data, _status_code, _headers = read_ids_gateway_policy_with_http_info(domain_id, policy_id, opts)
      data
    end

    # Read IDS gateway policy
    # Read IDS gateway policy for a domain. 
    # @param domain_id 
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsGatewayPolicy, Fixnum, Hash)>] IdsGatewayPolicy data, response status code and response headers
    def read_ids_gateway_policy_with_http_info(domain_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_ids_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.read_ids_gateway_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.read_ids_gateway_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsGatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_ids_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IDS rule
    # Read IDS rule
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsRule]
    def read_ids_gateway_rule(domain_id, policy_id, rule_id, opts = {})
      data, _status_code, _headers = read_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, opts)
      data
    end

    # Read IDS rule
    # Read IDS rule
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def read_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_ids_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.read_ids_gateway_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.read_ids_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.read_ids_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_ids_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security configuration for Segment
    # Read security configuration for Segment. 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of Segment supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentSecurityFeatures]
    def read_infra_segment_security_feature(segment_id, opts = {})
      data, _status_code, _headers = read_infra_segment_security_feature_with_http_info(segment_id, opts)
      data
    end

    # Read security configuration for Segment
    # Read security configuration for Segment. 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of Segment supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def read_infra_segment_security_feature_with_http_info(segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_infra_segment_security_feature ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SecurityApi.read_infra_segment_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['BRIDGE_FIREWALL'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of BRIDGE_FIREWALL'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.read_infra_segment_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.read_infra_segment_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{segment-id}/security-config'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_infra_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read partner service identified by provided name
    # Read the specific partner service identified by provided name.
    # @param service_name Name of the service
    # @param [Hash] opts the optional parameters
    # @return [ServiceDefinition]
    def read_partner_service(service_name, opts = {})
      data, _status_code, _headers = read_partner_service_with_http_info(service_name, opts)
      data
    end

    # Read partner service identified by provided name
    # Read the specific partner service identified by provided name.
    # @param service_name Name of the service
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDefinition, Fixnum, Hash)>] ServiceDefinition data, response status code and response headers
    def read_partner_service_with_http_info(service_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_partner_service ...'
      end
      # verify the required parameter 'service_name' is set
      if @api_client.config.client_side_validation && service_name.nil?
        fail ArgumentError, "Missing the required parameter 'service_name' when calling SecurityApi.read_partner_service"
      end
      # resource path
      local_var_path = '/infra/partner-services/{service-name}'.sub('{' + 'service-name' + '}', service_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_partner_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read partner services
    # Read all the partner services available for service insertion
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceInsertionServiceListResult]
    def read_partner_services(opts = {})
      data, _status_code, _headers = read_partner_services_with_http_info(opts)
      data
    end

    # Read partner services
    # Read all the partner services available for service insertion
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceInsertionServiceListResult, Fixnum, Hash)>] ServiceInsertionServiceListResult data, response status code and response headers
    def read_partner_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_partner_services ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.read_partner_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.read_partner_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/partner-services'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInsertionServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_partner_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read service instance
    # Read service instance
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceInstance]
    def read_policy_service_instance(tier_0_id, locale_service_id, service_instance_id, opts = {})
      data, _status_code, _headers = read_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts)
      data
    end

    # Read service instance
    # Read service instance
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceInstance, Fixnum, Hash)>] PolicyServiceInstance data, response status code and response headers
    def read_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_policy_service_instance ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.read_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.read_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.read_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/service-instances/{service-instance-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read service instance endpoint
    # Read service instance endpoint
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Service instance endpoint id
    # @param [Hash] opts the optional parameters
    # @return [ServiceInstanceEndpoint]
    def read_policy_service_instance_endpoint(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, opts = {})
      data, _status_code, _headers = read_policy_service_instance_endpoint_with_http_info(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, opts)
      data
    end

    # Read service instance endpoint
    # Read service instance endpoint
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Service instance endpoint id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInstanceEndpoint, Fixnum, Hash)>] ServiceInstanceEndpoint data, response status code and response headers
    def read_policy_service_instance_endpoint_with_http_info(tier_0_id, locale_service_id, service_instance_id, service_instance_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_policy_service_instance_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.read_policy_service_instance_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.read_policy_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.read_policy_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_endpoint_id' is set
      if @api_client.config.client_side_validation && service_instance_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_endpoint_id' when calling SecurityApi.read_policy_service_instance_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}/service-instance-endpoints/{service-instance-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s).sub('{' + 'service-instance-endpoint-id' + '}', service_instance_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInstanceEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_policy_service_instance_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read service profile
    # This API can be used to read service profile with given service-profile-id
    # @param service_reference_id Id of Service Reference
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceProfile]
    def read_policy_service_profile(service_reference_id, service_profile_id, opts = {})
      data, _status_code, _headers = read_policy_service_profile_with_http_info(service_reference_id, service_profile_id, opts)
      data
    end

    # Read service profile
    # This API can be used to read service profile with given service-profile-id
    # @param service_reference_id Id of Service Reference
    # @param service_profile_id Service profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceProfile, Fixnum, Hash)>] PolicyServiceProfile data, response status code and response headers
    def read_policy_service_profile_with_http_info(service_reference_id, service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_policy_service_profile ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling SecurityApi.read_policy_service_profile"
      end
      # verify the required parameter 'service_profile_id' is set
      if @api_client.config.client_side_validation && service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_profile_id' when calling SecurityApi.read_policy_service_profile"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}/service-profiles/{service-profile-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s).sub('{' + 'service-profile-id' + '}', service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_policy_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read redirection policy
    # Read redirection policy. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @return [RedirectionPolicy]
    def read_redirection_policy(domain_id, redirection_policy_id, opts = {})
      data, _status_code, _headers = read_redirection_policy_with_http_info(domain_id, redirection_policy_id, opts)
      data
    end

    # Read redirection policy
    # Read redirection policy. 
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedirectionPolicy, Fixnum, Hash)>] RedirectionPolicy data, response status code and response headers
    def read_redirection_policy_with_http_info(domain_id, redirection_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_redirection_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.read_redirection_policy"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling SecurityApi.read_redirection_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_redirection_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @return [RedirectionRule]
    def read_redirection_rule(domain_id, redirection_policy_id, rule_id, opts = {})
      data, _status_code, _headers = read_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param domain_id Domain id
    # @param redirection_policy_id Redirection map id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedirectionRule, Fixnum, Hash)>] RedirectionRule data, response status code and response headers
    def read_redirection_rule_with_http_info(domain_id, redirection_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_redirection_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.read_redirection_rule"
      end
      # verify the required parameter 'redirection_policy_id' is set
      if @api_client.config.client_side_validation && redirection_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirection_policy_id' when calling SecurityApi.read_redirection_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.read_redirection_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/redirection-policies/{redirection-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'redirection-policy-id' + '}', redirection_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RedirectionRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_redirection_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Security Feature
    # Read Security Feature. 
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityFeatures]
    def read_security_feature(tier_1_id, opts = {})
      data, _status_code, _headers = read_security_feature_with_http_info(tier_1_id, opts)
      data
    end

    # Read Security Feature
    # Read Security Feature. 
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def read_security_feature_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.read_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['MALWAREPREVENTION', 'IDFW', 'IDPS', 'TLS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of MALWAREPREVENTION, IDFW, IDPS, TLS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.read_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.read_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy
    # Read security policy for a domain. 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def read_security_policy_for_domain(domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = read_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts)
      data
    end

    # Read security policy
    # Read security policy for a domain. 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def read_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_security_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.read_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.read_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def read_security_rule(domain_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = read_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def read_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.read_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.read_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.read_security_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read service chain
    # This API can be used to read service chain with given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceChain]
    def read_service_chain(service_chain_id, opts = {})
      data, _status_code, _headers = read_service_chain_with_http_info(service_chain_id, opts)
      data
    end

    # Read service chain
    # This API can be used to read service chain with given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceChain, Fixnum, Hash)>] PolicyServiceChain data, response status code and response headers
    def read_service_chain_with_http_info(service_chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_service_chain ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling SecurityApi.read_service_chain"
      end
      # resource path
      local_var_path = '/infra/service-chains/{service-chain-id}'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceChain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_service_chain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Service Definition with given service-definition-id.
    # Read Service Definition with given service-definition-id. 
    # @param enforcement_point_id Enforcement point id
    # @param service_definition_id Id of service definition
    # @param [Hash] opts the optional parameters
    # @return [ServiceDefinition]
    def read_service_definition(enforcement_point_id, service_definition_id, opts = {})
      data, _status_code, _headers = read_service_definition_with_http_info(enforcement_point_id, service_definition_id, opts)
      data
    end

    # Read Service Definition with given service-definition-id.
    # Read Service Definition with given service-definition-id. 
    # @param enforcement_point_id Enforcement point id
    # @param service_definition_id Id of service definition
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDefinition, Fixnum, Hash)>] ServiceDefinition data, response status code and response headers
    def read_service_definition_with_http_info(enforcement_point_id, service_definition_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_service_definition ...'
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling SecurityApi.read_service_definition"
      end
      # verify the required parameter 'service_definition_id' is set
      if @api_client.config.client_side_validation && service_definition_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_definition_id' when calling SecurityApi.read_service_definition"
      end
      # resource path
      local_var_path = '/enforcement-points/{enforcement-point-id}/service-definitions/{service-definition-id}'.sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'service-definition-id' + '}', service_definition_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_service_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read service paths for a given service chain
    # This API can be used to read service paths for a given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [ServicePathListResult]
    def read_service_path(service_chain_id, opts = {})
      data, _status_code, _headers = read_service_path_with_http_info(service_chain_id, opts)
      data
    end

    # Read service paths for a given service chain
    # This API can be used to read service paths for a given service-chain-id.
    # @param service_chain_id Id of Service chain
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(ServicePathListResult, Fixnum, Hash)>] ServicePathListResult data, response status code and response headers
    def read_service_path_with_http_info(service_chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_service_path ...'
      end
      # verify the required parameter 'service_chain_id' is set
      if @api_client.config.client_side_validation && service_chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_chain_id' when calling SecurityApi.read_service_path"
      end
      # resource path
      local_var_path = '/infra/service-chains/{service-chain-id}/service-paths'.sub('{' + 'service-chain-id' + '}', service_chain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServicePathListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_service_path\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read service reference
    # This API can be used to read service reference with the given service-reference-id.
    # @param service_reference_id Id of Service Reference
    # @param [Hash] opts the optional parameters
    # @return [ServiceReference]
    def read_service_reference(service_reference_id, opts = {})
      data, _status_code, _headers = read_service_reference_with_http_info(service_reference_id, opts)
      data
    end

    # Read service reference
    # This API can be used to read service reference with the given service-reference-id.
    # @param service_reference_id Id of Service Reference
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceReference, Fixnum, Hash)>] ServiceReference data, response status code and response headers
    def read_service_reference_with_http_info(service_reference_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_service_reference ...'
      end
      # verify the required parameter 'service_reference_id' is set
      if @api_client.config.client_side_validation && service_reference_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_reference_id' when calling SecurityApi.read_service_reference"
      end
      # resource path
      local_var_path = '/infra/service-references/{service-reference-id}'.sub('{' + 'service-reference-id' + '}', service_reference_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_service_reference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Security Feature
    # Read Security Feature. 
    # @param tier_0_id tier0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Tier0SecurityFeatures]
    def read_tier0_security_feature(tier_0_id, opts = {})
      data, _status_code, _headers = read_tier0_security_feature_with_http_info(tier_0_id, opts)
      data
    end

    # Read Security Feature
    # Read Security Feature. 
    # @param tier_0_id tier0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(Tier0SecurityFeatures, Fixnum, Hash)>] Tier0SecurityFeatures data, response status code and response headers
    def read_tier0_security_feature_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_tier0_security_feature ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.read_tier0_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['IDFW', 'IDPS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of IDFW, IDPS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.read_tier0_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.read_tier0_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/security-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tier0SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_tier0_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Tier1 BYOD service instance
    # Read Tier1 BYOD service instance
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Tier1 BYOD Service instance id
    # @param [Hash] opts the optional parameters
    # @return [ByodPolicyServiceInstance]
    def read_tier1_byod_policy_service_instance(tier_1_id, locale_service_id, service_instance_id, opts = {})
      data, _status_code, _headers = read_tier1_byod_policy_service_instance_with_http_info(tier_1_id, locale_service_id, service_instance_id, opts)
      data
    end

    # Read Tier1 BYOD service instance
    # Read Tier1 BYOD service instance
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Tier1 BYOD Service instance id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ByodPolicyServiceInstance, Fixnum, Hash)>] ByodPolicyServiceInstance data, response status code and response headers
    def read_tier1_byod_policy_service_instance_with_http_info(tier_1_id, locale_service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_tier1_byod_policy_service_instance ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.read_tier1_byod_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.read_tier1_byod_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.read_tier1_byod_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ByodPolicyServiceInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_tier1_byod_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Tier1 service instance
    # Read Tier1 service instance
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [PolicyServiceInstance]
    def read_tier1_policy_service_instance(tier_1_id, locale_service_id, service_instance_id, opts = {})
      data, _status_code, _headers = read_tier1_policy_service_instance_with_http_info(tier_1_id, locale_service_id, service_instance_id, opts)
      data
    end

    # Read Tier1 service instance
    # Read Tier1 service instance
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyServiceInstance, Fixnum, Hash)>] PolicyServiceInstance data, response status code and response headers
    def read_tier1_policy_service_instance_with_http_info(tier_1_id, locale_service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_tier1_policy_service_instance ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.read_tier1_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.read_tier1_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.read_tier1_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/service-instances/{service-instance-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyServiceInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_tier1_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Tier1 service instance endpoint
    # Read Tier1 service instance endpoint
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Tier1 Service instance endpoint id
    # @param [Hash] opts the optional parameters
    # @return [ServiceInstanceEndpoint]
    def read_tier1_policy_service_instance_endpoint(tier_1_id, locale_service_id, service_instance_id, service_instance_endpoint_id, opts = {})
      data, _status_code, _headers = read_tier1_policy_service_instance_endpoint_with_http_info(tier_1_id, locale_service_id, service_instance_id, service_instance_endpoint_id, opts)
      data
    end

    # Read Tier1 service instance endpoint
    # Read Tier1 service instance endpoint
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param service_instance_endpoint_id Tier1 Service instance endpoint id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceInstanceEndpoint, Fixnum, Hash)>] ServiceInstanceEndpoint data, response status code and response headers
    def read_tier1_policy_service_instance_endpoint_with_http_info(tier_1_id, locale_service_id, service_instance_id, service_instance_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_tier1_policy_service_instance_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.read_tier1_policy_service_instance_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.read_tier1_policy_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.read_tier1_policy_service_instance_endpoint"
      end
      # verify the required parameter 'service_instance_endpoint_id' is set
      if @api_client.config.client_side_validation && service_instance_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_endpoint_id' when calling SecurityApi.read_tier1_policy_service_instance_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/byod-service-instances/{service-instance-id}/service-instance-endpoints/{service-instance-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s).sub('{' + 'service-instance-endpoint-id' + '}', service_instance_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInstanceEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_tier1_policy_service_instance_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security configuration for Segment
    # Read security configuration for Segment. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of Segment supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentSecurityFeatures]
    def read_tier1_segment_security_feature(tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = read_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, opts)
      data
    end

    # Read security configuration for Segment
    # Read security configuration for Segment. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of Segment supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def read_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_tier1_segment_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.read_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SecurityApi.read_tier1_segment_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['BRIDGE_FIREWALL'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of BRIDGE_FIREWALL'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.read_tier1_segment_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.read_tier1_segment_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_tier1_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read virtual endpoint
    # Read virtual endpoint with given id under given Tier1.
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param [Hash] opts the optional parameters
    # @return [VirtualEndpoint]
    def read_tier1_virtual_endpoint(tier_1_id, locale_service_id, virtual_endpoint_id, opts = {})
      data, _status_code, _headers = read_tier1_virtual_endpoint_with_http_info(tier_1_id, locale_service_id, virtual_endpoint_id, opts)
      data
    end

    # Read virtual endpoint
    # Read virtual endpoint with given id under given Tier1.
    # @param tier_1_id Tier-1 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param [Hash] opts the optional parameters
    # @return [Array<(VirtualEndpoint, Fixnum, Hash)>] VirtualEndpoint data, response status code and response headers
    def read_tier1_virtual_endpoint_with_http_info(tier_1_id, locale_service_id, virtual_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_tier1_virtual_endpoint ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.read_tier1_virtual_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.read_tier1_virtual_endpoint"
      end
      # verify the required parameter 'virtual_endpoint_id' is set
      if @api_client.config.client_side_validation && virtual_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_endpoint_id' when calling SecurityApi.read_tier1_virtual_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-service-id}/endpoints/virtual-endpoints/{virtual-endpoint-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'virtual-endpoint-id' + '}', virtual_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_tier1_virtual_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read tls policy
    # Read TLS policy. 
    # @param policy_id Firewall TLS inspection poicy id
    # @param [Hash] opts the optional parameters
    # @return [TlsPolicy]
    def read_tls_policy(policy_id, opts = {})
      data, _status_code, _headers = read_tls_policy_with_http_info(policy_id, opts)
      data
    end

    # Read tls policy
    # Read TLS policy. 
    # @param policy_id Firewall TLS inspection poicy id
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsPolicy, Fixnum, Hash)>] TlsPolicy data, response status code and response headers
    def read_tls_policy_with_http_info(policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_tls_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.read_tls_policy"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_tls_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [TlsRule]
    def read_tls_rule(policy_id, rule_id, opts = {})
      data, _status_code, _headers = read_tls_rule_with_http_info(policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsRule, Fixnum, Hash)>] TlsRule data, response status code and response headers
    def read_tls_rule_with_http_info(policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_tls_rule ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.read_tls_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.read_tls_rule"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_tls_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read virtual endpoint
    # Read virtual endpoint with given id under given Tier0.
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param [Hash] opts the optional parameters
    # @return [VirtualEndpoint]
    def read_virtual_endpoint(tier_0_id, locale_service_id, virtual_endpoint_id, opts = {})
      data, _status_code, _headers = read_virtual_endpoint_with_http_info(tier_0_id, locale_service_id, virtual_endpoint_id, opts)
      data
    end

    # Read virtual endpoint
    # Read virtual endpoint with given id under given Tier0.
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param virtual_endpoint_id Virtual endpoint id
    # @param [Hash] opts the optional parameters
    # @return [Array<(VirtualEndpoint, Fixnum, Hash)>] VirtualEndpoint data, response status code and response headers
    def read_virtual_endpoint_with_http_info(tier_0_id, locale_service_id, virtual_endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.read_virtual_endpoint ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.read_virtual_endpoint"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.read_virtual_endpoint"
      end
      # verify the required parameter 'virtual_endpoint_id' is set
      if @api_client.config.client_side_validation && virtual_endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_endpoint_id' when calling SecurityApi.read_virtual_endpoint"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/endpoints/virtual-endpoints/{virtual-endpoint-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'virtual-endpoint-id' + '}', virtual_endpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualEndpoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#read_virtual_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete firewall identity store
    # If the firewall identity store is removed, it will stop the identity store synchronization. User will not be able to define new IDFW rules 
    # @param identity_firewall_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def remove_firewall_identity_store(identity_firewall_store_id, opts = {})
      remove_firewall_identity_store_with_http_info(identity_firewall_store_id, opts)
      nil
    end

    # Delete firewall identity store
    # If the firewall identity store is removed, it will stop the identity store synchronization. User will not be able to define new IDFW rules 
    # @param identity_firewall_store_id firewall identity store ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_firewall_identity_store_with_http_info(identity_firewall_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.remove_firewall_identity_store ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SecurityApi.remove_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#remove_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Event Log server for Firewall Identity store
    # Delete a Event Log server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def remove_firewall_identity_store_event_log_server(identity_firewall_store_id, event_log_server_id, opts = {})
      remove_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts)
      nil
    end

    # Delete a Event Log server for Firewall Identity store
    # Delete a Event Log server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.remove_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SecurityApi.remove_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling SecurityApi.remove_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#remove_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a LDAP server for Firewall Identity store
    # Delete a LDAP server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def remove_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, opts = {})
      remove_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts)
      nil
    end

    # Delete a LDAP server for Firewall Identity store
    # Delete a LDAP server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.remove_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SecurityApi.remove_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SecurityApi.remove_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#remove_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Renew the authentication tokens
    # Use this API when an alarm complaining JWT expiry is raised while deploying partner service VM. The OVF for partner service needs to be downloaded from partner services provider. It might be possible that the authentication token for this communication is expired when the service VM deployment starts. That will either require re-login through UI or use of this API. Certain authentication and authorization steps are internally processed in order to enable communication with partner service provider. This API offers the functionality to re-establish communication with partner services provider. This API needs open id and access token to be passed as headers. Those can be obtained from CSP authorize API. Please make sure to pass headers - Authorization:&lt;Bearer ACCESS_TOKEN&gt; and X-NSX-OpenId:&lt;OPEN_ID&gt;. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def renew_authentication_tokens_for_policy_service_instance(tier_0_id, locale_service_id, service_instance_id, opts = {})
      renew_authentication_tokens_for_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts)
      nil
    end

    # Renew the authentication tokens
    # Use this API when an alarm complaining JWT expiry is raised while deploying partner service VM. The OVF for partner service needs to be downloaded from partner services provider. It might be possible that the authentication token for this communication is expired when the service VM deployment starts. That will either require re-login through UI or use of this API. Certain authentication and authorization steps are internally processed in order to enable communication with partner service provider. This API offers the functionality to re-establish communication with partner services provider. This API needs open id and access token to be passed as headers. Those can be obtained from CSP authorize API. Please make sure to pass headers - Authorization:&amp;lt;Bearer ACCESS_TOKEN&amp;gt; and X-NSX-OpenId:&amp;lt;OPEN_ID&amp;gt;. 
    # @param tier_0_id Tier-0 id
    # @param locale_service_id Locale service id
    # @param service_instance_id Service instance id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def renew_authentication_tokens_for_policy_service_instance_with_http_info(tier_0_id, locale_service_id, service_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.renew_authentication_tokens_for_policy_service_instance ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.renew_authentication_tokens_for_policy_service_instance"
      end
      # verify the required parameter 'locale_service_id' is set
      if @api_client.config.client_side_validation && locale_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_service_id' when calling SecurityApi.renew_authentication_tokens_for_policy_service_instance"
      end
      # verify the required parameter 'service_instance_id' is set
      if @api_client.config.client_side_validation && service_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_instance_id' when calling SecurityApi.renew_authentication_tokens_for_policy_service_instance"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-service-id}/service-instances/{service-instance-id}?action=reauth'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-service-id' + '}', locale_service_id.to_s).sub('{' + 'service-instance-id' + '}', service_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#renew_authentication_tokens_for_policy_service_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id   is not already present, create a new firewall identity store. If it already exists, replace the firewall identity store instance with the new object. 
    # @param identity_firewall_store_id firewall identity store ID
    # @param identity_firewall_store 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStore]
    def replace_or_create_firewall_identity_store(identity_firewall_store_id, identity_firewall_store, opts = {})
      data, _status_code, _headers = replace_or_create_firewall_identity_store_with_http_info(identity_firewall_store_id, identity_firewall_store, opts)
      data
    end

    # Create or update a firewall identity store
    # If a firewall identity store with the firewall-identity-store-id   is not already present, create a new firewall identity store. If it already exists, replace the firewall identity store instance with the new object. 
    # @param identity_firewall_store_id firewall identity store ID
    # @param identity_firewall_store 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStore, Fixnum, Hash)>] IdentityFirewallStore data, response status code and response headers
    def replace_or_create_firewall_identity_store_with_http_info(identity_firewall_store_id, identity_firewall_store, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.replace_or_create_firewall_identity_store ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SecurityApi.replace_or_create_firewall_identity_store"
      end
      # verify the required parameter 'identity_firewall_store' is set
      if @api_client.config.client_side_validation && identity_firewall_store.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store' when calling SecurityApi.replace_or_create_firewall_identity_store"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStore')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#replace_or_create_firewall_identity_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a event log server for Firewall Identity store
    # Update a event log server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log Server identifier
    # @param identity_firewall_store_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreEventLogServer]
    def replace_or_create_firewall_identity_store_event_log_server(identity_firewall_store_id, event_log_server_id, identity_firewall_store_event_log_server, opts = {})
      data, _status_code, _headers = replace_or_create_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, identity_firewall_store_event_log_server, opts)
      data
    end

    # Update a event log server for Firewall Identity store
    # Update a event log server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param event_log_server_id Event Log Server identifier
    # @param identity_firewall_store_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreEventLogServer, Fixnum, Hash)>] IdentityFirewallStoreEventLogServer data, response status code and response headers
    def replace_or_create_firewall_identity_store_event_log_server_with_http_info(identity_firewall_store_id, event_log_server_id, identity_firewall_store_event_log_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.replace_or_create_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SecurityApi.replace_or_create_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'event_log_server_id' is set
      if @api_client.config.client_side_validation && event_log_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_log_server_id' when calling SecurityApi.replace_or_create_firewall_identity_store_event_log_server"
      end
      # verify the required parameter 'identity_firewall_store_event_log_server' is set
      if @api_client.config.client_side_validation && identity_firewall_store_event_log_server.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_event_log_server' when calling SecurityApi.replace_or_create_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/event-log-servers/{event-log-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'event-log-server-id' + '}', event_log_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store_event_log_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreEventLogServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#replace_or_create_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a LDAP server for Firewall Identity store
    # Update a LDAP server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param identity_firewall_store_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdentityFirewallStoreLdapServer]
    def replace_or_create_firewall_identity_store_ldap_server(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts = {})
      data, _status_code, _headers = replace_or_create_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts)
      data
    end

    # Update a LDAP server for Firewall Identity store
    # Update a LDAP server for Firewall Identity store
    # @param identity_firewall_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param identity_firewall_store_ldap_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdentityFirewallStoreLdapServer, Fixnum, Hash)>] IdentityFirewallStoreLdapServer data, response status code and response headers
    def replace_or_create_firewall_identity_store_ldap_server_with_http_info(identity_firewall_store_id, ldap_server_id, identity_firewall_store_ldap_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.replace_or_create_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'identity_firewall_store_id' is set
      if @api_client.config.client_side_validation && identity_firewall_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_id' when calling SecurityApi.replace_or_create_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SecurityApi.replace_or_create_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'identity_firewall_store_ldap_server' is set
      if @api_client.config.client_side_validation && identity_firewall_store_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'identity_firewall_store_ldap_server' when calling SecurityApi.replace_or_create_firewall_identity_store_ldap_server"
      end
      # resource path
      local_var_path = '/infra/identity-firewall-stores/{identity-firewall-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'identity-firewall-store-id' + '}', identity_firewall_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(identity_firewall_store_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentityFirewallStoreLdapServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#replace_or_create_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state. 
    # Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state. 
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param action Sync type requested
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :delay Request to execute the sync with some delay in seconds (default to 0)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def request_firewall_identity_store_sync(firewall_identity_store_id, action, opts = {})
      request_firewall_identity_store_sync_with_http_info(firewall_identity_store_id, action, opts)
      nil
    end

    # Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state. 
    # Invoke full sync or delta sync for a specific domain, with additional delay in seconds if needed.  Stop sync will try to stop any pending sync if any to return to idle state. 
    # @param firewall_identity_store_id Firewall identity store identifier
    # @param action Sync type requested
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :delay Request to execute the sync with some delay in seconds
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def request_firewall_identity_store_sync_with_http_info(firewall_identity_store_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.request_firewall_identity_store_sync ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SecurityApi.request_firewall_identity_store_sync"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling SecurityApi.request_firewall_identity_store_sync"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['FULL_SYNC', 'DELTA_SYNC', 'STOP_SYNC'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of FULL_SYNC, DELTA_SYNC, STOP_SYNC"
      end
      if @api_client.config.client_side_validation && !opts[:'delay'].nil? && opts[:'delay'] < 0
        fail ArgumentError, 'invalid value for "opts[:"delay"]" when calling SecurityApi.request_firewall_identity_store_sync, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'delay'] = opts[:'delay'] if !opts[:'delay'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#request_firewall_identity_store_sync\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset IDS-IPS rule statistics
    # Sets IDS-IPS rule statistics counter to zero. - no enforcement point path specified: Reset of stats will be executed for    each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given    enforcement point. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category Aggregation statistic category (default to IDPSDFW)
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def reset_ids_rule_stats(opts = {})
      reset_ids_rule_stats_with_http_info(opts)
      nil
    end

    # Reset IDS-IPS rule statistics
    # Sets IDS-IPS rule statistics counter to zero. - no enforcement point path specified: Reset of stats will be executed for    each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given    enforcement point. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category Aggregation statistic category
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_ids_rule_stats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.reset_ids_rule_stats ...'
      end
      if @api_client.config.client_side_validation && opts[:'category'] && !['IDPSDFW', 'IDPSEDGE'].include?(opts[:'category'])
        fail ArgumentError, 'invalid value for "category", must be one of IDPSDFW, IDPSEDGE'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/stats?action=reset'

      # query parameters
      query_params = {}
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#reset_ids_rule_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset firewall rule statistics
    # Sets firewall rule statistics counter to zero. This operation is supported for given category, for example: DFW i.e. for all layer3 firewall (transport nodes only) rules or EDGE i.e. for all layer3 edge firewall (edge nodes only) rules. - no enforcement point path specified:   On global manager, it is mandatory to give an enforcement point path.   On local manager, reset of stats will be executed for each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given enforcement point. 
    # @param category Aggregation statistic category
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def reset_rule_stats(category, opts = {})
      reset_rule_stats_with_http_info(category, opts)
      nil
    end

    # Reset firewall rule statistics
    # Sets firewall rule statistics counter to zero. This operation is supported for given category, for example: DFW i.e. for all layer3 firewall (transport nodes only) rules or EDGE i.e. for all layer3 edge firewall (edge nodes only) rules. - no enforcement point path specified:   On global manager, it is mandatory to give an enforcement point path.   On local manager, reset of stats will be executed for each enforcement point. - {enforcement_point_path}: Reset of stats will be executed only for the given enforcement point. 
    # @param category Aggregation statistic category
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_rule_stats_with_http_info(category, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.reset_rule_stats ...'
      end
      # verify the required parameter 'category' is set
      if @api_client.config.client_side_validation && category.nil?
        fail ArgumentError, "Missing the required parameter 'category' when calling SecurityApi.reset_rule_stats"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['DFW', 'EDGE', 'BRIDGEFIREWALL'].include?(category)
        fail ArgumentError, "invalid value for 'category', must be one of DFW, EDGE, BRIDGEFIREWALL"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/stats?action=reset'

      # query parameters
      query_params = {}
      query_params[:'category'] = category
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#reset_rule_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of bridge firewall policy
    # This is used to set a precedence of a bridge firewall policy w.r.t others. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param bridge_firewall_policy 
    # @param [Hash] opts the optional parameters
    # @return [BridgeFirewallPolicy]
    def revise_bridge_firewall_policy(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts = {})
      data, _status_code, _headers = revise_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts)
      data
    end

    # Revise the positioning of bridge firewall policy
    # This is used to set a precedence of a bridge firewall policy w.r.t others. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param bridge_firewall_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BridgeFirewallPolicy, Fixnum, Hash)>] BridgeFirewallPolicy data, response status code and response headers
    def revise_bridge_firewall_policy_with_http_info(domain_id, bridge_firewall_policy_id, bridge_firewall_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.revise_bridge_firewall_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.revise_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling SecurityApi.revise_bridge_firewall_policy"
      end
      # verify the required parameter 'bridge_firewall_policy' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy' when calling SecurityApi.revise_bridge_firewall_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bridge_firewall_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BridgeFirewallPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#revise_bridge_firewall_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of bridge firewall rule
    # This is used to re-order a bridge firewall rule within a bridge firewall policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def revise_bridge_firewall_rule(domain_id, bridge_firewall_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = revise_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of bridge firewall rule
    # This is used to re-order a bridge firewall rule within a bridge firewall policy. 
    # @param domain_id 
    # @param bridge_firewall_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def revise_bridge_firewall_rule_with_http_info(domain_id, bridge_firewall_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.revise_bridge_firewall_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.revise_bridge_firewall_rule"
      end
      # verify the required parameter 'bridge_firewall_policy_id' is set
      if @api_client.config.client_side_validation && bridge_firewall_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'bridge_firewall_policy_id' when calling SecurityApi.revise_bridge_firewall_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.revise_bridge_firewall_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.revise_bridge_firewall_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/bridge-policies/{bridge-firewall-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'bridge-firewall-policy-id' + '}', bridge_firewall_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#revise_bridge_firewall_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of communication entry
    # This is used to re-order a communictation entry within a communication map.  <br> This API is deprecated. Please use the following API instead. POST /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id?action=revise 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param communication_entry 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The communication map/communication entry path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [CommunicationEntry]
    def revise_communication_entry(domain_id, communication_map_id, communication_entry_id, communication_entry, opts = {})
      data, _status_code, _headers = revise_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, communication_entry, opts)
      data
    end

    # Revise the positioning of communication entry
    # This is used to re-order a communictation entry within a communication map.  &lt;br&gt; This API is deprecated. Please use the following API instead. POST /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id?action&#x3D;revise 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param communication_entry 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The communication map/communication entry path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(CommunicationEntry, Fixnum, Hash)>] CommunicationEntry data, response status code and response headers
    def revise_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, communication_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.revise_communication_entry ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.revise_communication_entry"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling SecurityApi.revise_communication_entry"
      end
      # verify the required parameter 'communication_entry_id' is set
      if @api_client.config.client_side_validation && communication_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry_id' when calling SecurityApi.revise_communication_entry"
      end
      # verify the required parameter 'communication_entry' is set
      if @api_client.config.client_side_validation && communication_entry.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry' when calling SecurityApi.revise_communication_entry"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}/communication-entries/{communication-entry-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s).sub('{' + 'communication-entry-id' + '}', communication_entry_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#revise_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of communication maps
    # This is used to set a precedence of a communication map w.r.t others.  <br> This API is deprecated. Please use the following API instead. POST /infra/domains/domain-id/security-policies/security-policy-id?action=revise 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The communication map/communication entry path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [CommunicationMap]
    def revise_communication_maps(domain_id, communication_map_id, communication_map, opts = {})
      data, _status_code, _headers = revise_communication_maps_with_http_info(domain_id, communication_map_id, communication_map, opts)
      data
    end

    # Revise the positioning of communication maps
    # This is used to set a precedence of a communication map w.r.t others.  &lt;br&gt; This API is deprecated. Please use the following API instead. POST /infra/domains/domain-id/security-policies/security-policy-id?action&#x3D;revise 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The communication map/communication entry path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(CommunicationMap, Fixnum, Hash)>] CommunicationMap data, response status code and response headers
    def revise_communication_maps_with_http_info(domain_id, communication_map_id, communication_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.revise_communication_maps ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.revise_communication_maps"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling SecurityApi.revise_communication_maps"
      end
      # verify the required parameter 'communication_map' is set
      if @api_client.config.client_side_validation && communication_map.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map' when calling SecurityApi.revise_communication_maps"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#revise_communication_maps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of gateway policy
    # This is used to set a precedence of a gateway policy w.r.t others. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [GatewayPolicy]
    def revise_gateway_policy(domain_id, gateway_policy_id, gateway_policy, opts = {})
      data, _status_code, _headers = revise_gateway_policy_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts)
      data
    end

    # Revise the positioning of gateway policy
    # This is used to set a precedence of a gateway policy w.r.t others. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def revise_gateway_policy_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.revise_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.revise_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.revise_gateway_policy"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling SecurityApi.revise_gateway_policy"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#revise_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of gateway rule
    # This is used to re-order a gateway rule within a gateway policy. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [Rule]
    def revise_gateway_rule(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = revise_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of gateway rule
    # This is used to re-order a gateway rule within a gateway policy. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def revise_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.revise_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.revise_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.revise_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.revise_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.revise_gateway_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#revise_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS gateway policy
    # This is used to set a precedence of a IDS gateway policy w.r.t others. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsGatewayPolicy]
    def revise_ids_gateway_policy(domain_id, policy_id, ids_gateway_policy, opts = {})
      data, _status_code, _headers = revise_ids_gateway_policy_with_http_info(domain_id, policy_id, ids_gateway_policy, opts)
      data
    end

    # Revise the positioning of IDS gateway policy
    # This is used to set a precedence of a IDS gateway policy w.r.t others. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsGatewayPolicy, Fixnum, Hash)>] IdsGatewayPolicy data, response status code and response headers
    def revise_ids_gateway_policy_with_http_info(domain_id, policy_id, ids_gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.revise_ids_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.revise_ids_gateway_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.revise_ids_gateway_policy"
      end
      # verify the required parameter 'ids_gateway_policy' is set
      if @api_client.config.client_side_validation && ids_gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_gateway_policy' when calling SecurityApi.revise_ids_gateway_policy"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsGatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#revise_ids_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS gateway rule
    # This is used to re-order a IDS gateway rule within a IDS gateway policy. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsRule]
    def revise_ids_gateway_rule(domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = revise_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # Revise the positioning of IDS gateway rule
    # This is used to re-order a IDS gateway rule within a IDS gateway policy. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def revise_ids_gateway_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.revise_ids_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.revise_ids_gateway_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.revise_ids_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.revise_ids_gateway_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling SecurityApi.revise_ids_gateway_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-gateway-policies/{policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#revise_ids_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS rule
    # This is used to re-order a rule within a security policy. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsRule]
    def revise_ids_rule(domain_id, policy_id, rule_id, ids_rule, opts = {})
      data, _status_code, _headers = revise_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts)
      data
    end

    # Revise the positioning of IDS rule
    # This is used to re-order a rule within a security policy. 
    # @param domain_id 
    # @param policy_id 
    # @param rule_id 
    # @param ids_rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsRule, Fixnum, Hash)>] IdsRule data, response status code and response headers
    def revise_ids_rule_with_http_info(domain_id, policy_id, rule_id, ids_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.revise_ids_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.revise_ids_rule"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.revise_ids_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.revise_ids_rule"
      end
      # verify the required parameter 'ids_rule' is set
      if @api_client.config.client_side_validation && ids_rule.nil?
        fail ArgumentError, "Missing the required parameter 'ids_rule' when calling SecurityApi.revise_ids_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#revise_ids_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of IDS security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [IdsSecurityPolicy]
    def revise_ids_security_policy(domain_id, policy_id, ids_security_policy, opts = {})
      data, _status_code, _headers = revise_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts)
      data
    end

    # Revise the positioning of IDS security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param domain_id 
    # @param policy_id 
    # @param ids_security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(IdsSecurityPolicy, Fixnum, Hash)>] IdsSecurityPolicy data, response status code and response headers
    def revise_ids_security_policy_with_http_info(domain_id, policy_id, ids_security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.revise_ids_security_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.revise_ids_security_policy"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling SecurityApi.revise_ids_security_policy"
      end
      # verify the required parameter 'ids_security_policy' is set
      if @api_client.config.client_side_validation && ids_security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'ids_security_policy' when calling SecurityApi.revise_ids_security_policy"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/intrusion-service-policies/{policy-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#revise_ids_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [SecurityPolicy]
    def revise_security_policies(domain_id, security_policy_id, security_policy, opts = {})
      data, _status_code, _headers = revise_security_policies_with_http_info(domain_id, security_policy_id, security_policy, opts)
      data
    end

    # Revise the positioning of security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def revise_security_policies_with_http_info(domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.revise_security_policies ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.revise_security_policies"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.revise_security_policies"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling SecurityApi.revise_security_policies"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#revise_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of rule
    # This is used to re-order a rule within a security policy. 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [Rule]
    def revise_security_rule(domain_id, security_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = revise_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of rule
    # This is used to re-order a rule within a security policy. 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def revise_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.revise_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.revise_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.revise_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.revise_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.revise_security_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#revise_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of VPC gateway policies
    # This is used to set a precedence of a VPC gateway policy w.r.t others. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [GatewayPolicy]
    def revise_vpc_gateway_policies(org_id, project_id, vpc_id, gateway_policy_id, gateway_policy, opts = {})
      data, _status_code, _headers = revise_vpc_gateway_policies_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, gateway_policy, opts)
      data
    end

    # Revise the positioning of VPC gateway policies
    # This is used to set a precedence of a VPC gateway policy w.r.t others. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def revise_vpc_gateway_policies_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.revise_vpc_gateway_policies ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.revise_vpc_gateway_policies"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.revise_vpc_gateway_policies"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.revise_vpc_gateway_policies"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.revise_vpc_gateway_policies"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling SecurityApi.revise_vpc_gateway_policies"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#revise_vpc_gateway_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of VPC N-S Firewall rule
    # This is used to re-order a rule within a VPC gateway policy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [Rule]
    def revise_vpc_gateway_rule(org_id, project_id, vpc_id, gateway_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = revise_vpc_gateway_rule_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of VPC N-S Firewall rule
    # This is used to re-order a rule within a VPC gateway policy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def revise_vpc_gateway_rule_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.revise_vpc_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.revise_vpc_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.revise_vpc_gateway_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.revise_vpc_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.revise_vpc_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.revise_vpc_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.revise_vpc_gateway_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#revise_vpc_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of VPC security policies
    # This is used to set a precedence of a VPC security policy w.r.t others. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [SecurityPolicy]
    def revise_vpc_security_policies(org_id, project_id, vpc_id, security_policy_id, security_policy, opts = {})
      data, _status_code, _headers = revise_vpc_security_policies_with_http_info(org_id, project_id, vpc_id, security_policy_id, security_policy, opts)
      data
    end

    # Revise the positioning of VPC security policies
    # This is used to set a precedence of a VPC security policy w.r.t others. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def revise_vpc_security_policies_with_http_info(org_id, project_id, vpc_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.revise_vpc_security_policies ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.revise_vpc_security_policies"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.revise_vpc_security_policies"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.revise_vpc_security_policies"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.revise_vpc_security_policies"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling SecurityApi.revise_vpc_security_policies"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#revise_vpc_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of VPC E-W Firewall rule
    # This is used to re-order a rule within a VPC security policy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [Rule]
    def revise_vpc_security_rule(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = revise_vpc_security_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of VPC E-W Firewall rule
    # This is used to re-order a rule within a VPC security policy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def revise_vpc_security_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.revise_vpc_security_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.revise_vpc_security_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.revise_vpc_security_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.revise_vpc_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.revise_vpc_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.revise_vpc_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.revise_vpc_security_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#revise_vpc_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Scan  the size of a directory domain
    # This call scans the size of a directory domain. It may be very | expensive to run this call in some AD domain deployments. Please | use it with caution.
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryDomainSize]
    def scan_firewall_identity_store_size(directory_domain, opts = {})
      data, _status_code, _headers = scan_firewall_identity_store_size_with_http_info(directory_domain, opts)
      data
    end

    # Scan  the size of a directory domain
    # This call scans the size of a directory domain. It may be very | expensive to run this call in some AD domain deployments. Please | use it with caution.
    # @param directory_domain 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryDomainSize, Fixnum, Hash)>] DirectoryDomainSize data, response status code and response headers
    def scan_firewall_identity_store_size_with_http_info(directory_domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.scan_firewall_identity_store_size ...'
      end
      # verify the required parameter 'directory_domain' is set
      if @api_client.config.client_side_validation && directory_domain.nil?
        fail ArgumentError, "Missing the required parameter 'directory_domain' when calling SecurityApi.scan_firewall_identity_store_size"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-store-size'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryDomainSize')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#scan_firewall_identity_store_size\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN=User,DC=acme,DC=com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by '|' (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN=Ann,CN=Users,DC=acme,DC=com|CN=Bob,CN=Users,DC=acme,DC=com)
    # Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN=User,DC=acme,DC=com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by '|' (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN=Ann,CN=Users,DC=acme,DC=com|CN=Bob,CN=Users,DC=acme,DC=com)
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param filter_value Name search filter value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DirectoryGroupListResults]
    def search_firewall_identity_groups(firewall_identity_store_id, filter_value, opts = {})
      data, _status_code, _headers = search_firewall_identity_groups_with_http_info(firewall_identity_store_id, filter_value, opts)
      data
    end

    # Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN&#x3D;User,DC&#x3D;acme,DC&#x3D;com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by &#39;|&#39; (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN&#x3D;Ann,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com|CN&#x3D;Bob,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com)
    # Search for directory groups within a domain based on the substring of a distinguished name. (e.g. CN&#x3D;User,DC&#x3D;acme,DC&#x3D;com) The search filter pattern can optionally support multiple (up to 100 maximum) search pattern separated by &#39;|&#39; (url encoded %7C). In this case, the search results will be returned as the union of all matching criteria. (e.g. CN&#x3D;Ann,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com|CN&#x3D;Bob,CN&#x3D;Users,DC&#x3D;acme,DC&#x3D;com)
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param filter_value Name search filter value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DirectoryGroupListResults, Fixnum, Hash)>] DirectoryGroupListResults data, response status code and response headers
    def search_firewall_identity_groups_with_http_info(firewall_identity_store_id, filter_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.search_firewall_identity_groups ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SecurityApi.search_firewall_identity_groups"
      end
      # verify the required parameter 'filter_value' is set
      if @api_client.config.client_side_validation && filter_value.nil?
        fail ArgumentError, "Missing the required parameter 'filter_value' when calling SecurityApi.search_firewall_identity_groups"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.search_firewall_identity_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityApi.search_firewall_identity_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/groups'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter_value'] = filter_value
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryGroupListResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#search_firewall_identity_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def test_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, action, opts = {})
      test_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, action, opts)
      nil
    end

    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def test_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.test_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling SecurityApi.test_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling SecurityApi.test_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling SecurityApi.test_firewall_identity_store_ldap_server"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CONNECTIVITY'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CONNECTIVITY"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#test_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a CommunicationEntry
    # Update the CommunicationEntry. If a CommunicationEntry with the communication-entry-id is not already present, this API fails with a 404. Creation of CommunicationEntries is not allowed using this API.  <br> This API is deprecated. Please use the following API instead PUT /infra/domains/domain-id/security-policies/securit-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param communication_entry 
    # @param [Hash] opts the optional parameters
    # @return [CommunicationEntry]
    def update_communication_entry(domain_id, communication_map_id, communication_entry_id, communication_entry, opts = {})
      data, _status_code, _headers = update_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, communication_entry, opts)
      data
    end

    # Create or update a CommunicationEntry
    # Update the CommunicationEntry. If a CommunicationEntry with the communication-entry-id is not already present, this API fails with a 404. Creation of CommunicationEntries is not allowed using this API.  &lt;br&gt; This API is deprecated. Please use the following API instead PUT /infra/domains/domain-id/security-policies/securit-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param communication_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommunicationEntry, Fixnum, Hash)>] CommunicationEntry data, response status code and response headers
    def update_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, communication_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_communication_entry ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.update_communication_entry"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling SecurityApi.update_communication_entry"
      end
      # verify the required parameter 'communication_entry_id' is set
      if @api_client.config.client_side_validation && communication_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry_id' when calling SecurityApi.update_communication_entry"
      end
      # verify the required parameter 'communication_entry' is set
      if @api_client.config.client_side_validation && communication_entry.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry' when calling SecurityApi.update_communication_entry"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}/communication-entries/{communication-entry-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s).sub('{' + 'communication-entry-id' + '}', communication_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update communication map
    # Create or Update the communication map for a domain. This is a full replace. All the CommunicationEntries are replaced.  <br> This API is deprecated. Please use the following API instead. PUT /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @return [CommunicationMap]
    def update_communication_map_for_domain(domain_id, communication_map_id, communication_map, opts = {})
      data, _status_code, _headers = update_communication_map_for_domain_with_http_info(domain_id, communication_map_id, communication_map, opts)
      data
    end

    # Create or Update communication map
    # Create or Update the communication map for a domain. This is a full replace. All the CommunicationEntries are replaced.  &lt;br&gt; This API is deprecated. Please use the following API instead. PUT /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommunicationMap, Fixnum, Hash)>] CommunicationMap data, response status code and response headers
    def update_communication_map_for_domain_with_http_info(domain_id, communication_map_id, communication_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_communication_map_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.update_communication_map_for_domain"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling SecurityApi.update_communication_map_for_domain"
      end
      # verify the required parameter 'communication_map' is set
      if @api_client.config.client_side_validation && communication_map.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map' when calling SecurityApi.update_communication_map_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_communication_map_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update CPU and memory thresholds profile
    # Create or update CPU and memory thresholds profile.
    # @param profile_id 
    # @param policy_firewall_cpu_mem_thresholds_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [PolicyFirewallCpuMemThresholdsProfile]
    def update_cpu_mem_thresholds_profile(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts = {})
      data, _status_code, _headers = update_cpu_mem_thresholds_profile_with_http_info(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts)
      data
    end

    # Create or update CPU and memory thresholds profile
    # Create or update CPU and memory thresholds profile.
    # @param profile_id 
    # @param policy_firewall_cpu_mem_thresholds_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(PolicyFirewallCpuMemThresholdsProfile, Fixnum, Hash)>] PolicyFirewallCpuMemThresholdsProfile data, response status code and response headers
    def update_cpu_mem_thresholds_profile_with_http_info(profile_id, policy_firewall_cpu_mem_thresholds_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_cpu_mem_thresholds_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.update_cpu_mem_thresholds_profile"
      end
      # verify the required parameter 'policy_firewall_cpu_mem_thresholds_profile' is set
      if @api_client.config.client_side_validation && policy_firewall_cpu_mem_thresholds_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_cpu_mem_thresholds_profile' when calling SecurityApi.update_cpu_mem_thresholds_profile"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/cpu-mem-thresholds-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_cpu_mem_thresholds_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallCpuMemThresholdsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_cpu_mem_thresholds_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [DnsSecurityProfile]
    def update_dns_security_profile(profile_id, dns_security_profile, opts = {})
      data, _status_code, _headers = update_dns_security_profile_with_http_info(profile_id, dns_security_profile, opts)
      data
    end

    # Create or update DNS security profile
    # Create or update DNS security profile
    # @param profile_id 
    # @param dns_security_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(DnsSecurityProfile, Fixnum, Hash)>] DnsSecurityProfile data, response status code and response headers
    def update_dns_security_profile_with_http_info(profile_id, dns_security_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_dns_security_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling SecurityApi.update_dns_security_profile"
      end
      # verify the required parameter 'dns_security_profile' is set
      if @api_client.config.client_side_validation && dns_security_profile.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile' when calling SecurityApi.update_dns_security_profile"
      end
      # resource path
      local_var_path = '/infra/dns-security-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dns_security_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_dns_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update DNS security profile binding map
    # API will update DNS security profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param dns_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [DnsSecurityProfileBindingMap]
    def update_dns_security_profile_binding(domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts = {})
      data, _status_code, _headers = update_dns_security_profile_binding_with_http_info(domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts)
      data
    end

    # Update DNS security profile binding map
    # API will update DNS security profile binding map
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param dns_security_profile_binding_map_id DNS security profile binding map ID
    # @param dns_security_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DnsSecurityProfileBindingMap, Fixnum, Hash)>] DnsSecurityProfileBindingMap data, response status code and response headers
    def update_dns_security_profile_binding_with_http_info(domain_id, group_id, dns_security_profile_binding_map_id, dns_security_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_dns_security_profile_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.update_dns_security_profile_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.update_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map_id' when calling SecurityApi.update_dns_security_profile_binding"
      end
      # verify the required parameter 'dns_security_profile_binding_map' is set
      if @api_client.config.client_side_validation && dns_security_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'dns_security_profile_binding_map' when calling SecurityApi.update_dns_security_profile_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/dns-security-profile-binding-maps/{dns-security-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'dns-security-profile-binding-map-id' + '}', dns_security_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dns_security_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsSecurityProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_dns_security_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Flood Protection Profile
    # API will update Firewall Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [FloodProtectionProfile]
    def update_flood_protection_profile(flood_protection_profile_id, flood_protection_profile, opts = {})
      data, _status_code, _headers = update_flood_protection_profile_with_http_info(flood_protection_profile_id, flood_protection_profile, opts)
      data
    end

    # Update Firewall Flood Protection Profile
    # API will update Firewall Flood Protection Profile
    # @param flood_protection_profile_id Flood Protection Profile ID
    # @param flood_protection_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(FloodProtectionProfile, Fixnum, Hash)>] FloodProtectionProfile data, response status code and response headers
    def update_flood_protection_profile_with_http_info(flood_protection_profile_id, flood_protection_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_flood_protection_profile ...'
      end
      # verify the required parameter 'flood_protection_profile_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_id' when calling SecurityApi.update_flood_protection_profile"
      end
      # verify the required parameter 'flood_protection_profile' is set
      if @api_client.config.client_side_validation && flood_protection_profile.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile' when calling SecurityApi.update_flood_protection_profile"
      end
      # resource path
      local_var_path = '/infra/flood-protection-profiles/{flood-protection-profile-id}'.sub('{' + 'flood-protection-profile-id' + '}', flood_protection_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_flood_protection_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Geo IP Setting Configuration
    # This API can be used to activate or deactivate auto-download of Geo IP Bundle. Once auto-download is activated, Geo IP Bundle will be downloaded at regular intervals of 720 minutes (12 hrs). 
    # @param geo_ip_setting 
    # @param [Hash] opts the optional parameters
    # @return [GeoIpSetting]
    def update_geo_ip_setting(geo_ip_setting, opts = {})
      data, _status_code, _headers = update_geo_ip_setting_with_http_info(geo_ip_setting, opts)
      data
    end

    # Update Geo IP Setting Configuration
    # This API can be used to activate or deactivate auto-download of Geo IP Bundle. Once auto-download is activated, Geo IP Bundle will be downloaded at regular intervals of 720 minutes (12 hrs). 
    # @param geo_ip_setting 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeoIpSetting, Fixnum, Hash)>] GeoIpSetting data, response status code and response headers
    def update_geo_ip_setting_with_http_info(geo_ip_setting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_geo_ip_setting ...'
      end
      # verify the required parameter 'geo_ip_setting' is set
      if @api_client.config.client_side_validation && geo_ip_setting.nil?
        fail ArgumentError, "Missing the required parameter 'geo_ip_setting' when calling SecurityApi.update_geo_ip_setting"
      end
      # resource path
      local_var_path = '/infra/geo-ip/setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(geo_ip_setting)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpSetting')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_geo_ip_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Group Monitoring Profile Binding Map
    # API will update Group Monitoring Profile Binding Map
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param group_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [GroupMonitoringProfileBindingMap]
    def update_group_monitoring_binding(domain_id, group_id, group_monitoring_profile_binding_map_id, group_monitoring_profile_binding_map, opts = {})
      data, _status_code, _headers = update_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, group_monitoring_profile_binding_map, opts)
      data
    end

    # Update Group Monitoring Profile Binding Map
    # API will update Group Monitoring Profile Binding Map
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param group_monitoring_profile_binding_map_id Group Monitoring Profile Binding Map ID
    # @param group_monitoring_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupMonitoringProfileBindingMap, Fixnum, Hash)>] GroupMonitoringProfileBindingMap data, response status code and response headers
    def update_group_monitoring_binding_with_http_info(domain_id, group_id, group_monitoring_profile_binding_map_id, group_monitoring_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_group_monitoring_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.update_group_monitoring_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.update_group_monitoring_binding"
      end
      # verify the required parameter 'group_monitoring_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && group_monitoring_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_monitoring_profile_binding_map_id' when calling SecurityApi.update_group_monitoring_binding"
      end
      # verify the required parameter 'group_monitoring_profile_binding_map' is set
      if @api_client.config.client_side_validation && group_monitoring_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'group_monitoring_profile_binding_map' when calling SecurityApi.update_group_monitoring_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/group-monitoring-profile-binding-maps/{group-monitoring-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'group-monitoring-profile-binding-map-id' + '}', group_monitoring_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group_monitoring_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupMonitoringProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_group_monitoring_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update IDS custom signature settings
    # Update IDS custom signature settings. 
    # @param version_id 
    # @param ids_custom_signature_settings 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignatureSettings]
    def update_ids_custom_signature_settings(version_id, ids_custom_signature_settings, opts = {})
      data, _status_code, _headers = update_ids_custom_signature_settings_with_http_info(version_id, ids_custom_signature_settings, opts)
      data
    end

    # Update IDS custom signature settings
    # Update IDS custom signature settings. 
    # @param version_id 
    # @param ids_custom_signature_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignatureSettings, Fixnum, Hash)>] IdsCustomSignatureSettings data, response status code and response headers
    def update_ids_custom_signature_settings_with_http_info(version_id, ids_custom_signature_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_ids_custom_signature_settings ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SecurityApi.update_ids_custom_signature_settings"
      end
      # verify the required parameter 'ids_custom_signature_settings' is set
      if @api_client.config.client_side_validation && ids_custom_signature_settings.nil?
        fail ArgumentError, "Missing the required parameter 'ids_custom_signature_settings' when calling SecurityApi.update_ids_custom_signature_settings"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/settings'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_custom_signature_settings)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_ids_custom_signature_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Intrusion detection system settings
    # Intrusion detection system settings. 
    # @param ids_settings 
    # @param [Hash] opts the optional parameters
    # @return [IdsSettings]
    def update_ids_settings(ids_settings, opts = {})
      data, _status_code, _headers = update_ids_settings_with_http_info(ids_settings, opts)
      data
    end

    # Update Intrusion detection system settings
    # Intrusion detection system settings. 
    # @param ids_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSettings, Fixnum, Hash)>] IdsSettings data, response status code and response headers
    def update_ids_settings_with_http_info(ids_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_ids_settings ...'
      end
      # verify the required parameter 'ids_settings' is set
      if @api_client.config.client_side_validation && ids_settings.nil?
        fail ArgumentError, "Missing the required parameter 'ids_settings' when calling SecurityApi.update_ids_settings"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_settings)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_ids_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update threshold configuration for IDS system signature
    # Update threshold and rate filter configuration for IDS signature globally. This API is applicable only for 'System' signatures. Either or both of threshold and rate filter configuration can be provided. 
    # @param signature_id Signature ID
    # @param ids_threshold_config 
    # @param [Hash] opts the optional parameters
    # @return [IdsThresholdConfig]
    def update_ids_signature_threshold_config(signature_id, ids_threshold_config, opts = {})
      data, _status_code, _headers = update_ids_signature_threshold_config_with_http_info(signature_id, ids_threshold_config, opts)
      data
    end

    # Update threshold configuration for IDS system signature
    # Update threshold and rate filter configuration for IDS signature globally. This API is applicable only for &#39;System&#39; signatures. Either or both of threshold and rate filter configuration can be provided. 
    # @param signature_id Signature ID
    # @param ids_threshold_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsThresholdConfig, Fixnum, Hash)>] IdsThresholdConfig data, response status code and response headers
    def update_ids_signature_threshold_config_with_http_info(signature_id, ids_threshold_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_ids_signature_threshold_config ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SecurityApi.update_ids_signature_threshold_config"
      end
      # verify the required parameter 'ids_threshold_config' is set
      if @api_client.config.client_side_validation && ids_threshold_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_threshold_config' when calling SecurityApi.update_ids_signature_threshold_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/threshold-configs/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_threshold_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsThresholdConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_ids_signature_threshold_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download and update IDS signatures
    # Trigger the process to Download and update the IDS signatures manually. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_ids_signatures(opts = {})
      update_ids_signatures_with_http_info(opts)
      nil
    end

    # Download and update IDS signatures
    # Trigger the process to Download and update the IDS signatures manually. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_ids_signatures_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_ids_signatures ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signatures?action=update_signatures'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_ids_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall CPU Memory Thresholds Profile Binding Map
    # API will update Firewall CPU Memory Thresholds Profile Binding Map.
    # @param cpu_mem_thresholds_profile_binding_map_id Firewall CPU Memory Thresholds Profile Binding Map ID
    # @param policy_firewall_cpu_mem_thresholds_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallCPUMemThresholdsProfileBindingMap]
    def update_policy_firewall_cpu_mem_thresholds_profile_binding_map(cpu_mem_thresholds_profile_binding_map_id, policy_firewall_cpu_mem_thresholds_profile_binding_map, opts = {})
      data, _status_code, _headers = update_policy_firewall_cpu_mem_thresholds_profile_binding_map_with_http_info(cpu_mem_thresholds_profile_binding_map_id, policy_firewall_cpu_mem_thresholds_profile_binding_map, opts)
      data
    end

    # Update Firewall CPU Memory Thresholds Profile Binding Map
    # API will update Firewall CPU Memory Thresholds Profile Binding Map.
    # @param cpu_mem_thresholds_profile_binding_map_id Firewall CPU Memory Thresholds Profile Binding Map ID
    # @param policy_firewall_cpu_mem_thresholds_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallCPUMemThresholdsProfileBindingMap, Fixnum, Hash)>] PolicyFirewallCPUMemThresholdsProfileBindingMap data, response status code and response headers
    def update_policy_firewall_cpu_mem_thresholds_profile_binding_map_with_http_info(cpu_mem_thresholds_profile_binding_map_id, policy_firewall_cpu_mem_thresholds_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_policy_firewall_cpu_mem_thresholds_profile_binding_map ...'
      end
      # verify the required parameter 'cpu_mem_thresholds_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && cpu_mem_thresholds_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'cpu_mem_thresholds_profile_binding_map_id' when calling SecurityApi.update_policy_firewall_cpu_mem_thresholds_profile_binding_map"
      end
      # verify the required parameter 'policy_firewall_cpu_mem_thresholds_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_cpu_mem_thresholds_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_cpu_mem_thresholds_profile_binding_map' when calling SecurityApi.update_policy_firewall_cpu_mem_thresholds_profile_binding_map"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/cpu-mem-thresholds-profile-binding-maps/{cpu-mem-thresholds-profile-binding-map-id}'.sub('{' + 'cpu-mem-thresholds-profile-binding-map-id' + '}', cpu_mem_thresholds_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_cpu_mem_thresholds_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallCPUMemThresholdsProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_policy_firewall_cpu_mem_thresholds_profile_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Flood Protection Profile Binding Map
    # API will update Firewall Flood Protection Profile Binding Map
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallFloodProtectionProfileBindingMap]
    def update_policy_firewall_flood_protection_binding(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = update_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts)
      data
    end

    # Update Firewall Flood Protection Profile Binding Map
    # API will update Firewall Flood Protection Profile Binding Map
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param firewall_flood_protection_profile_binding_map_id Firewall Flood Protection Profile Binding Map ID
    # @param policy_firewall_flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallFloodProtectionProfileBindingMap, Fixnum, Hash)>] PolicyFirewallFloodProtectionProfileBindingMap data, response status code and response headers
    def update_policy_firewall_flood_protection_binding_with_http_info(domain_id, group_id, firewall_flood_protection_profile_binding_map_id, policy_firewall_flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_policy_firewall_flood_protection_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.update_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.update_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'firewall_flood_protection_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_flood_protection_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_flood_protection_profile_binding_map_id' when calling SecurityApi.update_policy_firewall_flood_protection_binding"
      end
      # verify the required parameter 'policy_firewall_flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_flood_protection_profile_binding_map' when calling SecurityApi.update_policy_firewall_flood_protection_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-flood-protection-profile-binding-maps/{firewall-flood-protection-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-flood-protection-profile-binding-map-id' + '}', firewall_flood_protection_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallFloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_policy_firewall_flood_protection_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyFirewallScheduler
    # Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \"days\", \"start_date\", \"time_interval\", \"end_date\" is required if \"recurring\" field is true. Also \"start_time\" and \"end_time\" should not be present. And if \"recurring\" field is false then \"start_date\" and \"end_date\" is mandatory, \"start_time\" and \"end_time\" is optional. Also the fields \"days\" and \"time_interval\" should not be present. 
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallScheduler]
    def update_policy_firewall_scheduler(firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      data, _status_code, _headers = update_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, policy_firewall_scheduler, opts)
      data
    end

    # Create or Update PolicyFirewallScheduler
    # Updates a PolicyFirewallScheduler, which can be set at security policy. Note that at least one property out of \&quot;days\&quot;, \&quot;start_date\&quot;, \&quot;time_interval\&quot;, \&quot;end_date\&quot; is required if \&quot;recurring\&quot; field is true. Also \&quot;start_time\&quot; and \&quot;end_time\&quot; should not be present. And if \&quot;recurring\&quot; field is false then \&quot;start_date\&quot; and \&quot;end_date\&quot; is mandatory, \&quot;start_time\&quot; and \&quot;end_time\&quot; is optional. Also the fields \&quot;days\&quot; and \&quot;time_interval\&quot; should not be present. 
    # @param firewall_scheduler_id 
    # @param policy_firewall_scheduler 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallScheduler, Fixnum, Hash)>] PolicyFirewallScheduler data, response status code and response headers
    def update_policy_firewall_scheduler_with_http_info(firewall_scheduler_id, policy_firewall_scheduler, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_policy_firewall_scheduler ...'
      end
      # verify the required parameter 'firewall_scheduler_id' is set
      if @api_client.config.client_side_validation && firewall_scheduler_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_scheduler_id' when calling SecurityApi.update_policy_firewall_scheduler"
      end
      # verify the required parameter 'policy_firewall_scheduler' is set
      if @api_client.config.client_side_validation && policy_firewall_scheduler.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_scheduler' when calling SecurityApi.update_policy_firewall_scheduler"
      end
      # resource path
      local_var_path = '/infra/firewall-schedulers/{firewall-scheduler-id}'.sub('{' + 'firewall-scheduler-id' + '}', firewall_scheduler_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_scheduler)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallScheduler')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_policy_firewall_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Session Timer Profile Binding Map
    # API will update Firewall Session Timer Profile Binding Map
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param policy_firewall_session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFirewallSessionTimerProfileBindingMap]
    def update_policy_firewall_session_timer_binding(domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = update_policy_firewall_session_timer_binding_with_http_info(domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts)
      data
    end

    # Update Firewall Session Timer Profile Binding Map
    # API will update Firewall Session Timer Profile Binding Map
    # @param domain_id DomainID
    # @param group_id Group ID
    # @param firewall_session_timer_profile_binding_map_id Firewall Session Timer Profile Binding Map ID
    # @param policy_firewall_session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFirewallSessionTimerProfileBindingMap, Fixnum, Hash)>] PolicyFirewallSessionTimerProfileBindingMap data, response status code and response headers
    def update_policy_firewall_session_timer_binding_with_http_info(domain_id, group_id, firewall_session_timer_profile_binding_map_id, policy_firewall_session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_policy_firewall_session_timer_binding ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.update_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.update_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'firewall_session_timer_profile_binding_map_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_binding_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_binding_map_id' when calling SecurityApi.update_policy_firewall_session_timer_binding"
      end
      # verify the required parameter 'policy_firewall_session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && policy_firewall_session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_session_timer_profile_binding_map' when calling SecurityApi.update_policy_firewall_session_timer_binding"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/firewall-session-timer-profile-binding-maps/{firewall-session-timer-profile-binding-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'firewall-session-timer-profile-binding-map-id' + '}', firewall_session_timer_profile_binding_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_policy_firewall_session_timer_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Firewall Session Timer Profile
    # API will update Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [PolicyFirewallSessionTimerProfile]
    def update_policy_firewall_session_timer_profile(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      data, _status_code, _headers = update_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts)
      data
    end

    # Update Firewall Session Timer Profile
    # API will update Firewall Session Timer Profile
    # @param firewall_session_timer_profile_id Firewall Session Timer Profile ID
    # @param policy_firewall_session_timer_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(PolicyFirewallSessionTimerProfile, Fixnum, Hash)>] PolicyFirewallSessionTimerProfile data, response status code and response headers
    def update_policy_firewall_session_timer_profile_with_http_info(firewall_session_timer_profile_id, policy_firewall_session_timer_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_policy_firewall_session_timer_profile ...'
      end
      # verify the required parameter 'firewall_session_timer_profile_id' is set
      if @api_client.config.client_side_validation && firewall_session_timer_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_session_timer_profile_id' when calling SecurityApi.update_policy_firewall_session_timer_profile"
      end
      # verify the required parameter 'policy_firewall_session_timer_profile' is set
      if @api_client.config.client_side_validation && policy_firewall_session_timer_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_firewall_session_timer_profile' when calling SecurityApi.update_policy_firewall_session_timer_profile"
      end
      # resource path
      local_var_path = '/infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}'.sub('{' + 'firewall-session-timer-profile-id' + '}', firewall_session_timer_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_firewall_session_timer_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFirewallSessionTimerProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_policy_firewall_session_timer_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security policy
    # Create or Update the security policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a security policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def update_security_policy_for_domain(domain_id, security_policy_id, security_policy, opts = {})
      data, _status_code, _headers = update_security_policy_for_domain_with_http_info(domain_id, security_policy_id, security_policy, opts)
      data
    end

    # Create or Update security policy
    # Create or Update the security policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a security policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def update_security_policy_for_domain_with_http_info(domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_security_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.update_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.update_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling SecurityApi.update_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a rule
    # Update the rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you wish to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/security-policies/&lt;security-policy-id&gt; 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def update_security_rule(domain_id, security_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = update_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts)
      data
    end

    # Create or update a rule
    # Update the rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you wish to edit several rules in a security policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/security-policies/&amp;lt;security-policy-id&amp;gt; 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def update_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling SecurityApi.update_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.update_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.update_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.update_security_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing Service Definition on the given enforcement point 
    # Update an existing Service Definition on the given enforcement point. 
    # @param enforcement_point_id Enforcement point id
    # @param service_definition_id Id of service definition
    # @param service_definition 
    # @param [Hash] opts the optional parameters
    # @return [ServiceDefinition]
    def update_service_definition(enforcement_point_id, service_definition_id, service_definition, opts = {})
      data, _status_code, _headers = update_service_definition_with_http_info(enforcement_point_id, service_definition_id, service_definition, opts)
      data
    end

    # Update an existing Service Definition on the given enforcement point 
    # Update an existing Service Definition on the given enforcement point. 
    # @param enforcement_point_id Enforcement point id
    # @param service_definition_id Id of service definition
    # @param service_definition 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDefinition, Fixnum, Hash)>] ServiceDefinition data, response status code and response headers
    def update_service_definition_with_http_info(enforcement_point_id, service_definition_id, service_definition, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_service_definition ...'
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling SecurityApi.update_service_definition"
      end
      # verify the required parameter 'service_definition_id' is set
      if @api_client.config.client_side_validation && service_definition_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_definition_id' when calling SecurityApi.update_service_definition"
      end
      # verify the required parameter 'service_definition' is set
      if @api_client.config.client_side_validation && service_definition.nil?
        fail ArgumentError, "Missing the required parameter 'service_definition' when calling SecurityApi.update_service_definition"
      end
      # resource path
      local_var_path = '/enforcement-points/{enforcement-point-id}/service-definitions/{service-definition-id}'.sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'service-definition-id' + '}', service_definition_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_definition)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_service_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update service insertion exclusion list
    # Update the exclusion list for service insertion policy 
    # @param policy_si_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [PolicySIExcludeList]
    def update_si_exclude_list(policy_si_exclude_list, opts = {})
      data, _status_code, _headers = update_si_exclude_list_with_http_info(policy_si_exclude_list, opts)
      data
    end

    # Update service insertion exclusion list
    # Update the exclusion list for service insertion policy 
    # @param policy_si_exclude_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicySIExcludeList, Fixnum, Hash)>] PolicySIExcludeList data, response status code and response headers
    def update_si_exclude_list_with_http_info(policy_si_exclude_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_si_exclude_list ...'
      end
      # verify the required parameter 'policy_si_exclude_list' is set
      if @api_client.config.client_side_validation && policy_si_exclude_list.nil?
        fail ArgumentError, "Missing the required parameter 'policy_si_exclude_list' when calling SecurityApi.update_si_exclude_list"
      end
      # resource path
      local_var_path = '/infra/settings/service-insertion/security/exclude-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_si_exclude_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicySIExcludeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_si_exclude_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update service insertion status configuration
    # Update service insertion status. 
    # @param policy_si_status_configuration 
    # @param [Hash] opts the optional parameters
    # @return [PolicySIStatusConfiguration]
    def update_si_status(policy_si_status_configuration, opts = {})
      data, _status_code, _headers = update_si_status_with_http_info(policy_si_status_configuration, opts)
      data
    end

    # Update service insertion status configuration
    # Update service insertion status. 
    # @param policy_si_status_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicySIStatusConfiguration, Fixnum, Hash)>] PolicySIStatusConfiguration data, response status code and response headers
    def update_si_status_with_http_info(policy_si_status_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_si_status ...'
      end
      # verify the required parameter 'policy_si_status_configuration' is set
      if @api_client.config.client_side_validation && policy_si_status_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'policy_si_status_configuration' when calling SecurityApi.update_si_status"
      end
      # resource path
      local_var_path = '/infra/settings/service-insertion/security/status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_si_status_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicySIStatusConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_si_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def update_tier0_flood_protection_profile_binding(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      data
    end

    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def update_tier0_flood_protection_profile_binding_with_http_info(tier0_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_tier0_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityApi.update_tier0_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.update_tier0_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityApi.update_tier0_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_tier0_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def update_tier0_locale_services_flood_protection_profile_binding(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      data
    end

    # Create or update Flood Protection Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def update_tier0_locale_services_flood_protection_profile_binding_with_http_info(tier0_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_tier0_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityApi.update_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.update_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.update_tier0_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityApi.update_tier0_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_tier0_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def update_tier0_locale_services_session_timer_profile_binding(tier0_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      data
    end

    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router LocaleServices.
    # @param tier0_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def update_tier0_locale_services_session_timer_profile_binding_with_http_info(tier0_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_tier0_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityApi.update_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.update_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.update_tier0_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityApi.update_tier0_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_tier0_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def update_tier0_session_timer_profile_binding(tier0_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      data
    end

    # Create or update Session Timer Profile Binding Map for Tier-0 Logical Router
    # API will create or update Session Timer profile binding map for Tier-0 Logical Router.
    # @param tier0_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def update_tier0_session_timer_profile_binding_with_http_info(tier0_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_tier0_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier0_id' is set
      if @api_client.config.client_side_validation && tier0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_id' when calling SecurityApi.update_tier0_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.update_tier0_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityApi.update_tier0_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier0-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier0-id' + '}', tier0_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_tier0_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def update_tier1_flood_protection_profile_binding(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      data
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def update_tier1_flood_protection_profile_binding_with_http_info(tier1_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_tier1_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.update_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.update_tier1_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityApi.update_tier1_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_tier1_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [FloodProtectionProfileBindingMap]
    def update_tier1_locale_services_flood_protection_profile_binding(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts)
      data
    end

    # Create or update Flood Protection Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Flood Protection profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param flood_protection_profile_binding_id 
    # @param flood_protection_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FloodProtectionProfileBindingMap, Fixnum, Hash)>] FloodProtectionProfileBindingMap data, response status code and response headers
    def update_tier1_locale_services_flood_protection_profile_binding_with_http_info(tier1_id, locale_services_id, flood_protection_profile_binding_id, flood_protection_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_tier1_locale_services_flood_protection_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.update_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.update_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_id' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_id' when calling SecurityApi.update_tier1_locale_services_flood_protection_profile_binding"
      end
      # verify the required parameter 'flood_protection_profile_binding_map' is set
      if @api_client.config.client_side_validation && flood_protection_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'flood_protection_profile_binding_map' when calling SecurityApi.update_tier1_locale_services_flood_protection_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/flood-protection-profile-bindings/{flood-protection-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'flood-protection-profile-binding-id' + '}', flood_protection_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(flood_protection_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FloodProtectionProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_tier1_locale_services_flood_protection_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def update_tier1_locale_services_session_timer_profile_binding(tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      data
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router LocaleServices
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router LocaleServices.
    # @param tier1_id 
    # @param locale_services_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def update_tier1_locale_services_session_timer_profile_binding_with_http_info(tier1_id, locale_services_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_tier1_locale_services_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.update_tier1_locale_services_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityApi.update_tier1_locale_services_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/locale-services/{locale-services-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_tier1_locale_services_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SessionTimerProfileBindingMap]
    def update_tier1_session_timer_profile_binding(tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      data, _status_code, _headers = update_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts)
      data
    end

    # Create or update Session Timer Profile Binding Map for Tier-1 Logical Router
    # API will create or update Session Timer profile binding map for Tier-1 Logical Router.
    # @param tier1_id 
    # @param session_timer_profile_binding_id 
    # @param session_timer_profile_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionTimerProfileBindingMap, Fixnum, Hash)>] SessionTimerProfileBindingMap data, response status code and response headers
    def update_tier1_session_timer_profile_binding_with_http_info(tier1_id, session_timer_profile_binding_id, session_timer_profile_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_tier1_session_timer_profile_binding ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling SecurityApi.update_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_id' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_id' when calling SecurityApi.update_tier1_session_timer_profile_binding"
      end
      # verify the required parameter 'session_timer_profile_binding_map' is set
      if @api_client.config.client_side_validation && session_timer_profile_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'session_timer_profile_binding_map' when calling SecurityApi.update_tier1_session_timer_profile_binding"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/session-timer-profile-bindings/{session-timer-profile-binding-id}'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'session-timer-profile-binding-id' + '}', session_timer_profile_binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(session_timer_profile_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionTimerProfileBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_tier1_session_timer_profile_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the Gateway Policy
    # Update the Gateway Policy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def update_vpc_gateway_policy(org_id, project_id, vpc_id, gateway_policy_id, gateway_policy, opts = {})
      data, _status_code, _headers = update_vpc_gateway_policy_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, gateway_policy, opts)
      data
    end

    # Update the Gateway Policy
    # Update the Gateway Policy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def update_vpc_gateway_policy_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_vpc_gateway_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.update_vpc_gateway_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.update_vpc_gateway_policy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.update_vpc_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.update_vpc_gateway_policy"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling SecurityApi.update_vpc_gateway_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_vpc_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update N-S Firewall Rule
    # Update the N-S Firewall Rule. If a Rule with the rule-id is not already present, this API fails with a 404. Creation of Rules is not allowed using this API. PUT /orgs/org1/projects/project1/vpcs/vpc-1/gateway-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def update_vpc_gateway_rule(org_id, project_id, vpc_id, gateway_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = update_vpc_gateway_rule_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, rule, opts)
      data
    end

    # Create or update N-S Firewall Rule
    # Update the N-S Firewall Rule. If a Rule with the rule-id is not already present, this API fails with a 404. Creation of Rules is not allowed using this API. PUT /orgs/org1/projects/project1/vpcs/vpc-1/gateway-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def update_vpc_gateway_rule_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_vpc_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.update_vpc_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.update_vpc_gateway_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.update_vpc_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling SecurityApi.update_vpc_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.update_vpc_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.update_vpc_gateway_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_vpc_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update VPC Group
    # If a VPC group with the group-id is not already present, create a new VPC group. If it already exists, update the VPC group. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [Group]
    def update_vpc_group(org_id, project_id, vpc_id, group_id, group, opts = {})
      data, _status_code, _headers = update_vpc_group_with_http_info(org_id, project_id, vpc_id, group_id, group, opts)
      data
    end

    # Create or update VPC Group
    # If a VPC group with the group-id is not already present, create a new VPC group. If it already exists, update the VPC group. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Group, Fixnum, Hash)>] Group data, response status code and response headers
    def update_vpc_group_with_http_info(org_id, project_id, vpc_id, group_id, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_vpc_group ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.update_vpc_group"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.update_vpc_group"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.update_vpc_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SecurityApi.update_vpc_group"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling SecurityApi.update_vpc_group"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups/{group-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_vpc_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update E-W Firewall Rule
    # Update the E-W Firewall Rule. If a Rule with the rule-id is not already present, this API fails with a 404. Creation of Rules is not allowed using this API. PUT /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def update_vpc_policy_rule(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = update_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts)
      data
    end

    # Create or update E-W Firewall Rule
    # Update the E-W Firewall Rule. If a Rule with the rule-id is not already present, this API fails with a 404. Creation of Rules is not allowed using this API. PUT /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def update_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_vpc_policy_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.update_vpc_policy_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.update_vpc_policy_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.update_vpc_policy_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.update_vpc_policy_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling SecurityApi.update_vpc_policy_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling SecurityApi.update_vpc_policy_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_vpc_policy_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the SecurityPolicy
    # Update the SecurityPolicy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def update_vpc_security_policy(org_id, project_id, vpc_id, security_policy_id, security_policy, opts = {})
      data, _status_code, _headers = update_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, security_policy, opts)
      data
    end

    # Update the SecurityPolicy
    # Update the SecurityPolicy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def update_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_vpc_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.update_vpc_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.update_vpc_security_policy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SecurityApi.update_vpc_security_policy"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling SecurityApi.update_vpc_security_policy"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling SecurityApi.update_vpc_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_vpc_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Security Profile
    # Update existing security profile. Note: Currently, user will not be able to create new security profiles. 
    # @param org_id 
    # @param project_id 
    # @param vpc_security_profile_id 
    # @param vpc_security_profile 
    # @param [Hash] opts the optional parameters
    # @return [VpcSecurityProfile]
    def update_vpc_security_profile(org_id, project_id, vpc_security_profile_id, vpc_security_profile, opts = {})
      data, _status_code, _headers = update_vpc_security_profile_with_http_info(org_id, project_id, vpc_security_profile_id, vpc_security_profile, opts)
      data
    end

    # Update Security Profile
    # Update existing security profile. Note: Currently, user will not be able to create new security profiles. 
    # @param org_id 
    # @param project_id 
    # @param vpc_security_profile_id 
    # @param vpc_security_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcSecurityProfile, Fixnum, Hash)>] VpcSecurityProfile data, response status code and response headers
    def update_vpc_security_profile_with_http_info(org_id, project_id, vpc_security_profile_id, vpc_security_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.update_vpc_security_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityApi.update_vpc_security_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityApi.update_vpc_security_profile"
      end
      # verify the required parameter 'vpc_security_profile_id' is set
      if @api_client.config.client_side_validation && vpc_security_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_security_profile_id' when calling SecurityApi.update_vpc_security_profile"
      end
      # verify the required parameter 'vpc_security_profile' is set
      if @api_client.config.client_side_validation && vpc_security_profile.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_security_profile' when calling SecurityApi.update_vpc_security_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-security-profiles/{vpc-security-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-security-profile-id' + '}', vpc_security_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_security_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSecurityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#update_vpc_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload IDS custom signature bundle
    # Upload IDS custom signature bundle. 
    # @param version_id 
    # @param file IDS custom signatures file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version_name IDS custom signature version name
    # @return [nil]
    def upload_ids_custom_signatures(version_id, file, opts = {})
      upload_ids_custom_signatures_with_http_info(version_id, file, opts)
      nil
    end

    # Upload IDS custom signature bundle
    # Upload IDS custom signature bundle. 
    # @param version_id 
    # @param file IDS custom signatures file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version_name IDS custom signature version name
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upload_ids_custom_signatures_with_http_info(version_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.upload_ids_custom_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SecurityApi.upload_ids_custom_signatures"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling SecurityApi.upload_ids_custom_signatures"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures/upload-custom-signatures'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'version_name'] = opts[:'version_name'] if !opts[:'version_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#upload_ids_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a directory domain event log server connectivity
    # This API tests a event log server connectivity before the actual domain or event log server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 200 and a corresponding error message will be returned. Note - Query param 'enforcement_point_path' would be honoured only in case of Global manager.
    # @param directory_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryEventLogServerStatus]
    def verify_firewall_identity_store_event_log_server(directory_event_log_server, opts = {})
      data, _status_code, _headers = verify_firewall_identity_store_event_log_server_with_http_info(directory_event_log_server, opts)
      data
    end

    # Test a directory domain event log server connectivity
    # This API tests a event log server connectivity before the actual domain or event log server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 200 and a corresponding error message will be returned. Note - Query param &#39;enforcement_point_path&#39; would be honoured only in case of Global manager.
    # @param directory_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryEventLogServerStatus, Fixnum, Hash)>] DirectoryEventLogServerStatus data, response status code and response headers
    def verify_firewall_identity_store_event_log_server_with_http_info(directory_event_log_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.verify_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'directory_event_log_server' is set
      if @api_client.config.client_side_validation && directory_event_log_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_event_log_server' when calling SecurityApi.verify_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-store-event-log-servers/status'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_event_log_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryEventLogServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#verify_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a directory domain LDAP server connectivity
    # This API tests a LDAP server connectivity before the actual domain or LDAP server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param directory_ldap_server 
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryLdapServerStatus]
    def verify_firewall_identity_store_ldap_server(directory_ldap_server, action, opts = {})
      data, _status_code, _headers = verify_firewall_identity_store_ldap_server_with_http_info(directory_ldap_server, action, opts)
      data
    end

    # Test a directory domain LDAP server connectivity
    # This API tests a LDAP server connectivity before the actual domain or LDAP server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param directory_ldap_server 
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryLdapServerStatus, Fixnum, Hash)>] DirectoryLdapServerStatus data, response status code and response headers
    def verify_firewall_identity_store_ldap_server_with_http_info(directory_ldap_server, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.verify_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling SecurityApi.verify_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling SecurityApi.verify_firewall_identity_store_ldap_server"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CONNECTIVITY'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CONNECTIVITY"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-store-ldap-server'

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#verify_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-0 logical router. 
    # Get filtered view of gateway rules associated with the Tier-0. The gateay policies are returned in the order of category and precedence. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def view_tier0_gateway_firewall(tier_0_id, opts = {})
      data, _status_code, _headers = view_tier0_gateway_firewall_with_http_info(tier_0_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-0 logical router. 
    # Get filtered view of gateway rules associated with the Tier-0. The gateay policies are returned in the order of category and precedence. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def view_tier0_gateway_firewall_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.view_tier0_gateway_firewall ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.view_tier0_gateway_firewall"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/gateway-firewall'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#view_tier0_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-0 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-0 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_0_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def view_tier0_locale_services_gateway_firewall(tier_0_id, locale_services_id, opts = {})
      data, _status_code, _headers = view_tier0_locale_services_gateway_firewall_with_http_info(tier_0_id, locale_services_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-0 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-0 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_0_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def view_tier0_locale_services_gateway_firewall_with_http_info(tier_0_id, locale_services_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.view_tier0_locale_services_gateway_firewall ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityApi.view_tier0_locale_services_gateway_firewall"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.view_tier0_locale_services_gateway_firewall"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-services-id}/gateway-firewall'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#view_tier0_locale_services_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-1. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def view_tier1_gateway_firewall(tier_1_id, opts = {})
      data, _status_code, _headers = view_tier1_gateway_firewall_with_http_info(tier_1_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-1. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def view_tier1_gateway_firewall_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.view_tier1_gateway_firewall ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.view_tier1_gateway_firewall"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/gateway-firewall'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#view_tier1_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-1 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def view_tier1_locale_services_gateway_firewall(tier_1_id, locale_services_id, opts = {})
      data, _status_code, _headers = view_tier1_locale_services_gateway_firewall_with_http_info(tier_1_id, locale_services_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-1 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def view_tier1_locale_services_gateway_firewall_with_http_info(tier_1_id, locale_services_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityApi.view_tier1_locale_services_gateway_firewall ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityApi.view_tier1_locale_services_gateway_firewall"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling SecurityApi.view_tier1_locale_services_gateway_firewall"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-services-id}/gateway-firewall'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#view_tier1_locale_services_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
