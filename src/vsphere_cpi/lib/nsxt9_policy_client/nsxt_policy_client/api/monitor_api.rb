=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class MonitorApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a SHA monitor profile
    # Delete a SHA monitor profile. 
    # @param monitor_id 
    # @param monitor_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_sha_monitor_profile(monitor_id, monitor_profile_id, opts = {})
      delete_sha_monitor_profile_with_http_info(monitor_id, monitor_profile_id, opts)
      nil
    end

    # Delete a SHA monitor profile
    # Delete a SHA monitor profile. 
    # @param monitor_id 
    # @param monitor_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_sha_monitor_profile_with_http_info(monitor_id, monitor_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitorApi.delete_sha_monitor_profile ...'
      end
      # verify the required parameter 'monitor_id' is set
      if @api_client.config.client_side_validation && monitor_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_id' when calling MonitorApi.delete_sha_monitor_profile"
      end
      # verify the required parameter 'monitor_profile_id' is set
      if @api_client.config.client_side_validation && monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_profile_id' when calling MonitorApi.delete_sha_monitor_profile"
      end
      # resource path
      local_var_path = '/infra/sha/monitors/{monitor-id}/profiles/{monitor-profile-id}'.sub('{' + 'monitor-id' + '}', monitor_id.to_s).sub('{' + 'monitor-profile-id' + '}', monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitorApi#delete_sha_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List SHA monitor profile
    # List SHA monitor profile. 
    # @param monitor_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ShaMonitorProfileListResult]
    def list_sha_monitor_profile(monitor_id, opts = {})
      data, _status_code, _headers = list_sha_monitor_profile_with_http_info(monitor_id, opts)
      data
    end

    # List SHA monitor profile
    # List SHA monitor profile. 
    # @param monitor_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ShaMonitorProfileListResult, Fixnum, Hash)>] ShaMonitorProfileListResult data, response status code and response headers
    def list_sha_monitor_profile_with_http_info(monitor_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitorApi.list_sha_monitor_profile ...'
      end
      # verify the required parameter 'monitor_id' is set
      if @api_client.config.client_side_validation && monitor_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_id' when calling MonitorApi.list_sha_monitor_profile"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitorApi.list_sha_monitor_profile, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitorApi.list_sha_monitor_profile, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/monitors/{monitor-id}/profiles'.sub('{' + 'monitor-id' + '}', monitor_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaMonitorProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitorApi#list_sha_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List the status of SHA monitors
    # List the status of SHA monitors on certain transport node. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :transport_node_id 
    # @option opts [String] :ua_node_id 
    # @return [ShaMonitorStatusListResult]
    def list_sha_monitor_status(opts = {})
      data, _status_code, _headers = list_sha_monitor_status_with_http_info(opts)
      data
    end

    # List the status of SHA monitors
    # List the status of SHA monitors on certain transport node. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :transport_node_id 
    # @option opts [String] :ua_node_id 
    # @return [Array<(ShaMonitorStatusListResult, Fixnum, Hash)>] ShaMonitorStatusListResult data, response status code and response headers
    def list_sha_monitor_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitorApi.list_sha_monitor_status ...'
      end
      # resource path
      local_var_path = '/infra/sha/monitors-status'

      # query parameters
      query_params = {}
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?
      query_params[:'ua_node_id'] = opts[:'ua_node_id'] if !opts[:'ua_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaMonitorStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitorApi#list_sha_monitor_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read SHA existing monitor list.
    # Read SHA existing monitor list. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ShaMonitorListResult]
    def list_sha_monitors(opts = {})
      data, _status_code, _headers = list_sha_monitors_with_http_info(opts)
      data
    end

    # Read SHA existing monitor list.
    # Read SHA existing monitor list. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ShaMonitorListResult, Fixnum, Hash)>] ShaMonitorListResult data, response status code and response headers
    def list_sha_monitors_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitorApi.list_sha_monitors ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitorApi.list_sha_monitors, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitorApi.list_sha_monitors, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/monitors'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaMonitorListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitorApi#list_sha_monitors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a SHA monitor profile
    # Create or update a SHA monitor profile. 
    # @param monitor_id 
    # @param monitor_profile_id 
    # @param sha_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force 
    # @return [ShaMonitorProfile]
    def patch_sha_monitor_profile(monitor_id, monitor_profile_id, sha_monitor_profile, opts = {})
      data, _status_code, _headers = patch_sha_monitor_profile_with_http_info(monitor_id, monitor_profile_id, sha_monitor_profile, opts)
      data
    end

    # Create or update a SHA monitor profile
    # Create or update a SHA monitor profile. 
    # @param monitor_id 
    # @param monitor_profile_id 
    # @param sha_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force 
    # @return [Array<(ShaMonitorProfile, Fixnum, Hash)>] ShaMonitorProfile data, response status code and response headers
    def patch_sha_monitor_profile_with_http_info(monitor_id, monitor_profile_id, sha_monitor_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitorApi.patch_sha_monitor_profile ...'
      end
      # verify the required parameter 'monitor_id' is set
      if @api_client.config.client_side_validation && monitor_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_id' when calling MonitorApi.patch_sha_monitor_profile"
      end
      # verify the required parameter 'monitor_profile_id' is set
      if @api_client.config.client_side_validation && monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_profile_id' when calling MonitorApi.patch_sha_monitor_profile"
      end
      # verify the required parameter 'sha_monitor_profile' is set
      if @api_client.config.client_side_validation && sha_monitor_profile.nil?
        fail ArgumentError, "Missing the required parameter 'sha_monitor_profile' when calling MonitorApi.patch_sha_monitor_profile"
      end
      # resource path
      local_var_path = '/infra/sha/monitors/{monitor-id}/profiles/{monitor-profile-id}'.sub('{' + 'monitor-id' + '}', monitor_id.to_s).sub('{' + 'monitor-profile-id' + '}', monitor_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sha_monitor_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaMonitorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitorApi#patch_sha_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read certain SHA monitor.
    # Read certain SHA monitor. 
    # @param monitor_id SHA monitor name
    # @param [Hash] opts the optional parameters
    # @return [ShaMonitor]
    def read_sha_monitor(monitor_id, opts = {})
      data, _status_code, _headers = read_sha_monitor_with_http_info(monitor_id, opts)
      data
    end

    # Read certain SHA monitor.
    # Read certain SHA monitor. 
    # @param monitor_id SHA monitor name
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaMonitor, Fixnum, Hash)>] ShaMonitor data, response status code and response headers
    def read_sha_monitor_with_http_info(monitor_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitorApi.read_sha_monitor ...'
      end
      # verify the required parameter 'monitor_id' is set
      if @api_client.config.client_side_validation && monitor_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_id' when calling MonitorApi.read_sha_monitor"
      end
      # resource path
      local_var_path = '/infra/sha/monitors/{monitor-id}'.sub('{' + 'monitor-id' + '}', monitor_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaMonitor')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitorApi#read_sha_monitor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a SHA monitor profile
    # Read a SHA monitor profile. 
    # @param monitor_id 
    # @param monitor_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [ShaMonitorProfile]
    def read_sha_monitor_profile(monitor_id, monitor_profile_id, opts = {})
      data, _status_code, _headers = read_sha_monitor_profile_with_http_info(monitor_id, monitor_profile_id, opts)
      data
    end

    # Read a SHA monitor profile
    # Read a SHA monitor profile. 
    # @param monitor_id 
    # @param monitor_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaMonitorProfile, Fixnum, Hash)>] ShaMonitorProfile data, response status code and response headers
    def read_sha_monitor_profile_with_http_info(monitor_id, monitor_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitorApi.read_sha_monitor_profile ...'
      end
      # verify the required parameter 'monitor_id' is set
      if @api_client.config.client_side_validation && monitor_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_id' when calling MonitorApi.read_sha_monitor_profile"
      end
      # verify the required parameter 'monitor_profile_id' is set
      if @api_client.config.client_side_validation && monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_profile_id' when calling MonitorApi.read_sha_monitor_profile"
      end
      # resource path
      local_var_path = '/infra/sha/monitors/{monitor-id}/profiles/{monitor-profile-id}'.sub('{' + 'monitor-id' + '}', monitor_id.to_s).sub('{' + 'monitor-profile-id' + '}', monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaMonitorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitorApi#read_sha_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the SHA monitor status
    # Read the SHA monitor status on certain transport node. 
    # @param monitor_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :transport_node_id 
    # @option opts [String] :ua_node_id 
    # @return [ShaMonitorStatus]
    def read_sha_monitor_status_on_node(monitor_id, opts = {})
      data, _status_code, _headers = read_sha_monitor_status_on_node_with_http_info(monitor_id, opts)
      data
    end

    # Read the SHA monitor status
    # Read the SHA monitor status on certain transport node. 
    # @param monitor_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :transport_node_id 
    # @option opts [String] :ua_node_id 
    # @return [Array<(ShaMonitorStatus, Fixnum, Hash)>] ShaMonitorStatus data, response status code and response headers
    def read_sha_monitor_status_on_node_with_http_info(monitor_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitorApi.read_sha_monitor_status_on_node ...'
      end
      # verify the required parameter 'monitor_id' is set
      if @api_client.config.client_side_validation && monitor_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_id' when calling MonitorApi.read_sha_monitor_status_on_node"
      end
      # resource path
      local_var_path = '/infra/sha/monitors/{monitor-id}/status'.sub('{' + 'monitor-id' + '}', monitor_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?
      query_params[:'ua_node_id'] = opts[:'ua_node_id'] if !opts[:'ua_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaMonitorStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitorApi#read_sha_monitor_status_on_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a SHA monitor profile
    # Create or update a SHA monitor profile. 
    # @param monitor_id 
    # @param monitor_profile_id 
    # @param sha_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force 
    # @return [ShaMonitorProfile]
    def update_sha_monitor_profile(monitor_id, monitor_profile_id, sha_monitor_profile, opts = {})
      data, _status_code, _headers = update_sha_monitor_profile_with_http_info(monitor_id, monitor_profile_id, sha_monitor_profile, opts)
      data
    end

    # Create or update a SHA monitor profile
    # Create or update a SHA monitor profile. 
    # @param monitor_id 
    # @param monitor_profile_id 
    # @param sha_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force 
    # @return [Array<(ShaMonitorProfile, Fixnum, Hash)>] ShaMonitorProfile data, response status code and response headers
    def update_sha_monitor_profile_with_http_info(monitor_id, monitor_profile_id, sha_monitor_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitorApi.update_sha_monitor_profile ...'
      end
      # verify the required parameter 'monitor_id' is set
      if @api_client.config.client_side_validation && monitor_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_id' when calling MonitorApi.update_sha_monitor_profile"
      end
      # verify the required parameter 'monitor_profile_id' is set
      if @api_client.config.client_side_validation && monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_profile_id' when calling MonitorApi.update_sha_monitor_profile"
      end
      # verify the required parameter 'sha_monitor_profile' is set
      if @api_client.config.client_side_validation && sha_monitor_profile.nil?
        fail ArgumentError, "Missing the required parameter 'sha_monitor_profile' when calling MonitorApi.update_sha_monitor_profile"
      end
      # resource path
      local_var_path = '/infra/sha/monitors/{monitor-id}/profiles/{monitor-profile-id}'.sub('{' + 'monitor-id' + '}', monitor_id.to_s).sub('{' + 'monitor-profile-id' + '}', monitor_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sha_monitor_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaMonitorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitorApi#update_sha_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
