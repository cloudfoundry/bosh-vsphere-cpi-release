=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class InfraApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adds or updates a CA bundle
    # Adds or updates a new bundle of trusted CA certificates. The bundle must be a concatenation of one or more PEM-encoded certificates. The PEM-encoded bundle is replaced with the one provided in the request. 
    # @param cabundle_id ID of the CA bundle being updated
    # @param ca_bundle 
    # @param [Hash] opts the optional parameters
    # @return [CaBundle]
    def add_or_patch_ca_bundle(cabundle_id, ca_bundle, opts = {})
      data, _status_code, _headers = add_or_patch_ca_bundle_with_http_info(cabundle_id, ca_bundle, opts)
      data
    end

    # Adds or updates a CA bundle
    # Adds or updates a new bundle of trusted CA certificates. The bundle must be a concatenation of one or more PEM-encoded certificates. The PEM-encoded bundle is replaced with the one provided in the request. 
    # @param cabundle_id ID of the CA bundle being updated
    # @param ca_bundle 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CaBundle, Fixnum, Hash)>] CaBundle data, response status code and response headers
    def add_or_patch_ca_bundle_with_http_info(cabundle_id, ca_bundle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.add_or_patch_ca_bundle ...'
      end
      # verify the required parameter 'cabundle_id' is set
      if @api_client.config.client_side_validation && cabundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'cabundle_id' when calling InfraApi.add_or_patch_ca_bundle"
      end
      # verify the required parameter 'ca_bundle' is set
      if @api_client.config.client_side_validation && ca_bundle.nil?
        fail ArgumentError, "Missing the required parameter 'ca_bundle' when calling InfraApi.add_or_patch_ca_bundle"
      end
      # resource path
      local_var_path = '/infra/cabundles/{cabundle-id}'.sub('{' + 'cabundle-id' + '}', cabundle_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ca_bundle)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#add_or_patch_ca_bundle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds or replaces a CA bundle
    # Adds or replaces a new bundle of trusted CA certificates. The bundle must be a concatenation of one or more PEM-encoded certificates. 
    # @param cabundle_id ID of the CA bundle being uploaded
    # @param ca_bundle 
    # @param [Hash] opts the optional parameters
    # @return [CaBundle]
    def add_or_replace_ca_bundle(cabundle_id, ca_bundle, opts = {})
      data, _status_code, _headers = add_or_replace_ca_bundle_with_http_info(cabundle_id, ca_bundle, opts)
      data
    end

    # Adds or replaces a CA bundle
    # Adds or replaces a new bundle of trusted CA certificates. The bundle must be a concatenation of one or more PEM-encoded certificates. 
    # @param cabundle_id ID of the CA bundle being uploaded
    # @param ca_bundle 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CaBundle, Fixnum, Hash)>] CaBundle data, response status code and response headers
    def add_or_replace_ca_bundle_with_http_info(cabundle_id, ca_bundle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.add_or_replace_ca_bundle ...'
      end
      # verify the required parameter 'cabundle_id' is set
      if @api_client.config.client_side_validation && cabundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'cabundle_id' when calling InfraApi.add_or_replace_ca_bundle"
      end
      # verify the required parameter 'ca_bundle' is set
      if @api_client.config.client_side_validation && ca_bundle.nil?
        fail ArgumentError, "Missing the required parameter 'ca_bundle' when calling InfraApi.add_or_replace_ca_bundle"
      end
      # resource path
      local_var_path = '/infra/cabundles/{cabundle-id}'.sub('{' + 'cabundle-id' + '}', cabundle_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ca_bundle)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#add_or_replace_ca_bundle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds or replaces a CA bundle
    # Adds or replaces a new bundle of trusted CA certificates. The multipart-uploaded file must be a concatenation of one or more PEM-encoded certificates. 
    # @param cabundle_id ID of the CA bundle being uploaded
    # @param file File to be uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Description of this resource
    # @option opts [String] :display_name Identifier to use when displaying entity in logs or GUI
    # @return [CaBundle]
    def add_or_replace_ca_bundle_upload(cabundle_id, file, opts = {})
      data, _status_code, _headers = add_or_replace_ca_bundle_upload_with_http_info(cabundle_id, file, opts)
      data
    end

    # Adds or replaces a CA bundle
    # Adds or replaces a new bundle of trusted CA certificates. The multipart-uploaded file must be a concatenation of one or more PEM-encoded certificates. 
    # @param cabundle_id ID of the CA bundle being uploaded
    # @param file File to be uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Description of this resource
    # @option opts [String] :display_name Identifier to use when displaying entity in logs or GUI
    # @return [Array<(CaBundle, Fixnum, Hash)>] CaBundle data, response status code and response headers
    def add_or_replace_ca_bundle_upload_with_http_info(cabundle_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.add_or_replace_ca_bundle_upload ...'
      end
      # verify the required parameter 'cabundle_id' is set
      if @api_client.config.client_side_validation && cabundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'cabundle_id' when calling InfraApi.add_or_replace_ca_bundle_upload"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling InfraApi.add_or_replace_ca_bundle_upload"
      end
      if @api_client.config.client_side_validation && !opts[:'description'].nil? && opts[:'description'].to_s.length > 1024
        fail ArgumentError, 'invalid value for "opts[:"description"]" when calling InfraApi.add_or_replace_ca_bundle_upload, the character length must be smaller than or equal to 1024.'
      end

      if @api_client.config.client_side_validation && !opts[:'display_name'].nil? && opts[:'display_name'].to_s.length > 255
        fail ArgumentError, 'invalid value for "opts[:"display_name"]" when calling InfraApi.add_or_replace_ca_bundle_upload, the character length must be smaller than or equal to 255.'
      end

      # resource path
      local_var_path = '/infra/cabundles/{cabundle-id}'.sub('{' + 'cabundle-id' + '}', cabundle_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'display_name'] = opts[:'display_name'] if !opts[:'display_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#add_or_replace_ca_bundle_upload\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a New Certificate
    # Adds a new private-public certificate and, optionally, a private key that can be applied to one of the user-facing components (appliance management or edge). The certificate and the key should be stored in PEM format. If no private key is provided, the certificate is used as a client certificate in the trust store. A private key can be uploaded for a CA certificate only if the \"purpose\" parameter is set to \"signing-ca\". A certificate chain will not be expanded into separate certificate instances for reference, but would be pushed to the enforcement point as a single certificate. This PUT method does not modify an existing certificate. 
    # @param certificate_id 
    # @param tls_trust_data 
    # @param [Hash] opts the optional parameters
    # @return [TlsCertificate]
    def add_tls_certificate(certificate_id, tls_trust_data, opts = {})
      data, _status_code, _headers = add_tls_certificate_with_http_info(certificate_id, tls_trust_data, opts)
      data
    end

    # Add a New Certificate
    # Adds a new private-public certificate and, optionally, a private key that can be applied to one of the user-facing components (appliance management or edge). The certificate and the key should be stored in PEM format. If no private key is provided, the certificate is used as a client certificate in the trust store. A private key can be uploaded for a CA certificate only if the \&quot;purpose\&quot; parameter is set to \&quot;signing-ca\&quot;. A certificate chain will not be expanded into separate certificate instances for reference, but would be pushed to the enforcement point as a single certificate. This PUT method does not modify an existing certificate. 
    # @param certificate_id 
    # @param tls_trust_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def add_tls_certificate_with_http_info(certificate_id, tls_trust_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.add_tls_certificate ...'
      end
      # verify the required parameter 'certificate_id' is set
      if @api_client.config.client_side_validation && certificate_id.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_id' when calling InfraApi.add_tls_certificate"
      end
      # verify the required parameter 'tls_trust_data' is set
      if @api_client.config.client_side_validation && tls_trust_data.nil?
        fail ArgumentError, "Missing the required parameter 'tls_trust_data' when calling InfraApi.add_tls_certificate"
      end
      # resource path
      local_var_path = '/infra/certificates/{certificate-id}'.sub('{' + 'certificate-id' + '}', certificate_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_trust_data)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#add_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Restart the packet capture session
    # Restart the packet capture session 
    # @param session_id Packet capture session id
    # @param action Indicates which action will be taken by session conduction.
    # @param [Hash] opts the optional parameters
    # @return [PktCaptureSession]
    def control_pkt_capture_session(session_id, action, opts = {})
      data, _status_code, _headers = control_pkt_capture_session_with_http_info(session_id, action, opts)
      data
    end

    # Restart the packet capture session
    # Restart the packet capture session 
    # @param session_id Packet capture session id
    # @param action Indicates which action will be taken by session conduction.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PktCaptureSession, Fixnum, Hash)>] PktCaptureSession data, response status code and response headers
    def control_pkt_capture_session_with_http_info(session_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.control_pkt_capture_session ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling InfraApi.control_pkt_capture_session"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling InfraApi.control_pkt_capture_session"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['restart', 'terminate'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of restart, terminate"
      end
      # resource path
      local_var_path = '/infra/pktcap/session/{session-id}'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PktCaptureSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#control_pkt_capture_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Failure Domain
    # Create or Update a failure domain. Modifiable parameters are display_name, preferred_active_edge_services flag. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param failure_domain_id 
    # @param policy_failure_domain 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFailureDomain]
    def create_and_update_policy_failure_domain(site_id, enforcementpoint_id, failure_domain_id, policy_failure_domain, opts = {})
      data, _status_code, _headers = create_and_update_policy_failure_domain_with_http_info(site_id, enforcementpoint_id, failure_domain_id, policy_failure_domain, opts)
      data
    end

    # Update a Failure Domain
    # Create or Update a failure domain. Modifiable parameters are display_name, preferred_active_edge_services flag. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param failure_domain_id 
    # @param policy_failure_domain 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFailureDomain, Fixnum, Hash)>] PolicyFailureDomain data, response status code and response headers
    def create_and_update_policy_failure_domain_with_http_info(site_id, enforcementpoint_id, failure_domain_id, policy_failure_domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.create_and_update_policy_failure_domain ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.create_and_update_policy_failure_domain"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.create_and_update_policy_failure_domain"
      end
      # verify the required parameter 'failure_domain_id' is set
      if @api_client.config.client_side_validation && failure_domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'failure_domain_id' when calling InfraApi.create_and_update_policy_failure_domain"
      end
      # verify the required parameter 'policy_failure_domain' is set
      if @api_client.config.client_side_validation && policy_failure_domain.nil?
        fail ArgumentError, "Missing the required parameter 'policy_failure_domain' when calling InfraApi.create_and_update_policy_failure_domain"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/failure-domains/{failure-domain-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'failure-domain-id' + '}', failure_domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_failure_domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFailureDomain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#create_and_update_policy_failure_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch a Reaction
    # Create or patch a Reaction under Infra. 
    # @param reaction_id 
    # @param reaction 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_infra_reaction(reaction_id, reaction, opts = {})
      create_or_patch_infra_reaction_with_http_info(reaction_id, reaction, opts)
      nil
    end

    # Create or patch a Reaction
    # Create or patch a Reaction under Infra. 
    # @param reaction_id 
    # @param reaction 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_infra_reaction_with_http_info(reaction_id, reaction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.create_or_patch_infra_reaction ...'
      end
      # verify the required parameter 'reaction_id' is set
      if @api_client.config.client_side_validation && reaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'reaction_id' when calling InfraApi.create_or_patch_infra_reaction"
      end
      # verify the required parameter 'reaction' is set
      if @api_client.config.client_side_validation && reaction.nil?
        fail ArgumentError, "Missing the required parameter 'reaction' when calling InfraApi.create_or_patch_infra_reaction"
      end
      # resource path
      local_var_path = '/infra/reactions/{reaction-id}'.sub('{' + 'reaction-id' + '}', reaction_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(reaction)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#create_or_patch_infra_reaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch a Certificate Revocation List
    # Create or patch a Certificate Revocation List for the given id. The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. The CRL must contain PEM data for a single CRL. A CRL can be in the PEM X.509 format (crl_type=X509) or JSON OneCRL (crl_type=OneCRL). If crl_type is not specified, it is auto-detected based on the presence of fields pem_encoded or one_crl. 
    # @param crl_id 
    # @param tls_crl 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_patch_tls_crl(crl_id, tls_crl, opts = {})
      create_or_patch_tls_crl_with_http_info(crl_id, tls_crl, opts)
      nil
    end

    # Create or patch a Certificate Revocation List
    # Create or patch a Certificate Revocation List for the given id. The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. The CRL must contain PEM data for a single CRL. A CRL can be in the PEM X.509 format (crl_type&#x3D;X509) or JSON OneCRL (crl_type&#x3D;OneCRL). If crl_type is not specified, it is auto-detected based on the presence of fields pem_encoded or one_crl. 
    # @param crl_id 
    # @param tls_crl 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_patch_tls_crl_with_http_info(crl_id, tls_crl, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.create_or_patch_tls_crl ...'
      end
      # verify the required parameter 'crl_id' is set
      if @api_client.config.client_side_validation && crl_id.nil?
        fail ArgumentError, "Missing the required parameter 'crl_id' when calling InfraApi.create_or_patch_tls_crl"
      end
      # verify the required parameter 'tls_crl' is set
      if @api_client.config.client_side_validation && tls_crl.nil?
        fail ArgumentError, "Missing the required parameter 'tls_crl' when calling InfraApi.create_or_patch_tls_crl"
      end
      # resource path
      local_var_path = '/infra/crls/{crl-id}'.sub('{' + 'crl-id' + '}', crl_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_crl)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#create_or_patch_tls_crl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or replace label
    # Create label if not exists, otherwise replaces the existing label. If label already exists then type attribute cannot be changed. 
    # @param label_id 
    # @param policy_label 
    # @param [Hash] opts the optional parameters
    # @return [PolicyLabel]
    def create_or_replace_policy_label_for_infra(label_id, policy_label, opts = {})
      data, _status_code, _headers = create_or_replace_policy_label_for_infra_with_http_info(label_id, policy_label, opts)
      data
    end

    # Create or replace label
    # Create label if not exists, otherwise replaces the existing label. If label already exists then type attribute cannot be changed. 
    # @param label_id 
    # @param policy_label 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyLabel, Fixnum, Hash)>] PolicyLabel data, response status code and response headers
    def create_or_replace_policy_label_for_infra_with_http_info(label_id, policy_label, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.create_or_replace_policy_label_for_infra ...'
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling InfraApi.create_or_replace_policy_label_for_infra"
      end
      # verify the required parameter 'policy_label' is set
      if @api_client.config.client_side_validation && policy_label.nil?
        fail ArgumentError, "Missing the required parameter 'policy_label' when calling InfraApi.create_or_replace_policy_label_for_infra"
      end
      # resource path
      local_var_path = '/infra/labels/{label-id}'.sub('{' + 'label-id' + '}', label_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_label)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyLabel')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#create_or_replace_policy_label_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update tenant Constraint
    # Create tenant constraint if it does not exist, otherwise replace the existing constraint. 
    # @param constraint_id 
    # @param constraint 
    # @param [Hash] opts the optional parameters
    # @return [Constraint]
    def create_or_replace_tenant_constraint(constraint_id, constraint, opts = {})
      data, _status_code, _headers = create_or_replace_tenant_constraint_with_http_info(constraint_id, constraint, opts)
      data
    end

    # Create or update tenant Constraint
    # Create tenant constraint if it does not exist, otherwise replace the existing constraint. 
    # @param constraint_id 
    # @param constraint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Constraint, Fixnum, Hash)>] Constraint data, response status code and response headers
    def create_or_replace_tenant_constraint_with_http_info(constraint_id, constraint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.create_or_replace_tenant_constraint ...'
      end
      # verify the required parameter 'constraint_id' is set
      if @api_client.config.client_side_validation && constraint_id.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_id' when calling InfraApi.create_or_replace_tenant_constraint"
      end
      # verify the required parameter 'constraint' is set
      if @api_client.config.client_side_validation && constraint.nil?
        fail ArgumentError, "Missing the required parameter 'constraint' when calling InfraApi.create_or_replace_tenant_constraint"
      end
      # resource path
      local_var_path = '/infra/constraints/{constraint-id}'.sub('{' + 'constraint-id' + '}', constraint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(constraint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Constraint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#create_or_replace_tenant_constraint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Domain Deployment Map under infra
    # If the passed Domain Deployment Map does not already exist, create a new Domain Deployment Map. If it already exist, replace it. 
    # @param domain_id 
    # @param domain_deployment_map_id 
    # @param domain_deployment_map 
    # @param [Hash] opts the optional parameters
    # @return [DomainDeploymentMap]
    def create_or_update_domain_deployment_map_for_infra(domain_id, domain_deployment_map_id, domain_deployment_map, opts = {})
      data, _status_code, _headers = create_or_update_domain_deployment_map_for_infra_with_http_info(domain_id, domain_deployment_map_id, domain_deployment_map, opts)
      data
    end

    # Create a new Domain Deployment Map under infra
    # If the passed Domain Deployment Map does not already exist, create a new Domain Deployment Map. If it already exist, replace it. 
    # @param domain_id 
    # @param domain_deployment_map_id 
    # @param domain_deployment_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainDeploymentMap, Fixnum, Hash)>] DomainDeploymentMap data, response status code and response headers
    def create_or_update_domain_deployment_map_for_infra_with_http_info(domain_id, domain_deployment_map_id, domain_deployment_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.create_or_update_domain_deployment_map_for_infra ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling InfraApi.create_or_update_domain_deployment_map_for_infra"
      end
      # verify the required parameter 'domain_deployment_map_id' is set
      if @api_client.config.client_side_validation && domain_deployment_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_deployment_map_id' when calling InfraApi.create_or_update_domain_deployment_map_for_infra"
      end
      # verify the required parameter 'domain_deployment_map' is set
      if @api_client.config.client_side_validation && domain_deployment_map.nil?
        fail ArgumentError, "Missing the required parameter 'domain_deployment_map' when calling InfraApi.create_or_update_domain_deployment_map_for_infra"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/domain-deployment-maps/{domain-deployment-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'domain-deployment-map-id' + '}', domain_deployment_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(domain_deployment_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DomainDeploymentMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#create_or_update_domain_deployment_map_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create/update a new Enforcement Point under infra
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, replace it.  <br> This is a deprecated API. DeploymentZone has been renamed to Site. Use PUT /infra/sites/site-id/enforcement-points/enforcementpoint-id. 
    # @param deployment_zone_id 
    # @param enforcementpoint_id 
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [EnforcementPoint]
    def create_or_update_enforcement_point_for_infra(deployment_zone_id, enforcementpoint_id, enforcement_point, opts = {})
      data, _status_code, _headers = create_or_update_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, enforcement_point, opts)
      data
    end

    # Create/update a new Enforcement Point under infra
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, replace it.  &lt;br&gt; This is a deprecated API. DeploymentZone has been renamed to Site. Use PUT /infra/sites/site-id/enforcement-points/enforcementpoint-id. 
    # @param deployment_zone_id 
    # @param enforcementpoint_id 
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnforcementPoint, Fixnum, Hash)>] EnforcementPoint data, response status code and response headers
    def create_or_update_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, enforcement_point, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.create_or_update_enforcement_point_for_infra ...'
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling InfraApi.create_or_update_enforcement_point_for_infra"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.create_or_update_enforcement_point_for_infra"
      end
      # verify the required parameter 'enforcement_point' is set
      if @api_client.config.client_side_validation && enforcement_point.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point' when calling InfraApi.create_or_update_enforcement_point_for_infra"
      end
      # resource path
      local_var_path = '/infra/deployment-zones/{deployment-zone-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enforcement_point)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#create_or_update_enforcement_point_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create/update a new Enforcement Point under Site
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, replace it. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [EnforcementPoint]
    def create_or_update_enforcement_point_for_site(site_id, enforcementpoint_id, enforcement_point, opts = {})
      data, _status_code, _headers = create_or_update_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, enforcement_point, opts)
      data
    end

    # Create/update a new Enforcement Point under Site
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, replace it. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnforcementPoint, Fixnum, Hash)>] EnforcementPoint data, response status code and response headers
    def create_or_update_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, enforcement_point, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.create_or_update_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.create_or_update_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.create_or_update_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcement_point' is set
      if @api_client.config.client_side_validation && enforcement_point.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point' when calling InfraApi.create_or_update_enforcement_point_for_site"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enforcement_point)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#create_or_update_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace a Reaction
    # Create or fully replace a Reaction under Infra. Revision is optional for creation and required for update. 
    # @param reaction_id 
    # @param reaction 
    # @param [Hash] opts the optional parameters
    # @return [Reaction]
    def create_or_update_infra_reaction(reaction_id, reaction, opts = {})
      data, _status_code, _headers = create_or_update_infra_reaction_with_http_info(reaction_id, reaction, opts)
      data
    end

    # Create or fully replace a Reaction
    # Create or fully replace a Reaction under Infra. Revision is optional for creation and required for update. 
    # @param reaction_id 
    # @param reaction 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Reaction, Fixnum, Hash)>] Reaction data, response status code and response headers
    def create_or_update_infra_reaction_with_http_info(reaction_id, reaction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.create_or_update_infra_reaction ...'
      end
      # verify the required parameter 'reaction_id' is set
      if @api_client.config.client_side_validation && reaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'reaction_id' when calling InfraApi.create_or_update_infra_reaction"
      end
      # verify the required parameter 'reaction' is set
      if @api_client.config.client_side_validation && reaction.nil?
        fail ArgumentError, "Missing the required parameter 'reaction' when calling InfraApi.create_or_update_infra_reaction"
      end
      # resource path
      local_var_path = '/infra/reactions/{reaction-id}'.sub('{' + 'reaction-id' + '}', reaction_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(reaction)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Reaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#create_or_update_infra_reaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Or Update a Policy Edge Cluster
    # Edge Cluster only supports homogeneous members. The Edge Transport Nodes are only allowed in cluster members. DeploymentType of these edge nodes can be VIRTUAL_MACHINE or PHYSICAL_MACHINE. Any update operation on members of edge cluster is not permitted, To replace the edge transport node for an existing member, refer <b>/policy/api/v1/infra/sites/default/enforcement-points/default/edge-clusters/<edge-cluster-id> /action/replace-policy-edge-node</b> API. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_cluster 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeCluster]
    def create_or_update_policy_edge_cluster(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_cluster, opts = {})
      data, _status_code, _headers = create_or_update_policy_edge_cluster_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_cluster, opts)
      data
    end

    # Create Or Update a Policy Edge Cluster
    # Edge Cluster only supports homogeneous members. The Edge Transport Nodes are only allowed in cluster members. DeploymentType of these edge nodes can be VIRTUAL_MACHINE or PHYSICAL_MACHINE. Any update operation on members of edge cluster is not permitted, To replace the edge transport node for an existing member, refer &lt;b&gt;/policy/api/v1/infra/sites/default/enforcement-points/default/edge-clusters/&lt;edge-cluster-id&gt; /action/replace-policy-edge-node&lt;/b&gt; API. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_cluster 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeCluster, Fixnum, Hash)>] PolicyEdgeCluster data, response status code and response headers
    def create_or_update_policy_edge_cluster_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_cluster, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.create_or_update_policy_edge_cluster ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.create_or_update_policy_edge_cluster"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.create_or_update_policy_edge_cluster"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling InfraApi.create_or_update_policy_edge_cluster"
      end
      # verify the required parameter 'policy_edge_cluster' is set
      if @api_client.config.client_side_validation && policy_edge_cluster.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_cluster' when calling InfraApi.create_or_update_policy_edge_cluster"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_cluster)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#create_or_update_policy_edge_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update a Policy Edge Cluster High Availability Profile
    # Create or Update a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param policy_edge_high_availability_profile 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeHighAvailabilityProfile]
    def create_or_update_policy_edge_cluster_high_availability_profile(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts = {})
      data, _status_code, _headers = create_or_update_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts)
      data
    end

    # Create or Update a Policy Edge Cluster High Availability Profile
    # Create or Update a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param policy_edge_high_availability_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeHighAvailabilityProfile, Fixnum, Hash)>] PolicyEdgeHighAvailabilityProfile data, response status code and response headers
    def create_or_update_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.create_or_update_policy_edge_cluster_high_availability_profile ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.create_or_update_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.create_or_update_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'edge_cluster_high_availability_profile_id' is set
      if @api_client.config.client_side_validation && edge_cluster_high_availability_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_high_availability_profile_id' when calling InfraApi.create_or_update_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'policy_edge_high_availability_profile' is set
      if @api_client.config.client_side_validation && policy_edge_high_availability_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_high_availability_profile' when calling InfraApi.create_or_update_policy_edge_cluster_high_availability_profile"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-cluster-high-availability-profiles/{edge-cluster-high-availability-profile-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-high-availability-profile-id' + '}', edge_cluster_high_availability_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_high_availability_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeHighAvailabilityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#create_or_update_policy_edge_cluster_high_availability_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LCM Edge Transport Node under Enforcement Point
    # If the passed Edge Transport Node does not already exist, create a new Edge Transport Node. If it already exists, update it. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param policy_edge_transport_node 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeTransportNode]
    def create_or_update_policy_edge_transport_node(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts = {})
      data, _status_code, _headers = create_or_update_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts)
      data
    end

    # Create or update a LCM Edge Transport Node under Enforcement Point
    # If the passed Edge Transport Node does not already exist, create a new Edge Transport Node. If it already exists, update it. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param policy_edge_transport_node 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeTransportNode, Fixnum, Hash)>] PolicyEdgeTransportNode data, response status code and response headers
    def create_or_update_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.create_or_update_policy_edge_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.create_or_update_policy_edge_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.create_or_update_policy_edge_transport_node"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling InfraApi.create_or_update_policy_edge_transport_node"
      end
      # verify the required parameter 'policy_edge_transport_node' is set
      if @api_client.config.client_side_validation && policy_edge_transport_node.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_transport_node' when calling InfraApi.create_or_update_policy_edge_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_transport_node)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#create_or_update_policy_edge_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace a Certificate Revocation List
    # Create or replace a Certificate Revocation List for the given id. The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. The CRL must contain PEM data for a single CRL. Revision is required. A CRL can be in the PEM X.509 format (crl_type=X509) or JSON OneCRL (crl_type=OneCRL). If crl_type is not specified, it is auto-detected based on the presence of fields pem_encoded or one_crl. 
    # @param crl_id 
    # @param tls_crl 
    # @param [Hash] opts the optional parameters
    # @return [TlsCrl]
    def create_or_update_tls_crl(crl_id, tls_crl, opts = {})
      data, _status_code, _headers = create_or_update_tls_crl_with_http_info(crl_id, tls_crl, opts)
      data
    end

    # Create or fully replace a Certificate Revocation List
    # Create or replace a Certificate Revocation List for the given id. The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. The CRL must contain PEM data for a single CRL. Revision is required. A CRL can be in the PEM X.509 format (crl_type&#x3D;X509) or JSON OneCRL (crl_type&#x3D;OneCRL). If crl_type is not specified, it is auto-detected based on the presence of fields pem_encoded or one_crl. 
    # @param crl_id 
    # @param tls_crl 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCrl, Fixnum, Hash)>] TlsCrl data, response status code and response headers
    def create_or_update_tls_crl_with_http_info(crl_id, tls_crl, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.create_or_update_tls_crl ...'
      end
      # verify the required parameter 'crl_id' is set
      if @api_client.config.client_side_validation && crl_id.nil?
        fail ArgumentError, "Missing the required parameter 'crl_id' when calling InfraApi.create_or_update_tls_crl"
      end
      # verify the required parameter 'tls_crl' is set
      if @api_client.config.client_side_validation && tls_crl.nil?
        fail ArgumentError, "Missing the required parameter 'tls_crl' when calling InfraApi.create_or_update_tls_crl"
      end
      # resource path
      local_var_path = '/infra/crls/{crl-id}'.sub('{' + 'crl-id' + '}', crl_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_crl)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCrl')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#create_or_update_tls_crl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an new packet capture session
    # Create an new packet capture session on given node with specified options 
    # @param pkt_capture_request 
    # @param [Hash] opts the optional parameters
    # @return [PktCaptureSession]
    def create_pkt_capture_session(pkt_capture_request, opts = {})
      data, _status_code, _headers = create_pkt_capture_session_with_http_info(pkt_capture_request, opts)
      data
    end

    # Create an new packet capture session
    # Create an new packet capture session on given node with specified options 
    # @param pkt_capture_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PktCaptureSession, Fixnum, Hash)>] PktCaptureSession data, response status code and response headers
    def create_pkt_capture_session_with_http_info(pkt_capture_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.create_pkt_capture_session ...'
      end
      # verify the required parameter 'pkt_capture_request' is set
      if @api_client.config.client_side_validation && pkt_capture_request.nil?
        fail ArgumentError, "Missing the required parameter 'pkt_capture_request' when calling InfraApi.create_pkt_capture_session"
      end
      # resource path
      local_var_path = '/infra/pktcap/session'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pkt_capture_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PktCaptureSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#create_pkt_capture_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Certificate Revocation List
    # Adds a new certificate revocation list (CRLs). The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. A CRL can be in the PEM X.509 format (crl_type=X509) or JSON OneCRL (crl_type=OneCRL). If crl_type is not specified, it is auto-detected based on the presence of fields pem_encoded or one_crl. An X.509 CRL can contain a single CRL or multiple CRLs depending on the PEM data. - Single CRL: a single CRL is created with the given id. - Composite CRL: multiple CRLs are generated. Each of the CRL is created with an id generated based on the given id. First CRL is created with crl-id, second with crl-id-1, third with crl-id-2, etc. 
    # @param crl_id 
    # @param tls_crl 
    # @param [Hash] opts the optional parameters
    # @return [TlsCrlListResult]
    def create_tls_crl(crl_id, tls_crl, opts = {})
      data, _status_code, _headers = create_tls_crl_with_http_info(crl_id, tls_crl, opts)
      data
    end

    # Create a new Certificate Revocation List
    # Adds a new certificate revocation list (CRLs). The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. A CRL can be in the PEM X.509 format (crl_type&#x3D;X509) or JSON OneCRL (crl_type&#x3D;OneCRL). If crl_type is not specified, it is auto-detected based on the presence of fields pem_encoded or one_crl. An X.509 CRL can contain a single CRL or multiple CRLs depending on the PEM data. - Single CRL: a single CRL is created with the given id. - Composite CRL: multiple CRLs are generated. Each of the CRL is created with an id generated based on the given id. First CRL is created with crl-id, second with crl-id-1, third with crl-id-2, etc. 
    # @param crl_id 
    # @param tls_crl 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCrlListResult, Fixnum, Hash)>] TlsCrlListResult data, response status code and response headers
    def create_tls_crl_with_http_info(crl_id, tls_crl, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.create_tls_crl ...'
      end
      # verify the required parameter 'crl_id' is set
      if @api_client.config.client_side_validation && crl_id.nil?
        fail ArgumentError, "Missing the required parameter 'crl_id' when calling InfraApi.create_tls_crl"
      end
      # verify the required parameter 'tls_crl' is set
      if @api_client.config.client_side_validation && tls_crl.nil?
        fail ArgumentError, "Missing the required parameter 'tls_crl' when calling InfraApi.create_tls_crl"
      end
      # resource path
      local_var_path = '/infra/crls/{crl-id}?action=import'.sub('{' + 'crl-id' + '}', crl_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_crl)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCrlListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#create_tls_crl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete all the packet capture sessions
    # Delete all the packet capture sessions. 
    # @param [Hash] opts the optional parameters
    # @return [PktCaptureSessionList]
    def delete_all_pkt_capture_sessions(opts = {})
      data, _status_code, _headers = delete_all_pkt_capture_sessions_with_http_info(opts)
      data
    end

    # Delete all the packet capture sessions
    # Delete all the packet capture sessions. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PktCaptureSessionList, Fixnum, Hash)>] PktCaptureSessionList data, response status code and response headers
    def delete_all_pkt_capture_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.delete_all_pkt_capture_sessions ...'
      end
      # resource path
      local_var_path = '/infra/pktcap/sessions'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PktCaptureSessionList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#delete_all_pkt_capture_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes CA bundle
    # Deletes the specified bundle of trusted CA certificates. 
    # @param cabundle_id ID of the CA bundle to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ca_bundle(cabundle_id, opts = {})
      delete_ca_bundle_with_http_info(cabundle_id, opts)
      nil
    end

    # Deletes CA bundle
    # Deletes the specified bundle of trusted CA certificates. 
    # @param cabundle_id ID of the CA bundle to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ca_bundle_with_http_info(cabundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.delete_ca_bundle ...'
      end
      # verify the required parameter 'cabundle_id' is set
      if @api_client.config.client_side_validation && cabundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'cabundle_id' when calling InfraApi.delete_ca_bundle"
      end
      # resource path
      local_var_path = '/infra/cabundles/{cabundle-id}'.sub('{' + 'cabundle-id' + '}', cabundle_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#delete_ca_bundle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Domain and all the entities contained by this domain
    # Delete the domain along with all the entities contained by this domain. The groups that are a part of this domain are also deleted along with the domain. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_domain(domain_id, opts = {})
      delete_domain_with_http_info(domain_id, opts)
      nil
    end

    # Delete Domain and all the entities contained by this domain
    # Delete the domain along with all the entities contained by this domain. The groups that are a part of this domain are also deleted along with the domain. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.delete_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling InfraApi.delete_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#delete_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Domain Deployment Map
    # Delete Domain Deployment Map
    # @param domain_id 
    # @param domain_deployment_map_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_domain_deployment_map(domain_id, domain_deployment_map_id, opts = {})
      delete_domain_deployment_map_with_http_info(domain_id, domain_deployment_map_id, opts)
      nil
    end

    # Delete Domain Deployment Map
    # Delete Domain Deployment Map
    # @param domain_id 
    # @param domain_deployment_map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_domain_deployment_map_with_http_info(domain_id, domain_deployment_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.delete_domain_deployment_map ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling InfraApi.delete_domain_deployment_map"
      end
      # verify the required parameter 'domain_deployment_map_id' is set
      if @api_client.config.client_side_validation && domain_deployment_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_deployment_map_id' when calling InfraApi.delete_domain_deployment_map"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/domain-deployment-maps/{domain-deployment-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'domain-deployment-map-id' + '}', domain_deployment_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#delete_domain_deployment_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete EnforcementPoint
    # Delete EnforcementPoint.  <br> This is a deprecated API. DeploymentZone has been renamed to Site. Use DELETE /infra/sites/site-id/enforcement-points/enforcementpoint-id. 
    # @param deployment_zone_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_enforcement_point(deployment_zone_id, enforcementpoint_id, opts = {})
      delete_enforcement_point_with_http_info(deployment_zone_id, enforcementpoint_id, opts)
      nil
    end

    # Delete EnforcementPoint
    # Delete EnforcementPoint.  &lt;br&gt; This is a deprecated API. DeploymentZone has been renamed to Site. Use DELETE /infra/sites/site-id/enforcement-points/enforcementpoint-id. 
    # @param deployment_zone_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_enforcement_point_with_http_info(deployment_zone_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.delete_enforcement_point ...'
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling InfraApi.delete_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.delete_enforcement_point"
      end
      # resource path
      local_var_path = '/infra/deployment-zones/{deployment-zone-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#delete_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete EnforcementPoint from Site
    # Delete EnforcementPoint from Site
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_enforcement_point_for_site(site_id, enforcementpoint_id, opts = {})
      delete_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, opts)
      nil
    end

    # Delete EnforcementPoint from Site
    # Delete EnforcementPoint from Site
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.delete_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.delete_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.delete_enforcement_point_for_site"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#delete_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Reaction
    # Delete a Reaction under Infra. 
    # @param reaction_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_infra_reaction(reaction_id, opts = {})
      delete_infra_reaction_with_http_info(reaction_id, opts)
      nil
    end

    # Delete Reaction
    # Delete a Reaction under Infra. 
    # @param reaction_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_infra_reaction_with_http_info(reaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.delete_infra_reaction ...'
      end
      # verify the required parameter 'reaction_id' is set
      if @api_client.config.client_side_validation && reaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'reaction_id' when calling InfraApi.delete_infra_reaction"
      end
      # resource path
      local_var_path = '/infra/reactions/{reaction-id}'.sub('{' + 'reaction-id' + '}', reaction_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#delete_infra_reaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the packet capture session by session id.
    # Before calling this method, terminate any running capture session. 
    # @param session_id Packet capture session id
    # @param [Hash] opts the optional parameters
    # @return [PktCaptureSession]
    def delete_pkt_capture_session(session_id, opts = {})
      data, _status_code, _headers = delete_pkt_capture_session_with_http_info(session_id, opts)
      data
    end

    # Delete the packet capture session by session id.
    # Before calling this method, terminate any running capture session. 
    # @param session_id Packet capture session id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PktCaptureSession, Fixnum, Hash)>] PktCaptureSession data, response status code and response headers
    def delete_pkt_capture_session_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.delete_pkt_capture_session ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling InfraApi.delete_pkt_capture_session"
      end
      # resource path
      local_var_path = '/infra/pktcap/session/{session-id}'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PktCaptureSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#delete_pkt_capture_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the specified edge cluster.
    # Delete the specified edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :delete_member_edge_nodes Flag to specify whether to delete edge transport nodes within edge cluster.  (default to false)
    # @return [nil]
    def delete_policy_edge_cluster(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      delete_policy_edge_cluster_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      nil
    end

    # Delete the specified edge cluster.
    # Delete the specified edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :delete_member_edge_nodes Flag to specify whether to delete edge transport nodes within edge cluster. 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_edge_cluster_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.delete_policy_edge_cluster ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.delete_policy_edge_cluster"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.delete_policy_edge_cluster"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling InfraApi.delete_policy_edge_cluster"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'delete_member_edge_nodes'] = opts[:'delete_member_edge_nodes'] if !opts[:'delete_member_edge_nodes'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#delete_policy_edge_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Policy Edge Cluster High Availability Profile
    # Delete a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_edge_cluster_high_availability_profile(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts = {})
      delete_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts)
      nil
    end

    # Delete a Policy Edge Cluster High Availability Profile
    # Delete a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.delete_policy_edge_cluster_high_availability_profile ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.delete_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.delete_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'edge_cluster_high_availability_profile_id' is set
      if @api_client.config.client_side_validation && edge_cluster_high_availability_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_high_availability_profile_id' when calling InfraApi.delete_policy_edge_cluster_high_availability_profile"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-cluster-high-availability-profiles/{edge-cluster-high-availability-profile-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-high-availability-profile-id' + '}', edge_cluster_high_availability_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#delete_policy_edge_cluster_high_availability_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Edge Transport Node
    # Delete Edge Transport Node. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_edge_transport_node(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      delete_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      nil
    end

    # Delete Edge Transport Node
    # Delete Edge Transport Node. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.delete_policy_edge_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.delete_policy_edge_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.delete_policy_edge_transport_node"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling InfraApi.delete_policy_edge_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#delete_policy_edge_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Failure Domain
    # Deletes an existing failure domain. You can not delete system generated default failure domain. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param failure_domain_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_failure_domain(site_id, enforcementpoint_id, failure_domain_id, opts = {})
      delete_policy_failure_domain_with_http_info(site_id, enforcementpoint_id, failure_domain_id, opts)
      nil
    end

    # Delete a Failure Domain
    # Deletes an existing failure domain. You can not delete system generated default failure domain. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param failure_domain_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_failure_domain_with_http_info(site_id, enforcementpoint_id, failure_domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.delete_policy_failure_domain ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.delete_policy_failure_domain"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.delete_policy_failure_domain"
      end
      # verify the required parameter 'failure_domain_id' is set
      if @api_client.config.client_side_validation && failure_domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'failure_domain_id' when calling InfraApi.delete_policy_failure_domain"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/failure-domains/{failure-domain-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'failure-domain-id' + '}', failure_domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#delete_policy_failure_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete PolicyLabel object
    # Delete PolicyLabel object
    # @param label_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_label_for_infra(label_id, opts = {})
      delete_policy_label_for_infra_with_http_info(label_id, opts)
      nil
    end

    # Delete PolicyLabel object
    # Delete PolicyLabel object
    # @param label_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_label_for_infra_with_http_info(label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.delete_policy_label_for_infra ...'
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling InfraApi.delete_policy_label_for_infra"
      end
      # resource path
      local_var_path = '/infra/labels/{label-id}'.sub('{' + 'label-id' + '}', label_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#delete_policy_label_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete tenant Constraint.
    # Delete tenant constraint.
    # @param constraint_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tenant_constraint(constraint_id, opts = {})
      delete_tenant_constraint_with_http_info(constraint_id, opts)
      nil
    end

    # Delete tenant Constraint.
    # Delete tenant constraint.
    # @param constraint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tenant_constraint_with_http_info(constraint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.delete_tenant_constraint ...'
      end
      # verify the required parameter 'constraint_id' is set
      if @api_client.config.client_side_validation && constraint_id.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_id' when calling InfraApi.delete_tenant_constraint"
      end
      # resource path
      local_var_path = '/infra/constraints/{constraint-id}'.sub('{' + 'constraint-id' + '}', constraint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#delete_tenant_constraint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Certificate for the Given Certificate ID
    # Removes the specified certificate. The private key associated with the certificate is also deleted. 
    # @param certificate_id ID of certificate to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tls_certificate(certificate_id, opts = {})
      delete_tls_certificate_with_http_info(certificate_id, opts)
      nil
    end

    # Delete Certificate for the Given Certificate ID
    # Removes the specified certificate. The private key associated with the certificate is also deleted. 
    # @param certificate_id ID of certificate to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tls_certificate_with_http_info(certificate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.delete_tls_certificate ...'
      end
      # verify the required parameter 'certificate_id' is set
      if @api_client.config.client_side_validation && certificate_id.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_id' when calling InfraApi.delete_tls_certificate"
      end
      # resource path
      local_var_path = '/infra/certificates/{certificate-id}'.sub('{' + 'certificate-id' + '}', certificate_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#delete_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a CRL
    # Deletes an existing CRL.
    # @param crl_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tls_crl(crl_id, opts = {})
      delete_tls_crl_with_http_info(crl_id, opts)
      nil
    end

    # Delete a CRL
    # Deletes an existing CRL.
    # @param crl_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tls_crl_with_http_info(crl_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.delete_tls_crl ...'
      end
      # verify the required parameter 'crl_id' is set
      if @api_client.config.client_side_validation && crl_id.nil?
        fail ArgumentError, "Missing the required parameter 'crl_id' when calling InfraApi.delete_tls_crl"
      end
      # resource path
      local_var_path = '/infra/crls/{crl-id}'.sub('{' + 'crl-id' + '}', crl_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#delete_tls_crl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a CSR
    # Removes a specified CSR. If a CSR is not used for verification, you can delete it. Note that the CSR import and upload POST actions automatically delete the associated CSR. 
    # @param csr_id ID of CSR to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tls_csr(csr_id, opts = {})
      delete_tls_csr_with_http_info(csr_id, opts)
      nil
    end

    # Delete a CSR
    # Removes a specified CSR. If a CSR is not used for verification, you can delete it. Note that the CSR import and upload POST actions automatically delete the associated CSR. 
    # @param csr_id ID of CSR to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tls_csr_with_http_info(csr_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.delete_tls_csr ...'
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling InfraApi.delete_tls_csr"
      end
      # resource path
      local_var_path = '/infra/csrs/{csr-id}'.sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#delete_tls_csr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Full sync EnforcementPoint from Site
    # Full sync EnforcementPoint from Site
    # @param site_id 
    # @param enforcement_point_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def full_sync_enforcement_point_for_site(site_id, enforcement_point_id, opts = {})
      full_sync_enforcement_point_for_site_with_http_info(site_id, enforcement_point_id, opts)
      nil
    end

    # Full sync EnforcementPoint from Site
    # Full sync EnforcementPoint from Site
    # @param site_id 
    # @param enforcement_point_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def full_sync_enforcement_point_for_site_with_http_info(site_id, enforcement_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.full_sync_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.full_sync_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling InfraApi.full_sync_enforcement_point_for_site"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}?action=full-sync'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#full_sync_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate a new self-signed certificate
    # Creates a new self-signed certificate. A private key is also created at the same time. This is convenience call that will generate a CSR and then self-sign it. The maximum validity limit for non-CA certificates is 825 days, except that values of 3,650 and 36,500 days are allowed. No limit is set for CA certificates. 
    # @param tls_csr_with_days_valid 
    # @param [Hash] opts the optional parameters
    # @return [TlsCertificate]
    def generate_self_signed_tls_certificate(tls_csr_with_days_valid, opts = {})
      data, _status_code, _headers = generate_self_signed_tls_certificate_with_http_info(tls_csr_with_days_valid, opts)
      data
    end

    # Generate a new self-signed certificate
    # Creates a new self-signed certificate. A private key is also created at the same time. This is convenience call that will generate a CSR and then self-sign it. The maximum validity limit for non-CA certificates is 825 days, except that values of 3,650 and 36,500 days are allowed. No limit is set for CA certificates. 
    # @param tls_csr_with_days_valid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def generate_self_signed_tls_certificate_with_http_info(tls_csr_with_days_valid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.generate_self_signed_tls_certificate ...'
      end
      # verify the required parameter 'tls_csr_with_days_valid' is set
      if @api_client.config.client_side_validation && tls_csr_with_days_valid.nil?
        fail ArgumentError, "Missing the required parameter 'tls_csr_with_days_valid' when calling InfraApi.generate_self_signed_tls_certificate"
      end
      # resource path
      local_var_path = '/infra/csrs?action=self_sign'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_csr_with_days_valid)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#generate_self_signed_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate a New Certificate Signing Request
    # Creates a new certificate signing request (CSR). A CSR is encrypted text that contains information about your organization (organization name, country, and so on) and your Web server's public key, which is a public certificate the is generated on the server that can be used to forward this request to a certificate authority (CA). A private key is also usually created at the same time as the CSR. 
    # @param csr_id ID of CSR to create
    # @param tls_csr 
    # @param [Hash] opts the optional parameters
    # @return [TlsCsr]
    def generate_tls_csr(csr_id, tls_csr, opts = {})
      data, _status_code, _headers = generate_tls_csr_with_http_info(csr_id, tls_csr, opts)
      data
    end

    # Generate a New Certificate Signing Request
    # Creates a new certificate signing request (CSR). A CSR is encrypted text that contains information about your organization (organization name, country, and so on) and your Web server&#39;s public key, which is a public certificate the is generated on the server that can be used to forward this request to a certificate authority (CA). A private key is also usually created at the same time as the CSR. 
    # @param csr_id ID of CSR to create
    # @param tls_csr 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCsr, Fixnum, Hash)>] TlsCsr data, response status code and response headers
    def generate_tls_csr_with_http_info(csr_id, tls_csr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.generate_tls_csr ...'
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling InfraApi.generate_tls_csr"
      end
      # verify the required parameter 'tls_csr' is set
      if @api_client.config.client_side_validation && tls_csr.nil?
        fail ArgumentError, "Missing the required parameter 'tls_csr' when calling InfraApi.generate_tls_csr"
      end
      # resource path
      local_var_path = '/infra/csrs/{csr-id}?action=create'.sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_csr)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCsr')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#generate_tls_csr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns information about a CA bundle
    # Returns information about the specified bundle of trusted CA certificates. 
    # @param cabundle_id ID of the CA bundle to retrieve
    # @param [Hash] opts the optional parameters
    # @return [CaBundle]
    def get_ca_bundle(cabundle_id, opts = {})
      data, _status_code, _headers = get_ca_bundle_with_http_info(cabundle_id, opts)
      data
    end

    # Returns information about a CA bundle
    # Returns information about the specified bundle of trusted CA certificates. 
    # @param cabundle_id ID of the CA bundle to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(CaBundle, Fixnum, Hash)>] CaBundle data, response status code and response headers
    def get_ca_bundle_with_http_info(cabundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.get_ca_bundle ...'
      end
      # verify the required parameter 'cabundle_id' is set
      if @api_client.config.client_side_validation && cabundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'cabundle_id' when calling InfraApi.get_ca_bundle"
      end
      # resource path
      local_var_path = '/infra/cabundles/{cabundle-id}'.sub('{' + 'cabundle-id' + '}', cabundle_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#get_ca_bundle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Downloads a CA bundle
    # Downloads the specified PEM-encoded bundle of trusted CA certificates. 
    # @param cabundle_id ID of the CA bundle to retrieve
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_ca_bundle_pem_file(cabundle_id, opts = {})
      data, _status_code, _headers = get_ca_bundle_pem_file_with_http_info(cabundle_id, opts)
      data
    end

    # Downloads a CA bundle
    # Downloads the specified PEM-encoded bundle of trusted CA certificates. 
    # @param cabundle_id ID of the CA bundle to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_ca_bundle_pem_file_with_http_info(cabundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.get_ca_bundle_pem_file ...'
      end
      # verify the required parameter 'cabundle_id' is set
      if @api_client.config.client_side_validation && cabundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'cabundle_id' when calling InfraApi.get_ca_bundle_pem_file"
      end
      # resource path
      local_var_path = '/infra/cabundles/{cabundle-id}/pem-file'.sub('{' + 'cabundle-id' + '}', cabundle_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#get_ca_bundle_pem_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get packet capture file
    # You must provide the request header \"Accept:application/octet-stream\" when calling this API. The capture file can only be found in MP which receives the capture request. 
    # @param session_id Packet capture session id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_captured_file(session_id, opts = {})
      get_captured_file_with_http_info(session_id, opts)
      nil
    end

    # Get packet capture file
    # You must provide the request header \&quot;Accept:application/octet-stream\&quot; when calling this API. The capture file can only be found in MP which receives the capture request. 
    # @param session_id Packet capture session id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_captured_file_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.get_captured_file ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling InfraApi.get_captured_file"
      end
      # resource path
      local_var_path = '/infra/pktcap/session/{session-id}/CapturedFile'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#get_captured_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Reaction
    # Get Reaction under Infra. 
    # @param reaction_id 
    # @param [Hash] opts the optional parameters
    # @return [Reaction]
    def get_infra_reaction(reaction_id, opts = {})
      data, _status_code, _headers = get_infra_reaction_with_http_info(reaction_id, opts)
      data
    end

    # Get Reaction
    # Get Reaction under Infra. 
    # @param reaction_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Reaction, Fixnum, Hash)>] Reaction data, response status code and response headers
    def get_infra_reaction_with_http_info(reaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.get_infra_reaction ...'
      end
      # verify the required parameter 'reaction_id' is set
      if @api_client.config.client_side_validation && reaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'reaction_id' when calling InfraApi.get_infra_reaction"
      end
      # resource path
      local_var_path = '/infra/reactions/{reaction-id}'.sub('{' + 'reaction-id' + '}', reaction_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Reaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#get_infra_reaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy Edge Cluster allocation status  under an Enforcement Point
    # Returns the allocation details of cluster and its members. Lists the edge node members, active and standby services of each node, utilization details of configured sub-pools. These allocation details can be monitored by customers to trigger migration of certain service contexts to different edge nodes, to balance the utilization of edge node resources. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeClusterAllocationStatus]
    def get_policy_edge_cluster_allocation_status(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = get_policy_edge_cluster_allocation_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      data
    end

    # Get a Policy Edge Cluster allocation status  under an Enforcement Point
    # Returns the allocation details of cluster and its members. Lists the edge node members, active and standby services of each node, utilization details of configured sub-pools. These allocation details can be monitored by customers to trigger migration of certain service contexts to different edge nodes, to balance the utilization of edge node resources. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeClusterAllocationStatus, Fixnum, Hash)>] PolicyEdgeClusterAllocationStatus data, response status code and response headers
    def get_policy_edge_cluster_allocation_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.get_policy_edge_cluster_allocation_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.get_policy_edge_cluster_allocation_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.get_policy_edge_cluster_allocation_status"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling InfraApi.get_policy_edge_cluster_allocation_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/allocation/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeClusterAllocationStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#get_policy_edge_cluster_allocation_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy Edge Cluster State info under an Enforcement Point
    # Returns information about the current state of the edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [PolicyEdgeClusterState]
    def get_policy_edge_cluster_state(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = get_policy_edge_cluster_state_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      data
    end

    # Get a Policy Edge Cluster State info under an Enforcement Point
    # Returns information about the current state of the edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [Array<(PolicyEdgeClusterState, Fixnum, Hash)>] PolicyEdgeClusterState data, response status code and response headers
    def get_policy_edge_cluster_state_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.get_policy_edge_cluster_state ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.get_policy_edge_cluster_state"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.get_policy_edge_cluster_state"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling InfraApi.get_policy_edge_cluster_state"
      end
      if @api_client.config.client_side_validation && !opts[:'barrier_id'].nil? && opts[:'barrier_id'] < 0
        fail ArgumentError, 'invalid value for "opts[:"barrier_id"]" when calling InfraApi.get_policy_edge_cluster_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/state'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'barrier_id'] = opts[:'barrier_id'] if !opts[:'barrier_id'].nil?
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeClusterState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#get_policy_edge_cluster_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy Edge Cluster real time status  under an Enforcement Point
    # Returns the aggregated status for the Edge cluster along with status of all edge nodes in the cluster. Query parameter \"source=realtime\" is the only supported source. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param source Data source type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyEdgeClusterStatus]
    def get_policy_edge_cluster_status(site_id, enforcementpoint_id, edge_cluster_id, source, opts = {})
      data, _status_code, _headers = get_policy_edge_cluster_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, source, opts)
      data
    end

    # Get a Policy Edge Cluster real time status  under an Enforcement Point
    # Returns the aggregated status for the Edge cluster along with status of all edge nodes in the cluster. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param source Data source type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyEdgeClusterStatus, Fixnum, Hash)>] PolicyEdgeClusterStatus data, response status code and response headers
    def get_policy_edge_cluster_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, source, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.get_policy_edge_cluster_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.get_policy_edge_cluster_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.get_policy_edge_cluster_status"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling InfraApi.get_policy_edge_cluster_status"
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling InfraApi.get_policy_edge_cluster_status"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['realtime', 'cached'].include?(source)
        fail ArgumentError, "invalid value for 'source', must be one of realtime, cached"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.get_policy_edge_cluster_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.get_policy_edge_cluster_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = source
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeClusterStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#get_policy_edge_cluster_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Edge Transport Node under an Enforcement Point
    # Read an Edge Transport Node  under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeTransportNode]
    def get_policy_edge_transport_node(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      data, _status_code, _headers = get_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      data
    end

    # Read an Edge Transport Node under an Enforcement Point
    # Read an Edge Transport Node  under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeTransportNode, Fixnum, Hash)>] PolicyEdgeTransportNode data, response status code and response headers
    def get_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.get_policy_edge_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.get_policy_edge_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.get_policy_edge_transport_node"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling InfraApi.get_policy_edge_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#get_policy_edge_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read counters for edge transport node interfaces.
    # This API returns the counters of the specified interface. The counters reset on reboot or redeploy of the appliance or restart of the data plane. NSX Manager polls the edge-transport-node every minute (by default) to update the data returned on this API. If you need near realtime values, use the query parameter \\\"?source=realtime\\\" to the API and it will make NSX Manager collect the statistics from the edge transport node and returns the updated counters. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [NodeInterfaceStatisticsProperties]
    def get_policy_edge_transport_node_interface_statistics(site_id, enforcementpoint_id, edge_transport_node_id, interface_id, opts = {})
      data, _status_code, _headers = get_policy_edge_transport_node_interface_statistics_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, interface_id, opts)
      data
    end

    # Read counters for edge transport node interfaces.
    # This API returns the counters of the specified interface. The counters reset on reboot or redeploy of the appliance or restart of the data plane. NSX Manager polls the edge-transport-node every minute (by default) to update the data returned on this API. If you need near realtime values, use the query parameter \\\&quot;?source&#x3D;realtime\\\&quot; to the API and it will make NSX Manager collect the statistics from the edge transport node and returns the updated counters. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param interface_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(NodeInterfaceStatisticsProperties, Fixnum, Hash)>] NodeInterfaceStatisticsProperties data, response status code and response headers
    def get_policy_edge_transport_node_interface_statistics_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, interface_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.get_policy_edge_transport_node_interface_statistics ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.get_policy_edge_transport_node_interface_statistics"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.get_policy_edge_transport_node_interface_statistics"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling InfraApi.get_policy_edge_transport_node_interface_statistics"
      end
      # verify the required parameter 'interface_id' is set
      if @api_client.config.client_side_validation && interface_id.nil?
        fail ArgumentError, "Missing the required parameter 'interface_id' when calling InfraApi.get_policy_edge_transport_node_interface_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/network/interfaces/{interface-id}/statistics'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s).sub('{' + 'interface-id' + '}', interface_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInterfaceStatisticsProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#get_policy_edge_transport_node_interface_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy EdgeTransport Node's State info under an Enforcement Point
    # Returns information about the current state of the edge transport node configuration and information about the associated edge tn switches. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeTransportNodeState]
    def get_policy_edge_transport_node_state(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      data, _status_code, _headers = get_policy_edge_transport_node_state_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      data
    end

    # Get a Policy EdgeTransport Node&#39;s State info under an Enforcement Point
    # Returns information about the current state of the edge transport node configuration and information about the associated edge tn switches. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeTransportNodeState, Fixnum, Hash)>] PolicyEdgeTransportNodeState data, response status code and response headers
    def get_policy_edge_transport_node_state_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.get_policy_edge_transport_node_state ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.get_policy_edge_transport_node_state"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.get_policy_edge_transport_node_state"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling InfraApi.get_policy_edge_transport_node_state"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/state'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNodeState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#get_policy_edge_transport_node_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy EdgeTransport Node's status info under an Enforcement Point
    # Returns information about the current status of the edge transport node. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [TransportNodeStatus]
    def get_policy_edge_transport_node_status(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      data, _status_code, _headers = get_policy_edge_transport_node_status_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      data
    end

    # Get a Policy EdgeTransport Node&#39;s status info under an Enforcement Point
    # Returns information about the current status of the edge transport node. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(TransportNodeStatus, Fixnum, Hash)>] TransportNodeStatus data, response status code and response headers
    def get_policy_edge_transport_node_status_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.get_policy_edge_transport_node_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.get_policy_edge_transport_node_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.get_policy_edge_transport_node_status"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling InfraApi.get_policy_edge_transport_node_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#get_policy_edge_transport_node_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get datapath troubleshoot config of edge transport nodes
    # This API is used to fetch the control packet drop log config at enforcement Point level. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeTransportNodeDatapathTroubleshooting]
    def get_policy_edge_transport_nodes_troubleshoot_config(site_id, enforcement_point_id, opts = {})
      data, _status_code, _headers = get_policy_edge_transport_nodes_troubleshoot_config_with_http_info(site_id, enforcement_point_id, opts)
      data
    end

    # Get datapath troubleshoot config of edge transport nodes
    # This API is used to fetch the control packet drop log config at enforcement Point level. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeTransportNodeDatapathTroubleshooting, Fixnum, Hash)>] PolicyEdgeTransportNodeDatapathTroubleshooting data, response status code and response headers
    def get_policy_edge_transport_nodes_troubleshoot_config_with_http_info(site_id, enforcement_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.get_policy_edge_transport_nodes_troubleshoot_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.get_policy_edge_transport_nodes_troubleshoot_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling InfraApi.get_policy_edge_transport_nodes_troubleshoot_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-transport-nodes/troubleshoot/datapath'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNodeDatapathTroubleshooting')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#get_policy_edge_transport_nodes_troubleshoot_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Failure Domain
    # Creates a new Policy failure domain. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param failure_domain_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyFailureDomain]
    def get_policy_failure_domain(site_id, enforcementpoint_id, failure_domain_id, opts = {})
      data, _status_code, _headers = get_policy_failure_domain_with_http_info(site_id, enforcementpoint_id, failure_domain_id, opts)
      data
    end

    # Get a Failure Domain
    # Creates a new Policy failure domain. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param failure_domain_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyFailureDomain, Fixnum, Hash)>] PolicyFailureDomain data, response status code and response headers
    def get_policy_failure_domain_with_http_info(site_id, enforcementpoint_id, failure_domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.get_policy_failure_domain ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.get_policy_failure_domain"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.get_policy_failure_domain"
      end
      # verify the required parameter 'failure_domain_id' is set
      if @api_client.config.client_side_validation && failure_domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'failure_domain_id' when calling InfraApi.get_policy_failure_domain"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/failure-domains/{failure-domain-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'failure-domain-id' + '}', failure_domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFailureDomain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#get_policy_failure_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Show Certificate Data for the Given Certificate ID
    # Returns information for the specified certificate ID, including the certificate's id; pem_encoded data; and history of the certificate (who created or modified it and when). For additional information, include the ?details=true modifier at the end of the request URI. 
    # @param certificate_id ID of certificate to read
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details (default to false)
    # @return [TlsCertificate]
    def get_tls_certificate(certificate_id, opts = {})
      data, _status_code, _headers = get_tls_certificate_with_http_info(certificate_id, opts)
      data
    end

    # Show Certificate Data for the Given Certificate ID
    # Returns information for the specified certificate ID, including the certificate&#39;s id; pem_encoded data; and history of the certificate (who created or modified it and when). For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
    # @param certificate_id ID of certificate to read
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def get_tls_certificate_with_http_info(certificate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.get_tls_certificate ...'
      end
      # verify the required parameter 'certificate_id' is set
      if @api_client.config.client_side_validation && certificate_id.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_id' when calling InfraApi.get_tls_certificate"
      end
      # resource path
      local_var_path = '/infra/certificates/{certificate-id}'.sub('{' + 'certificate-id' + '}', certificate_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'details'] = opts[:'details'] if !opts[:'details'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#get_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Show CRL Data for the Given CRL id.
    # Returns information about the specified CRL. For additional information, include the ?details=true modifier at the end of the request URI. 
    # @param crl_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details (default to false)
    # @return [TlsCrl]
    def get_tls_crl(crl_id, opts = {})
      data, _status_code, _headers = get_tls_crl_with_http_info(crl_id, opts)
      data
    end

    # Show CRL Data for the Given CRL id.
    # Returns information about the specified CRL. For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
    # @param crl_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details
    # @return [Array<(TlsCrl, Fixnum, Hash)>] TlsCrl data, response status code and response headers
    def get_tls_crl_with_http_info(crl_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.get_tls_crl ...'
      end
      # verify the required parameter 'crl_id' is set
      if @api_client.config.client_side_validation && crl_id.nil?
        fail ArgumentError, "Missing the required parameter 'crl_id' when calling InfraApi.get_tls_crl"
      end
      # resource path
      local_var_path = '/infra/crls/{crl-id}'.sub('{' + 'crl-id' + '}', crl_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'details'] = opts[:'details'] if !opts[:'details'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCrl')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#get_tls_crl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Show CSR Data for the Given CSR ID
    # Returns information about the specified CSR.
    # @param csr_id ID of CSR to read
    # @param [Hash] opts the optional parameters
    # @return [TlsCsr]
    def get_tls_csr(csr_id, opts = {})
      data, _status_code, _headers = get_tls_csr_with_http_info(csr_id, opts)
      data
    end

    # Show CSR Data for the Given CSR ID
    # Returns information about the specified CSR.
    # @param csr_id ID of CSR to read
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCsr, Fixnum, Hash)>] TlsCsr data, response status code and response headers
    def get_tls_csr_with_http_info(csr_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.get_tls_csr ...'
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling InfraApi.get_tls_csr"
      end
      # resource path
      local_var_path = '/infra/csrs/{csr-id}'.sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCsr')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#get_tls_csr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get CSR PEM File for the Given CSR ID
    # Downloads the CSR PEM file for a specified CSR. Clients must include an Accept: text/plain request header.
    # @param csr_id ID of CSR to read
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_tls_csr_pem(csr_id, opts = {})
      data, _status_code, _headers = get_tls_csr_pem_with_http_info(csr_id, opts)
      data
    end

    # Get CSR PEM File for the Given CSR ID
    # Downloads the CSR PEM file for a specified CSR. Clients must include an Accept: text/plain request header.
    # @param csr_id ID of CSR to read
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_tls_csr_pem_with_http_info(csr_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.get_tls_csr_pem ...'
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling InfraApi.get_tls_csr_pem"
      end
      # resource path
      local_var_path = '/infra/csrs/{csr-id}/pem-file'.sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#get_tls_csr_pem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy Edge Cluster allocation status  under an Enforcement Point
    # Returns the allocation details of cluster and its members. Lists the edge node members, active and standby services of each node, utilization details of configured sub-pools. These allocation details can be monitored by customers to trigger migration of certain service contexts to different edge nodes, to balance the utilization of edge node resources. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeClusterAllocationStatus]
    def global_infra_get_policy_edge_cluster_allocation_status(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_edge_cluster_allocation_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      data
    end

    # Get a Policy Edge Cluster allocation status  under an Enforcement Point
    # Returns the allocation details of cluster and its members. Lists the edge node members, active and standby services of each node, utilization details of configured sub-pools. These allocation details can be monitored by customers to trigger migration of certain service contexts to different edge nodes, to balance the utilization of edge node resources. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeClusterAllocationStatus, Fixnum, Hash)>] PolicyEdgeClusterAllocationStatus data, response status code and response headers
    def global_infra_get_policy_edge_cluster_allocation_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_get_policy_edge_cluster_allocation_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.global_infra_get_policy_edge_cluster_allocation_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.global_infra_get_policy_edge_cluster_allocation_status"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling InfraApi.global_infra_get_policy_edge_cluster_allocation_status"
      end
      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/allocation/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeClusterAllocationStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_get_policy_edge_cluster_allocation_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy Edge Cluster real time status  under an Enforcement Point
    # Returns the aggregated status for the Edge cluster along with status of all edge nodes in the cluster. Query parameter \"source=realtime\" is the only supported source. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param source Data source type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyEdgeClusterStatus]
    def global_infra_get_policy_edge_cluster_status(site_id, enforcementpoint_id, edge_cluster_id, source, opts = {})
      data, _status_code, _headers = global_infra_get_policy_edge_cluster_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, source, opts)
      data
    end

    # Get a Policy Edge Cluster real time status  under an Enforcement Point
    # Returns the aggregated status for the Edge cluster along with status of all edge nodes in the cluster. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param source Data source type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyEdgeClusterStatus, Fixnum, Hash)>] PolicyEdgeClusterStatus data, response status code and response headers
    def global_infra_get_policy_edge_cluster_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, source, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_get_policy_edge_cluster_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.global_infra_get_policy_edge_cluster_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.global_infra_get_policy_edge_cluster_status"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling InfraApi.global_infra_get_policy_edge_cluster_status"
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling InfraApi.global_infra_get_policy_edge_cluster_status"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['realtime', 'cached'].include?(source)
        fail ArgumentError, "invalid value for 'source', must be one of realtime, cached"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.global_infra_get_policy_edge_cluster_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.global_infra_get_policy_edge_cluster_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = source
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeClusterStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_get_policy_edge_cluster_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Show Certificate Data for the Given Certificate ID
    # Returns information for the specified certificate ID, including the certificate's id; pem_encoded data; and history of the certificate (who created or modified it and when). For additional information, include the ?details=true modifier at the end of the request URI. 
    # @param certificate_id ID of certificate to read
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details (default to false)
    # @return [TlsCertificate]
    def global_infra_get_tls_certificate(certificate_id, opts = {})
      data, _status_code, _headers = global_infra_get_tls_certificate_with_http_info(certificate_id, opts)
      data
    end

    # Show Certificate Data for the Given Certificate ID
    # Returns information for the specified certificate ID, including the certificate&#39;s id; pem_encoded data; and history of the certificate (who created or modified it and when). For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
    # @param certificate_id ID of certificate to read
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def global_infra_get_tls_certificate_with_http_info(certificate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_get_tls_certificate ...'
      end
      # verify the required parameter 'certificate_id' is set
      if @api_client.config.client_side_validation && certificate_id.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_id' when calling InfraApi.global_infra_get_tls_certificate"
      end
      # resource path
      local_var_path = '/global-infra/certificates/{certificate-id}'.sub('{' + 'certificate-id' + '}', certificate_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'details'] = opts[:'details'] if !opts[:'details'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_get_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Show CRL Data for the Given CRL id.
    # Returns information about the specified CRL. For additional information, include the ?details=true modifier at the end of the request URI. 
    # @param crl_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details (default to false)
    # @return [TlsCrl]
    def global_infra_get_tls_crl(crl_id, opts = {})
      data, _status_code, _headers = global_infra_get_tls_crl_with_http_info(crl_id, opts)
      data
    end

    # Show CRL Data for the Given CRL id.
    # Returns information about the specified CRL. For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
    # @param crl_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details
    # @return [Array<(TlsCrl, Fixnum, Hash)>] TlsCrl data, response status code and response headers
    def global_infra_get_tls_crl_with_http_info(crl_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_get_tls_crl ...'
      end
      # verify the required parameter 'crl_id' is set
      if @api_client.config.client_side_validation && crl_id.nil?
        fail ArgumentError, "Missing the required parameter 'crl_id' when calling InfraApi.global_infra_get_tls_crl"
      end
      # resource path
      local_var_path = '/global-infra/crls/{crl-id}'.sub('{' + 'crl-id' + '}', crl_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'details'] = opts[:'details'] if !opts[:'details'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCrl')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_get_tls_crl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Domain Deployment maps for infra
    # Paginated list of all Domain Deployment Entries for infra. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DomainDeploymentMapListResult]
    def global_infra_list_domain_deployment_maps_for_infra(domain_id, opts = {})
      data, _status_code, _headers = global_infra_list_domain_deployment_maps_for_infra_with_http_info(domain_id, opts)
      data
    end

    # List Domain Deployment maps for infra
    # Paginated list of all Domain Deployment Entries for infra. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DomainDeploymentMapListResult, Fixnum, Hash)>] DomainDeploymentMapListResult data, response status code and response headers
    def global_infra_list_domain_deployment_maps_for_infra_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_list_domain_deployment_maps_for_infra ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling InfraApi.global_infra_list_domain_deployment_maps_for_infra"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.global_infra_list_domain_deployment_maps_for_infra, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.global_infra_list_domain_deployment_maps_for_infra, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/domain-deployment-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DomainDeploymentMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_list_domain_deployment_maps_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List domains for infra
    # Paginated list of all domains for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DomainListResult]
    def global_infra_list_domain_for_infra(opts = {})
      data, _status_code, _headers = global_infra_list_domain_for_infra_with_http_info(opts)
      data
    end

    # List domains for infra
    # Paginated list of all domains for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DomainListResult, Fixnum, Hash)>] DomainListResult data, response status code and response headers
    def global_infra_list_domain_for_infra_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_list_domain_for_infra ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.global_infra_list_domain_for_infra, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.global_infra_list_domain_for_infra, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DomainListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_list_domain_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Edge Clusters under an Enforcement Point
    # Paginated list of all Edge Clusters under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyEdgeClusterListResult]
    def global_infra_list_edge_clusters_for_enforcement_point(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = global_infra_list_edge_clusters_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # List Edge Clusters under an Enforcement Point
    # Paginated list of all Edge Clusters under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyEdgeClusterListResult, Fixnum, Hash)>] PolicyEdgeClusterListResult data, response status code and response headers
    def global_infra_list_edge_clusters_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_list_edge_clusters_for_enforcement_point ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.global_infra_list_edge_clusters_for_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.global_infra_list_edge_clusters_for_enforcement_point"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.global_infra_list_edge_clusters_for_enforcement_point, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.global_infra_list_edge_clusters_for_enforcement_point, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeClusterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_list_edge_clusters_for_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Edge Nodes under an Enforcement Point, Edge Cluster
    # Paginated list of all Edge Nodes under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyEdgeNodeListResult]
    def global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      data
    end

    # List Edge Nodes under an Enforcement Point, Edge Cluster
    # Paginated list of all Edge Nodes under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyEdgeNodeListResult, Fixnum, Hash)>] PolicyEdgeNodeListResult data, response status code and response headers
    def global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling InfraApi.global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/edge-nodes'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeNodeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List enforcementpoints under Site
    # Paginated list of all enforcementpoints under Site. 
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EnforcementPointListResult]
    def global_infra_list_enforcement_point_for_site(site_id, opts = {})
      data, _status_code, _headers = global_infra_list_enforcement_point_for_site_with_http_info(site_id, opts)
      data
    end

    # List enforcementpoints under Site
    # Paginated list of all enforcementpoints under Site. 
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EnforcementPointListResult, Fixnum, Hash)>] EnforcementPointListResult data, response status code and response headers
    def global_infra_list_enforcement_point_for_site_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_list_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.global_infra_list_enforcement_point_for_site"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.global_infra_list_enforcement_point_for_site, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.global_infra_list_enforcement_point_for_site, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_list_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List labels for infra
    # Paginated list of all labels for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyLabelListResult]
    def global_infra_list_policy_label_for_infra(opts = {})
      data, _status_code, _headers = global_infra_list_policy_label_for_infra_with_http_info(opts)
      data
    end

    # List labels for infra
    # Paginated list of all labels for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyLabelListResult, Fixnum, Hash)>] PolicyLabelListResult data, response status code and response headers
    def global_infra_list_policy_label_for_infra_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_list_policy_label_for_infra ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.global_infra_list_policy_label_for_infra, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.global_infra_list_policy_label_for_infra, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/labels'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyLabelListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_list_policy_label_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of realized objects associated with intent object
    # Get list of realized entities associated with intent object, specified by path in query parameter 
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :site_path Policy Path of the site
    # @return [GenericPolicyRealizedResourceListResult]
    def global_infra_list_realized_entities(intent_path, opts = {})
      data, _status_code, _headers = global_infra_list_realized_entities_with_http_info(intent_path, opts)
      data
    end

    # Get list of realized objects associated with intent object
    # Get list of realized entities associated with intent object, specified by path in query parameter 
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :site_path Policy Path of the site
    # @return [Array<(GenericPolicyRealizedResourceListResult, Fixnum, Hash)>] GenericPolicyRealizedResourceListResult data, response status code and response headers
    def global_infra_list_realized_entities_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_list_realized_entities ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling InfraApi.global_infra_list_realized_entities"
      end
      # resource path
      local_var_path = '/global-infra/realized-state/realized-entities'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'site_path'] = opts[:'site_path'] if !opts[:'site_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_list_realized_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List tenant Constraints.
    # List tenant constraints.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ConstraintListResult]
    def global_infra_list_tenant_constraints(opts = {})
      data, _status_code, _headers = global_infra_list_tenant_constraints_with_http_info(opts)
      data
    end

    # List tenant Constraints.
    # List tenant constraints.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ConstraintListResult, Fixnum, Hash)>] ConstraintListResult data, response status code and response headers
    def global_infra_list_tenant_constraints_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_list_tenant_constraints ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.global_infra_list_tenant_constraints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.global_infra_list_tenant_constraints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/constraints'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConstraintListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_list_tenant_constraints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return All the User-Facing Components' Certificates
    # Returns all certificate information viewable by the user, including each certificate's id; pem_encoded data; and history of the certificate (who created or modified it and when). For additional information, include the ?details=true modifier at the end of the request URI. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :node_id Node ID of certificate to return
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type of certificate to return
    # @return [TlsCertificateList]
    def global_infra_list_tls_certificates(opts = {})
      data, _status_code, _headers = global_infra_list_tls_certificates_with_http_info(opts)
      data
    end

    # Return All the User-Facing Components&#39; Certificates
    # Returns all certificate information viewable by the user, including each certificate&#39;s id; pem_encoded data; and history of the certificate (who created or modified it and when). For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :node_id Node ID of certificate to return
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type of certificate to return
    # @return [Array<(TlsCertificateList, Fixnum, Hash)>] TlsCertificateList data, response status code and response headers
    def global_infra_list_tls_certificates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_list_tls_certificates ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.global_infra_list_tls_certificates, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.global_infra_list_tls_certificates, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['cluster_api_certificate', 'api_certificate'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of cluster_api_certificate, api_certificate'
      end
      # resource path
      local_var_path = '/global-infra/certificates'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'details'] = opts[:'details'] if !opts[:'details'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'node_id'] = opts[:'node_id'] if !opts[:'node_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificateList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_list_tls_certificates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return All Added CRLs
    # Returns information about all CRLs. For additional information, include the ?details=true modifier at the end of the request URI. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :node_id Node ID of certificate to return
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type of certificate to return
    # @return [TlsCrlListResult]
    def global_infra_list_tls_crls(opts = {})
      data, _status_code, _headers = global_infra_list_tls_crls_with_http_info(opts)
      data
    end

    # Return All Added CRLs
    # Returns information about all CRLs. For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :node_id Node ID of certificate to return
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type of certificate to return
    # @return [Array<(TlsCrlListResult, Fixnum, Hash)>] TlsCrlListResult data, response status code and response headers
    def global_infra_list_tls_crls_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_list_tls_crls ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.global_infra_list_tls_crls, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.global_infra_list_tls_crls, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['cluster_api_certificate', 'api_certificate'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of cluster_api_certificate, api_certificate'
      end
      # resource path
      local_var_path = '/global-infra/crls'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'details'] = opts[:'details'] if !opts[:'details'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'node_id'] = opts[:'node_id'] if !opts[:'node_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCrlListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_list_tls_crls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the infra including all the nested entities
    # Patch API at infra level can be used in two flavours 1. Like a regular API to update Infra object 2. Hierarchical API: To create/update/delete entire or part of intent    hierarchy Hierarchical API: Provides users a way to create entire or part of intent in single API invocation. Input is expressed in a tree format. Each node in tree can have multiple children of different types. System will resolve the dependencies of nodes within the intent tree and will create the model. Children for any node can be specified using ChildResourceReference or ChildPolicyConfigResource. If a resource is specified using ChildResourceReference then it will not be updated only its children will be updated. If Object is specified using ChildPolicyConfigResource, object along with its children will be updated. Hierarchical API can also be used to delete any sub-branch of entire tree. Hierarchical API supports up to 5000 intent creation on LM and 1000 on GM. 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enforce_revision_check Force revision check (default to false)
    # @return [nil]
    def global_infra_patch_infra(infra, opts = {})
      global_infra_patch_infra_with_http_info(infra, opts)
      nil
    end

    # Update the infra including all the nested entities
    # Patch API at infra level can be used in two flavours 1. Like a regular API to update Infra object 2. Hierarchical API: To create/update/delete entire or part of intent    hierarchy Hierarchical API: Provides users a way to create entire or part of intent in single API invocation. Input is expressed in a tree format. Each node in tree can have multiple children of different types. System will resolve the dependencies of nodes within the intent tree and will create the model. Children for any node can be specified using ChildResourceReference or ChildPolicyConfigResource. If a resource is specified using ChildResourceReference then it will not be updated only its children will be updated. If Object is specified using ChildPolicyConfigResource, object along with its children will be updated. Hierarchical API can also be used to delete any sub-branch of entire tree. Hierarchical API supports up to 5000 intent creation on LM and 1000 on GM. 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enforce_revision_check Force revision check
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_infra_with_http_info(infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_patch_infra ...'
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling InfraApi.global_infra_patch_infra"
      end
      # resource path
      local_var_path = '/global-infra'

      # query parameters
      query_params = {}
      query_params[:'enforce_revision_check'] = opts[:'enforce_revision_check'] if !opts[:'enforce_revision_check'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_patch_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a DomainDeploymentMap
    # Read a Domain Deployment Map 
    # @param domain_id 
    # @param domain_deployment_map_id 
    # @param [Hash] opts the optional parameters
    # @return [DomainDeploymentMap]
    def global_infra_read_domain_deployment_map_for_infra(domain_id, domain_deployment_map_id, opts = {})
      data, _status_code, _headers = global_infra_read_domain_deployment_map_for_infra_with_http_info(domain_id, domain_deployment_map_id, opts)
      data
    end

    # Read a DomainDeploymentMap
    # Read a Domain Deployment Map 
    # @param domain_id 
    # @param domain_deployment_map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainDeploymentMap, Fixnum, Hash)>] DomainDeploymentMap data, response status code and response headers
    def global_infra_read_domain_deployment_map_for_infra_with_http_info(domain_id, domain_deployment_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_read_domain_deployment_map_for_infra ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling InfraApi.global_infra_read_domain_deployment_map_for_infra"
      end
      # verify the required parameter 'domain_deployment_map_id' is set
      if @api_client.config.client_side_validation && domain_deployment_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_deployment_map_id' when calling InfraApi.global_infra_read_domain_deployment_map_for_infra"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/domain-deployment-maps/{domain-deployment-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'domain-deployment-map-id' + '}', domain_deployment_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DomainDeploymentMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_read_domain_deployment_map_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read domain
    # Read a domain. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @return [Domain]
    def global_infra_read_domain_for_infra(domain_id, opts = {})
      data, _status_code, _headers = global_infra_read_domain_for_infra_with_http_info(domain_id, opts)
      data
    end

    # Read domain
    # Read a domain. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Domain, Fixnum, Hash)>] Domain data, response status code and response headers
    def global_infra_read_domain_for_infra_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_read_domain_for_infra ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling InfraApi.global_infra_read_domain_for_infra"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Domain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_read_domain_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Edge Cluster under an Enforcement Point
    # Read an Edge Cluster under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeCluster]
    def global_infra_read_edge_cluster_for_enforcement_point(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = global_infra_read_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      data
    end

    # Read an Edge Cluster under an Enforcement Point
    # Read an Edge Cluster under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeCluster, Fixnum, Hash)>] PolicyEdgeCluster data, response status code and response headers
    def global_infra_read_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_read_edge_cluster_for_enforcement_point ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.global_infra_read_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.global_infra_read_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling InfraApi.global_infra_read_edge_cluster_for_enforcement_point"
      end
      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_read_edge_cluster_for_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Edge Node under an Enforcement Point, Edge Cluster
    # Read an Edge Node under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param edge_node_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeNode]
    def global_infra_read_edge_node_under_edge_cluster_for_enforcement_point(site_id, enforcementpoint_id, edge_cluster_id, edge_node_id, opts = {})
      data, _status_code, _headers = global_infra_read_edge_node_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, edge_node_id, opts)
      data
    end

    # Read an Edge Node under an Enforcement Point, Edge Cluster
    # Read an Edge Node under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param edge_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeNode, Fixnum, Hash)>] PolicyEdgeNode data, response status code and response headers
    def global_infra_read_edge_node_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, edge_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_read_edge_node_under_edge_cluster_for_enforcement_point ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.global_infra_read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.global_infra_read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling InfraApi.global_infra_read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_node_id' is set
      if @api_client.config.client_side_validation && edge_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_node_id' when calling InfraApi.global_infra_read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/edge-nodes/{edge-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'edge-node-id' + '}', edge_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_read_edge_node_under_edge_cluster_for_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Enforcement Point under Infra/Site
    # Read an Enforcement Point under Infra/Site 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [EnforcementPoint]
    def global_infra_read_enforcement_point_for_site(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = global_infra_read_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # Read an Enforcement Point under Infra/Site
    # Read an Enforcement Point under Infra/Site 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnforcementPoint, Fixnum, Hash)>] EnforcementPoint data, response status code and response headers
    def global_infra_read_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_read_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.global_infra_read_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.global_infra_read_enforcement_point_for_site"
      end
      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_read_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read infra
    # Read infra. Returns only the infra related properties. Inner object are not populated. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :base_path Base Path for retrieving hierarchical intent
    # @option opts [String] :filter Filter string as java regex
    # @option opts [String] :type_filter Filter string to retrieve hierarchy.
    # @return [Infra]
    def global_infra_read_infra(opts = {})
      data, _status_code, _headers = global_infra_read_infra_with_http_info(opts)
      data
    end

    # Read infra
    # Read infra. Returns only the infra related properties. Inner object are not populated. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :base_path Base Path for retrieving hierarchical intent
    # @option opts [String] :filter Filter string as java regex
    # @option opts [String] :type_filter Filter string to retrieve hierarchy.
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def global_infra_read_infra_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_read_infra ...'
      end
      # resource path
      local_var_path = '/global-infra'

      # query parameters
      query_params = {}
      query_params[:'base_path'] = opts[:'base_path'] if !opts[:'base_path'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'type_filter'] = opts[:'type_filter'] if !opts[:'type_filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_read_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get consolidated status of an intent object
    # Get Consolidated Status of an intent object (with or without enforcement specific status details). The request is evaluated as follows: - &lt;intent_path&gt;: the request is evaluated on all enforcement points for the given intent without enforcement point specific details. - &lt;intent_path, include_enforced_status&gt;: the request is evaluated on all enforcement points for the given intent with enforcement point specific details. 
    # @param intent_path Policy Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_enforced_status Include Enforced Status Flag (default to false)
    # @option opts [String] :site_path Policy Path of the site from where the realization status needs to be fetched
    # @return [ConsolidatedRealizedStatus]
    def global_infra_read_intent_status(intent_path, opts = {})
      data, _status_code, _headers = global_infra_read_intent_status_with_http_info(intent_path, opts)
      data
    end

    # Get consolidated status of an intent object
    # Get Consolidated Status of an intent object (with or without enforcement specific status details). The request is evaluated as follows: - &amp;lt;intent_path&amp;gt;: the request is evaluated on all enforcement points for the given intent without enforcement point specific details. - &amp;lt;intent_path, include_enforced_status&amp;gt;: the request is evaluated on all enforcement points for the given intent with enforcement point specific details. 
    # @param intent_path Policy Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_enforced_status Include Enforced Status Flag
    # @option opts [String] :site_path Policy Path of the site from where the realization status needs to be fetched
    # @return [Array<(ConsolidatedRealizedStatus, Fixnum, Hash)>] ConsolidatedRealizedStatus data, response status code and response headers
    def global_infra_read_intent_status_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_read_intent_status ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling InfraApi.global_infra_read_intent_status"
      end
      # resource path
      local_var_path = '/global-infra/realized-state/status'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'include_enforced_status'] = opts[:'include_enforced_status'] if !opts[:'include_enforced_status'].nil?
      query_params[:'site_path'] = opts[:'site_path'] if !opts[:'site_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConsolidatedRealizedStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_read_intent_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read lable
    # Read a label. 
    # @param label_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyLabel]
    def global_infra_read_policy_label_for_infra(label_id, opts = {})
      data, _status_code, _headers = global_infra_read_policy_label_for_infra_with_http_info(label_id, opts)
      data
    end

    # Read lable
    # Read a label. 
    # @param label_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyLabel, Fixnum, Hash)>] PolicyLabel data, response status code and response headers
    def global_infra_read_policy_label_for_infra_with_http_info(label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_read_policy_label_for_infra ...'
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling InfraApi.global_infra_read_policy_label_for_infra"
      end
      # resource path
      local_var_path = '/global-infra/labels/{label-id}'.sub('{' + 'label-id' + '}', label_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyLabel')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_read_policy_label_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read tenant Constraint.
    # Read tenant constraint.
    # @param constraint_id 
    # @param [Hash] opts the optional parameters
    # @return [Constraint]
    def global_infra_read_tenant_constraint(constraint_id, opts = {})
      data, _status_code, _headers = global_infra_read_tenant_constraint_with_http_info(constraint_id, opts)
      data
    end

    # Read tenant Constraint.
    # Read tenant constraint.
    # @param constraint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Constraint, Fixnum, Hash)>] Constraint data, response status code and response headers
    def global_infra_read_tenant_constraint_with_http_info(constraint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_read_tenant_constraint ...'
      end
      # verify the required parameter 'constraint_id' is set
      if @api_client.config.client_side_validation && constraint_id.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_id' when calling InfraApi.global_infra_read_tenant_constraint"
      end
      # resource path
      local_var_path = '/global-infra/constraints/{constraint-id}'.sub('{' + 'constraint-id' + '}', constraint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Constraint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_read_tenant_constraint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Refresh all realized entities associated with the intent-path
    # Refresh the status and statistics of all realized entities associated with given intent path synchronously. The vmw-async: True HTTP header cannot be used with this API. 
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_refresh_realized_state(intent_path, opts = {})
      global_infra_refresh_realized_state_with_http_info(intent_path, opts)
      nil
    end

    # Refresh all realized entities associated with the intent-path
    # Refresh the status and statistics of all realized entities associated with given intent path synchronously. The vmw-async: True HTTP header cannot be used with this API. 
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_refresh_realized_state_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.global_infra_refresh_realized_state ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling InfraApi.global_infra_refresh_realized_state"
      end
      # resource path
      local_var_path = '/global-infra/realized-state/realized-entity?action=refresh'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#global_infra_refresh_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Import a Certificate Associated with an Approved CSR
    # Imports a certificate authority (CA)-signed certificate for a CSR. This action links the certificate to the private key created by the CSR. The pem_encoded string in the request body is the signed certificate provided by your CA in response to the CSR that you provide to them. The import POST action automatically deletes the associated CSR. 
    # @param csr_id CSR this certificate is associated with
    # @param tls_trust_data 
    # @param [Hash] opts the optional parameters
    # @return [TlsCertificate]
    def import_signed_tls_certificate(csr_id, tls_trust_data, opts = {})
      data, _status_code, _headers = import_signed_tls_certificate_with_http_info(csr_id, tls_trust_data, opts)
      data
    end

    # Import a Certificate Associated with an Approved CSR
    # Imports a certificate authority (CA)-signed certificate for a CSR. This action links the certificate to the private key created by the CSR. The pem_encoded string in the request body is the signed certificate provided by your CA in response to the CSR that you provide to them. The import POST action automatically deletes the associated CSR. 
    # @param csr_id CSR this certificate is associated with
    # @param tls_trust_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def import_signed_tls_certificate_with_http_info(csr_id, tls_trust_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.import_signed_tls_certificate ...'
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling InfraApi.import_signed_tls_certificate"
      end
      # verify the required parameter 'tls_trust_data' is set
      if @api_client.config.client_side_validation && tls_trust_data.nil?
        fail ArgumentError, "Missing the required parameter 'tls_trust_data' when calling InfraApi.import_signed_tls_certificate"
      end
      # resource path
      local_var_path = '/infra/csrs/{csr-id}?action=import'.sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_trust_data)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#import_signed_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List All alarms in the system
    # Paginated list of all alarms. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyAlarmResourceListResult]
    def list_alarms(opts = {})
      data, _status_code, _headers = list_alarms_with_http_info(opts)
      data
    end

    # List All alarms in the system
    # Paginated list of all alarms. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyAlarmResourceListResult, Fixnum, Hash)>] PolicyAlarmResourceListResult data, response status code and response headers
    def list_alarms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_alarms ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_alarms, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_alarms, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/realized-state/alarms'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyAlarmResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_alarms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns information about all the CA bundles
    # Returns information about all the bundles of trusted CA certificates. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :node_id Node ID of certificate to return
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type of certificate to return
    # @return [CaBundleListResult]
    def list_ca_bundles(opts = {})
      data, _status_code, _headers = list_ca_bundles_with_http_info(opts)
      data
    end

    # Returns information about all the CA bundles
    # Returns information about all the bundles of trusted CA certificates. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :node_id Node ID of certificate to return
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type of certificate to return
    # @return [Array<(CaBundleListResult, Fixnum, Hash)>] CaBundleListResult data, response status code and response headers
    def list_ca_bundles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_ca_bundles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_ca_bundles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_ca_bundles, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['cluster_api_certificate', 'api_certificate'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of cluster_api_certificate, api_certificate'
      end
      # resource path
      local_var_path = '/infra/cabundles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'details'] = opts[:'details'] if !opts[:'details'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'node_id'] = opts[:'node_id'] if !opts[:'node_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaBundleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_ca_bundles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Deployment Zones for infra
    # Paginated list of all Deployment zones for infra.  <br> This is a deprecated API. DeploymentZone has been renamed to Site. Use GET /infra/sites. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DeploymentZoneListResult]
    def list_deployment_zones_for_infra(opts = {})
      data, _status_code, _headers = list_deployment_zones_for_infra_with_http_info(opts)
      data
    end

    # List Deployment Zones for infra
    # Paginated list of all Deployment zones for infra.  &lt;br&gt; This is a deprecated API. DeploymentZone has been renamed to Site. Use GET /infra/sites. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DeploymentZoneListResult, Fixnum, Hash)>] DeploymentZoneListResult data, response status code and response headers
    def list_deployment_zones_for_infra_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_deployment_zones_for_infra ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_deployment_zones_for_infra, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_deployment_zones_for_infra, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/deployment-zones'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentZoneListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_deployment_zones_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Domain Deployment maps for infra
    # Paginated list of all Domain Deployment Entries for infra. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DomainDeploymentMapListResult]
    def list_domain_deployment_maps_for_infra(domain_id, opts = {})
      data, _status_code, _headers = list_domain_deployment_maps_for_infra_with_http_info(domain_id, opts)
      data
    end

    # List Domain Deployment maps for infra
    # Paginated list of all Domain Deployment Entries for infra. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DomainDeploymentMapListResult, Fixnum, Hash)>] DomainDeploymentMapListResult data, response status code and response headers
    def list_domain_deployment_maps_for_infra_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_domain_deployment_maps_for_infra ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling InfraApi.list_domain_deployment_maps_for_infra"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_domain_deployment_maps_for_infra, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_domain_deployment_maps_for_infra, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/domain-deployment-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DomainDeploymentMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_domain_deployment_maps_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List domains for infra
    # Paginated list of all domains for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DomainListResult]
    def list_domain_for_infra(opts = {})
      data, _status_code, _headers = list_domain_for_infra_with_http_info(opts)
      data
    end

    # List domains for infra
    # Paginated list of all domains for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DomainListResult, Fixnum, Hash)>] DomainListResult data, response status code and response headers
    def list_domain_for_infra_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_domain_for_infra ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_domain_for_infra, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_domain_for_infra, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DomainListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_domain_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Edge Clusters under an Enforcement Point
    # Paginated list of all Edge Clusters under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyEdgeClusterListResult]
    def list_edge_clusters_for_enforcement_point(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_edge_clusters_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # List Edge Clusters under an Enforcement Point
    # Paginated list of all Edge Clusters under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyEdgeClusterListResult, Fixnum, Hash)>] PolicyEdgeClusterListResult data, response status code and response headers
    def list_edge_clusters_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_edge_clusters_for_enforcement_point ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.list_edge_clusters_for_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.list_edge_clusters_for_enforcement_point"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_edge_clusters_for_enforcement_point, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_edge_clusters_for_enforcement_point, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeClusterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_edge_clusters_for_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Edge Nodes under an Enforcement Point, Edge Cluster
    # Paginated list of all Edge Nodes under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyEdgeNodeListResult]
    def list_edge_nodes_under_edge_cluster_for_enforcement_point(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = list_edge_nodes_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      data
    end

    # List Edge Nodes under an Enforcement Point, Edge Cluster
    # Paginated list of all Edge Nodes under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyEdgeNodeListResult, Fixnum, Hash)>] PolicyEdgeNodeListResult data, response status code and response headers
    def list_edge_nodes_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_edge_nodes_under_edge_cluster_for_enforcement_point ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.list_edge_nodes_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.list_edge_nodes_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling InfraApi.list_edge_nodes_under_edge_cluster_for_enforcement_point"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_edge_nodes_under_edge_cluster_for_enforcement_point, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_edge_nodes_under_edge_cluster_for_enforcement_point, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/edge-nodes'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeNodeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_edge_nodes_under_edge_cluster_for_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List enforcementpoints for infra
    # Paginated list of all enforcementpoints for infra.  <br> This is a deprecated API. DeploymentZone has been renamed to Site. Use GET /infra/sites/site-id/enforcement-points. 
    # @param deployment_zone_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EnforcementPointListResult]
    def list_enforcement_point_for_infra(deployment_zone_id, opts = {})
      data, _status_code, _headers = list_enforcement_point_for_infra_with_http_info(deployment_zone_id, opts)
      data
    end

    # List enforcementpoints for infra
    # Paginated list of all enforcementpoints for infra.  &lt;br&gt; This is a deprecated API. DeploymentZone has been renamed to Site. Use GET /infra/sites/site-id/enforcement-points. 
    # @param deployment_zone_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EnforcementPointListResult, Fixnum, Hash)>] EnforcementPointListResult data, response status code and response headers
    def list_enforcement_point_for_infra_with_http_info(deployment_zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_enforcement_point_for_infra ...'
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling InfraApi.list_enforcement_point_for_infra"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_enforcement_point_for_infra, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_enforcement_point_for_infra, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/deployment-zones/{deployment-zone-id}/enforcement-points'.sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_enforcement_point_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List enforcementpoints under Site
    # Paginated list of all enforcementpoints under Site. 
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EnforcementPointListResult]
    def list_enforcement_point_for_site(site_id, opts = {})
      data, _status_code, _headers = list_enforcement_point_for_site_with_http_info(site_id, opts)
      data
    end

    # List enforcementpoints under Site
    # Paginated list of all enforcementpoints under Site. 
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EnforcementPointListResult, Fixnum, Hash)>] EnforcementPointListResult data, response status code and response headers
    def list_enforcement_point_for_site_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.list_enforcement_point_for_site"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_enforcement_point_for_site, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_enforcement_point_for_site, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Enforcement Points
    # Paginated list of all enforcement points. Returns the populated enforcement points. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RealizedEnforcementPointListResult]
    def list_enforcement_point_realized_states(opts = {})
      data, _status_code, _headers = list_enforcement_point_realized_states_with_http_info(opts)
      data
    end

    # List Enforcement Points
    # Paginated list of all enforcement points. Returns the populated enforcement points. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RealizedEnforcementPointListResult, Fixnum, Hash)>] RealizedEnforcementPointListResult data, response status code and response headers
    def list_enforcement_point_realized_states_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_enforcement_point_realized_states ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_enforcement_point_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_enforcement_point_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/realized-state/enforcement-points'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedEnforcementPointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_enforcement_point_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Firewall Sections
    # Paginated list of all Firewalls. Returns populated Firewalls. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RealizedFirewallSectionListResult]
    def list_firewall_section_realized_states(enforcement_point_name, opts = {})
      data, _status_code, _headers = list_firewall_section_realized_states_with_http_info(enforcement_point_name, opts)
      data
    end

    # List Firewall Sections
    # Paginated list of all Firewalls. Returns populated Firewalls. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RealizedFirewallSectionListResult, Fixnum, Hash)>] RealizedFirewallSectionListResult data, response status code and response headers
    def list_firewall_section_realized_states_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_firewall_section_realized_states ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling InfraApi.list_firewall_section_realized_states"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_firewall_section_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_firewall_section_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/firewalls/firewall-sections'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedFirewallSectionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_firewall_section_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Reaction list result
    # Get paginated list of all Reactions under Infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ReactionListResult]
    def list_infra_reactions(opts = {})
      data, _status_code, _headers = list_infra_reactions_with_http_info(opts)
      data
    end

    # Get Reaction list result
    # Get paginated list of all Reactions under Infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ReactionListResult, Fixnum, Hash)>] ReactionListResult data, response status code and response headers
    def list_infra_reactions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_infra_reactions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_infra_reactions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_infra_reactions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/reactions'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReactionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_infra_reactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IPSets
    # Paginated list of all Realized IPSets 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GenericPolicyRealizedResourceListResult]
    def list_ip_set_realized_states(enforcement_point_name, opts = {})
      data, _status_code, _headers = list_ip_set_realized_states_with_http_info(enforcement_point_name, opts)
      data
    end

    # List IPSets
    # Paginated list of all Realized IPSets 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GenericPolicyRealizedResourceListResult, Fixnum, Hash)>] GenericPolicyRealizedResourceListResult data, response status code and response headers
    def list_ip_set_realized_states_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_ip_set_realized_states ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling InfraApi.list_ip_set_realized_states"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_ip_set_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_ip_set_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/ip-sets/ip-sets-nsxt'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_ip_set_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List MACSets
    # Paginated list of all Realized MACSets 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GenericPolicyRealizedResourceListResult]
    def list_mac_set_realized_states(enforcement_point_name, opts = {})
      data, _status_code, _headers = list_mac_set_realized_states_with_http_info(enforcement_point_name, opts)
      data
    end

    # List MACSets
    # Paginated list of all Realized MACSets 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GenericPolicyRealizedResourceListResult, Fixnum, Hash)>] GenericPolicyRealizedResourceListResult data, response status code and response headers
    def list_mac_set_realized_states_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_mac_set_realized_states ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling InfraApi.list_mac_set_realized_states"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_mac_set_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_mac_set_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/mac-sets/mac-sets-nsxt'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_mac_set_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NS Groups
    # Paginated list of all NSGroups. Returns populated NSGroups. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GenericPolicyRealizedResourceListResult]
    def list_ns_group_realized_states(enforcement_point_name, opts = {})
      data, _status_code, _headers = list_ns_group_realized_states_with_http_info(enforcement_point_name, opts)
      data
    end

    # List NS Groups
    # Paginated list of all NSGroups. Returns populated NSGroups. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GenericPolicyRealizedResourceListResult, Fixnum, Hash)>] GenericPolicyRealizedResourceListResult data, response status code and response headers
    def list_ns_group_realized_states_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_ns_group_realized_states ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling InfraApi.list_ns_group_realized_states"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_ns_group_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_ns_group_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/groups/nsgroups'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_ns_group_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Realized NSServices
    # Paginated list of all Realized NSService. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GenericPolicyRealizedResourceListResult]
    def list_ns_service_realized_states(enforcement_point_name, opts = {})
      data, _status_code, _headers = list_ns_service_realized_states_with_http_info(enforcement_point_name, opts)
      data
    end

    # List Realized NSServices
    # Paginated list of all Realized NSService. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GenericPolicyRealizedResourceListResult, Fixnum, Hash)>] GenericPolicyRealizedResourceListResult data, response status code and response headers
    def list_ns_service_realized_states_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_ns_service_realized_states ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling InfraApi.list_ns_service_realized_states"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_ns_service_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_ns_service_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/services/nsservices'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_ns_service_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of all packet capture sessions
    # Get the information of all packet capture sessions. 
    # @param [Hash] opts the optional parameters
    # @return [PktCaptureSessionList]
    def list_pkt_capture_sessions(opts = {})
      data, _status_code, _headers = list_pkt_capture_sessions_with_http_info(opts)
      data
    end

    # Get the information of all packet capture sessions
    # Get the information of all packet capture sessions. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PktCaptureSessionList, Fixnum, Hash)>] PktCaptureSessionList data, response status code and response headers
    def list_pkt_capture_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_pkt_capture_sessions ...'
      end
      # resource path
      local_var_path = '/infra/pktcap/sessions'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PktCaptureSessionList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_pkt_capture_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List  Policy Edge Cluster High Availability Profiles
    # List edge cluster high availability profiles. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_system_owned Whether the list result contains system resources (default to true)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EdgeClusterHighAvailabilityProfileListResult]
    def list_policy_edge_cluster_high_availability_profile(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # List  Policy Edge Cluster High Availability Profiles
    # List edge cluster high availability profiles. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_system_owned Whether the list result contains system resources
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EdgeClusterHighAvailabilityProfileListResult, Fixnum, Hash)>] EdgeClusterHighAvailabilityProfileListResult data, response status code and response headers
    def list_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_policy_edge_cluster_high_availability_profile ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.list_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.list_policy_edge_cluster_high_availability_profile"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_policy_edge_cluster_high_availability_profile, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_policy_edge_cluster_high_availability_profile, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-cluster-high-availability-profiles'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_system_owned'] = opts[:'include_system_owned'] if !opts[:'include_system_owned'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdgeClusterHighAvailabilityProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_policy_edge_cluster_high_availability_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Edge Transport Node under an Enforcement Point
    # List Edge Transport Nodes under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :in_maintenance_mode Maintenance mode flag
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :management_ip Edge transport node management IP address
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :transport_zone_path Transport zone path
    # @return [PolicyEdgeTransportNodeListResult]
    def list_policy_edge_transport_node(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # List Edge Transport Node under an Enforcement Point
    # List Edge Transport Nodes under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :in_maintenance_mode Maintenance mode flag
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :management_ip Edge transport node management IP address
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :transport_zone_path Transport zone path
    # @return [Array<(PolicyEdgeTransportNodeListResult, Fixnum, Hash)>] PolicyEdgeTransportNodeListResult data, response status code and response headers
    def list_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_policy_edge_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.list_policy_edge_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.list_policy_edge_transport_node"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_policy_edge_transport_node, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_policy_edge_transport_node, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'in_maintenance_mode'] = opts[:'in_maintenance_mode'] if !opts[:'in_maintenance_mode'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'management_ip'] = opts[:'management_ip'] if !opts[:'management_ip'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'transport_zone_path'] = opts[:'transport_zone_path'] if !opts[:'transport_zone_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNodeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_policy_edge_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List the specified edge transport node's network interfaces.
    # Returns the number of interfaces on the edge transport node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :admin_status Admin status of the interface
    # @option opts [String] :source Data source type.
    # @return [NodeInterfacePropertiesListResult]
    def list_policy_edge_transport_node_interfaces(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      data, _status_code, _headers = list_policy_edge_transport_node_interfaces_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      data
    end

    # List the specified edge transport node&#39;s network interfaces.
    # Returns the number of interfaces on the edge transport node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :admin_status Admin status of the interface
    # @option opts [String] :source Data source type.
    # @return [Array<(NodeInterfacePropertiesListResult, Fixnum, Hash)>] NodeInterfacePropertiesListResult data, response status code and response headers
    def list_policy_edge_transport_node_interfaces_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_policy_edge_transport_node_interfaces ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.list_policy_edge_transport_node_interfaces"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.list_policy_edge_transport_node_interfaces"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling InfraApi.list_policy_edge_transport_node_interfaces"
      end
      if @api_client.config.client_side_validation && opts[:'admin_status'] && !['UP', 'DOWN'].include?(opts[:'admin_status'])
        fail ArgumentError, 'invalid value for "admin_status", must be one of UP, DOWN'
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/network/interfaces'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'admin_status'] = opts[:'admin_status'] if !opts[:'admin_status'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeInterfacePropertiesListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_policy_edge_transport_node_interfaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy EdgeTransport Node's State info under an Enforcement Point
    # Returns information about the current state of the edge transport node configuration and information about the associated edge tn switches. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mm_state maintenance mode state
    # @option opts [String] :status Realized state of transport nodes
    # @option opts [String] :vtep_ip Virtual tunnel endpoint ip address of transport node
    # @return [PolicyEdgeTransportNodeStateListResult]
    def list_policy_edge_transport_nodes_state(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_policy_edge_transport_nodes_state_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # Get a Policy EdgeTransport Node&#39;s State info under an Enforcement Point
    # Returns information about the current state of the edge transport node configuration and information about the associated edge tn switches. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mm_state maintenance mode state
    # @option opts [String] :status Realized state of transport nodes
    # @option opts [String] :vtep_ip Virtual tunnel endpoint ip address of transport node
    # @return [Array<(PolicyEdgeTransportNodeStateListResult, Fixnum, Hash)>] PolicyEdgeTransportNodeStateListResult data, response status code and response headers
    def list_policy_edge_transport_nodes_state_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_policy_edge_transport_nodes_state ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.list_policy_edge_transport_nodes_state"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.list_policy_edge_transport_nodes_state"
      end
      if @api_client.config.client_side_validation && opts[:'mm_state'] && !['ENTERING', 'ENABLED', 'EXITING', 'DISABLED'].include?(opts[:'mm_state'])
        fail ArgumentError, 'invalid value for "mm_state", must be one of ENTERING, ENABLED, EXITING, DISABLED'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['PENDING', 'IN_PROGRESS', 'SUCCESS', 'PARTIAL_SUCCESS', 'FAILED', 'ORPHANED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of PENDING, IN_PROGRESS, SUCCESS, PARTIAL_SUCCESS, FAILED, ORPHANED'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/state'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'mm_state'] = opts[:'mm_state'] if !opts[:'mm_state'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'vtep_ip'] = opts[:'vtep_ip'] if !opts[:'vtep_ip'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNodeStateListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_policy_edge_transport_nodes_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get high-level summary of all edge transport nodes. The service layer does not support source = realtime or cached.
    # Get high-level summary of all edge transport nodes. The service layer does not support source = realtime or cached.
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_dfw_heap_stats Include DFW Heap stats information (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [TransportNodeStatusListResult]
    def list_policy_edge_transport_nodes_status(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_policy_edge_transport_nodes_status_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # Get high-level summary of all edge transport nodes. The service layer does not support source &#x3D; realtime or cached.
    # Get high-level summary of all edge transport nodes. The service layer does not support source &#x3D; realtime or cached.
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_dfw_heap_stats Include DFW Heap stats information
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [Array<(TransportNodeStatusListResult, Fixnum, Hash)>] TransportNodeStatusListResult data, response status code and response headers
    def list_policy_edge_transport_nodes_status_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_policy_edge_transport_nodes_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.list_policy_edge_transport_nodes_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.list_policy_edge_transport_nodes_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_policy_edge_transport_nodes_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_policy_edge_transport_nodes_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN', 'DEGRADED', 'UNKNOWN'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN, DEGRADED, UNKNOWN'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_dfw_heap_stats'] = opts[:'include_dfw_heap_stats'] if !opts[:'include_dfw_heap_stats'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_policy_edge_transport_nodes_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy Failure Domains
    # Creates a new Policy failure domain. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyFailureDomainListResult]
    def list_policy_failure_domain(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_policy_failure_domain_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # List Policy Failure Domains
    # Creates a new Policy failure domain. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyFailureDomainListResult, Fixnum, Hash)>] PolicyFailureDomainListResult data, response status code and response headers
    def list_policy_failure_domain_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_policy_failure_domain ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.list_policy_failure_domain"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.list_policy_failure_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_policy_failure_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_policy_failure_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/failure-domains'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyFailureDomainListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_policy_failure_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List labels for infra
    # Paginated list of all labels for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyLabelListResult]
    def list_policy_label_for_infra(opts = {})
      data, _status_code, _headers = list_policy_label_for_infra_with_http_info(opts)
      data
    end

    # List labels for infra
    # Paginated list of all labels for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyLabelListResult, Fixnum, Hash)>] PolicyLabelListResult data, response status code and response headers
    def list_policy_label_for_infra_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_policy_label_for_infra ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_policy_label_for_infra, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_policy_label_for_infra, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/labels'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyLabelListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_policy_label_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of realized objects associated with intent object
    # Get list of realized entities associated with intent object, specified by path in query parameter 
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :site_path Policy Path of the site
    # @return [GenericPolicyRealizedResourceListResult]
    def list_realized_entities(intent_path, opts = {})
      data, _status_code, _headers = list_realized_entities_with_http_info(intent_path, opts)
      data
    end

    # Get list of realized objects associated with intent object
    # Get list of realized entities associated with intent object, specified by path in query parameter 
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :site_path Policy Path of the site
    # @return [Array<(GenericPolicyRealizedResourceListResult, Fixnum, Hash)>] GenericPolicyRealizedResourceListResult data, response status code and response headers
    def list_realized_entities_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_realized_entities ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling InfraApi.list_realized_entities"
      end
      # resource path
      local_var_path = '/infra/realized-state/realized-entities'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'site_path'] = opts[:'site_path'] if !opts[:'site_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_realized_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Security Groups
    # Paginated list of all Security Groups. Returns populated Security Groups. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RealizedSecurityGroupListResult]
    def list_security_group_realized_states(enforcement_point_name, opts = {})
      data, _status_code, _headers = list_security_group_realized_states_with_http_info(enforcement_point_name, opts)
      data
    end

    # List Security Groups
    # Paginated list of all Security Groups. Returns populated Security Groups. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RealizedSecurityGroupListResult, Fixnum, Hash)>] RealizedSecurityGroupListResult data, response status code and response headers
    def list_security_group_realized_states_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_security_group_realized_states ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling InfraApi.list_security_group_realized_states"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_security_group_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_security_group_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/groups/securitygroups'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedSecurityGroupListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_security_group_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List tenant Constraints.
    # List tenant constraints.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ConstraintListResult]
    def list_tenant_constraints(opts = {})
      data, _status_code, _headers = list_tenant_constraints_with_http_info(opts)
      data
    end

    # List tenant Constraints.
    # List tenant constraints.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ConstraintListResult, Fixnum, Hash)>] ConstraintListResult data, response status code and response headers
    def list_tenant_constraints_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_tenant_constraints ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_tenant_constraints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_tenant_constraints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/constraints'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConstraintListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_tenant_constraints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return All the User-Facing Components' Certificates
    # Returns all certificate information viewable by the user, including each certificate's id; pem_encoded data; and history of the certificate (who created or modified it and when). For additional information, include the ?details=true modifier at the end of the request URI. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :node_id Node ID of certificate to return
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type of certificate to return
    # @return [TlsCertificateList]
    def list_tls_certificates(opts = {})
      data, _status_code, _headers = list_tls_certificates_with_http_info(opts)
      data
    end

    # Return All the User-Facing Components&#39; Certificates
    # Returns all certificate information viewable by the user, including each certificate&#39;s id; pem_encoded data; and history of the certificate (who created or modified it and when). For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :node_id Node ID of certificate to return
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type of certificate to return
    # @return [Array<(TlsCertificateList, Fixnum, Hash)>] TlsCertificateList data, response status code and response headers
    def list_tls_certificates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_tls_certificates ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_tls_certificates, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_tls_certificates, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['cluster_api_certificate', 'api_certificate'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of cluster_api_certificate, api_certificate'
      end
      # resource path
      local_var_path = '/infra/certificates'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'details'] = opts[:'details'] if !opts[:'details'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'node_id'] = opts[:'node_id'] if !opts[:'node_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificateList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_tls_certificates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return All Added CRLs
    # Returns information about all CRLs. For additional information, include the ?details=true modifier at the end of the request URI. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :node_id Node ID of certificate to return
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type of certificate to return
    # @return [TlsCrlListResult]
    def list_tls_crls(opts = {})
      data, _status_code, _headers = list_tls_crls_with_http_info(opts)
      data
    end

    # Return All Added CRLs
    # Returns information about all CRLs. For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :node_id Node ID of certificate to return
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type of certificate to return
    # @return [Array<(TlsCrlListResult, Fixnum, Hash)>] TlsCrlListResult data, response status code and response headers
    def list_tls_crls_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_tls_crls ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_tls_crls, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_tls_crls, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['cluster_api_certificate', 'api_certificate'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of cluster_api_certificate, api_certificate'
      end
      # resource path
      local_var_path = '/infra/crls'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'details'] = opts[:'details'] if !opts[:'details'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'node_id'] = opts[:'node_id'] if !opts[:'node_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCrlListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_tls_crls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return All the Generated CSRs
    # Returns information about all of the CSRs that have been created.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TlsCsrListResult]
    def list_tls_csrs(opts = {})
      data, _status_code, _headers = list_tls_csrs_with_http_info(opts)
      data
    end

    # Return All the Generated CSRs
    # Returns information about all of the CSRs that have been created.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TlsCsrListResult, Fixnum, Hash)>] TlsCsrListResult data, response status code and response headers
    def list_tls_csrs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_tls_csrs ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_tls_csrs, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_tls_csrs, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/csrs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCsrListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_tls_csrs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Listing of VIFs on the NSX Manager
    # This API lists VIFs from the specified NSX Manager. 
    # @param enforcement_point_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :lport_attachment_id LPort attachment ID of the VIF.
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VirtualNetworkInterfaceListResult]
    def list_vifs_on_enforcement_point(enforcement_point_name, opts = {})
      data, _status_code, _headers = list_vifs_on_enforcement_point_with_http_info(enforcement_point_name, opts)
      data
    end

    # Listing of VIFs on the NSX Manager
    # This API lists VIFs from the specified NSX Manager. 
    # @param enforcement_point_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :lport_attachment_id LPort attachment ID of the VIF.
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VirtualNetworkInterfaceListResult, Fixnum, Hash)>] VirtualNetworkInterfaceListResult data, response status code and response headers
    def list_vifs_on_enforcement_point_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.list_vifs_on_enforcement_point ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling InfraApi.list_vifs_on_enforcement_point"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_vifs_on_enforcement_point, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.list_vifs_on_enforcement_point, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/vifs'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'lport_attachment_id'] = opts[:'lport_attachment_id'] if !opts[:'lport_attachment_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualNetworkInterfaceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#list_vifs_on_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a New Certificate
    # Adds a new private-public certificate and, optionally, a private key that can be applied to one of the user-facing components (appliance management or edge). The certificate and the key should be stored in PEM format. If no private key is provided, the certificate is used as a client certificate in the trust store. A private key can be uploaded for a CA certificate only if the \"purpose\" parameter is set to \"signing-ca\". A certificate chain will not be expanded into separate certificate instances for reference, but would be pushed to the enforcement point as a single certificate. This PUT method does not modify an existing certificate. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param certificate_id 
    # @param tls_trust_data 
    # @param [Hash] opts the optional parameters
    # @return [TlsCertificate]
    def orgs_org_id_projects_project_id_infra_add_tls_certificate(org_id, project_id, certificate_id, tls_trust_data, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_add_tls_certificate_with_http_info(org_id, project_id, certificate_id, tls_trust_data, opts)
      data
    end

    # Add a New Certificate
    # Adds a new private-public certificate and, optionally, a private key that can be applied to one of the user-facing components (appliance management or edge). The certificate and the key should be stored in PEM format. If no private key is provided, the certificate is used as a client certificate in the trust store. A private key can be uploaded for a CA certificate only if the \&quot;purpose\&quot; parameter is set to \&quot;signing-ca\&quot;. A certificate chain will not be expanded into separate certificate instances for reference, but would be pushed to the enforcement point as a single certificate. This PUT method does not modify an existing certificate. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param certificate_id 
    # @param tls_trust_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_add_tls_certificate_with_http_info(org_id, project_id, certificate_id, tls_trust_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_add_tls_certificate ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_add_tls_certificate"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_add_tls_certificate"
      end
      # verify the required parameter 'certificate_id' is set
      if @api_client.config.client_side_validation && certificate_id.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_add_tls_certificate"
      end
      # verify the required parameter 'tls_trust_data' is set
      if @api_client.config.client_side_validation && tls_trust_data.nil?
        fail ArgumentError, "Missing the required parameter 'tls_trust_data' when calling InfraApi.orgs_org_id_projects_project_id_infra_add_tls_certificate"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/certificates/{certificate-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'certificate-id' + '}', certificate_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_trust_data)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_add_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or patch a Certificate Revocation List
    # Create or patch a Certificate Revocation List for the given id. The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. The CRL must contain PEM data for a single CRL. A CRL can be in the PEM X.509 format (crl_type=X509) or JSON OneCRL (crl_type=OneCRL). If crl_type is not specified, it is auto-detected based on the presence of fields pem_encoded or one_crl. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param crl_id 
    # @param tls_crl 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_create_or_patch_tls_crl(org_id, project_id, crl_id, tls_crl, opts = {})
      orgs_org_id_projects_project_id_infra_create_or_patch_tls_crl_with_http_info(org_id, project_id, crl_id, tls_crl, opts)
      nil
    end

    # Create or patch a Certificate Revocation List
    # Create or patch a Certificate Revocation List for the given id. The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. The CRL must contain PEM data for a single CRL. A CRL can be in the PEM X.509 format (crl_type&#x3D;X509) or JSON OneCRL (crl_type&#x3D;OneCRL). If crl_type is not specified, it is auto-detected based on the presence of fields pem_encoded or one_crl. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param crl_id 
    # @param tls_crl 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_patch_tls_crl_with_http_info(org_id, project_id, crl_id, tls_crl, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_create_or_patch_tls_crl ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_create_or_patch_tls_crl"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_create_or_patch_tls_crl"
      end
      # verify the required parameter 'crl_id' is set
      if @api_client.config.client_side_validation && crl_id.nil?
        fail ArgumentError, "Missing the required parameter 'crl_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_create_or_patch_tls_crl"
      end
      # verify the required parameter 'tls_crl' is set
      if @api_client.config.client_side_validation && tls_crl.nil?
        fail ArgumentError, "Missing the required parameter 'tls_crl' when calling InfraApi.orgs_org_id_projects_project_id_infra_create_or_patch_tls_crl"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/crls/{crl-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'crl-id' + '}', crl_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_crl)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_create_or_patch_tls_crl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or replace label
    # Create label if not exists, otherwise replaces the existing label. If label already exists then type attribute cannot be changed. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param label_id 
    # @param policy_label 
    # @param [Hash] opts the optional parameters
    # @return [PolicyLabel]
    def orgs_org_id_projects_project_id_infra_create_or_replace_policy_label_for_infra(org_id, project_id, label_id, policy_label, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_policy_label_for_infra_with_http_info(org_id, project_id, label_id, policy_label, opts)
      data
    end

    # Create or replace label
    # Create label if not exists, otherwise replaces the existing label. If label already exists then type attribute cannot be changed. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param label_id 
    # @param policy_label 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyLabel, Fixnum, Hash)>] PolicyLabel data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_policy_label_for_infra_with_http_info(org_id, project_id, label_id, policy_label, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_create_or_replace_policy_label_for_infra ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_create_or_replace_policy_label_for_infra"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_create_or_replace_policy_label_for_infra"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_create_or_replace_policy_label_for_infra"
      end
      # verify the required parameter 'policy_label' is set
      if @api_client.config.client_side_validation && policy_label.nil?
        fail ArgumentError, "Missing the required parameter 'policy_label' when calling InfraApi.orgs_org_id_projects_project_id_infra_create_or_replace_policy_label_for_infra"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/labels/{label-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'label-id' + '}', label_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_label)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyLabel')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_create_or_replace_policy_label_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update tenant Constraint
    # Create tenant constraint if it does not exist, otherwise replace the existing constraint. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param constraint_id 
    # @param constraint 
    # @param [Hash] opts the optional parameters
    # @return [Constraint]
    def orgs_org_id_projects_project_id_infra_create_or_replace_tenant_constraint(org_id, project_id, constraint_id, constraint, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_tenant_constraint_with_http_info(org_id, project_id, constraint_id, constraint, opts)
      data
    end

    # Create or update tenant Constraint
    # Create tenant constraint if it does not exist, otherwise replace the existing constraint. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param constraint_id 
    # @param constraint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Constraint, Fixnum, Hash)>] Constraint data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_tenant_constraint_with_http_info(org_id, project_id, constraint_id, constraint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_create_or_replace_tenant_constraint ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_create_or_replace_tenant_constraint"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_create_or_replace_tenant_constraint"
      end
      # verify the required parameter 'constraint_id' is set
      if @api_client.config.client_side_validation && constraint_id.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_create_or_replace_tenant_constraint"
      end
      # verify the required parameter 'constraint' is set
      if @api_client.config.client_side_validation && constraint.nil?
        fail ArgumentError, "Missing the required parameter 'constraint' when calling InfraApi.orgs_org_id_projects_project_id_infra_create_or_replace_tenant_constraint"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/constraints/{constraint-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'constraint-id' + '}', constraint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(constraint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Constraint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_create_or_replace_tenant_constraint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or fully replace a Certificate Revocation List
    # Create or replace a Certificate Revocation List for the given id. The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. The CRL must contain PEM data for a single CRL. Revision is required. A CRL can be in the PEM X.509 format (crl_type=X509) or JSON OneCRL (crl_type=OneCRL). If crl_type is not specified, it is auto-detected based on the presence of fields pem_encoded or one_crl. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param crl_id 
    # @param tls_crl 
    # @param [Hash] opts the optional parameters
    # @return [TlsCrl]
    def orgs_org_id_projects_project_id_infra_create_or_update_tls_crl(org_id, project_id, crl_id, tls_crl, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_tls_crl_with_http_info(org_id, project_id, crl_id, tls_crl, opts)
      data
    end

    # Create or fully replace a Certificate Revocation List
    # Create or replace a Certificate Revocation List for the given id. The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. The CRL must contain PEM data for a single CRL. Revision is required. A CRL can be in the PEM X.509 format (crl_type&#x3D;X509) or JSON OneCRL (crl_type&#x3D;OneCRL). If crl_type is not specified, it is auto-detected based on the presence of fields pem_encoded or one_crl. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param crl_id 
    # @param tls_crl 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCrl, Fixnum, Hash)>] TlsCrl data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_tls_crl_with_http_info(org_id, project_id, crl_id, tls_crl, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_create_or_update_tls_crl ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_create_or_update_tls_crl"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_create_or_update_tls_crl"
      end
      # verify the required parameter 'crl_id' is set
      if @api_client.config.client_side_validation && crl_id.nil?
        fail ArgumentError, "Missing the required parameter 'crl_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_create_or_update_tls_crl"
      end
      # verify the required parameter 'tls_crl' is set
      if @api_client.config.client_side_validation && tls_crl.nil?
        fail ArgumentError, "Missing the required parameter 'tls_crl' when calling InfraApi.orgs_org_id_projects_project_id_infra_create_or_update_tls_crl"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/crls/{crl-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'crl-id' + '}', crl_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_crl)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCrl')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_create_or_update_tls_crl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Certificate Revocation List
    # Adds a new certificate revocation list (CRLs). The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. A CRL can be in the PEM X.509 format (crl_type=X509) or JSON OneCRL (crl_type=OneCRL). If crl_type is not specified, it is auto-detected based on the presence of fields pem_encoded or one_crl. An X.509 CRL can contain a single CRL or multiple CRLs depending on the PEM data. - Single CRL: a single CRL is created with the given id. - Composite CRL: multiple CRLs are generated. Each of the CRL is created with an id generated based on the given id. First CRL is created with crl-id, second with crl-id-1, third with crl-id-2, etc. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param crl_id 
    # @param tls_crl 
    # @param [Hash] opts the optional parameters
    # @return [TlsCrlListResult]
    def orgs_org_id_projects_project_id_infra_create_tls_crl(org_id, project_id, crl_id, tls_crl, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_tls_crl_with_http_info(org_id, project_id, crl_id, tls_crl, opts)
      data
    end

    # Create a new Certificate Revocation List
    # Adds a new certificate revocation list (CRLs). The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. A CRL can be in the PEM X.509 format (crl_type&#x3D;X509) or JSON OneCRL (crl_type&#x3D;OneCRL). If crl_type is not specified, it is auto-detected based on the presence of fields pem_encoded or one_crl. An X.509 CRL can contain a single CRL or multiple CRLs depending on the PEM data. - Single CRL: a single CRL is created with the given id. - Composite CRL: multiple CRLs are generated. Each of the CRL is created with an id generated based on the given id. First CRL is created with crl-id, second with crl-id-1, third with crl-id-2, etc. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param crl_id 
    # @param tls_crl 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCrlListResult, Fixnum, Hash)>] TlsCrlListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_tls_crl_with_http_info(org_id, project_id, crl_id, tls_crl, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_create_tls_crl ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_create_tls_crl"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_create_tls_crl"
      end
      # verify the required parameter 'crl_id' is set
      if @api_client.config.client_side_validation && crl_id.nil?
        fail ArgumentError, "Missing the required parameter 'crl_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_create_tls_crl"
      end
      # verify the required parameter 'tls_crl' is set
      if @api_client.config.client_side_validation && tls_crl.nil?
        fail ArgumentError, "Missing the required parameter 'tls_crl' when calling InfraApi.orgs_org_id_projects_project_id_infra_create_tls_crl"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/crls/{crl-id}?action=import'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'crl-id' + '}', crl_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_crl)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCrlListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_create_tls_crl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete PolicyLabel object
    # Delete PolicyLabel object
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param label_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_policy_label_for_infra(org_id, project_id, label_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_policy_label_for_infra_with_http_info(org_id, project_id, label_id, opts)
      nil
    end

    # Delete PolicyLabel object
    # Delete PolicyLabel object
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param label_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_policy_label_for_infra_with_http_info(org_id, project_id, label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_delete_policy_label_for_infra ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_delete_policy_label_for_infra"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_delete_policy_label_for_infra"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_delete_policy_label_for_infra"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/labels/{label-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'label-id' + '}', label_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_delete_policy_label_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete tenant Constraint.
    # Delete tenant constraint.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param constraint_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tenant_constraint(org_id, project_id, constraint_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tenant_constraint_with_http_info(org_id, project_id, constraint_id, opts)
      nil
    end

    # Delete tenant Constraint.
    # Delete tenant constraint.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param constraint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tenant_constraint_with_http_info(org_id, project_id, constraint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_delete_tenant_constraint ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_delete_tenant_constraint"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_delete_tenant_constraint"
      end
      # verify the required parameter 'constraint_id' is set
      if @api_client.config.client_side_validation && constraint_id.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_delete_tenant_constraint"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/constraints/{constraint-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'constraint-id' + '}', constraint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_delete_tenant_constraint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Certificate for the Given Certificate ID
    # Removes the specified certificate. The private key associated with the certificate is also deleted. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param certificate_id ID of certificate to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tls_certificate(org_id, project_id, certificate_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tls_certificate_with_http_info(org_id, project_id, certificate_id, opts)
      nil
    end

    # Delete Certificate for the Given Certificate ID
    # Removes the specified certificate. The private key associated with the certificate is also deleted. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param certificate_id ID of certificate to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tls_certificate_with_http_info(org_id, project_id, certificate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_delete_tls_certificate ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_delete_tls_certificate"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_delete_tls_certificate"
      end
      # verify the required parameter 'certificate_id' is set
      if @api_client.config.client_side_validation && certificate_id.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_delete_tls_certificate"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/certificates/{certificate-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'certificate-id' + '}', certificate_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_delete_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a CRL
    # Deletes an existing CRL.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param crl_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tls_crl(org_id, project_id, crl_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tls_crl_with_http_info(org_id, project_id, crl_id, opts)
      nil
    end

    # Delete a CRL
    # Deletes an existing CRL.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param crl_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tls_crl_with_http_info(org_id, project_id, crl_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_delete_tls_crl ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_delete_tls_crl"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_delete_tls_crl"
      end
      # verify the required parameter 'crl_id' is set
      if @api_client.config.client_side_validation && crl_id.nil?
        fail ArgumentError, "Missing the required parameter 'crl_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_delete_tls_crl"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/crls/{crl-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'crl-id' + '}', crl_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_delete_tls_crl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a CSR
    # Removes a specified CSR. If a CSR is not used for verification, you can delete it. Note that the CSR import and upload POST actions automatically delete the associated CSR. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id ID of CSR to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tls_csr(org_id, project_id, csr_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tls_csr_with_http_info(org_id, project_id, csr_id, opts)
      nil
    end

    # Delete a CSR
    # Removes a specified CSR. If a CSR is not used for verification, you can delete it. Note that the CSR import and upload POST actions automatically delete the associated CSR. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id ID of CSR to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tls_csr_with_http_info(org_id, project_id, csr_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_delete_tls_csr ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_delete_tls_csr"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_delete_tls_csr"
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_delete_tls_csr"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/csrs/{csr-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_delete_tls_csr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate a new self-signed certificate
    # Creates a new self-signed certificate. A private key is also created at the same time. This is convenience call that will generate a CSR and then self-sign it. The maximum validity limit for non-CA certificates is 825 days, except that values of 3,650 and 36,500 days are allowed. No limit is set for CA certificates. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tls_csr_with_days_valid 
    # @param [Hash] opts the optional parameters
    # @return [TlsCertificate]
    def orgs_org_id_projects_project_id_infra_generate_self_signed_tls_certificate(org_id, project_id, tls_csr_with_days_valid, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_generate_self_signed_tls_certificate_with_http_info(org_id, project_id, tls_csr_with_days_valid, opts)
      data
    end

    # Generate a new self-signed certificate
    # Creates a new self-signed certificate. A private key is also created at the same time. This is convenience call that will generate a CSR and then self-sign it. The maximum validity limit for non-CA certificates is 825 days, except that values of 3,650 and 36,500 days are allowed. No limit is set for CA certificates. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tls_csr_with_days_valid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_generate_self_signed_tls_certificate_with_http_info(org_id, project_id, tls_csr_with_days_valid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_generate_self_signed_tls_certificate ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_generate_self_signed_tls_certificate"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_generate_self_signed_tls_certificate"
      end
      # verify the required parameter 'tls_csr_with_days_valid' is set
      if @api_client.config.client_side_validation && tls_csr_with_days_valid.nil?
        fail ArgumentError, "Missing the required parameter 'tls_csr_with_days_valid' when calling InfraApi.orgs_org_id_projects_project_id_infra_generate_self_signed_tls_certificate"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/csrs?action=self_sign'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_csr_with_days_valid)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_generate_self_signed_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate a New Certificate Signing Request
    # Creates a new certificate signing request (CSR). A CSR is encrypted text that contains information about your organization (organization name, country, and so on) and your Web server's public key, which is a public certificate the is generated on the server that can be used to forward this request to a certificate authority (CA). A private key is also usually created at the same time as the CSR. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id ID of CSR to create
    # @param tls_csr 
    # @param [Hash] opts the optional parameters
    # @return [TlsCsr]
    def orgs_org_id_projects_project_id_infra_generate_tls_csr(org_id, project_id, csr_id, tls_csr, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_generate_tls_csr_with_http_info(org_id, project_id, csr_id, tls_csr, opts)
      data
    end

    # Generate a New Certificate Signing Request
    # Creates a new certificate signing request (CSR). A CSR is encrypted text that contains information about your organization (organization name, country, and so on) and your Web server&#39;s public key, which is a public certificate the is generated on the server that can be used to forward this request to a certificate authority (CA). A private key is also usually created at the same time as the CSR. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id ID of CSR to create
    # @param tls_csr 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCsr, Fixnum, Hash)>] TlsCsr data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_generate_tls_csr_with_http_info(org_id, project_id, csr_id, tls_csr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_generate_tls_csr ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_generate_tls_csr"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_generate_tls_csr"
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_generate_tls_csr"
      end
      # verify the required parameter 'tls_csr' is set
      if @api_client.config.client_side_validation && tls_csr.nil?
        fail ArgumentError, "Missing the required parameter 'tls_csr' when calling InfraApi.orgs_org_id_projects_project_id_infra_generate_tls_csr"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/csrs/{csr-id}?action=create'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_csr)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCsr')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_generate_tls_csr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Show Certificate Data for the Given Certificate ID
    # Returns information for the specified certificate ID, including the certificate's id; pem_encoded data; and history of the certificate (who created or modified it and when). For additional information, include the ?details=true modifier at the end of the request URI. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param certificate_id ID of certificate to read
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details (default to false)
    # @return [TlsCertificate]
    def orgs_org_id_projects_project_id_infra_get_tls_certificate(org_id, project_id, certificate_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tls_certificate_with_http_info(org_id, project_id, certificate_id, opts)
      data
    end

    # Show Certificate Data for the Given Certificate ID
    # Returns information for the specified certificate ID, including the certificate&#39;s id; pem_encoded data; and history of the certificate (who created or modified it and when). For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param certificate_id ID of certificate to read
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tls_certificate_with_http_info(org_id, project_id, certificate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_get_tls_certificate ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_get_tls_certificate"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_get_tls_certificate"
      end
      # verify the required parameter 'certificate_id' is set
      if @api_client.config.client_side_validation && certificate_id.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_get_tls_certificate"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/certificates/{certificate-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'certificate-id' + '}', certificate_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'details'] = opts[:'details'] if !opts[:'details'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_get_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Show CRL Data for the Given CRL id.
    # Returns information about the specified CRL. For additional information, include the ?details=true modifier at the end of the request URI. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param crl_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details (default to false)
    # @return [TlsCrl]
    def orgs_org_id_projects_project_id_infra_get_tls_crl(org_id, project_id, crl_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tls_crl_with_http_info(org_id, project_id, crl_id, opts)
      data
    end

    # Show CRL Data for the Given CRL id.
    # Returns information about the specified CRL. For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param crl_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details
    # @return [Array<(TlsCrl, Fixnum, Hash)>] TlsCrl data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tls_crl_with_http_info(org_id, project_id, crl_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_get_tls_crl ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_get_tls_crl"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_get_tls_crl"
      end
      # verify the required parameter 'crl_id' is set
      if @api_client.config.client_side_validation && crl_id.nil?
        fail ArgumentError, "Missing the required parameter 'crl_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_get_tls_crl"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/crls/{crl-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'crl-id' + '}', crl_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'details'] = opts[:'details'] if !opts[:'details'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCrl')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_get_tls_crl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Show CSR Data for the Given CSR ID
    # Returns information about the specified CSR.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id ID of CSR to read
    # @param [Hash] opts the optional parameters
    # @return [TlsCsr]
    def orgs_org_id_projects_project_id_infra_get_tls_csr(org_id, project_id, csr_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tls_csr_with_http_info(org_id, project_id, csr_id, opts)
      data
    end

    # Show CSR Data for the Given CSR ID
    # Returns information about the specified CSR.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id ID of CSR to read
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCsr, Fixnum, Hash)>] TlsCsr data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tls_csr_with_http_info(org_id, project_id, csr_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_get_tls_csr ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_get_tls_csr"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_get_tls_csr"
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_get_tls_csr"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/csrs/{csr-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCsr')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_get_tls_csr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get CSR PEM File for the Given CSR ID
    # Downloads the CSR PEM file for a specified CSR. Clients must include an Accept: text/plain request header.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id ID of CSR to read
    # @param [Hash] opts the optional parameters
    # @return [String]
    def orgs_org_id_projects_project_id_infra_get_tls_csr_pem(org_id, project_id, csr_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tls_csr_pem_with_http_info(org_id, project_id, csr_id, opts)
      data
    end

    # Get CSR PEM File for the Given CSR ID
    # Downloads the CSR PEM file for a specified CSR. Clients must include an Accept: text/plain request header.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id ID of CSR to read
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tls_csr_pem_with_http_info(org_id, project_id, csr_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_get_tls_csr_pem ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_get_tls_csr_pem"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_get_tls_csr_pem"
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_get_tls_csr_pem"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/csrs/{csr-id}/pem-file'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_get_tls_csr_pem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Import a Certificate Associated with an Approved CSR
    # Imports a certificate authority (CA)-signed certificate for a CSR. This action links the certificate to the private key created by the CSR. The pem_encoded string in the request body is the signed certificate provided by your CA in response to the CSR that you provide to them. The import POST action automatically deletes the associated CSR. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id CSR this certificate is associated with
    # @param tls_trust_data 
    # @param [Hash] opts the optional parameters
    # @return [TlsCertificate]
    def orgs_org_id_projects_project_id_infra_import_signed_tls_certificate(org_id, project_id, csr_id, tls_trust_data, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_import_signed_tls_certificate_with_http_info(org_id, project_id, csr_id, tls_trust_data, opts)
      data
    end

    # Import a Certificate Associated with an Approved CSR
    # Imports a certificate authority (CA)-signed certificate for a CSR. This action links the certificate to the private key created by the CSR. The pem_encoded string in the request body is the signed certificate provided by your CA in response to the CSR that you provide to them. The import POST action automatically deletes the associated CSR. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id CSR this certificate is associated with
    # @param tls_trust_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_import_signed_tls_certificate_with_http_info(org_id, project_id, csr_id, tls_trust_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_import_signed_tls_certificate ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_import_signed_tls_certificate"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_import_signed_tls_certificate"
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_import_signed_tls_certificate"
      end
      # verify the required parameter 'tls_trust_data' is set
      if @api_client.config.client_side_validation && tls_trust_data.nil?
        fail ArgumentError, "Missing the required parameter 'tls_trust_data' when calling InfraApi.orgs_org_id_projects_project_id_infra_import_signed_tls_certificate"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/csrs/{csr-id}?action=import'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_trust_data)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_import_signed_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List domains for infra
    # Paginated list of all domains for infra. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DomainListResult]
    def orgs_org_id_projects_project_id_infra_list_domain_for_infra(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_domain_for_infra_with_http_info(org_id, project_id, opts)
      data
    end

    # List domains for infra
    # Paginated list of all domains for infra. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DomainListResult, Fixnum, Hash)>] DomainListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_domain_for_infra_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_list_domain_for_infra ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_list_domain_for_infra"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_list_domain_for_infra"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.orgs_org_id_projects_project_id_infra_list_domain_for_infra, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.orgs_org_id_projects_project_id_infra_list_domain_for_infra, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DomainListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_list_domain_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List labels for infra
    # Paginated list of all labels for infra. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyLabelListResult]
    def orgs_org_id_projects_project_id_infra_list_policy_label_for_infra(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_policy_label_for_infra_with_http_info(org_id, project_id, opts)
      data
    end

    # List labels for infra
    # Paginated list of all labels for infra. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyLabelListResult, Fixnum, Hash)>] PolicyLabelListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_policy_label_for_infra_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_list_policy_label_for_infra ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_list_policy_label_for_infra"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_list_policy_label_for_infra"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.orgs_org_id_projects_project_id_infra_list_policy_label_for_infra, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.orgs_org_id_projects_project_id_infra_list_policy_label_for_infra, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/labels'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyLabelListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_list_policy_label_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of realized objects associated with intent object
    # Get list of realized entities associated with intent object, specified by path in query parameter 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :site_path Policy Path of the site
    # @return [GenericPolicyRealizedResourceListResult]
    def orgs_org_id_projects_project_id_infra_list_realized_entities(org_id, project_id, intent_path, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_realized_entities_with_http_info(org_id, project_id, intent_path, opts)
      data
    end

    # Get list of realized objects associated with intent object
    # Get list of realized entities associated with intent object, specified by path in query parameter 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :site_path Policy Path of the site
    # @return [Array<(GenericPolicyRealizedResourceListResult, Fixnum, Hash)>] GenericPolicyRealizedResourceListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_realized_entities_with_http_info(org_id, project_id, intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_list_realized_entities ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_list_realized_entities"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_list_realized_entities"
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling InfraApi.orgs_org_id_projects_project_id_infra_list_realized_entities"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/realized-state/realized-entities'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'site_path'] = opts[:'site_path'] if !opts[:'site_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResourceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_list_realized_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List tenant Constraints.
    # List tenant constraints.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ConstraintListResult]
    def orgs_org_id_projects_project_id_infra_list_tenant_constraints(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_tenant_constraints_with_http_info(org_id, project_id, opts)
      data
    end

    # List tenant Constraints.
    # List tenant constraints.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ConstraintListResult, Fixnum, Hash)>] ConstraintListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_tenant_constraints_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_list_tenant_constraints ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_list_tenant_constraints"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_list_tenant_constraints"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.orgs_org_id_projects_project_id_infra_list_tenant_constraints, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.orgs_org_id_projects_project_id_infra_list_tenant_constraints, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/constraints'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConstraintListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_list_tenant_constraints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return All the User-Facing Components' Certificates
    # Returns all certificate information viewable by the user, including each certificate's id; pem_encoded data; and history of the certificate (who created or modified it and when). For additional information, include the ?details=true modifier at the end of the request URI. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :node_id Node ID of certificate to return
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type of certificate to return
    # @return [TlsCertificateList]
    def orgs_org_id_projects_project_id_infra_list_tls_certificates(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_tls_certificates_with_http_info(org_id, project_id, opts)
      data
    end

    # Return All the User-Facing Components&#39; Certificates
    # Returns all certificate information viewable by the user, including each certificate&#39;s id; pem_encoded data; and history of the certificate (who created or modified it and when). For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :node_id Node ID of certificate to return
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type of certificate to return
    # @return [Array<(TlsCertificateList, Fixnum, Hash)>] TlsCertificateList data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_tls_certificates_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_list_tls_certificates ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_list_tls_certificates"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_list_tls_certificates"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.orgs_org_id_projects_project_id_infra_list_tls_certificates, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.orgs_org_id_projects_project_id_infra_list_tls_certificates, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['cluster_api_certificate', 'api_certificate'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of cluster_api_certificate, api_certificate'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/certificates'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'details'] = opts[:'details'] if !opts[:'details'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'node_id'] = opts[:'node_id'] if !opts[:'node_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificateList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_list_tls_certificates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return All Added CRLs
    # Returns information about all CRLs. For additional information, include the ?details=true modifier at the end of the request URI. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :node_id Node ID of certificate to return
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type of certificate to return
    # @return [TlsCrlListResult]
    def orgs_org_id_projects_project_id_infra_list_tls_crls(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_tls_crls_with_http_info(org_id, project_id, opts)
      data
    end

    # Return All Added CRLs
    # Returns information about all CRLs. For additional information, include the ?details&#x3D;true modifier at the end of the request URI. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :details whether to expand the pem data and show all its details
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :node_id Node ID of certificate to return
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type of certificate to return
    # @return [Array<(TlsCrlListResult, Fixnum, Hash)>] TlsCrlListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_tls_crls_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_list_tls_crls ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_list_tls_crls"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_list_tls_crls"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.orgs_org_id_projects_project_id_infra_list_tls_crls, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.orgs_org_id_projects_project_id_infra_list_tls_crls, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['cluster_api_certificate', 'api_certificate'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of cluster_api_certificate, api_certificate'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/crls'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'details'] = opts[:'details'] if !opts[:'details'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'node_id'] = opts[:'node_id'] if !opts[:'node_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCrlListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_list_tls_crls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return All the Generated CSRs
    # Returns information about all of the CSRs that have been created.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TlsCsrListResult]
    def orgs_org_id_projects_project_id_infra_list_tls_csrs(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_tls_csrs_with_http_info(org_id, project_id, opts)
      data
    end

    # Return All the Generated CSRs
    # Returns information about all of the CSRs that have been created.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TlsCsrListResult, Fixnum, Hash)>] TlsCsrListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_tls_csrs_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_list_tls_csrs ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_list_tls_csrs"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_list_tls_csrs"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.orgs_org_id_projects_project_id_infra_list_tls_csrs, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling InfraApi.orgs_org_id_projects_project_id_infra_list_tls_csrs, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/csrs'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCsrListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_list_tls_csrs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the infra including all the nested entities
    # Patch API at infra level can be used in two flavours 1. Like a regular API to update Infra object 2. Hierarchical API: To create/update/delete entire or part of intent    hierarchy Hierarchical API: Provides users a way to create entire or part of intent in single API invocation. Input is expressed in a tree format. Each node in tree can have multiple children of different types. System will resolve the dependencies of nodes within the intent tree and will create the model. Children for any node can be specified using ChildResourceReference or ChildPolicyConfigResource. If a resource is specified using ChildResourceReference then it will not be updated only its children will be updated. If Object is specified using ChildPolicyConfigResource, object along with its children will be updated. Hierarchical API can also be used to delete any sub-branch of entire tree. Hierarchical API supports up to 5000 intent creation on LM and 1000 on GM. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enforce_revision_check Force revision check (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_infra(org_id, project_id, infra, opts = {})
      orgs_org_id_projects_project_id_infra_patch_infra_with_http_info(org_id, project_id, infra, opts)
      nil
    end

    # Update the infra including all the nested entities
    # Patch API at infra level can be used in two flavours 1. Like a regular API to update Infra object 2. Hierarchical API: To create/update/delete entire or part of intent    hierarchy Hierarchical API: Provides users a way to create entire or part of intent in single API invocation. Input is expressed in a tree format. Each node in tree can have multiple children of different types. System will resolve the dependencies of nodes within the intent tree and will create the model. Children for any node can be specified using ChildResourceReference or ChildPolicyConfigResource. If a resource is specified using ChildResourceReference then it will not be updated only its children will be updated. If Object is specified using ChildPolicyConfigResource, object along with its children will be updated. Hierarchical API can also be used to delete any sub-branch of entire tree. Hierarchical API supports up to 5000 intent creation on LM and 1000 on GM. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enforce_revision_check Force revision check
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_infra_with_http_info(org_id, project_id, infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_patch_infra ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_patch_infra"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_patch_infra"
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling InfraApi.orgs_org_id_projects_project_id_infra_patch_infra"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforce_revision_check'] = opts[:'enforce_revision_check'] if !opts[:'enforce_revision_check'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_patch_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update tenant Constraint
    # Create tenant constraint if not exists, otherwise update the existing constraint. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param constraint_id 
    # @param constraint 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_tenant_constraint(org_id, project_id, constraint_id, constraint, opts = {})
      orgs_org_id_projects_project_id_infra_patch_tenant_constraint_with_http_info(org_id, project_id, constraint_id, constraint, opts)
      nil
    end

    # Create or update tenant Constraint
    # Create tenant constraint if not exists, otherwise update the existing constraint. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param constraint_id 
    # @param constraint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_tenant_constraint_with_http_info(org_id, project_id, constraint_id, constraint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_patch_tenant_constraint ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_patch_tenant_constraint"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_patch_tenant_constraint"
      end
      # verify the required parameter 'constraint_id' is set
      if @api_client.config.client_side_validation && constraint_id.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_patch_tenant_constraint"
      end
      # verify the required parameter 'constraint' is set
      if @api_client.config.client_side_validation && constraint.nil?
        fail ArgumentError, "Missing the required parameter 'constraint' when calling InfraApi.orgs_org_id_projects_project_id_infra_patch_tenant_constraint"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/constraints/{constraint-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'constraint-id' + '}', constraint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(constraint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_patch_tenant_constraint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a New Certificate
    # Adds a new private-public certificate and, optionally, a private key that can be applied to one of the user-facing components (appliance management or edge). The certificate and the key should be stored in PEM format. If no private key is provided, the certificate is used as a client certificate in the trust store. A private key can be uploaded for a CA certificate only if the \"purpose\" parameter is set to \"signing-ca\". A certificate chain will not be expanded into separate certificate instances for reference, but would be pushed to the enforcement point as a single certificate.  This patch method does not modify an existing certificate. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param certificate_id 
    # @param tls_trust_data 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_tls_certificate(org_id, project_id, certificate_id, tls_trust_data, opts = {})
      orgs_org_id_projects_project_id_infra_patch_tls_certificate_with_http_info(org_id, project_id, certificate_id, tls_trust_data, opts)
      nil
    end

    # Add a New Certificate
    # Adds a new private-public certificate and, optionally, a private key that can be applied to one of the user-facing components (appliance management or edge). The certificate and the key should be stored in PEM format. If no private key is provided, the certificate is used as a client certificate in the trust store. A private key can be uploaded for a CA certificate only if the \&quot;purpose\&quot; parameter is set to \&quot;signing-ca\&quot;. A certificate chain will not be expanded into separate certificate instances for reference, but would be pushed to the enforcement point as a single certificate.  This patch method does not modify an existing certificate. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param certificate_id 
    # @param tls_trust_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_tls_certificate_with_http_info(org_id, project_id, certificate_id, tls_trust_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_patch_tls_certificate ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_patch_tls_certificate"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_patch_tls_certificate"
      end
      # verify the required parameter 'certificate_id' is set
      if @api_client.config.client_side_validation && certificate_id.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_patch_tls_certificate"
      end
      # verify the required parameter 'tls_trust_data' is set
      if @api_client.config.client_side_validation && tls_trust_data.nil?
        fail ArgumentError, "Missing the required parameter 'tls_trust_data' when calling InfraApi.orgs_org_id_projects_project_id_infra_patch_tls_certificate"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/certificates/{certificate-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'certificate-id' + '}', certificate_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_trust_data)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_patch_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read domain
    # Read a domain. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @return [Domain]
    def orgs_org_id_projects_project_id_infra_read_domain_for_infra(org_id, project_id, domain_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_domain_for_infra_with_http_info(org_id, project_id, domain_id, opts)
      data
    end

    # Read domain
    # Read a domain. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Domain, Fixnum, Hash)>] Domain data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_domain_for_infra_with_http_info(org_id, project_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_read_domain_for_infra ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_read_domain_for_infra"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_read_domain_for_infra"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_read_domain_for_infra"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Domain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_read_domain_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read infra
    # Read infra. Returns only the infra related properties. Inner object are not populated. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :base_path Base Path for retrieving hierarchical intent
    # @option opts [String] :filter Filter string as java regex
    # @option opts [String] :type_filter Filter string to retrieve hierarchy.
    # @return [Infra]
    def orgs_org_id_projects_project_id_infra_read_infra(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_infra_with_http_info(org_id, project_id, opts)
      data
    end

    # Read infra
    # Read infra. Returns only the infra related properties. Inner object are not populated. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :base_path Base Path for retrieving hierarchical intent
    # @option opts [String] :filter Filter string as java regex
    # @option opts [String] :type_filter Filter string to retrieve hierarchy.
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_infra_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_read_infra ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_read_infra"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_read_infra"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'base_path'] = opts[:'base_path'] if !opts[:'base_path'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'type_filter'] = opts[:'type_filter'] if !opts[:'type_filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_read_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get consolidated status of an intent object
    # Get Consolidated Status of an intent object (with or without enforcement specific status details). The request is evaluated as follows: - &lt;intent_path&gt;: the request is evaluated on all enforcement points for the given intent without enforcement point specific details. - &lt;intent_path, include_enforced_status&gt;: the request is evaluated on all enforcement points for the given intent with enforcement point specific details. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param intent_path Policy Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_enforced_status Include Enforced Status Flag (default to false)
    # @option opts [String] :site_path Policy Path of the site from where the realization status needs to be fetched
    # @return [ConsolidatedRealizedStatus]
    def orgs_org_id_projects_project_id_infra_read_intent_status(org_id, project_id, intent_path, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_intent_status_with_http_info(org_id, project_id, intent_path, opts)
      data
    end

    # Get consolidated status of an intent object
    # Get Consolidated Status of an intent object (with or without enforcement specific status details). The request is evaluated as follows: - &amp;lt;intent_path&amp;gt;: the request is evaluated on all enforcement points for the given intent without enforcement point specific details. - &amp;lt;intent_path, include_enforced_status&amp;gt;: the request is evaluated on all enforcement points for the given intent with enforcement point specific details. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param intent_path Policy Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_enforced_status Include Enforced Status Flag
    # @option opts [String] :site_path Policy Path of the site from where the realization status needs to be fetched
    # @return [Array<(ConsolidatedRealizedStatus, Fixnum, Hash)>] ConsolidatedRealizedStatus data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_intent_status_with_http_info(org_id, project_id, intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_read_intent_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_read_intent_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_read_intent_status"
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling InfraApi.orgs_org_id_projects_project_id_infra_read_intent_status"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/realized-state/status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'include_enforced_status'] = opts[:'include_enforced_status'] if !opts[:'include_enforced_status'].nil?
      query_params[:'site_path'] = opts[:'site_path'] if !opts[:'site_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConsolidatedRealizedStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_read_intent_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read lable
    # Read a label. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param label_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyLabel]
    def orgs_org_id_projects_project_id_infra_read_policy_label_for_infra(org_id, project_id, label_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_policy_label_for_infra_with_http_info(org_id, project_id, label_id, opts)
      data
    end

    # Read lable
    # Read a label. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param label_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyLabel, Fixnum, Hash)>] PolicyLabel data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_policy_label_for_infra_with_http_info(org_id, project_id, label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_read_policy_label_for_infra ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_read_policy_label_for_infra"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_read_policy_label_for_infra"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_read_policy_label_for_infra"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/labels/{label-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'label-id' + '}', label_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyLabel')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_read_policy_label_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read tenant Constraint.
    # Read tenant constraint.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param constraint_id 
    # @param [Hash] opts the optional parameters
    # @return [Constraint]
    def orgs_org_id_projects_project_id_infra_read_tenant_constraint(org_id, project_id, constraint_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_tenant_constraint_with_http_info(org_id, project_id, constraint_id, opts)
      data
    end

    # Read tenant Constraint.
    # Read tenant constraint.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param constraint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Constraint, Fixnum, Hash)>] Constraint data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_tenant_constraint_with_http_info(org_id, project_id, constraint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_read_tenant_constraint ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_read_tenant_constraint"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_read_tenant_constraint"
      end
      # verify the required parameter 'constraint_id' is set
      if @api_client.config.client_side_validation && constraint_id.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_read_tenant_constraint"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/constraints/{constraint-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'constraint-id' + '}', constraint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Constraint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_read_tenant_constraint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Refresh all realized entities associated with the intent-path
    # Refresh the status and statistics of all realized entities associated with given intent path synchronously. The vmw-async: True HTTP header cannot be used with this API. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_refresh_realized_state(org_id, project_id, intent_path, opts = {})
      orgs_org_id_projects_project_id_infra_refresh_realized_state_with_http_info(org_id, project_id, intent_path, opts)
      nil
    end

    # Refresh all realized entities associated with the intent-path
    # Refresh the status and statistics of all realized entities associated with given intent path synchronously. The vmw-async: True HTTP header cannot be used with this API. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_refresh_realized_state_with_http_info(org_id, project_id, intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_refresh_realized_state ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_refresh_realized_state"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_refresh_realized_state"
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling InfraApi.orgs_org_id_projects_project_id_infra_refresh_realized_state"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/realized-state/realized-entity?action=refresh'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_refresh_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Self-Sign the CSR
    # Self-signs the previously generated CSR. This action is similar to the import certificate action, but instead of using a public certificate signed by a CA, the self_sign POST action uses a certificate that is signed with NSX's own private key. The maximum validity limit for non-CA certificates is 825 days, except that values of 3,650 and 36,500 days are allowed. No limit is set for CA certificates. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id CSR this certificate is associated with
    # @param days_valid Number of days the certificate will be valid, default 825 days
    # @param [Hash] opts the optional parameters
    # @return [TlsCertificate]
    def orgs_org_id_projects_project_id_infra_self_sign_tls_certificate(org_id, project_id, csr_id, days_valid, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_self_sign_tls_certificate_with_http_info(org_id, project_id, csr_id, days_valid, opts)
      data
    end

    # Self-Sign the CSR
    # Self-signs the previously generated CSR. This action is similar to the import certificate action, but instead of using a public certificate signed by a CA, the self_sign POST action uses a certificate that is signed with NSX&#39;s own private key. The maximum validity limit for non-CA certificates is 825 days, except that values of 3,650 and 36,500 days are allowed. No limit is set for CA certificates. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id CSR this certificate is associated with
    # @param days_valid Number of days the certificate will be valid, default 825 days
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_self_sign_tls_certificate_with_http_info(org_id, project_id, csr_id, days_valid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_self_sign_tls_certificate ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_self_sign_tls_certificate"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_self_sign_tls_certificate"
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_self_sign_tls_certificate"
      end
      # verify the required parameter 'days_valid' is set
      if @api_client.config.client_side_validation && days_valid.nil?
        fail ArgumentError, "Missing the required parameter 'days_valid' when calling InfraApi.orgs_org_id_projects_project_id_infra_self_sign_tls_certificate"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/csrs/{csr-id}?action=self_sign'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'days_valid'] = days_valid

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_self_sign_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch an existing label object
    # Create label if not exists, otherwise take the partial updates. Note, once the label is created type attribute can not be changed. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param label_id 
    # @param policy_label 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_update_policy_label_for_infra(org_id, project_id, label_id, policy_label, opts = {})
      orgs_org_id_projects_project_id_infra_update_policy_label_for_infra_with_http_info(org_id, project_id, label_id, policy_label, opts)
      nil
    end

    # Patch an existing label object
    # Create label if not exists, otherwise take the partial updates. Note, once the label is created type attribute can not be changed. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param label_id 
    # @param policy_label 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_policy_label_for_infra_with_http_info(org_id, project_id, label_id, policy_label, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_update_policy_label_for_infra ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_update_policy_label_for_infra"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_update_policy_label_for_infra"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_update_policy_label_for_infra"
      end
      # verify the required parameter 'policy_label' is set
      if @api_client.config.client_side_validation && policy_label.nil?
        fail ArgumentError, "Missing the required parameter 'policy_label' when calling InfraApi.orgs_org_id_projects_project_id_infra_update_policy_label_for_infra"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/labels/{label-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'label-id' + '}', label_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_label)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_update_policy_label_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload the Certificate PEM File Signed by the CA Associated with a CSR
    # Uploads the certificate authority (CA)-signed certificate. After you send the certificate request to the CA of your choice, and the CA sends back the signed certificate, you can use the upload POST action to upload the signed certificate. The upload action is similar to the import action, but the upload action allows you to directly upload the PEM-encoded file (signed certificate) provided by the CA. Like the import POST action, the upload POST action automatically deletes the associated CSR. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id ID of the CSR to read
    # @param file File to be uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Description of this resource
    # @option opts [String] :display_name Identifier to use when displaying entity in logs or GUI
    # @return [TlsCertificate]
    def orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate(org_id, project_id, csr_id, file, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate_with_http_info(org_id, project_id, csr_id, file, opts)
      data
    end

    # Upload the Certificate PEM File Signed by the CA Associated with a CSR
    # Uploads the certificate authority (CA)-signed certificate. After you send the certificate request to the CA of your choice, and the CA sends back the signed certificate, you can use the upload POST action to upload the signed certificate. The upload action is similar to the import action, but the upload action allows you to directly upload the PEM-encoded file (signed certificate) provided by the CA. Like the import POST action, the upload POST action automatically deletes the associated CSR. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param csr_id ID of the CSR to read
    # @param file File to be uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Description of this resource
    # @option opts [String] :display_name Identifier to use when displaying entity in logs or GUI
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate_with_http_info(org_id, project_id, csr_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate"
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling InfraApi.orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate"
      end
      if @api_client.config.client_side_validation && !opts[:'description'].nil? && opts[:'description'].to_s.length > 1024
        fail ArgumentError, 'invalid value for "opts[:"description"]" when calling InfraApi.orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate, the character length must be smaller than or equal to 1024.'
      end

      if @api_client.config.client_side_validation && !opts[:'display_name'].nil? && opts[:'display_name'].to_s.length > 255
        fail ArgumentError, 'invalid value for "opts[:"display_name"]" when calling InfraApi.orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate, the character length must be smaller than or equal to 255.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/csrs/{csr-id}?action=upload'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'display_name'] = opts[:'display_name'] if !opts[:'display_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_upload_pem_signed_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload a new or updated Certificate Revocation List
    # Adds or replaces a certificate revocation list (CRLs). The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. A CRL can be in the PEM X.509 format (crl_type=X509) or JSON OneCRL (crl_type=OneCRL). If crl_type is not specified, it is auto-detected based on the upload content. An X.509 CRL can contain a single CRL or multiple CRLs depending on the PEM data. - Single CRL: a single CRL is created with the given id. - Composite CRL: multiple CRLs are generated. Each of the CRL is created with an id generated based on the given id. First CRL is created with crl-id, second with crl-id-1, third with crl-id-2, etc. Differently from action=import, this method allows multi-part upload of the CRL(s). The TlsCrl resource returned in the body of the response will have an empty pem_encoded field, as it may be large. Use a GET request to retrieve the PEM-encoded CRL. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param crl_id 
    # @param file File to be uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [String] :crl_type Type of CRL (default to X509)
    # @option opts [String] :description Description of this resource
    # @option opts [String] :display_name Identifier to use when displaying entity in logs or GUI
    # @return [TlsCrl]
    def orgs_org_id_projects_project_id_infra_upload_tls_crl(org_id, project_id, crl_id, file, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_upload_tls_crl_with_http_info(org_id, project_id, crl_id, file, opts)
      data
    end

    # Upload a new or updated Certificate Revocation List
    # Adds or replaces a certificate revocation list (CRLs). The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. A CRL can be in the PEM X.509 format (crl_type&#x3D;X509) or JSON OneCRL (crl_type&#x3D;OneCRL). If crl_type is not specified, it is auto-detected based on the upload content. An X.509 CRL can contain a single CRL or multiple CRLs depending on the PEM data. - Single CRL: a single CRL is created with the given id. - Composite CRL: multiple CRLs are generated. Each of the CRL is created with an id generated based on the given id. First CRL is created with crl-id, second with crl-id-1, third with crl-id-2, etc. Differently from action&#x3D;import, this method allows multi-part upload of the CRL(s). The TlsCrl resource returned in the body of the response will have an empty pem_encoded field, as it may be large. Use a GET request to retrieve the PEM-encoded CRL. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param crl_id 
    # @param file File to be uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [String] :crl_type Type of CRL
    # @option opts [String] :description Description of this resource
    # @option opts [String] :display_name Identifier to use when displaying entity in logs or GUI
    # @return [Array<(TlsCrl, Fixnum, Hash)>] TlsCrl data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_upload_tls_crl_with_http_info(org_id, project_id, crl_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.orgs_org_id_projects_project_id_infra_upload_tls_crl ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_upload_tls_crl"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_upload_tls_crl"
      end
      # verify the required parameter 'crl_id' is set
      if @api_client.config.client_side_validation && crl_id.nil?
        fail ArgumentError, "Missing the required parameter 'crl_id' when calling InfraApi.orgs_org_id_projects_project_id_infra_upload_tls_crl"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling InfraApi.orgs_org_id_projects_project_id_infra_upload_tls_crl"
      end
      if @api_client.config.client_side_validation && opts[:'crl_type'] && !['OneCRL', 'X509'].include?(opts[:'crl_type'])
        fail ArgumentError, 'invalid value for "crl_type", must be one of OneCRL, X509'
      end
      if @api_client.config.client_side_validation && !opts[:'description'].nil? && opts[:'description'].to_s.length > 1024
        fail ArgumentError, 'invalid value for "opts[:"description"]" when calling InfraApi.orgs_org_id_projects_project_id_infra_upload_tls_crl, the character length must be smaller than or equal to 1024.'
      end

      if @api_client.config.client_side_validation && !opts[:'display_name'].nil? && opts[:'display_name'].to_s.length > 255
        fail ArgumentError, 'invalid value for "opts[:"display_name"]" when calling InfraApi.orgs_org_id_projects_project_id_infra_upload_tls_crl, the character length must be smaller than or equal to 255.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/crls/{crl-id}?action=upload'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'crl-id' + '}', crl_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'crl_type'] = opts[:'crl_type'] if !opts[:'crl_type'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'display_name'] = opts[:'display_name'] if !opts[:'display_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCrl')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#orgs_org_id_projects_project_id_infra_upload_tls_crl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Domain Deployment Map under infra
    # If the passed Domain Deployment Map does not already exist, create a new Domain Deployment Map. If it already exist, patch it. 
    # @param domain_id 
    # @param domain_deployment_map_id 
    # @param domain_deployment_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_domain_deployment_map_for_infra(domain_id, domain_deployment_map_id, domain_deployment_map, opts = {})
      patch_domain_deployment_map_for_infra_with_http_info(domain_id, domain_deployment_map_id, domain_deployment_map, opts)
      nil
    end

    # Patch Domain Deployment Map under infra
    # If the passed Domain Deployment Map does not already exist, create a new Domain Deployment Map. If it already exist, patch it. 
    # @param domain_id 
    # @param domain_deployment_map_id 
    # @param domain_deployment_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_domain_deployment_map_for_infra_with_http_info(domain_id, domain_deployment_map_id, domain_deployment_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.patch_domain_deployment_map_for_infra ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling InfraApi.patch_domain_deployment_map_for_infra"
      end
      # verify the required parameter 'domain_deployment_map_id' is set
      if @api_client.config.client_side_validation && domain_deployment_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_deployment_map_id' when calling InfraApi.patch_domain_deployment_map_for_infra"
      end
      # verify the required parameter 'domain_deployment_map' is set
      if @api_client.config.client_side_validation && domain_deployment_map.nil?
        fail ArgumentError, "Missing the required parameter 'domain_deployment_map' when calling InfraApi.patch_domain_deployment_map_for_infra"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/domain-deployment-maps/{domain-deployment-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'domain-deployment-map-id' + '}', domain_deployment_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(domain_deployment_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#patch_domain_deployment_map_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a domain
    # If a domain with the domain-id is not already present, create a new domain. If it already exists, patch the domain 
    # @param domain_id Domain ID
    # @param domain 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_domain_for_infra(domain_id, domain, opts = {})
      patch_domain_for_infra_with_http_info(domain_id, domain, opts)
      nil
    end

    # Patch a domain
    # If a domain with the domain-id is not already present, create a new domain. If it already exists, patch the domain 
    # @param domain_id Domain ID
    # @param domain 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_domain_for_infra_with_http_info(domain_id, domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.patch_domain_for_infra ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling InfraApi.patch_domain_for_infra"
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling InfraApi.patch_domain_for_infra"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#patch_domain_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a new Enforcement Point under infra
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, patch it.  <br> This is a deprecated API. DeploymentZone has been renamed to Site. Use PATCH /infra/sites/site-1/enforcement-points/enforcementpoint-1. 
    # @param deployment_zone_id 
    # @param enforcementpoint_id 
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_enforcement_point_for_infra(deployment_zone_id, enforcementpoint_id, enforcement_point, opts = {})
      patch_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, enforcement_point, opts)
      nil
    end

    # Patch a new Enforcement Point under infra
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, patch it.  &lt;br&gt; This is a deprecated API. DeploymentZone has been renamed to Site. Use PATCH /infra/sites/site-1/enforcement-points/enforcementpoint-1. 
    # @param deployment_zone_id 
    # @param enforcementpoint_id 
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, enforcement_point, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.patch_enforcement_point_for_infra ...'
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling InfraApi.patch_enforcement_point_for_infra"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.patch_enforcement_point_for_infra"
      end
      # verify the required parameter 'enforcement_point' is set
      if @api_client.config.client_side_validation && enforcement_point.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point' when calling InfraApi.patch_enforcement_point_for_infra"
      end
      # resource path
      local_var_path = '/infra/deployment-zones/{deployment-zone-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enforcement_point)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#patch_enforcement_point_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a new Enforcement Point under Site
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, patch it. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_enforcement_point_for_site(site_id, enforcementpoint_id, enforcement_point, opts = {})
      patch_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, enforcement_point, opts)
      nil
    end

    # Patch a new Enforcement Point under Site
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, patch it. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, enforcement_point, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.patch_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.patch_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.patch_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcement_point' is set
      if @api_client.config.client_side_validation && enforcement_point.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point' when calling InfraApi.patch_enforcement_point_for_site"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enforcement_point)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#patch_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the infra including all the nested entities
    # Patch API at infra level can be used in two flavours 1. Like a regular API to update Infra object 2. Hierarchical API: To create/update/delete entire or part of intent    hierarchy Hierarchical API: Provides users a way to create entire or part of intent in single API invocation. Input is expressed in a tree format. Each node in tree can have multiple children of different types. System will resolve the dependencies of nodes within the intent tree and will create the model. Children for any node can be specified using ChildResourceReference or ChildPolicyConfigResource. If a resource is specified using ChildResourceReference then it will not be updated only its children will be updated. If Object is specified using ChildPolicyConfigResource, object along with its children will be updated. Hierarchical API can also be used to delete any sub-branch of entire tree. Hierarchical API supports up to 5000 intent creation on LM and 1000 on GM. 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enforce_revision_check Force revision check (default to false)
    # @return [nil]
    def patch_infra(infra, opts = {})
      patch_infra_with_http_info(infra, opts)
      nil
    end

    # Update the infra including all the nested entities
    # Patch API at infra level can be used in two flavours 1. Like a regular API to update Infra object 2. Hierarchical API: To create/update/delete entire or part of intent    hierarchy Hierarchical API: Provides users a way to create entire or part of intent in single API invocation. Input is expressed in a tree format. Each node in tree can have multiple children of different types. System will resolve the dependencies of nodes within the intent tree and will create the model. Children for any node can be specified using ChildResourceReference or ChildPolicyConfigResource. If a resource is specified using ChildResourceReference then it will not be updated only its children will be updated. If Object is specified using ChildPolicyConfigResource, object along with its children will be updated. Hierarchical API can also be used to delete any sub-branch of entire tree. Hierarchical API supports up to 5000 intent creation on LM and 1000 on GM. 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enforce_revision_check Force revision check
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_infra_with_http_info(infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.patch_infra ...'
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling InfraApi.patch_infra"
      end
      # resource path
      local_var_path = '/infra'

      # query parameters
      query_params = {}
      query_params[:'enforce_revision_check'] = opts[:'enforce_revision_check'] if !opts[:'enforce_revision_check'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#patch_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a Policy Edge Cluster
    # Patch a policy edge cluster. It only supports homogeneous members. The Edge Transport Nodes are only allowed in cluster members. DeploymentType (VIRTUAL_MACHINE|PHYSICAL_MACHINE) of these Edge Nodes is recommended to be the same. Any update operation on members of edge cluster is not permitted, To replace the edge transport node for an existing member, refer <b>/policy/api/v1/infra/sites/default/enforcement-points/default/edge-clusters/<edge-cluster-id> /action/replace-policy-edge-node</b> api. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_cluster 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_edge_cluster(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_cluster, opts = {})
      patch_policy_edge_cluster_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_cluster, opts)
      nil
    end

    # Patch a Policy Edge Cluster
    # Patch a policy edge cluster. It only supports homogeneous members. The Edge Transport Nodes are only allowed in cluster members. DeploymentType (VIRTUAL_MACHINE|PHYSICAL_MACHINE) of these Edge Nodes is recommended to be the same. Any update operation on members of edge cluster is not permitted, To replace the edge transport node for an existing member, refer &lt;b&gt;/policy/api/v1/infra/sites/default/enforcement-points/default/edge-clusters/&lt;edge-cluster-id&gt; /action/replace-policy-edge-node&lt;/b&gt; api. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_cluster 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_edge_cluster_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_cluster, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.patch_policy_edge_cluster ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.patch_policy_edge_cluster"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.patch_policy_edge_cluster"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling InfraApi.patch_policy_edge_cluster"
      end
      # verify the required parameter 'policy_edge_cluster' is set
      if @api_client.config.client_side_validation && policy_edge_cluster.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_cluster' when calling InfraApi.patch_policy_edge_cluster"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_cluster)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#patch_policy_edge_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a Policy EdgeCluster High Availability Profile
    # Patch a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param policy_edge_high_availability_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_edge_cluster_high_availability_profile(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts = {})
      patch_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts)
      nil
    end

    # Patch a Policy EdgeCluster High Availability Profile
    # Patch a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param policy_edge_high_availability_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.patch_policy_edge_cluster_high_availability_profile ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.patch_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.patch_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'edge_cluster_high_availability_profile_id' is set
      if @api_client.config.client_side_validation && edge_cluster_high_availability_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_high_availability_profile_id' when calling InfraApi.patch_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'policy_edge_high_availability_profile' is set
      if @api_client.config.client_side_validation && policy_edge_high_availability_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_high_availability_profile' when calling InfraApi.patch_policy_edge_cluster_high_availability_profile"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-cluster-high-availability-profiles/{edge-cluster-high-availability-profile-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-high-availability-profile-id' + '}', edge_cluster_high_availability_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_high_availability_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#patch_policy_edge_cluster_high_availability_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a new LCM Edge Transport Node under Enforcement Point
    # If the passed Edge Transport Node does not already exist, create a new Edge Transport Node. If it already exists, patch it. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param policy_edge_transport_node 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_edge_transport_node(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts = {})
      patch_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts)
      nil
    end

    # Patch a new LCM Edge Transport Node under Enforcement Point
    # If the passed Edge Transport Node does not already exist, create a new Edge Transport Node. If it already exists, patch it. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param policy_edge_transport_node 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.patch_policy_edge_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.patch_policy_edge_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.patch_policy_edge_transport_node"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling InfraApi.patch_policy_edge_transport_node"
      end
      # verify the required parameter 'policy_edge_transport_node' is set
      if @api_client.config.client_side_validation && policy_edge_transport_node.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_transport_node' when calling InfraApi.patch_policy_edge_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_transport_node)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#patch_policy_edge_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Enable or Disable the datapath troubleshoot config on edge transport nodes
    # This API is used to enable/disable the control packet drop log config in all edge transport nodes at the enforcement Point level. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param policy_edge_transport_node_datapath_troubleshooting 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_edge_transport_nodes_troubleshoot_config(site_id, enforcement_point_id, policy_edge_transport_node_datapath_troubleshooting, opts = {})
      patch_policy_edge_transport_nodes_troubleshoot_config_with_http_info(site_id, enforcement_point_id, policy_edge_transport_node_datapath_troubleshooting, opts)
      nil
    end

    # Enable or Disable the datapath troubleshoot config on edge transport nodes
    # This API is used to enable/disable the control packet drop log config in all edge transport nodes at the enforcement Point level. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param policy_edge_transport_node_datapath_troubleshooting 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_edge_transport_nodes_troubleshoot_config_with_http_info(site_id, enforcement_point_id, policy_edge_transport_node_datapath_troubleshooting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.patch_policy_edge_transport_nodes_troubleshoot_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.patch_policy_edge_transport_nodes_troubleshoot_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling InfraApi.patch_policy_edge_transport_nodes_troubleshoot_config"
      end
      # verify the required parameter 'policy_edge_transport_node_datapath_troubleshooting' is set
      if @api_client.config.client_side_validation && policy_edge_transport_node_datapath_troubleshooting.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_transport_node_datapath_troubleshooting' when calling InfraApi.patch_policy_edge_transport_nodes_troubleshoot_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-transport-nodes/troubleshoot/datapath'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_transport_node_datapath_troubleshooting)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#patch_policy_edge_transport_nodes_troubleshoot_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a Policy FailureDomain
    # Patch a Policy FailureDomain. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param failure_domain_id 
    # @param policy_failure_domain 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_failure_domain(site_id, enforcementpoint_id, failure_domain_id, policy_failure_domain, opts = {})
      patch_policy_failure_domain_with_http_info(site_id, enforcementpoint_id, failure_domain_id, policy_failure_domain, opts)
      nil
    end

    # Patch a Policy FailureDomain
    # Patch a Policy FailureDomain. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param failure_domain_id 
    # @param policy_failure_domain 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_failure_domain_with_http_info(site_id, enforcementpoint_id, failure_domain_id, policy_failure_domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.patch_policy_failure_domain ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.patch_policy_failure_domain"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.patch_policy_failure_domain"
      end
      # verify the required parameter 'failure_domain_id' is set
      if @api_client.config.client_side_validation && failure_domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'failure_domain_id' when calling InfraApi.patch_policy_failure_domain"
      end
      # verify the required parameter 'policy_failure_domain' is set
      if @api_client.config.client_side_validation && policy_failure_domain.nil?
        fail ArgumentError, "Missing the required parameter 'policy_failure_domain' when calling InfraApi.patch_policy_failure_domain"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/failure-domains/{failure-domain-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'failure-domain-id' + '}', failure_domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_failure_domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#patch_policy_failure_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update tenant Constraint
    # Create tenant constraint if not exists, otherwise update the existing constraint. 
    # @param constraint_id 
    # @param constraint 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tenant_constraint(constraint_id, constraint, opts = {})
      patch_tenant_constraint_with_http_info(constraint_id, constraint, opts)
      nil
    end

    # Create or update tenant Constraint
    # Create tenant constraint if not exists, otherwise update the existing constraint. 
    # @param constraint_id 
    # @param constraint 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tenant_constraint_with_http_info(constraint_id, constraint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.patch_tenant_constraint ...'
      end
      # verify the required parameter 'constraint_id' is set
      if @api_client.config.client_side_validation && constraint_id.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_id' when calling InfraApi.patch_tenant_constraint"
      end
      # verify the required parameter 'constraint' is set
      if @api_client.config.client_side_validation && constraint.nil?
        fail ArgumentError, "Missing the required parameter 'constraint' when calling InfraApi.patch_tenant_constraint"
      end
      # resource path
      local_var_path = '/infra/constraints/{constraint-id}'.sub('{' + 'constraint-id' + '}', constraint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(constraint)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#patch_tenant_constraint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a New Certificate
    # Adds a new private-public certificate and, optionally, a private key that can be applied to one of the user-facing components (appliance management or edge). The certificate and the key should be stored in PEM format. If no private key is provided, the certificate is used as a client certificate in the trust store. A private key can be uploaded for a CA certificate only if the \"purpose\" parameter is set to \"signing-ca\". A certificate chain will not be expanded into separate certificate instances for reference, but would be pushed to the enforcement point as a single certificate.  This patch method does not modify an existing certificate. 
    # @param certificate_id 
    # @param tls_trust_data 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tls_certificate(certificate_id, tls_trust_data, opts = {})
      patch_tls_certificate_with_http_info(certificate_id, tls_trust_data, opts)
      nil
    end

    # Add a New Certificate
    # Adds a new private-public certificate and, optionally, a private key that can be applied to one of the user-facing components (appliance management or edge). The certificate and the key should be stored in PEM format. If no private key is provided, the certificate is used as a client certificate in the trust store. A private key can be uploaded for a CA certificate only if the \&quot;purpose\&quot; parameter is set to \&quot;signing-ca\&quot;. A certificate chain will not be expanded into separate certificate instances for reference, but would be pushed to the enforcement point as a single certificate.  This patch method does not modify an existing certificate. 
    # @param certificate_id 
    # @param tls_trust_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tls_certificate_with_http_info(certificate_id, tls_trust_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.patch_tls_certificate ...'
      end
      # verify the required parameter 'certificate_id' is set
      if @api_client.config.client_side_validation && certificate_id.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_id' when calling InfraApi.patch_tls_certificate"
      end
      # verify the required parameter 'tls_trust_data' is set
      if @api_client.config.client_side_validation && tls_trust_data.nil?
        fail ArgumentError, "Missing the required parameter 'tls_trust_data' when calling InfraApi.patch_tls_certificate"
      end
      # resource path
      local_var_path = '/infra/certificates/{certificate-id}'.sub('{' + 'certificate-id' + '}', certificate_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_trust_data)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#patch_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Edge Transport Node Enter Maintenance Mode Action API
    # Put edge transport node into maintenance mode if there is no VIFs attached. When EdgeTransportNode is in maintenance mode, no configuration changes are allowed. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def policy_edge_transport_node_enter_maintenance_mode(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      policy_edge_transport_node_enter_maintenance_mode_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      nil
    end

    # Policy Edge Transport Node Enter Maintenance Mode Action API
    # Put edge transport node into maintenance mode if there is no VIFs attached. When EdgeTransportNode is in maintenance mode, no configuration changes are allowed. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def policy_edge_transport_node_enter_maintenance_mode_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.policy_edge_transport_node_enter_maintenance_mode ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.policy_edge_transport_node_enter_maintenance_mode"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.policy_edge_transport_node_enter_maintenance_mode"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling InfraApi.policy_edge_transport_node_enter_maintenance_mode"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/action/enter-maintenance-mode'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#policy_edge_transport_node_enter_maintenance_mode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Edge Transport Node Exit Maintenance Mode Action API
    # This APi will exit from maintenance mode 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def policy_edge_transport_node_exit_maintenance_mode(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      policy_edge_transport_node_exit_maintenance_mode_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts)
      nil
    end

    # Policy Edge Transport Node Exit Maintenance Mode Action API
    # This APi will exit from maintenance mode 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def policy_edge_transport_node_exit_maintenance_mode_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.policy_edge_transport_node_exit_maintenance_mode ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.policy_edge_transport_node_exit_maintenance_mode"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.policy_edge_transport_node_exit_maintenance_mode"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling InfraApi.policy_edge_transport_node_exit_maintenance_mode"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/action/exit-maintenance-mode'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#policy_edge_transport_node_exit_maintenance_mode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a DeploymentZone
    # Read a Deployment Zone.  <br> This is a deprecated API. DeploymentZone has been renamed to Site. Use GET /infra/sites/site-id. 
    # @param deployment_zone_id 
    # @param [Hash] opts the optional parameters
    # @return [DeploymentZone]
    def read_deployment_zone_infra(deployment_zone_id, opts = {})
      data, _status_code, _headers = read_deployment_zone_infra_with_http_info(deployment_zone_id, opts)
      data
    end

    # Read a DeploymentZone
    # Read a Deployment Zone.  &lt;br&gt; This is a deprecated API. DeploymentZone has been renamed to Site. Use GET /infra/sites/site-id. 
    # @param deployment_zone_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentZone, Fixnum, Hash)>] DeploymentZone data, response status code and response headers
    def read_deployment_zone_infra_with_http_info(deployment_zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_deployment_zone_infra ...'
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling InfraApi.read_deployment_zone_infra"
      end
      # resource path
      local_var_path = '/infra/deployment-zones/{deployment-zone-id}'.sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentZone')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_deployment_zone_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a DomainDeploymentMap
    # Read a Domain Deployment Map 
    # @param domain_id 
    # @param domain_deployment_map_id 
    # @param [Hash] opts the optional parameters
    # @return [DomainDeploymentMap]
    def read_domain_deployment_map_for_infra(domain_id, domain_deployment_map_id, opts = {})
      data, _status_code, _headers = read_domain_deployment_map_for_infra_with_http_info(domain_id, domain_deployment_map_id, opts)
      data
    end

    # Read a DomainDeploymentMap
    # Read a Domain Deployment Map 
    # @param domain_id 
    # @param domain_deployment_map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainDeploymentMap, Fixnum, Hash)>] DomainDeploymentMap data, response status code and response headers
    def read_domain_deployment_map_for_infra_with_http_info(domain_id, domain_deployment_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_domain_deployment_map_for_infra ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling InfraApi.read_domain_deployment_map_for_infra"
      end
      # verify the required parameter 'domain_deployment_map_id' is set
      if @api_client.config.client_side_validation && domain_deployment_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_deployment_map_id' when calling InfraApi.read_domain_deployment_map_for_infra"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/domain-deployment-maps/{domain-deployment-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'domain-deployment-map-id' + '}', domain_deployment_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DomainDeploymentMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_domain_deployment_map_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read domain
    # Read a domain. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @return [Domain]
    def read_domain_for_infra(domain_id, opts = {})
      data, _status_code, _headers = read_domain_for_infra_with_http_info(domain_id, opts)
      data
    end

    # Read domain
    # Read a domain. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Domain, Fixnum, Hash)>] Domain data, response status code and response headers
    def read_domain_for_infra_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_domain_for_infra ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling InfraApi.read_domain_for_infra"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Domain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_domain_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Edge Cluster under an Enforcement Point
    # Read an Edge Cluster under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeCluster]
    def read_edge_cluster_for_enforcement_point(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = read_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      data
    end

    # Read an Edge Cluster under an Enforcement Point
    # Read an Edge Cluster under an Enforcement Point 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeCluster, Fixnum, Hash)>] PolicyEdgeCluster data, response status code and response headers
    def read_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_edge_cluster_for_enforcement_point ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.read_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.read_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling InfraApi.read_edge_cluster_for_enforcement_point"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_edge_cluster_for_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Edge Node under an Enforcement Point, Edge Cluster
    # Read an Edge Node under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param edge_node_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeNode]
    def read_edge_node_under_edge_cluster_for_enforcement_point(site_id, enforcementpoint_id, edge_cluster_id, edge_node_id, opts = {})
      data, _status_code, _headers = read_edge_node_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, edge_node_id, opts)
      data
    end

    # Read an Edge Node under an Enforcement Point, Edge Cluster
    # Read an Edge Node under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param edge_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeNode, Fixnum, Hash)>] PolicyEdgeNode data, response status code and response headers
    def read_edge_node_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, edge_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_edge_node_under_edge_cluster_for_enforcement_point ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling InfraApi.read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_node_id' is set
      if @api_client.config.client_side_validation && edge_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_node_id' when calling InfraApi.read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/edge-nodes/{edge-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'edge-node-id' + '}', edge_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_edge_node_under_edge_cluster_for_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Enforcement Point
    # Read an Enforcement Point.  <br> This is a deprecated API. DeploymentZone has been renamed to Site. Use GET /infra/sites/site-id/enforcement-points/enforcementpoint-id. 
    # @param deployment_zone_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [EnforcementPoint]
    def read_enforcement_point_for_infra(deployment_zone_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = read_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, opts)
      data
    end

    # Read an Enforcement Point
    # Read an Enforcement Point.  &lt;br&gt; This is a deprecated API. DeploymentZone has been renamed to Site. Use GET /infra/sites/site-id/enforcement-points/enforcementpoint-id. 
    # @param deployment_zone_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnforcementPoint, Fixnum, Hash)>] EnforcementPoint data, response status code and response headers
    def read_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_enforcement_point_for_infra ...'
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling InfraApi.read_enforcement_point_for_infra"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.read_enforcement_point_for_infra"
      end
      # resource path
      local_var_path = '/infra/deployment-zones/{deployment-zone-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_enforcement_point_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Enforcement Point under Infra/Site
    # Read an Enforcement Point under Infra/Site 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [EnforcementPoint]
    def read_enforcement_point_for_site(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = read_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # Read an Enforcement Point under Infra/Site
    # Read an Enforcement Point under Infra/Site 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnforcementPoint, Fixnum, Hash)>] EnforcementPoint data, response status code and response headers
    def read_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.read_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.read_enforcement_point_for_site"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Enforcement Point
    # Read a Enforcement Point and the complete tree underneath. Returns the populated enforcement point object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @return [RealizedEnforcementPoint]
    def read_enforcement_point_realized_state(enforcement_point_name, opts = {})
      data, _status_code, _headers = read_enforcement_point_realized_state_with_http_info(enforcement_point_name, opts)
      data
    end

    # Read Enforcement Point
    # Read a Enforcement Point and the complete tree underneath. Returns the populated enforcement point object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @return [Array<(RealizedEnforcementPoint, Fixnum, Hash)>] RealizedEnforcementPoint data, response status code and response headers
    def read_enforcement_point_realized_state_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_enforcement_point_realized_state ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling InfraApi.read_enforcement_point_realized_state"
      end
      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedEnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_enforcement_point_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Firewall
    # Read a Firewall and the complete tree underneath. Returns the populated Firewall object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param firewall_section_id Firewall Section Id
    # @param [Hash] opts the optional parameters
    # @return [RealizedFirewallSection]
    def read_firewall_section_realized_state(enforcement_point_name, firewall_section_id, opts = {})
      data, _status_code, _headers = read_firewall_section_realized_state_with_http_info(enforcement_point_name, firewall_section_id, opts)
      data
    end

    # Read Firewall
    # Read a Firewall and the complete tree underneath. Returns the populated Firewall object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param firewall_section_id Firewall Section Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(RealizedFirewallSection, Fixnum, Hash)>] RealizedFirewallSection data, response status code and response headers
    def read_firewall_section_realized_state_with_http_info(enforcement_point_name, firewall_section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_firewall_section_realized_state ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling InfraApi.read_firewall_section_realized_state"
      end
      # verify the required parameter 'firewall_section_id' is set
      if @api_client.config.client_side_validation && firewall_section_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_section_id' when calling InfraApi.read_firewall_section_realized_state"
      end
      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/firewalls/firewall-sections/{firewall-section-id}'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s).sub('{' + 'firewall-section-id' + '}', firewall_section_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedFirewallSection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_firewall_section_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read infra
    # Read infra. Returns only the infra related properties. Inner object are not populated. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :base_path Base Path for retrieving hierarchical intent
    # @option opts [String] :filter Filter string as java regex
    # @option opts [String] :type_filter Filter string to retrieve hierarchy.
    # @return [Infra]
    def read_infra(opts = {})
      data, _status_code, _headers = read_infra_with_http_info(opts)
      data
    end

    # Read infra
    # Read infra. Returns only the infra related properties. Inner object are not populated. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :base_path Base Path for retrieving hierarchical intent
    # @option opts [String] :filter Filter string as java regex
    # @option opts [String] :type_filter Filter string to retrieve hierarchy.
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def read_infra_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_infra ...'
      end
      # resource path
      local_var_path = '/infra'

      # query parameters
      query_params = {}
      query_params[:'base_path'] = opts[:'base_path'] if !opts[:'base_path'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'type_filter'] = opts[:'type_filter'] if !opts[:'type_filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get consolidated status of an intent object
    # Get Consolidated Status of an intent object (with or without enforcement specific status details). The request is evaluated as follows: - &lt;intent_path&gt;: the request is evaluated on all enforcement points for the given intent without enforcement point specific details. - &lt;intent_path, include_enforced_status&gt;: the request is evaluated on all enforcement points for the given intent with enforcement point specific details. 
    # @param intent_path Policy Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_enforced_status Include Enforced Status Flag (default to false)
    # @option opts [String] :site_path Policy Path of the site from where the realization status needs to be fetched
    # @return [ConsolidatedRealizedStatus]
    def read_intent_status(intent_path, opts = {})
      data, _status_code, _headers = read_intent_status_with_http_info(intent_path, opts)
      data
    end

    # Get consolidated status of an intent object
    # Get Consolidated Status of an intent object (with or without enforcement specific status details). The request is evaluated as follows: - &amp;lt;intent_path&amp;gt;: the request is evaluated on all enforcement points for the given intent without enforcement point specific details. - &amp;lt;intent_path, include_enforced_status&amp;gt;: the request is evaluated on all enforcement points for the given intent with enforcement point specific details. 
    # @param intent_path Policy Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_enforced_status Include Enforced Status Flag
    # @option opts [String] :site_path Policy Path of the site from where the realization status needs to be fetched
    # @return [Array<(ConsolidatedRealizedStatus, Fixnum, Hash)>] ConsolidatedRealizedStatus data, response status code and response headers
    def read_intent_status_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_intent_status ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling InfraApi.read_intent_status"
      end
      # resource path
      local_var_path = '/infra/realized-state/status'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'include_enforced_status'] = opts[:'include_enforced_status'] if !opts[:'include_enforced_status'].nil?
      query_params[:'site_path'] = opts[:'site_path'] if !opts[:'site_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConsolidatedRealizedStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_intent_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read IPSet Realized state
    # Read an IPSet 
    # @param enforcement_point_name Enforcement Point Name
    # @param ip_set_name IPSet name
    # @param [Hash] opts the optional parameters
    # @return [GenericPolicyRealizedResource]
    def read_ip_set_realized_state(enforcement_point_name, ip_set_name, opts = {})
      data, _status_code, _headers = read_ip_set_realized_state_with_http_info(enforcement_point_name, ip_set_name, opts)
      data
    end

    # Read IPSet Realized state
    # Read an IPSet 
    # @param enforcement_point_name Enforcement Point Name
    # @param ip_set_name IPSet name
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericPolicyRealizedResource, Fixnum, Hash)>] GenericPolicyRealizedResource data, response status code and response headers
    def read_ip_set_realized_state_with_http_info(enforcement_point_name, ip_set_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_ip_set_realized_state ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling InfraApi.read_ip_set_realized_state"
      end
      # verify the required parameter 'ip_set_name' is set
      if @api_client.config.client_side_validation && ip_set_name.nil?
        fail ArgumentError, "Missing the required parameter 'ip_set_name' when calling InfraApi.read_ip_set_realized_state"
      end
      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/ip-sets/ip-sets-nsxt/{ip-set-name}'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s).sub('{' + 'ip-set-name' + '}', ip_set_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_ip_set_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read MACSet Realized state
    # Read an MACSet 
    # @param enforcement_point_name Enforcement Point Name
    # @param mac_set_name MACSet name
    # @param [Hash] opts the optional parameters
    # @return [GenericPolicyRealizedResource]
    def read_mac_set_realized_state(enforcement_point_name, mac_set_name, opts = {})
      data, _status_code, _headers = read_mac_set_realized_state_with_http_info(enforcement_point_name, mac_set_name, opts)
      data
    end

    # Read MACSet Realized state
    # Read an MACSet 
    # @param enforcement_point_name Enforcement Point Name
    # @param mac_set_name MACSet name
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericPolicyRealizedResource, Fixnum, Hash)>] GenericPolicyRealizedResource data, response status code and response headers
    def read_mac_set_realized_state_with_http_info(enforcement_point_name, mac_set_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_mac_set_realized_state ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling InfraApi.read_mac_set_realized_state"
      end
      # verify the required parameter 'mac_set_name' is set
      if @api_client.config.client_side_validation && mac_set_name.nil?
        fail ArgumentError, "Missing the required parameter 'mac_set_name' when calling InfraApi.read_mac_set_realized_state"
      end
      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/mac-sets/mac-sets-nsxt/{mac-set-name}'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s).sub('{' + 'mac-set-name' + '}', mac_set_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_mac_set_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Group
    # Read a NSGroup and the complete tree underneath. Returns the populated NSgroup object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param nsgroup_name Group Name
    # @param [Hash] opts the optional parameters
    # @return [GenericPolicyRealizedResource]
    def read_ns_group_realized_state(enforcement_point_name, nsgroup_name, opts = {})
      data, _status_code, _headers = read_ns_group_realized_state_with_http_info(enforcement_point_name, nsgroup_name, opts)
      data
    end

    # Read Group
    # Read a NSGroup and the complete tree underneath. Returns the populated NSgroup object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param nsgroup_name Group Name
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericPolicyRealizedResource, Fixnum, Hash)>] GenericPolicyRealizedResource data, response status code and response headers
    def read_ns_group_realized_state_with_http_info(enforcement_point_name, nsgroup_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_ns_group_realized_state ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling InfraApi.read_ns_group_realized_state"
      end
      # verify the required parameter 'nsgroup_name' is set
      if @api_client.config.client_side_validation && nsgroup_name.nil?
        fail ArgumentError, "Missing the required parameter 'nsgroup_name' when calling InfraApi.read_ns_group_realized_state"
      end
      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/groups/nsgroups/{nsgroup-name}'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s).sub('{' + 'nsgroup-name' + '}', nsgroup_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_ns_group_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read NSService
    # Read a NSService. 
    # @param enforcement_point_name Enforcement Point Name
    # @param nsservice_name NSService Name
    # @param [Hash] opts the optional parameters
    # @return [GenericPolicyRealizedResource]
    def read_ns_service_realized_state(enforcement_point_name, nsservice_name, opts = {})
      data, _status_code, _headers = read_ns_service_realized_state_with_http_info(enforcement_point_name, nsservice_name, opts)
      data
    end

    # Read NSService
    # Read a NSService. 
    # @param enforcement_point_name Enforcement Point Name
    # @param nsservice_name NSService Name
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericPolicyRealizedResource, Fixnum, Hash)>] GenericPolicyRealizedResource data, response status code and response headers
    def read_ns_service_realized_state_with_http_info(enforcement_point_name, nsservice_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_ns_service_realized_state ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling InfraApi.read_ns_service_realized_state"
      end
      # verify the required parameter 'nsservice_name' is set
      if @api_client.config.client_side_validation && nsservice_name.nil?
        fail ArgumentError, "Missing the required parameter 'nsservice_name' when calling InfraApi.read_ns_service_realized_state"
      end
      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/services/nsservices/{nsservice-name}'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s).sub('{' + 'nsservice-name' + '}', nsservice_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_ns_service_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the status of packet capture session
    # Get the packet capture status information by session id. 
    # @param session_id Packet capture session id
    # @param [Hash] opts the optional parameters
    # @return [PktCaptureSession]
    def read_pkt_capture_session(session_id, opts = {})
      data, _status_code, _headers = read_pkt_capture_session_with_http_info(session_id, opts)
      data
    end

    # Get the status of packet capture session
    # Get the packet capture status information by session id. 
    # @param session_id Packet capture session id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PktCaptureSession, Fixnum, Hash)>] PktCaptureSession data, response status code and response headers
    def read_pkt_capture_session_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_pkt_capture_session ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling InfraApi.read_pkt_capture_session"
      end
      # resource path
      local_var_path = '/infra/pktcap/session/{session-id}'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PktCaptureSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_pkt_capture_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy Edge Cluster High Availability Profile
    # Get a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeHighAvailabilityProfile]
    def read_policy_edge_cluster_high_availability_profile(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts = {})
      data, _status_code, _headers = read_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts)
      data
    end

    # Get a Policy Edge Cluster High Availability Profile
    # Get a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeHighAvailabilityProfile, Fixnum, Hash)>] PolicyEdgeHighAvailabilityProfile data, response status code and response headers
    def read_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_policy_edge_cluster_high_availability_profile ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.read_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.read_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'edge_cluster_high_availability_profile_id' is set
      if @api_client.config.client_side_validation && edge_cluster_high_availability_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_high_availability_profile_id' when calling InfraApi.read_policy_edge_cluster_high_availability_profile"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-cluster-high-availability-profiles/{edge-cluster-high-availability-profile-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-high-availability-profile-id' + '}', edge_cluster_high_availability_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeHighAvailabilityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_policy_edge_cluster_high_availability_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read lable
    # Read a label. 
    # @param label_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyLabel]
    def read_policy_label_for_infra(label_id, opts = {})
      data, _status_code, _headers = read_policy_label_for_infra_with_http_info(label_id, opts)
      data
    end

    # Read lable
    # Read a label. 
    # @param label_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyLabel, Fixnum, Hash)>] PolicyLabel data, response status code and response headers
    def read_policy_label_for_infra_with_http_info(label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_policy_label_for_infra ...'
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling InfraApi.read_policy_label_for_infra"
      end
      # resource path
      local_var_path = '/infra/labels/{label-id}'.sub('{' + 'label-id' + '}', label_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyLabel')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_policy_label_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get realized entity uniquely identified by realized path
    # Get realized entity uniquely identified by realized path, specified by query parameter 
    # @param realized_path String Path of the realized object
    # @param [Hash] opts the optional parameters
    # @return [GenericPolicyRealizedResource]
    def read_realized_entity(realized_path, opts = {})
      data, _status_code, _headers = read_realized_entity_with_http_info(realized_path, opts)
      data
    end

    # Get realized entity uniquely identified by realized path
    # Get realized entity uniquely identified by realized path, specified by query parameter 
    # @param realized_path String Path of the realized object
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericPolicyRealizedResource, Fixnum, Hash)>] GenericPolicyRealizedResource data, response status code and response headers
    def read_realized_entity_with_http_info(realized_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_realized_entity ...'
      end
      # verify the required parameter 'realized_path' is set
      if @api_client.config.client_side_validation && realized_path.nil?
        fail ArgumentError, "Missing the required parameter 'realized_path' when calling InfraApi.read_realized_entity"
      end
      # resource path
      local_var_path = '/infra/realized-state/realized-entity'

      # query parameters
      query_params = {}
      query_params[:'realized_path'] = realized_path

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericPolicyRealizedResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_realized_entity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Group
    # Read a Security Group and the complete tree underneath. Returns the populated Security Group object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param securitygroup_name Group Name
    # @param [Hash] opts the optional parameters
    # @return [RealizedSecurityGroup]
    def read_security_group_realized_state(enforcement_point_name, securitygroup_name, opts = {})
      data, _status_code, _headers = read_security_group_realized_state_with_http_info(enforcement_point_name, securitygroup_name, opts)
      data
    end

    # Read Group
    # Read a Security Group and the complete tree underneath. Returns the populated Security Group object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param securitygroup_name Group Name
    # @param [Hash] opts the optional parameters
    # @return [Array<(RealizedSecurityGroup, Fixnum, Hash)>] RealizedSecurityGroup data, response status code and response headers
    def read_security_group_realized_state_with_http_info(enforcement_point_name, securitygroup_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_security_group_realized_state ...'
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling InfraApi.read_security_group_realized_state"
      end
      # verify the required parameter 'securitygroup_name' is set
      if @api_client.config.client_side_validation && securitygroup_name.nil?
        fail ArgumentError, "Missing the required parameter 'securitygroup_name' when calling InfraApi.read_security_group_realized_state"
      end
      # resource path
      local_var_path = '/infra/realized-state/enforcement-points/{enforcement-point-name}/groups/securitygroups/{securitygroup-name}'.sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s).sub('{' + 'securitygroup-name' + '}', securitygroup_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedSecurityGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_security_group_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read tenant Constraint.
    # Read tenant constraint.
    # @param constraint_id 
    # @param [Hash] opts the optional parameters
    # @return [Constraint]
    def read_tenant_constraint(constraint_id, opts = {})
      data, _status_code, _headers = read_tenant_constraint_with_http_info(constraint_id, opts)
      data
    end

    # Read tenant Constraint.
    # Read tenant constraint.
    # @param constraint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Constraint, Fixnum, Hash)>] Constraint data, response status code and response headers
    def read_tenant_constraint_with_http_info(constraint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.read_tenant_constraint ...'
      end
      # verify the required parameter 'constraint_id' is set
      if @api_client.config.client_side_validation && constraint_id.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_id' when calling InfraApi.read_tenant_constraint"
      end
      # resource path
      local_var_path = '/infra/constraints/{constraint-id}'.sub('{' + 'constraint-id' + '}', constraint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Constraint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#read_tenant_constraint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Redeploy Edge Transport Node
    # Redeploys an edge transport node at NSX Manager that replaces the edge transport node with identifier &lt;node-id&gt;. If NSX Manager can access the specified edge node, then the node is put into maintenance mode and then the associated VM is deleted. This is a means to reset all configuration on the edge node. The communication channel between NSX Manager and edge is established after this operation. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param policy_edge_transport_node 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeTransportNode]
    def redeploy_policy_edge_transport_node(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts = {})
      data, _status_code, _headers = redeploy_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts)
      data
    end

    # Redeploy Edge Transport Node
    # Redeploys an edge transport node at NSX Manager that replaces the edge transport node with identifier &amp;lt;node-id&amp;gt;. If NSX Manager can access the specified edge node, then the node is put into maintenance mode and then the associated VM is deleted. This is a means to reset all configuration on the edge node. The communication channel between NSX Manager and edge is established after this operation. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_transport_node_id 
    # @param policy_edge_transport_node 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeTransportNode, Fixnum, Hash)>] PolicyEdgeTransportNode data, response status code and response headers
    def redeploy_policy_edge_transport_node_with_http_info(site_id, enforcementpoint_id, edge_transport_node_id, policy_edge_transport_node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.redeploy_policy_edge_transport_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.redeploy_policy_edge_transport_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.redeploy_policy_edge_transport_node"
      end
      # verify the required parameter 'edge_transport_node_id' is set
      if @api_client.config.client_side_validation && edge_transport_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_transport_node_id' when calling InfraApi.redeploy_policy_edge_transport_node"
      end
      # verify the required parameter 'policy_edge_transport_node' is set
      if @api_client.config.client_side_validation && policy_edge_transport_node.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_transport_node' when calling InfraApi.redeploy_policy_edge_transport_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-transport-nodes/{edge-transport-node-id}/action/redeploy'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-transport-node-id' + '}', edge_transport_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_transport_node)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeTransportNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#redeploy_policy_edge_transport_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Refresh all realized entities associated with the intent-path
    # Refresh the status and statistics of all realized entities associated with given intent path synchronously. The vmw-async: True HTTP header cannot be used with this API. 
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def refresh_realized_state(intent_path, opts = {})
      refresh_realized_state_with_http_info(intent_path, opts)
      nil
    end

    # Refresh all realized entities associated with the intent-path
    # Refresh the status and statistics of all realized entities associated with given intent path synchronously. The vmw-async: True HTTP header cannot be used with this API. 
    # @param intent_path String Path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def refresh_realized_state_with_http_info(intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.refresh_realized_state ...'
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling InfraApi.refresh_realized_state"
      end
      # resource path
      local_var_path = '/infra/realized-state/realized-entity?action=refresh'

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#refresh_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reload an Enforcement Point under Site
    # Reload an Enforcement Point under Site. This will read and update fabric configs from enforcement point. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [EnforcementPoint]
    def reload_enforcement_point_for_site(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = reload_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # Reload an Enforcement Point under Site
    # Reload an Enforcement Point under Site. This will read and update fabric configs from enforcement point. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnforcementPoint, Fixnum, Hash)>] EnforcementPoint data, response status code and response headers
    def reload_enforcement_point_for_site_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.reload_enforcement_point_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.reload_enforcement_point_for_site"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.reload_enforcement_point_for_site"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}?action=reload'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#reload_enforcement_point_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Relocate service contexts from policy edge node  and remove policy edge node from the edge-cluster
    # Relocate auto allocated service contexts from policy edge node at given id. For API to perform relocate and remove action the edge node at given id must only have auto allocated service contexts. If any manually allocated service context is present on the edge cluster member, then the task will not be performed. Also, it is recommended to move the edge node for which relocate and remove action is being performed into maintenance mode,before executing the API. If edge is not moved into maintenance mode, then API will move edge node into maintenance mode before performing the actual relocate and remove task.To maintain high availability, Edge cluster should have at least two healthy edge nodes for relocation and removal. Once relocate action is performed successfully, the policy edge node will be removed from the edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_node_relocate_and_remove_member 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def relocate_and_remove_policy_edge_node(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_node_relocate_and_remove_member, opts = {})
      relocate_and_remove_policy_edge_node_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_node_relocate_and_remove_member, opts)
      nil
    end

    # Relocate service contexts from policy edge node  and remove policy edge node from the edge-cluster
    # Relocate auto allocated service contexts from policy edge node at given id. For API to perform relocate and remove action the edge node at given id must only have auto allocated service contexts. If any manually allocated service context is present on the edge cluster member, then the task will not be performed. Also, it is recommended to move the edge node for which relocate and remove action is being performed into maintenance mode,before executing the API. If edge is not moved into maintenance mode, then API will move edge node into maintenance mode before performing the actual relocate and remove task.To maintain high availability, Edge cluster should have at least two healthy edge nodes for relocation and removal. Once relocate action is performed successfully, the policy edge node will be removed from the edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_node_relocate_and_remove_member 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def relocate_and_remove_policy_edge_node_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_node_relocate_and_remove_member, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.relocate_and_remove_policy_edge_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.relocate_and_remove_policy_edge_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.relocate_and_remove_policy_edge_node"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling InfraApi.relocate_and_remove_policy_edge_node"
      end
      # verify the required parameter 'policy_edge_node_relocate_and_remove_member' is set
      if @api_client.config.client_side_validation && policy_edge_node_relocate_and_remove_member.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_node_relocate_and_remove_member' when calling InfraApi.relocate_and_remove_policy_edge_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/action/relocate-and-remove-edge-transport-node'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_node_relocate_and_remove_member)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#relocate_and_remove_policy_edge_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Replace the policy edge node at the specified member-index in the edge-cluster
    # Replace the Policy Edge Node present at the specified member-index in the edge-cluster. This is a disruptive action. This will move all the Interfaces(uplink and routerLink) hosted on the old Policy Edge Node to the new Policy Edge Node. The same Policy Edge Node cannot be present as a member of any edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_node_replace_member 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeCluster]
    def replace_policy_edge_node(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_node_replace_member, opts = {})
      data, _status_code, _headers = replace_policy_edge_node_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_node_replace_member, opts)
      data
    end

    # Replace the policy edge node at the specified member-index in the edge-cluster
    # Replace the Policy Edge Node present at the specified member-index in the edge-cluster. This is a disruptive action. This will move all the Interfaces(uplink and routerLink) hosted on the old Policy Edge Node to the new Policy Edge Node. The same Policy Edge Node cannot be present as a member of any edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_node_replace_member 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeCluster, Fixnum, Hash)>] PolicyEdgeCluster data, response status code and response headers
    def replace_policy_edge_node_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_node_replace_member, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.replace_policy_edge_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling InfraApi.replace_policy_edge_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling InfraApi.replace_policy_edge_node"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling InfraApi.replace_policy_edge_node"
      end
      # verify the required parameter 'policy_edge_node_replace_member' is set
      if @api_client.config.client_side_validation && policy_edge_node_replace_member.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_node_replace_member' when calling InfraApi.replace_policy_edge_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/action/replace-edge-transport-node'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_node_replace_member)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#replace_policy_edge_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Self-Sign the CSR
    # Self-signs the previously generated CSR. This action is similar to the import certificate action, but instead of using a public certificate signed by a CA, the self_sign POST action uses a certificate that is signed with NSX's own private key. The maximum validity limit for non-CA certificates is 825 days, except that values of 3,650 and 36,500 days are allowed. No limit is set for CA certificates. 
    # @param csr_id CSR this certificate is associated with
    # @param days_valid Number of days the certificate will be valid, default 825 days
    # @param [Hash] opts the optional parameters
    # @return [TlsCertificate]
    def self_sign_tls_certificate(csr_id, days_valid, opts = {})
      data, _status_code, _headers = self_sign_tls_certificate_with_http_info(csr_id, days_valid, opts)
      data
    end

    # Self-Sign the CSR
    # Self-signs the previously generated CSR. This action is similar to the import certificate action, but instead of using a public certificate signed by a CA, the self_sign POST action uses a certificate that is signed with NSX&#39;s own private key. The maximum validity limit for non-CA certificates is 825 days, except that values of 3,650 and 36,500 days are allowed. No limit is set for CA certificates. 
    # @param csr_id CSR this certificate is associated with
    # @param days_valid Number of days the certificate will be valid, default 825 days
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def self_sign_tls_certificate_with_http_info(csr_id, days_valid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.self_sign_tls_certificate ...'
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling InfraApi.self_sign_tls_certificate"
      end
      # verify the required parameter 'days_valid' is set
      if @api_client.config.client_side_validation && days_valid.nil?
        fail ArgumentError, "Missing the required parameter 'days_valid' when calling InfraApi.self_sign_tls_certificate"
      end
      # resource path
      local_var_path = '/infra/csrs/{csr-id}?action=self_sign'.sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'days_valid'] = days_valid

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#self_sign_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a domain
    # If a domain with the domain-id is not already present, create a new domain. If it already exists, update the domain including the nested groups. This is a full replace 
    # @param domain_id Domain ID
    # @param domain 
    # @param [Hash] opts the optional parameters
    # @return [Domain]
    def update_domain_for_infra(domain_id, domain, opts = {})
      data, _status_code, _headers = update_domain_for_infra_with_http_info(domain_id, domain, opts)
      data
    end

    # Create or update a domain
    # If a domain with the domain-id is not already present, create a new domain. If it already exists, update the domain including the nested groups. This is a full replace 
    # @param domain_id Domain ID
    # @param domain 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Domain, Fixnum, Hash)>] Domain data, response status code and response headers
    def update_domain_for_infra_with_http_info(domain_id, domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.update_domain_for_infra ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling InfraApi.update_domain_for_infra"
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling InfraApi.update_domain_for_infra"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Domain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#update_domain_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the infra object
    # Updates only the single infra object. This does not allow hierarchical updates of entities. 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def update_infra(infra, opts = {})
      data, _status_code, _headers = update_infra_with_http_info(infra, opts)
      data
    end

    # Update the infra object
    # Updates only the single infra object. This does not allow hierarchical updates of entities. 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def update_infra_with_http_info(infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.update_infra ...'
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling InfraApi.update_infra"
      end
      # resource path
      local_var_path = '/infra'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#update_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch an existing label object
    # Create label if not exists, otherwise take the partial updates. Note, once the label is created type attribute can not be changed. 
    # @param label_id 
    # @param policy_label 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_policy_label_for_infra(label_id, policy_label, opts = {})
      update_policy_label_for_infra_with_http_info(label_id, policy_label, opts)
      nil
    end

    # Patch an existing label object
    # Create label if not exists, otherwise take the partial updates. Note, once the label is created type attribute can not be changed. 
    # @param label_id 
    # @param policy_label 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_policy_label_for_infra_with_http_info(label_id, policy_label, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.update_policy_label_for_infra ...'
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling InfraApi.update_policy_label_for_infra"
      end
      # verify the required parameter 'policy_label' is set
      if @api_client.config.client_side_validation && policy_label.nil?
        fail ArgumentError, "Missing the required parameter 'policy_label' when calling InfraApi.update_policy_label_for_infra"
      end
      # resource path
      local_var_path = '/infra/labels/{label-id}'.sub('{' + 'label-id' + '}', label_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_label)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#update_policy_label_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload the Certificate PEM File Signed by the CA Associated with a CSR
    # Uploads the certificate authority (CA)-signed certificate. After you send the certificate request to the CA of your choice, and the CA sends back the signed certificate, you can use the upload POST action to upload the signed certificate. The upload action is similar to the import action, but the upload action allows you to directly upload the PEM-encoded file (signed certificate) provided by the CA. Like the import POST action, the upload POST action automatically deletes the associated CSR. 
    # @param csr_id ID of the CSR to read
    # @param file File to be uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Description of this resource
    # @option opts [String] :display_name Identifier to use when displaying entity in logs or GUI
    # @return [TlsCertificate]
    def upload_pem_signed_tls_certificate(csr_id, file, opts = {})
      data, _status_code, _headers = upload_pem_signed_tls_certificate_with_http_info(csr_id, file, opts)
      data
    end

    # Upload the Certificate PEM File Signed by the CA Associated with a CSR
    # Uploads the certificate authority (CA)-signed certificate. After you send the certificate request to the CA of your choice, and the CA sends back the signed certificate, you can use the upload POST action to upload the signed certificate. The upload action is similar to the import action, but the upload action allows you to directly upload the PEM-encoded file (signed certificate) provided by the CA. Like the import POST action, the upload POST action automatically deletes the associated CSR. 
    # @param csr_id ID of the CSR to read
    # @param file File to be uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Description of this resource
    # @option opts [String] :display_name Identifier to use when displaying entity in logs or GUI
    # @return [Array<(TlsCertificate, Fixnum, Hash)>] TlsCertificate data, response status code and response headers
    def upload_pem_signed_tls_certificate_with_http_info(csr_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.upload_pem_signed_tls_certificate ...'
      end
      # verify the required parameter 'csr_id' is set
      if @api_client.config.client_side_validation && csr_id.nil?
        fail ArgumentError, "Missing the required parameter 'csr_id' when calling InfraApi.upload_pem_signed_tls_certificate"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling InfraApi.upload_pem_signed_tls_certificate"
      end
      if @api_client.config.client_side_validation && !opts[:'description'].nil? && opts[:'description'].to_s.length > 1024
        fail ArgumentError, 'invalid value for "opts[:"description"]" when calling InfraApi.upload_pem_signed_tls_certificate, the character length must be smaller than or equal to 1024.'
      end

      if @api_client.config.client_side_validation && !opts[:'display_name'].nil? && opts[:'display_name'].to_s.length > 255
        fail ArgumentError, 'invalid value for "opts[:"display_name"]" when calling InfraApi.upload_pem_signed_tls_certificate, the character length must be smaller than or equal to 255.'
      end

      # resource path
      local_var_path = '/infra/csrs/{csr-id}?action=upload'.sub('{' + 'csr-id' + '}', csr_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'display_name'] = opts[:'display_name'] if !opts[:'display_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#upload_pem_signed_tls_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload a new or updated Certificate Revocation List
    # Adds or replaces a certificate revocation list (CRLs). The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. A CRL can be in the PEM X.509 format (crl_type=X509) or JSON OneCRL (crl_type=OneCRL). If crl_type is not specified, it is auto-detected based on the upload content. An X.509 CRL can contain a single CRL or multiple CRLs depending on the PEM data. - Single CRL: a single CRL is created with the given id. - Composite CRL: multiple CRLs are generated. Each of the CRL is created with an id generated based on the given id. First CRL is created with crl-id, second with crl-id-1, third with crl-id-2, etc. Differently from action=import, this method allows multi-part upload of the CRL(s). The TlsCrl resource returned in the body of the response will have an empty pem_encoded field, as it may be large. Use a GET request to retrieve the PEM-encoded CRL. 
    # @param crl_id 
    # @param file File to be uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [String] :crl_type Type of CRL (default to X509)
    # @option opts [String] :description Description of this resource
    # @option opts [String] :display_name Identifier to use when displaying entity in logs or GUI
    # @return [TlsCrl]
    def upload_tls_crl(crl_id, file, opts = {})
      data, _status_code, _headers = upload_tls_crl_with_http_info(crl_id, file, opts)
      data
    end

    # Upload a new or updated Certificate Revocation List
    # Adds or replaces a certificate revocation list (CRLs). The CRL is used to verify the client certificate status against the revocation lists published by the CA. For this reason, the administrator needs to add the CRL in certificate repository as well. A CRL can be in the PEM X.509 format (crl_type&#x3D;X509) or JSON OneCRL (crl_type&#x3D;OneCRL). If crl_type is not specified, it is auto-detected based on the upload content. An X.509 CRL can contain a single CRL or multiple CRLs depending on the PEM data. - Single CRL: a single CRL is created with the given id. - Composite CRL: multiple CRLs are generated. Each of the CRL is created with an id generated based on the given id. First CRL is created with crl-id, second with crl-id-1, third with crl-id-2, etc. Differently from action&#x3D;import, this method allows multi-part upload of the CRL(s). The TlsCrl resource returned in the body of the response will have an empty pem_encoded field, as it may be large. Use a GET request to retrieve the PEM-encoded CRL. 
    # @param crl_id 
    # @param file File to be uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [String] :crl_type Type of CRL
    # @option opts [String] :description Description of this resource
    # @option opts [String] :display_name Identifier to use when displaying entity in logs or GUI
    # @return [Array<(TlsCrl, Fixnum, Hash)>] TlsCrl data, response status code and response headers
    def upload_tls_crl_with_http_info(crl_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfraApi.upload_tls_crl ...'
      end
      # verify the required parameter 'crl_id' is set
      if @api_client.config.client_side_validation && crl_id.nil?
        fail ArgumentError, "Missing the required parameter 'crl_id' when calling InfraApi.upload_tls_crl"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling InfraApi.upload_tls_crl"
      end
      if @api_client.config.client_side_validation && opts[:'crl_type'] && !['OneCRL', 'X509'].include?(opts[:'crl_type'])
        fail ArgumentError, 'invalid value for "crl_type", must be one of OneCRL, X509'
      end
      if @api_client.config.client_side_validation && !opts[:'description'].nil? && opts[:'description'].to_s.length > 1024
        fail ArgumentError, 'invalid value for "opts[:"description"]" when calling InfraApi.upload_tls_crl, the character length must be smaller than or equal to 1024.'
      end

      if @api_client.config.client_side_validation && !opts[:'display_name'].nil? && opts[:'display_name'].to_s.length > 255
        fail ArgumentError, 'invalid value for "opts[:"display_name"]" when calling InfraApi.upload_tls_crl, the character length must be smaller than or equal to 255.'
      end

      # resource path
      local_var_path = '/infra/crls/{crl-id}?action=upload'.sub('{' + 'crl-id' + '}', crl_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'crl_type'] = opts[:'crl_type'] if !opts[:'crl_type'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'display_name'] = opts[:'display_name'] if !opts[:'display_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsCrl')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfraApi#upload_tls_crl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
