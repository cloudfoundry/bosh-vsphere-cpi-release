=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class DNSApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete DNS configuration for tier-0 instance
    # Delete DNS configuration for tier-0 instance
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_dns_forwarder_on_tier0(tier_0_id, opts = {})
      delete_policy_dns_forwarder_on_tier0_with_http_info(tier_0_id, opts)
      nil
    end

    # Delete DNS configuration for tier-0 instance
    # Delete DNS configuration for tier-0 instance
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_dns_forwarder_on_tier0_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.delete_policy_dns_forwarder_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling DNSApi.delete_policy_dns_forwarder_on_tier0"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/dns-forwarder'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#delete_policy_dns_forwarder_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DNS configuration for tier-1 instance
    # Delete DNS configuration for tier-1 instance
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_dns_forwarder_on_tier1(tier_1_id, opts = {})
      delete_policy_dns_forwarder_on_tier1_with_http_info(tier_1_id, opts)
      nil
    end

    # Delete DNS configuration for tier-1 instance
    # Delete DNS configuration for tier-1 instance
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_dns_forwarder_on_tier1_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.delete_policy_dns_forwarder_on_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.delete_policy_dns_forwarder_on_tier1"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#delete_policy_dns_forwarder_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the DNS Forwarder Zone
    # Delete the DNS Forwarder Zone
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_dns_forwarder_zone(dns_forwarder_zone_id, opts = {})
      delete_policy_dns_forwarder_zone_with_http_info(dns_forwarder_zone_id, opts)
      nil
    end

    # Delete the DNS Forwarder Zone
    # Delete the DNS Forwarder Zone
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_dns_forwarder_zone_with_http_info(dns_forwarder_zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.delete_policy_dns_forwarder_zone ...'
      end
      # verify the required parameter 'dns_forwarder_zone_id' is set
      if @api_client.config.client_side_validation && dns_forwarder_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_forwarder_zone_id' when calling DNSApi.delete_policy_dns_forwarder_zone"
      end
      # resource path
      local_var_path = '/infra/dns-forwarder-zones/{dns-forwarder-zone-id}'.sub('{' + 'dns-forwarder-zone-id' + '}', dns_forwarder_zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#delete_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tier-0 DNS forwarder statistics
    # Get statistics of tier-0 DNS forwarder. - no enforcement point path specified: Statistics will be evaluated on each enforcement point. - {enforcement_point_path}: Statistics are evaluated only on the given enforcement point. 
    # @param tier_0_id Tier-0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateDNSForwarderStatistics]
    def get_tier0_dns_forwarder_statistics(tier_0_id, opts = {})
      data, _status_code, _headers = get_tier0_dns_forwarder_statistics_with_http_info(tier_0_id, opts)
      data
    end

    # Get tier-0 DNS forwarder statistics
    # Get statistics of tier-0 DNS forwarder. - no enforcement point path specified: Statistics will be evaluated on each enforcement point. - {enforcement_point_path}: Statistics are evaluated only on the given enforcement point. 
    # @param tier_0_id Tier-0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateDNSForwarderStatistics, Fixnum, Hash)>] AggregateDNSForwarderStatistics data, response status code and response headers
    def get_tier0_dns_forwarder_statistics_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.get_tier0_dns_forwarder_statistics ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling DNSApi.get_tier0_dns_forwarder_statistics"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/dns-forwarder/statistics'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateDNSForwarderStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#get_tier0_dns_forwarder_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current status of tier-0 DNS forwarder
    # Get current status of tier-0 DNS forwarder. - no enforcement point path specified: Status will be evaluated on each enforcement point. - {enforcement_point_path}: Status will be evaluated only on the given enforcement point. 
    # @param tier_0_id Tier-0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateDNSForwarderStatus]
    def get_tier0_dns_forwarder_status(tier_0_id, opts = {})
      data, _status_code, _headers = get_tier0_dns_forwarder_status_with_http_info(tier_0_id, opts)
      data
    end

    # Get current status of tier-0 DNS forwarder
    # Get current status of tier-0 DNS forwarder. - no enforcement point path specified: Status will be evaluated on each enforcement point. - {enforcement_point_path}: Status will be evaluated only on the given enforcement point. 
    # @param tier_0_id Tier-0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateDNSForwarderStatus, Fixnum, Hash)>] AggregateDNSForwarderStatus data, response status code and response headers
    def get_tier0_dns_forwarder_status_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.get_tier0_dns_forwarder_status ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling DNSApi.get_tier0_dns_forwarder_status"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/dns-forwarder/status'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateDNSForwarderStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#get_tier0_dns_forwarder_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tier-1 DNS forwarder statistics
    # Get statistics of tier-1 DNS forwarder. - no enforcement point path specified: Statistics will be evaluated on each enforcement point. - {enforcement_point_path}: Statistics are evaluated only on the given enforcement point. 
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateDNSForwarderStatistics]
    def get_tier1_dns_forwarder_statistics(tier_1_id, opts = {})
      data, _status_code, _headers = get_tier1_dns_forwarder_statistics_with_http_info(tier_1_id, opts)
      data
    end

    # Get tier-1 DNS forwarder statistics
    # Get statistics of tier-1 DNS forwarder. - no enforcement point path specified: Statistics will be evaluated on each enforcement point. - {enforcement_point_path}: Statistics are evaluated only on the given enforcement point. 
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateDNSForwarderStatistics, Fixnum, Hash)>] AggregateDNSForwarderStatistics data, response status code and response headers
    def get_tier1_dns_forwarder_statistics_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.get_tier1_dns_forwarder_statistics ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.get_tier1_dns_forwarder_statistics"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/dns-forwarder/statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateDNSForwarderStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#get_tier1_dns_forwarder_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current status of tier-1 DNS forwarder
    # Get current status of tier-1 DNS forwarder. - no enforcement point path specified: Status will be evaluated on each enforcement point. - {enforcement_point_path}: Status will be evaluated only on the given enforcement point. 
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateDNSForwarderStatus]
    def get_tier1_dns_forwarder_status(tier_1_id, opts = {})
      data, _status_code, _headers = get_tier1_dns_forwarder_status_with_http_info(tier_1_id, opts)
      data
    end

    # Get current status of tier-1 DNS forwarder
    # Get current status of tier-1 DNS forwarder. - no enforcement point path specified: Status will be evaluated on each enforcement point. - {enforcement_point_path}: Status will be evaluated only on the given enforcement point. 
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateDNSForwarderStatus, Fixnum, Hash)>] AggregateDNSForwarderStatus data, response status code and response headers
    def get_tier1_dns_forwarder_status_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.get_tier1_dns_forwarder_status ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.get_tier1_dns_forwarder_status"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/dns-forwarder/status'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateDNSForwarderStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#get_tier1_dns_forwarder_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tier-0 DNS forwarder statistics
    # Get statistics of tier-0 DNS forwarder. - no enforcement point path specified: Statistics will be evaluated on each enforcement point. - {enforcement_point_path}: Statistics are evaluated only on the given enforcement point. 
    # @param tier_0_id Tier-0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateDNSForwarderStatistics]
    def global_infra_get_tier0_dns_forwarder_statistics(tier_0_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier0_dns_forwarder_statistics_with_http_info(tier_0_id, opts)
      data
    end

    # Get tier-0 DNS forwarder statistics
    # Get statistics of tier-0 DNS forwarder. - no enforcement point path specified: Statistics will be evaluated on each enforcement point. - {enforcement_point_path}: Statistics are evaluated only on the given enforcement point. 
    # @param tier_0_id Tier-0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateDNSForwarderStatistics, Fixnum, Hash)>] AggregateDNSForwarderStatistics data, response status code and response headers
    def global_infra_get_tier0_dns_forwarder_statistics_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.global_infra_get_tier0_dns_forwarder_statistics ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling DNSApi.global_infra_get_tier0_dns_forwarder_statistics"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/dns-forwarder/statistics'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateDNSForwarderStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#global_infra_get_tier0_dns_forwarder_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current status of tier-0 DNS forwarder
    # Get current status of tier-0 DNS forwarder. - no enforcement point path specified: Status will be evaluated on each enforcement point. - {enforcement_point_path}: Status will be evaluated only on the given enforcement point. 
    # @param tier_0_id Tier-0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateDNSForwarderStatus]
    def global_infra_get_tier0_dns_forwarder_status(tier_0_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier0_dns_forwarder_status_with_http_info(tier_0_id, opts)
      data
    end

    # Get current status of tier-0 DNS forwarder
    # Get current status of tier-0 DNS forwarder. - no enforcement point path specified: Status will be evaluated on each enforcement point. - {enforcement_point_path}: Status will be evaluated only on the given enforcement point. 
    # @param tier_0_id Tier-0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateDNSForwarderStatus, Fixnum, Hash)>] AggregateDNSForwarderStatus data, response status code and response headers
    def global_infra_get_tier0_dns_forwarder_status_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.global_infra_get_tier0_dns_forwarder_status ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling DNSApi.global_infra_get_tier0_dns_forwarder_status"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/dns-forwarder/status'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateDNSForwarderStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#global_infra_get_tier0_dns_forwarder_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tier-1 DNS forwarder statistics
    # Get statistics of tier-1 DNS forwarder. - no enforcement point path specified: Statistics will be evaluated on each enforcement point. - {enforcement_point_path}: Statistics are evaluated only on the given enforcement point. 
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateDNSForwarderStatistics]
    def global_infra_get_tier1_dns_forwarder_statistics(tier_1_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier1_dns_forwarder_statistics_with_http_info(tier_1_id, opts)
      data
    end

    # Get tier-1 DNS forwarder statistics
    # Get statistics of tier-1 DNS forwarder. - no enforcement point path specified: Statistics will be evaluated on each enforcement point. - {enforcement_point_path}: Statistics are evaluated only on the given enforcement point. 
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateDNSForwarderStatistics, Fixnum, Hash)>] AggregateDNSForwarderStatistics data, response status code and response headers
    def global_infra_get_tier1_dns_forwarder_statistics_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.global_infra_get_tier1_dns_forwarder_statistics ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.global_infra_get_tier1_dns_forwarder_statistics"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/dns-forwarder/statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateDNSForwarderStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#global_infra_get_tier1_dns_forwarder_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current status of tier-1 DNS forwarder
    # Get current status of tier-1 DNS forwarder. - no enforcement point path specified: Status will be evaluated on each enforcement point. - {enforcement_point_path}: Status will be evaluated only on the given enforcement point. 
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateDNSForwarderStatus]
    def global_infra_get_tier1_dns_forwarder_status(tier_1_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier1_dns_forwarder_status_with_http_info(tier_1_id, opts)
      data
    end

    # Get current status of tier-1 DNS forwarder
    # Get current status of tier-1 DNS forwarder. - no enforcement point path specified: Status will be evaluated on each enforcement point. - {enforcement_point_path}: Status will be evaluated only on the given enforcement point. 
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateDNSForwarderStatus, Fixnum, Hash)>] AggregateDNSForwarderStatus data, response status code and response headers
    def global_infra_get_tier1_dns_forwarder_status_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.global_infra_get_tier1_dns_forwarder_status ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.global_infra_get_tier1_dns_forwarder_status"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/dns-forwarder/status'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateDNSForwarderStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#global_infra_get_tier1_dns_forwarder_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Dns Forwarder Zones
    # Paginated list of all Dns Forwarder Zones 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyDnsForwarderZoneListResult]
    def global_infra_list_policy_dns_forwarder_zone(opts = {})
      data, _status_code, _headers = global_infra_list_policy_dns_forwarder_zone_with_http_info(opts)
      data
    end

    # List Dns Forwarder Zones
    # Paginated list of all Dns Forwarder Zones 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyDnsForwarderZoneListResult, Fixnum, Hash)>] PolicyDnsForwarderZoneListResult data, response status code and response headers
    def global_infra_list_policy_dns_forwarder_zone_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.global_infra_list_policy_dns_forwarder_zone ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DNSApi.global_infra_list_policy_dns_forwarder_zone, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DNSApi.global_infra_list_policy_dns_forwarder_zone, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dns-forwarder-zones'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarderZoneListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#global_infra_list_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resolve a given address via the dns forwarder at Tier0
    # Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). If enforcement point is specified, then DNS forwarder nslookup answer will get fetched from specified enforcement point. Otherwise from all enforcement points. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP address or FQDN for nslookup
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregatePolicyDnsAnswer]
    def global_infra_lookup_address_via_tier0_dns_forwarder(tier_0_id, opts = {})
      data, _status_code, _headers = global_infra_lookup_address_via_tier0_dns_forwarder_with_http_info(tier_0_id, opts)
      data
    end

    # Resolve a given address via the dns forwarder at Tier0
    # Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). If enforcement point is specified, then DNS forwarder nslookup answer will get fetched from specified enforcement point. Otherwise from all enforcement points. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP address or FQDN for nslookup
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregatePolicyDnsAnswer, Fixnum, Hash)>] AggregatePolicyDnsAnswer data, response status code and response headers
    def global_infra_lookup_address_via_tier0_dns_forwarder_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.global_infra_lookup_address_via_tier0_dns_forwarder ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling DNSApi.global_infra_lookup_address_via_tier0_dns_forwarder"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/dns-forwarder/nslookup'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregatePolicyDnsAnswer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#global_infra_lookup_address_via_tier0_dns_forwarder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resolve a given address via the dns forwarder at Tier1
    # Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). If enforcement point is specified, then DNS forwarder nslookup answer will get fetched from specified enforcement point. Otherwise from all enforcement points. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP address or FQDN for nslookup
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregatePolicyDnsAnswer]
    def global_infra_lookup_address_via_tier1_dns_forwarder(tier_1_id, opts = {})
      data, _status_code, _headers = global_infra_lookup_address_via_tier1_dns_forwarder_with_http_info(tier_1_id, opts)
      data
    end

    # Resolve a given address via the dns forwarder at Tier1
    # Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). If enforcement point is specified, then DNS forwarder nslookup answer will get fetched from specified enforcement point. Otherwise from all enforcement points. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP address or FQDN for nslookup
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregatePolicyDnsAnswer, Fixnum, Hash)>] AggregatePolicyDnsAnswer data, response status code and response headers
    def global_infra_lookup_address_via_tier1_dns_forwarder_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.global_infra_lookup_address_via_tier1_dns_forwarder ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.global_infra_lookup_address_via_tier1_dns_forwarder"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/dns-forwarder/nslookup'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregatePolicyDnsAnswer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#global_infra_lookup_address_via_tier1_dns_forwarder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Perform the specified DNS forwarder action
    # Perform the specified action for Tier0 DNS forwarder on specified enforcement point. 
    # @param tier_0_id 
    # @param action An action to be performed for DNS forwarder on EP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [nil]
    def global_infra_perform_ep_action_for_dns_forwarder_at_tier0(tier_0_id, action, opts = {})
      global_infra_perform_ep_action_for_dns_forwarder_at_tier0_with_http_info(tier_0_id, action, opts)
      nil
    end

    # Perform the specified DNS forwarder action
    # Perform the specified action for Tier0 DNS forwarder on specified enforcement point. 
    # @param tier_0_id 
    # @param action An action to be performed for DNS forwarder on EP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_perform_ep_action_for_dns_forwarder_at_tier0_with_http_info(tier_0_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.global_infra_perform_ep_action_for_dns_forwarder_at_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling DNSApi.global_infra_perform_ep_action_for_dns_forwarder_at_tier0"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling DNSApi.global_infra_perform_ep_action_for_dns_forwarder_at_tier0"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['clear_cache'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of clear_cache"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/dns-forwarder'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#global_infra_perform_ep_action_for_dns_forwarder_at_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Perform the specified DNS forwarder action
    # Perform the specified action for Tier0 DNS forwarder on specified enforcement point. 
    # @param tier_1_id 
    # @param action An action to be performed for DNS forwarder on EP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [nil]
    def global_infra_perform_ep_action_for_dns_forwarder_at_tier1(tier_1_id, action, opts = {})
      global_infra_perform_ep_action_for_dns_forwarder_at_tier1_with_http_info(tier_1_id, action, opts)
      nil
    end

    # Perform the specified DNS forwarder action
    # Perform the specified action for Tier0 DNS forwarder on specified enforcement point. 
    # @param tier_1_id 
    # @param action An action to be performed for DNS forwarder on EP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_perform_ep_action_for_dns_forwarder_at_tier1_with_http_info(tier_1_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.global_infra_perform_ep_action_for_dns_forwarder_at_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.global_infra_perform_ep_action_for_dns_forwarder_at_tier1"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling DNSApi.global_infra_perform_ep_action_for_dns_forwarder_at_tier1"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['clear_cache'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of clear_cache"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#global_infra_perform_ep_action_for_dns_forwarder_at_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries (default to 100)
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [PolicyDnsFailedQueries]
    def global_infra_read_failed_dns_queries_on_tier0(tier_0_id, opts = {})
      data, _status_code, _headers = global_infra_read_failed_dns_queries_on_tier0_with_http_info(tier_0_id, opts)
      data
    end

    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(PolicyDnsFailedQueries, Fixnum, Hash)>] PolicyDnsFailedQueries data, response status code and response headers
    def global_infra_read_failed_dns_queries_on_tier0_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.global_infra_read_failed_dns_queries_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling DNSApi.global_infra_read_failed_dns_queries_on_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling DNSApi.global_infra_read_failed_dns_queries_on_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] < 1
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling DNSApi.global_infra_read_failed_dns_queries_on_tier0, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/dns-forwarder/failed-queries'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsFailedQueries')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#global_infra_read_failed_dns_queries_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries (default to 100)
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [PolicyDnsFailedQueries]
    def global_infra_read_failed_dns_queries_on_tier1(tier_1_id, opts = {})
      data, _status_code, _headers = global_infra_read_failed_dns_queries_on_tier1_with_http_info(tier_1_id, opts)
      data
    end

    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(PolicyDnsFailedQueries, Fixnum, Hash)>] PolicyDnsFailedQueries data, response status code and response headers
    def global_infra_read_failed_dns_queries_on_tier1_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.global_infra_read_failed_dns_queries_on_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.global_infra_read_failed_dns_queries_on_tier1"
      end
      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling DNSApi.global_infra_read_failed_dns_queries_on_tier1, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] < 1
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling DNSApi.global_infra_read_failed_dns_queries_on_tier1, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/dns-forwarder/failed-queries'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsFailedQueries')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#global_infra_read_failed_dns_queries_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder for the given tier-0 instance
    # Read the DNS Forwarder for the given tier-0 instance
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarder]
    def global_infra_read_policy_dns_forwarder_on_tier0(tier_0_id, opts = {})
      data, _status_code, _headers = global_infra_read_policy_dns_forwarder_on_tier0_with_http_info(tier_0_id, opts)
      data
    end

    # Read the DNS Forwarder for the given tier-0 instance
    # Read the DNS Forwarder for the given tier-0 instance
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarder, Fixnum, Hash)>] PolicyDnsForwarder data, response status code and response headers
    def global_infra_read_policy_dns_forwarder_on_tier0_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.global_infra_read_policy_dns_forwarder_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling DNSApi.global_infra_read_policy_dns_forwarder_on_tier0"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/dns-forwarder'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#global_infra_read_policy_dns_forwarder_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder for the given tier-1 instance
    # Read the DNS Forwarder for the given tier-1 instance
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarder]
    def global_infra_read_policy_dns_forwarder_on_tier1(tier_1_id, opts = {})
      data, _status_code, _headers = global_infra_read_policy_dns_forwarder_on_tier1_with_http_info(tier_1_id, opts)
      data
    end

    # Read the DNS Forwarder for the given tier-1 instance
    # Read the DNS Forwarder for the given tier-1 instance
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarder, Fixnum, Hash)>] PolicyDnsForwarder data, response status code and response headers
    def global_infra_read_policy_dns_forwarder_on_tier1_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.global_infra_read_policy_dns_forwarder_on_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.global_infra_read_policy_dns_forwarder_on_tier1"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#global_infra_read_policy_dns_forwarder_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder Zone
    # Read the DNS Forwarder Zone
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarderZone]
    def global_infra_read_policy_dns_forwarder_zone(dns_forwarder_zone_id, opts = {})
      data, _status_code, _headers = global_infra_read_policy_dns_forwarder_zone_with_http_info(dns_forwarder_zone_id, opts)
      data
    end

    # Read the DNS Forwarder Zone
    # Read the DNS Forwarder Zone
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarderZone, Fixnum, Hash)>] PolicyDnsForwarderZone data, response status code and response headers
    def global_infra_read_policy_dns_forwarder_zone_with_http_info(dns_forwarder_zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.global_infra_read_policy_dns_forwarder_zone ...'
      end
      # verify the required parameter 'dns_forwarder_zone_id' is set
      if @api_client.config.client_side_validation && dns_forwarder_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_forwarder_zone_id' when calling DNSApi.global_infra_read_policy_dns_forwarder_zone"
      end
      # resource path
      local_var_path = '/global-infra/dns-forwarder-zones/{dns-forwarder-zone-id}'.sub('{' + 'dns-forwarder-zone-id' + '}', dns_forwarder_zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarderZone')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#global_infra_read_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Dns Forwarder Zones
    # Paginated list of all Dns Forwarder Zones 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyDnsForwarderZoneListResult]
    def list_policy_dns_forwarder_zone(opts = {})
      data, _status_code, _headers = list_policy_dns_forwarder_zone_with_http_info(opts)
      data
    end

    # List Dns Forwarder Zones
    # Paginated list of all Dns Forwarder Zones 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyDnsForwarderZoneListResult, Fixnum, Hash)>] PolicyDnsForwarderZoneListResult data, response status code and response headers
    def list_policy_dns_forwarder_zone_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.list_policy_dns_forwarder_zone ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DNSApi.list_policy_dns_forwarder_zone, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DNSApi.list_policy_dns_forwarder_zone, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dns-forwarder-zones'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarderZoneListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#list_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resolve a given address via the dns forwarder at Tier0
    # Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). If enforcement point is specified, then DNS forwarder nslookup answer will get fetched from specified enforcement point. Otherwise from all enforcement points. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP address or FQDN for nslookup
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregatePolicyDnsAnswer]
    def lookup_address_via_tier0_dns_forwarder(tier_0_id, opts = {})
      data, _status_code, _headers = lookup_address_via_tier0_dns_forwarder_with_http_info(tier_0_id, opts)
      data
    end

    # Resolve a given address via the dns forwarder at Tier0
    # Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). If enforcement point is specified, then DNS forwarder nslookup answer will get fetched from specified enforcement point. Otherwise from all enforcement points. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP address or FQDN for nslookup
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregatePolicyDnsAnswer, Fixnum, Hash)>] AggregatePolicyDnsAnswer data, response status code and response headers
    def lookup_address_via_tier0_dns_forwarder_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.lookup_address_via_tier0_dns_forwarder ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling DNSApi.lookup_address_via_tier0_dns_forwarder"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/dns-forwarder/nslookup'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregatePolicyDnsAnswer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#lookup_address_via_tier0_dns_forwarder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resolve a given address via the dns forwarder at Tier1
    # Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). If enforcement point is specified, then DNS forwarder nslookup answer will get fetched from specified enforcement point. Otherwise from all enforcement points. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP address or FQDN for nslookup
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregatePolicyDnsAnswer]
    def lookup_address_via_tier1_dns_forwarder(tier_1_id, opts = {})
      data, _status_code, _headers = lookup_address_via_tier1_dns_forwarder_with_http_info(tier_1_id, opts)
      data
    end

    # Resolve a given address via the dns forwarder at Tier1
    # Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). If enforcement point is specified, then DNS forwarder nslookup answer will get fetched from specified enforcement point. Otherwise from all enforcement points. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP address or FQDN for nslookup
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregatePolicyDnsAnswer, Fixnum, Hash)>] AggregatePolicyDnsAnswer data, response status code and response headers
    def lookup_address_via_tier1_dns_forwarder_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.lookup_address_via_tier1_dns_forwarder ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.lookup_address_via_tier1_dns_forwarder"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/dns-forwarder/nslookup'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregatePolicyDnsAnswer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#lookup_address_via_tier1_dns_forwarder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DNS configuration for tier-1 instance
    # Delete DNS configuration for tier-1 instance
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_on_tier1(org_id, project_id, tier_1_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_on_tier1_with_http_info(org_id, project_id, tier_1_id, opts)
      nil
    end

    # Delete DNS configuration for tier-1 instance
    # Delete DNS configuration for tier-1 instance
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_on_tier1_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_on_tier1 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_on_tier1"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the DNS Forwarder Zone
    # Delete the DNS Forwarder Zone
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_zone(org_id, project_id, dns_forwarder_zone_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_zone_with_http_info(org_id, project_id, dns_forwarder_zone_id, opts)
      nil
    end

    # Delete the DNS Forwarder Zone
    # Delete the DNS Forwarder Zone
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_zone_with_http_info(org_id, project_id, dns_forwarder_zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_zone ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'dns_forwarder_zone_id' is set
      if @api_client.config.client_side_validation && dns_forwarder_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_forwarder_zone_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_zone"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dns-forwarder-zones/{dns-forwarder-zone-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dns-forwarder-zone-id' + '}', dns_forwarder_zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#orgs_org_id_projects_project_id_infra_delete_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tier-1 DNS forwarder statistics
    # Get statistics of tier-1 DNS forwarder. - no enforcement point path specified: Statistics will be evaluated on each enforcement point. - {enforcement_point_path}: Statistics are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateDNSForwarderStatistics]
    def orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_statistics(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_statistics_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # Get tier-1 DNS forwarder statistics
    # Get statistics of tier-1 DNS forwarder. - no enforcement point path specified: Statistics will be evaluated on each enforcement point. - {enforcement_point_path}: Statistics are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateDNSForwarderStatistics, Fixnum, Hash)>] AggregateDNSForwarderStatistics data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_statistics_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_statistics"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/dns-forwarder/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateDNSForwarderStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current status of tier-1 DNS forwarder
    # Get current status of tier-1 DNS forwarder. - no enforcement point path specified: Status will be evaluated on each enforcement point. - {enforcement_point_path}: Status will be evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregateDNSForwarderStatus]
    def orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_status(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_status_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # Get current status of tier-1 DNS forwarder
    # Get current status of tier-1 DNS forwarder. - no enforcement point path specified: Status will be evaluated on each enforcement point. - {enforcement_point_path}: Status will be evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregateDNSForwarderStatus, Fixnum, Hash)>] AggregateDNSForwarderStatus data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_status_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_status"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_status"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/dns-forwarder/status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateDNSForwarderStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#orgs_org_id_projects_project_id_infra_get_tier1_dns_forwarder_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Dns Forwarder Zones
    # Paginated list of all Dns Forwarder Zones 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyDnsForwarderZoneListResult]
    def orgs_org_id_projects_project_id_infra_list_policy_dns_forwarder_zone(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_policy_dns_forwarder_zone_with_http_info(org_id, project_id, opts)
      data
    end

    # List Dns Forwarder Zones
    # Paginated list of all Dns Forwarder Zones 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyDnsForwarderZoneListResult, Fixnum, Hash)>] PolicyDnsForwarderZoneListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_policy_dns_forwarder_zone_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.orgs_org_id_projects_project_id_infra_list_policy_dns_forwarder_zone ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_list_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_list_policy_dns_forwarder_zone"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DNSApi.orgs_org_id_projects_project_id_infra_list_policy_dns_forwarder_zone, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DNSApi.orgs_org_id_projects_project_id_infra_list_policy_dns_forwarder_zone, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dns-forwarder-zones'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarderZoneListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#orgs_org_id_projects_project_id_infra_list_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resolve a given address via the dns forwarder at Tier1
    # Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). If enforcement point is specified, then DNS forwarder nslookup answer will get fetched from specified enforcement point. Otherwise from all enforcement points. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP address or FQDN for nslookup
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [AggregatePolicyDnsAnswer]
    def orgs_org_id_projects_project_id_infra_lookup_address_via_tier1_dns_forwarder(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_lookup_address_via_tier1_dns_forwarder_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # Resolve a given address via the dns forwarder at Tier1
    # Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s). If enforcement point is specified, then DNS forwarder nslookup answer will get fetched from specified enforcement point. Otherwise from all enforcement points. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP address or FQDN for nslookup
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(AggregatePolicyDnsAnswer, Fixnum, Hash)>] AggregatePolicyDnsAnswer data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_lookup_address_via_tier1_dns_forwarder_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.orgs_org_id_projects_project_id_infra_lookup_address_via_tier1_dns_forwarder ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_lookup_address_via_tier1_dns_forwarder"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_lookup_address_via_tier1_dns_forwarder"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_lookup_address_via_tier1_dns_forwarder"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/dns-forwarder/nslookup'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregatePolicyDnsAnswer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#orgs_org_id_projects_project_id_infra_lookup_address_via_tier1_dns_forwarder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the DNS Forwarder
    # Create or update the DNS Forwarder
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_on_tier1(org_id, project_id, tier_1_id, policy_dns_forwarder, opts = {})
      orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_on_tier1_with_http_info(org_id, project_id, tier_1_id, policy_dns_forwarder, opts)
      nil
    end

    # Create or update the DNS Forwarder
    # Create or update the DNS Forwarder
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_on_tier1_with_http_info(org_id, project_id, tier_1_id, policy_dns_forwarder, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_on_tier1 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'policy_dns_forwarder' is set
      if @api_client.config.client_side_validation && policy_dns_forwarder.nil?
        fail ArgumentError, "Missing the required parameter 'policy_dns_forwarder' when calling DNSApi.orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_on_tier1"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_dns_forwarder)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the DNS Forwarder Zone
    # Create or update the DNS Forwarder Zone
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param policy_dns_forwarder_zone 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_zone(org_id, project_id, dns_forwarder_zone_id, policy_dns_forwarder_zone, opts = {})
      orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_zone_with_http_info(org_id, project_id, dns_forwarder_zone_id, policy_dns_forwarder_zone, opts)
      nil
    end

    # Create or update the DNS Forwarder Zone
    # Create or update the DNS Forwarder Zone
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param policy_dns_forwarder_zone 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_zone_with_http_info(org_id, project_id, dns_forwarder_zone_id, policy_dns_forwarder_zone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_zone ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'dns_forwarder_zone_id' is set
      if @api_client.config.client_side_validation && dns_forwarder_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_forwarder_zone_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'policy_dns_forwarder_zone' is set
      if @api_client.config.client_side_validation && policy_dns_forwarder_zone.nil?
        fail ArgumentError, "Missing the required parameter 'policy_dns_forwarder_zone' when calling DNSApi.orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_zone"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dns-forwarder-zones/{dns-forwarder-zone-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dns-forwarder-zone-id' + '}', dns_forwarder_zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_dns_forwarder_zone)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#orgs_org_id_projects_project_id_infra_patch_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Perform the specified DNS forwarder action
    # Perform the specified action for Tier0 DNS forwarder on specified enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param action An action to be performed for DNS forwarder on EP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_perform_ep_action_for_dns_forwarder_at_tier1(org_id, project_id, tier_1_id, action, opts = {})
      orgs_org_id_projects_project_id_infra_perform_ep_action_for_dns_forwarder_at_tier1_with_http_info(org_id, project_id, tier_1_id, action, opts)
      nil
    end

    # Perform the specified DNS forwarder action
    # Perform the specified action for Tier0 DNS forwarder on specified enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param action An action to be performed for DNS forwarder on EP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_perform_ep_action_for_dns_forwarder_at_tier1_with_http_info(org_id, project_id, tier_1_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.orgs_org_id_projects_project_id_infra_perform_ep_action_for_dns_forwarder_at_tier1 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_perform_ep_action_for_dns_forwarder_at_tier1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_perform_ep_action_for_dns_forwarder_at_tier1"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_perform_ep_action_for_dns_forwarder_at_tier1"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling DNSApi.orgs_org_id_projects_project_id_infra_perform_ep_action_for_dns_forwarder_at_tier1"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['clear_cache'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of clear_cache"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#orgs_org_id_projects_project_id_infra_perform_ep_action_for_dns_forwarder_at_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries (default to 100)
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [PolicyDnsFailedQueries]
    def orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier0(org_id, project_id, tier_0_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier0_with_http_info(org_id, project_id, tier_0_id, opts)
      data
    end

    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(PolicyDnsFailedQueries, Fixnum, Hash)>] PolicyDnsFailedQueries data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier0_with_http_info(org_id, project_id, tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier0 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier0"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier0"
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling DNSApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] < 1
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling DNSApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier0, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-0s/{tier-0-id}/dns-forwarder/failed-queries'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsFailedQueries')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries (default to 100)
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [PolicyDnsFailedQueries]
    def orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier1(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier1_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(PolicyDnsFailedQueries, Fixnum, Hash)>] PolicyDnsFailedQueries data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier1_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier1 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier1"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier1"
      end
      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling DNSApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier1, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] < 1
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling DNSApi.orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier1, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/dns-forwarder/failed-queries'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsFailedQueries')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#orgs_org_id_projects_project_id_infra_read_failed_dns_queries_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder for the given tier-1 instance
    # Read the DNS Forwarder for the given tier-1 instance
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarder]
    def orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_on_tier1(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_on_tier1_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # Read the DNS Forwarder for the given tier-1 instance
    # Read the DNS Forwarder for the given tier-1 instance
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarder, Fixnum, Hash)>] PolicyDnsForwarder data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_on_tier1_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_on_tier1 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_on_tier1"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder Zone
    # Read the DNS Forwarder Zone
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarderZone]
    def orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_zone(org_id, project_id, dns_forwarder_zone_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_zone_with_http_info(org_id, project_id, dns_forwarder_zone_id, opts)
      data
    end

    # Read the DNS Forwarder Zone
    # Read the DNS Forwarder Zone
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarderZone, Fixnum, Hash)>] PolicyDnsForwarderZone data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_zone_with_http_info(org_id, project_id, dns_forwarder_zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_zone ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'dns_forwarder_zone_id' is set
      if @api_client.config.client_side_validation && dns_forwarder_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_forwarder_zone_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_zone"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dns-forwarder-zones/{dns-forwarder-zone-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dns-forwarder-zone-id' + '}', dns_forwarder_zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarderZone')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#orgs_org_id_projects_project_id_infra_read_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the DNS Forwarder
    # Create or update the DNS Forwarder
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarder]
    def orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_on_tier1(org_id, project_id, tier_1_id, policy_dns_forwarder, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_on_tier1_with_http_info(org_id, project_id, tier_1_id, policy_dns_forwarder, opts)
      data
    end

    # Create or update the DNS Forwarder
    # Create or update the DNS Forwarder
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id Tier-1 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarder, Fixnum, Hash)>] PolicyDnsForwarder data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_on_tier1_with_http_info(org_id, project_id, tier_1_id, policy_dns_forwarder, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_on_tier1 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'policy_dns_forwarder' is set
      if @api_client.config.client_side_validation && policy_dns_forwarder.nil?
        fail ArgumentError, "Missing the required parameter 'policy_dns_forwarder' when calling DNSApi.orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_on_tier1"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_dns_forwarder)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the DNS Forwarder Zone
    # Create or update the DNS Forwarder Zone
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param policy_dns_forwarder_zone 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarderZone]
    def orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_zone(org_id, project_id, dns_forwarder_zone_id, policy_dns_forwarder_zone, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_zone_with_http_info(org_id, project_id, dns_forwarder_zone_id, policy_dns_forwarder_zone, opts)
      data
    end

    # Create or update the DNS Forwarder Zone
    # Create or update the DNS Forwarder Zone
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param policy_dns_forwarder_zone 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarderZone, Fixnum, Hash)>] PolicyDnsForwarderZone data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_zone_with_http_info(org_id, project_id, dns_forwarder_zone_id, policy_dns_forwarder_zone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_zone ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'dns_forwarder_zone_id' is set
      if @api_client.config.client_side_validation && dns_forwarder_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_forwarder_zone_id' when calling DNSApi.orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'policy_dns_forwarder_zone' is set
      if @api_client.config.client_side_validation && policy_dns_forwarder_zone.nil?
        fail ArgumentError, "Missing the required parameter 'policy_dns_forwarder_zone' when calling DNSApi.orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_zone"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dns-forwarder-zones/{dns-forwarder-zone-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dns-forwarder-zone-id' + '}', dns_forwarder_zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_dns_forwarder_zone)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarderZone')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#orgs_org_id_projects_project_id_infra_update_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the DNS Forwarder
    # Update the DNS Forwarder
    # @param tier_0_id Tier-0 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_dns_forwarder_on_tier0(tier_0_id, policy_dns_forwarder, opts = {})
      patch_policy_dns_forwarder_on_tier0_with_http_info(tier_0_id, policy_dns_forwarder, opts)
      nil
    end

    # Update the DNS Forwarder
    # Update the DNS Forwarder
    # @param tier_0_id Tier-0 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_dns_forwarder_on_tier0_with_http_info(tier_0_id, policy_dns_forwarder, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.patch_policy_dns_forwarder_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling DNSApi.patch_policy_dns_forwarder_on_tier0"
      end
      # verify the required parameter 'policy_dns_forwarder' is set
      if @api_client.config.client_side_validation && policy_dns_forwarder.nil?
        fail ArgumentError, "Missing the required parameter 'policy_dns_forwarder' when calling DNSApi.patch_policy_dns_forwarder_on_tier0"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/dns-forwarder'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_dns_forwarder)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#patch_policy_dns_forwarder_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the DNS Forwarder
    # Create or update the DNS Forwarder
    # @param tier_1_id Tier-1 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_dns_forwarder_on_tier1(tier_1_id, policy_dns_forwarder, opts = {})
      patch_policy_dns_forwarder_on_tier1_with_http_info(tier_1_id, policy_dns_forwarder, opts)
      nil
    end

    # Create or update the DNS Forwarder
    # Create or update the DNS Forwarder
    # @param tier_1_id Tier-1 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_dns_forwarder_on_tier1_with_http_info(tier_1_id, policy_dns_forwarder, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.patch_policy_dns_forwarder_on_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.patch_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'policy_dns_forwarder' is set
      if @api_client.config.client_side_validation && policy_dns_forwarder.nil?
        fail ArgumentError, "Missing the required parameter 'policy_dns_forwarder' when calling DNSApi.patch_policy_dns_forwarder_on_tier1"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_dns_forwarder)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#patch_policy_dns_forwarder_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the DNS Forwarder Zone
    # Create or update the DNS Forwarder Zone
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param policy_dns_forwarder_zone 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_dns_forwarder_zone(dns_forwarder_zone_id, policy_dns_forwarder_zone, opts = {})
      patch_policy_dns_forwarder_zone_with_http_info(dns_forwarder_zone_id, policy_dns_forwarder_zone, opts)
      nil
    end

    # Create or update the DNS Forwarder Zone
    # Create or update the DNS Forwarder Zone
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param policy_dns_forwarder_zone 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_dns_forwarder_zone_with_http_info(dns_forwarder_zone_id, policy_dns_forwarder_zone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.patch_policy_dns_forwarder_zone ...'
      end
      # verify the required parameter 'dns_forwarder_zone_id' is set
      if @api_client.config.client_side_validation && dns_forwarder_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_forwarder_zone_id' when calling DNSApi.patch_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'policy_dns_forwarder_zone' is set
      if @api_client.config.client_side_validation && policy_dns_forwarder_zone.nil?
        fail ArgumentError, "Missing the required parameter 'policy_dns_forwarder_zone' when calling DNSApi.patch_policy_dns_forwarder_zone"
      end
      # resource path
      local_var_path = '/infra/dns-forwarder-zones/{dns-forwarder-zone-id}'.sub('{' + 'dns-forwarder-zone-id' + '}', dns_forwarder_zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_dns_forwarder_zone)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#patch_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Perform the specified DNS forwarder action
    # Perform the specified action for Tier0 DNS forwarder on specified enforcement point. 
    # @param tier_0_id 
    # @param action An action to be performed for DNS forwarder on EP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [nil]
    def perform_ep_action_for_dns_forwarder_at_tier0(tier_0_id, action, opts = {})
      perform_ep_action_for_dns_forwarder_at_tier0_with_http_info(tier_0_id, action, opts)
      nil
    end

    # Perform the specified DNS forwarder action
    # Perform the specified action for Tier0 DNS forwarder on specified enforcement point. 
    # @param tier_0_id 
    # @param action An action to be performed for DNS forwarder on EP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def perform_ep_action_for_dns_forwarder_at_tier0_with_http_info(tier_0_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.perform_ep_action_for_dns_forwarder_at_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling DNSApi.perform_ep_action_for_dns_forwarder_at_tier0"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling DNSApi.perform_ep_action_for_dns_forwarder_at_tier0"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['clear_cache'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of clear_cache"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/dns-forwarder'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#perform_ep_action_for_dns_forwarder_at_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Perform the specified DNS forwarder action
    # Perform the specified action for Tier0 DNS forwarder on specified enforcement point. 
    # @param tier_1_id 
    # @param action An action to be performed for DNS forwarder on EP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [nil]
    def perform_ep_action_for_dns_forwarder_at_tier1(tier_1_id, action, opts = {})
      perform_ep_action_for_dns_forwarder_at_tier1_with_http_info(tier_1_id, action, opts)
      nil
    end

    # Perform the specified DNS forwarder action
    # Perform the specified action for Tier0 DNS forwarder on specified enforcement point. 
    # @param tier_1_id 
    # @param action An action to be performed for DNS forwarder on EP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def perform_ep_action_for_dns_forwarder_at_tier1_with_http_info(tier_1_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.perform_ep_action_for_dns_forwarder_at_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.perform_ep_action_for_dns_forwarder_at_tier1"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling DNSApi.perform_ep_action_for_dns_forwarder_at_tier1"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['clear_cache'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of clear_cache"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#perform_ep_action_for_dns_forwarder_at_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries (default to 100)
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [PolicyDnsFailedQueries]
    def read_failed_dns_queries_on_tier0(tier_0_id, opts = {})
      data, _status_code, _headers = read_failed_dns_queries_on_tier0_with_http_info(tier_0_id, opts)
      data
    end

    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(PolicyDnsFailedQueries, Fixnum, Hash)>] PolicyDnsFailedQueries data, response status code and response headers
    def read_failed_dns_queries_on_tier0_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.read_failed_dns_queries_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling DNSApi.read_failed_dns_queries_on_tier0"
      end
      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling DNSApi.read_failed_dns_queries_on_tier0, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] < 1
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling DNSApi.read_failed_dns_queries_on_tier0, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/dns-forwarder/failed-queries'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsFailedQueries')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#read_failed_dns_queries_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries (default to 100)
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed (default to /infra/sites/default/enforcement-points/default)
    # @return [PolicyDnsFailedQueries]
    def read_failed_dns_queries_on_tier1(tier_1_id, opts = {})
      data, _status_code, _headers = read_failed_dns_queries_on_tier1_with_http_info(tier_1_id, opts)
      data
    end

    # Get the recent failed DNS queries
    # Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Active/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of the failed DNS queries
    # @option opts [String] :enforcement_point_path An enforcement point path, on which the action is to be performed
    # @return [Array<(PolicyDnsFailedQueries, Fixnum, Hash)>] PolicyDnsFailedQueries data, response status code and response headers
    def read_failed_dns_queries_on_tier1_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.read_failed_dns_queries_on_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.read_failed_dns_queries_on_tier1"
      end
      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling DNSApi.read_failed_dns_queries_on_tier1, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] < 1
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling DNSApi.read_failed_dns_queries_on_tier1, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/dns-forwarder/failed-queries'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsFailedQueries')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#read_failed_dns_queries_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder for the given tier-0 instance
    # Read the DNS Forwarder for the given tier-0 instance
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarder]
    def read_policy_dns_forwarder_on_tier0(tier_0_id, opts = {})
      data, _status_code, _headers = read_policy_dns_forwarder_on_tier0_with_http_info(tier_0_id, opts)
      data
    end

    # Read the DNS Forwarder for the given tier-0 instance
    # Read the DNS Forwarder for the given tier-0 instance
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarder, Fixnum, Hash)>] PolicyDnsForwarder data, response status code and response headers
    def read_policy_dns_forwarder_on_tier0_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.read_policy_dns_forwarder_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling DNSApi.read_policy_dns_forwarder_on_tier0"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/dns-forwarder'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#read_policy_dns_forwarder_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder for the given tier-1 instance
    # Read the DNS Forwarder for the given tier-1 instance
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarder]
    def read_policy_dns_forwarder_on_tier1(tier_1_id, opts = {})
      data, _status_code, _headers = read_policy_dns_forwarder_on_tier1_with_http_info(tier_1_id, opts)
      data
    end

    # Read the DNS Forwarder for the given tier-1 instance
    # Read the DNS Forwarder for the given tier-1 instance
    # @param tier_1_id Tier-1 ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarder, Fixnum, Hash)>] PolicyDnsForwarder data, response status code and response headers
    def read_policy_dns_forwarder_on_tier1_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.read_policy_dns_forwarder_on_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.read_policy_dns_forwarder_on_tier1"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#read_policy_dns_forwarder_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the DNS Forwarder Zone
    # Read the DNS Forwarder Zone
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarderZone]
    def read_policy_dns_forwarder_zone(dns_forwarder_zone_id, opts = {})
      data, _status_code, _headers = read_policy_dns_forwarder_zone_with_http_info(dns_forwarder_zone_id, opts)
      data
    end

    # Read the DNS Forwarder Zone
    # Read the DNS Forwarder Zone
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarderZone, Fixnum, Hash)>] PolicyDnsForwarderZone data, response status code and response headers
    def read_policy_dns_forwarder_zone_with_http_info(dns_forwarder_zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.read_policy_dns_forwarder_zone ...'
      end
      # verify the required parameter 'dns_forwarder_zone_id' is set
      if @api_client.config.client_side_validation && dns_forwarder_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_forwarder_zone_id' when calling DNSApi.read_policy_dns_forwarder_zone"
      end
      # resource path
      local_var_path = '/infra/dns-forwarder-zones/{dns-forwarder-zone-id}'.sub('{' + 'dns-forwarder-zone-id' + '}', dns_forwarder_zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarderZone')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#read_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the DNS Forwarder
    # Update the DNS Forwarder
    # @param tier_0_id Tier-0 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarder]
    def update_policy_dns_forwarder_on_tier0(tier_0_id, policy_dns_forwarder, opts = {})
      data, _status_code, _headers = update_policy_dns_forwarder_on_tier0_with_http_info(tier_0_id, policy_dns_forwarder, opts)
      data
    end

    # Update the DNS Forwarder
    # Update the DNS Forwarder
    # @param tier_0_id Tier-0 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarder, Fixnum, Hash)>] PolicyDnsForwarder data, response status code and response headers
    def update_policy_dns_forwarder_on_tier0_with_http_info(tier_0_id, policy_dns_forwarder, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.update_policy_dns_forwarder_on_tier0 ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling DNSApi.update_policy_dns_forwarder_on_tier0"
      end
      # verify the required parameter 'policy_dns_forwarder' is set
      if @api_client.config.client_side_validation && policy_dns_forwarder.nil?
        fail ArgumentError, "Missing the required parameter 'policy_dns_forwarder' when calling DNSApi.update_policy_dns_forwarder_on_tier0"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/dns-forwarder'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_dns_forwarder)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#update_policy_dns_forwarder_on_tier0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the DNS Forwarder
    # Create or update the DNS Forwarder
    # @param tier_1_id Tier-1 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarder]
    def update_policy_dns_forwarder_on_tier1(tier_1_id, policy_dns_forwarder, opts = {})
      data, _status_code, _headers = update_policy_dns_forwarder_on_tier1_with_http_info(tier_1_id, policy_dns_forwarder, opts)
      data
    end

    # Create or update the DNS Forwarder
    # Create or update the DNS Forwarder
    # @param tier_1_id Tier-1 ID
    # @param policy_dns_forwarder 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarder, Fixnum, Hash)>] PolicyDnsForwarder data, response status code and response headers
    def update_policy_dns_forwarder_on_tier1_with_http_info(tier_1_id, policy_dns_forwarder, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.update_policy_dns_forwarder_on_tier1 ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling DNSApi.update_policy_dns_forwarder_on_tier1"
      end
      # verify the required parameter 'policy_dns_forwarder' is set
      if @api_client.config.client_side_validation && policy_dns_forwarder.nil?
        fail ArgumentError, "Missing the required parameter 'policy_dns_forwarder' when calling DNSApi.update_policy_dns_forwarder_on_tier1"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/dns-forwarder'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_dns_forwarder)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#update_policy_dns_forwarder_on_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the DNS Forwarder Zone
    # Create or update the DNS Forwarder Zone
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param policy_dns_forwarder_zone 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDnsForwarderZone]
    def update_policy_dns_forwarder_zone(dns_forwarder_zone_id, policy_dns_forwarder_zone, opts = {})
      data, _status_code, _headers = update_policy_dns_forwarder_zone_with_http_info(dns_forwarder_zone_id, policy_dns_forwarder_zone, opts)
      data
    end

    # Create or update the DNS Forwarder Zone
    # Create or update the DNS Forwarder Zone
    # @param dns_forwarder_zone_id DNS Forwarder Zone ID
    # @param policy_dns_forwarder_zone 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDnsForwarderZone, Fixnum, Hash)>] PolicyDnsForwarderZone data, response status code and response headers
    def update_policy_dns_forwarder_zone_with_http_info(dns_forwarder_zone_id, policy_dns_forwarder_zone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DNSApi.update_policy_dns_forwarder_zone ...'
      end
      # verify the required parameter 'dns_forwarder_zone_id' is set
      if @api_client.config.client_side_validation && dns_forwarder_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'dns_forwarder_zone_id' when calling DNSApi.update_policy_dns_forwarder_zone"
      end
      # verify the required parameter 'policy_dns_forwarder_zone' is set
      if @api_client.config.client_side_validation && policy_dns_forwarder_zone.nil?
        fail ArgumentError, "Missing the required parameter 'policy_dns_forwarder_zone' when calling DNSApi.update_policy_dns_forwarder_zone"
      end
      # resource path
      local_var_path = '/infra/dns-forwarder-zones/{dns-forwarder-zone-id}'.sub('{' + 'dns-forwarder-zone-id' + '}', dns_forwarder_zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_dns_forwarder_zone)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDnsForwarderZone')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DNSApi#update_policy_dns_forwarder_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
