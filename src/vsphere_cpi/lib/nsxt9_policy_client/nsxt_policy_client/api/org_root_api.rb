=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class OrgRootApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Update on org-root to update all the nested entities using HAPI.
    # Patch API at org-root to create/update/delete entire or part of intent hierarchy. Hierarchical API: Provides users a way to create entire or part of intent in single API invocation. Input is expressed in a tree format. Each node in tree can have multiple children of different types. System will resolve the dependecies of nodes within the intent tree and will create the model. Children for any node can be specified using ChildResourceReference or ChildPolicyConfigResource. If a resource is specified using ChildResourceReference then it will not be updated only its children will be updated. If Object is specified using ChildPolicyConfigResource, object along with its children will be updated. Hierarchical API can also be used to delete any sub-branch of entire tree. 
    # @param org_root 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enforce_revision_check Force revision check (default to false)
    # @return [nil]
    def patch_org_root(org_root, opts = {})
      patch_org_root_with_http_info(org_root, opts)
      nil
    end

    # Update on org-root to update all the nested entities using HAPI.
    # Patch API at org-root to create/update/delete entire or part of intent hierarchy. Hierarchical API: Provides users a way to create entire or part of intent in single API invocation. Input is expressed in a tree format. Each node in tree can have multiple children of different types. System will resolve the dependecies of nodes within the intent tree and will create the model. Children for any node can be specified using ChildResourceReference or ChildPolicyConfigResource. If a resource is specified using ChildResourceReference then it will not be updated only its children will be updated. If Object is specified using ChildPolicyConfigResource, object along with its children will be updated. Hierarchical API can also be used to delete any sub-branch of entire tree. 
    # @param org_root 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enforce_revision_check Force revision check
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_org_root_with_http_info(org_root, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgRootApi.patch_org_root ...'
      end
      # verify the required parameter 'org_root' is set
      if @api_client.config.client_side_validation && org_root.nil?
        fail ArgumentError, "Missing the required parameter 'org_root' when calling OrgRootApi.patch_org_root"
      end
      # resource path
      local_var_path = '/org-root'

      # query parameters
      query_params = {}
      query_params[:'enforce_revision_check'] = opts[:'enforce_revision_check'] if !opts[:'enforce_revision_check'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(org_root)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgRootApi#patch_org_root\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Org Root
    # Read Org Root. Returns only the org root related properties. Inner object are not populated. For Hierarchical Get, base_path request parameter can be used. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :base_path Base Path for retrieving hierarchical intent
    # @option opts [String] :filter Filter string as java regex
    # @option opts [String] :type_filter Filter string to retrieve hierarchy.
    # @return [OrgRoot]
    def read_org_root(opts = {})
      data, _status_code, _headers = read_org_root_with_http_info(opts)
      data
    end

    # Read Org Root
    # Read Org Root. Returns only the org root related properties. Inner object are not populated. For Hierarchical Get, base_path request parameter can be used. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :base_path Base Path for retrieving hierarchical intent
    # @option opts [String] :filter Filter string as java regex
    # @option opts [String] :type_filter Filter string to retrieve hierarchy.
    # @return [Array<(OrgRoot, Fixnum, Hash)>] OrgRoot data, response status code and response headers
    def read_org_root_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgRootApi.read_org_root ...'
      end
      # resource path
      local_var_path = '/org-root'

      # query parameters
      query_params = {}
      query_params[:'base_path'] = opts[:'base_path'] if !opts[:'base_path'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'type_filter'] = opts[:'type_filter'] if !opts[:'type_filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrgRoot')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgRootApi#read_org_root\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
