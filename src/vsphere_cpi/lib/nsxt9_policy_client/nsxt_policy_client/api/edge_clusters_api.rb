=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class EdgeClustersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Or Update a Policy Edge Cluster
    # Edge Cluster only supports homogeneous members. The Edge Transport Nodes are only allowed in cluster members. DeploymentType of these edge nodes can be VIRTUAL_MACHINE or PHYSICAL_MACHINE. Any update operation on members of edge cluster is not permitted, To replace the edge transport node for an existing member, refer <b>/policy/api/v1/infra/sites/default/enforcement-points/default/edge-clusters/<edge-cluster-id> /action/replace-policy-edge-node</b> API. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_cluster 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeCluster]
    def create_or_update_policy_edge_cluster(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_cluster, opts = {})
      data, _status_code, _headers = create_or_update_policy_edge_cluster_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_cluster, opts)
      data
    end

    # Create Or Update a Policy Edge Cluster
    # Edge Cluster only supports homogeneous members. The Edge Transport Nodes are only allowed in cluster members. DeploymentType of these edge nodes can be VIRTUAL_MACHINE or PHYSICAL_MACHINE. Any update operation on members of edge cluster is not permitted, To replace the edge transport node for an existing member, refer &lt;b&gt;/policy/api/v1/infra/sites/default/enforcement-points/default/edge-clusters/&lt;edge-cluster-id&gt; /action/replace-policy-edge-node&lt;/b&gt; API. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_cluster 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeCluster, Fixnum, Hash)>] PolicyEdgeCluster data, response status code and response headers
    def create_or_update_policy_edge_cluster_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_cluster, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeClustersApi.create_or_update_policy_edge_cluster ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeClustersApi.create_or_update_policy_edge_cluster"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeClustersApi.create_or_update_policy_edge_cluster"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EdgeClustersApi.create_or_update_policy_edge_cluster"
      end
      # verify the required parameter 'policy_edge_cluster' is set
      if @api_client.config.client_side_validation && policy_edge_cluster.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_cluster' when calling EdgeClustersApi.create_or_update_policy_edge_cluster"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_cluster)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeClustersApi#create_or_update_policy_edge_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update a Policy Edge Cluster High Availability Profile
    # Create or Update a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param policy_edge_high_availability_profile 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeHighAvailabilityProfile]
    def create_or_update_policy_edge_cluster_high_availability_profile(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts = {})
      data, _status_code, _headers = create_or_update_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts)
      data
    end

    # Create or Update a Policy Edge Cluster High Availability Profile
    # Create or Update a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param policy_edge_high_availability_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeHighAvailabilityProfile, Fixnum, Hash)>] PolicyEdgeHighAvailabilityProfile data, response status code and response headers
    def create_or_update_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeClustersApi.create_or_update_policy_edge_cluster_high_availability_profile ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeClustersApi.create_or_update_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeClustersApi.create_or_update_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'edge_cluster_high_availability_profile_id' is set
      if @api_client.config.client_side_validation && edge_cluster_high_availability_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_high_availability_profile_id' when calling EdgeClustersApi.create_or_update_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'policy_edge_high_availability_profile' is set
      if @api_client.config.client_side_validation && policy_edge_high_availability_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_high_availability_profile' when calling EdgeClustersApi.create_or_update_policy_edge_cluster_high_availability_profile"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-cluster-high-availability-profiles/{edge-cluster-high-availability-profile-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-high-availability-profile-id' + '}', edge_cluster_high_availability_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_high_availability_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeHighAvailabilityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeClustersApi#create_or_update_policy_edge_cluster_high_availability_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the specified edge cluster.
    # Delete the specified edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :delete_member_edge_nodes Flag to specify whether to delete edge transport nodes within edge cluster.  (default to false)
    # @return [nil]
    def delete_policy_edge_cluster(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      delete_policy_edge_cluster_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      nil
    end

    # Delete the specified edge cluster.
    # Delete the specified edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :delete_member_edge_nodes Flag to specify whether to delete edge transport nodes within edge cluster. 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_edge_cluster_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeClustersApi.delete_policy_edge_cluster ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeClustersApi.delete_policy_edge_cluster"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeClustersApi.delete_policy_edge_cluster"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EdgeClustersApi.delete_policy_edge_cluster"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'delete_member_edge_nodes'] = opts[:'delete_member_edge_nodes'] if !opts[:'delete_member_edge_nodes'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeClustersApi#delete_policy_edge_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Policy Edge Cluster High Availability Profile
    # Delete a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_edge_cluster_high_availability_profile(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts = {})
      delete_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts)
      nil
    end

    # Delete a Policy Edge Cluster High Availability Profile
    # Delete a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeClustersApi.delete_policy_edge_cluster_high_availability_profile ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeClustersApi.delete_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeClustersApi.delete_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'edge_cluster_high_availability_profile_id' is set
      if @api_client.config.client_side_validation && edge_cluster_high_availability_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_high_availability_profile_id' when calling EdgeClustersApi.delete_policy_edge_cluster_high_availability_profile"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-cluster-high-availability-profiles/{edge-cluster-high-availability-profile-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-high-availability-profile-id' + '}', edge_cluster_high_availability_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeClustersApi#delete_policy_edge_cluster_high_availability_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy Edge Cluster allocation status  under an Enforcement Point
    # Returns the allocation details of cluster and its members. Lists the edge node members, active and standby services of each node, utilization details of configured sub-pools. These allocation details can be monitored by customers to trigger migration of certain service contexts to different edge nodes, to balance the utilization of edge node resources. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeClusterAllocationStatus]
    def get_policy_edge_cluster_allocation_status(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = get_policy_edge_cluster_allocation_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      data
    end

    # Get a Policy Edge Cluster allocation status  under an Enforcement Point
    # Returns the allocation details of cluster and its members. Lists the edge node members, active and standby services of each node, utilization details of configured sub-pools. These allocation details can be monitored by customers to trigger migration of certain service contexts to different edge nodes, to balance the utilization of edge node resources. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeClusterAllocationStatus, Fixnum, Hash)>] PolicyEdgeClusterAllocationStatus data, response status code and response headers
    def get_policy_edge_cluster_allocation_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeClustersApi.get_policy_edge_cluster_allocation_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeClustersApi.get_policy_edge_cluster_allocation_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeClustersApi.get_policy_edge_cluster_allocation_status"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EdgeClustersApi.get_policy_edge_cluster_allocation_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/allocation/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeClusterAllocationStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeClustersApi#get_policy_edge_cluster_allocation_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy Edge Cluster State info under an Enforcement Point
    # Returns information about the current state of the edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [PolicyEdgeClusterState]
    def get_policy_edge_cluster_state(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = get_policy_edge_cluster_state_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      data
    end

    # Get a Policy Edge Cluster State info under an Enforcement Point
    # Returns information about the current state of the edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :barrier_id 
    # @option opts [String] :request_id Realization request ID
    # @return [Array<(PolicyEdgeClusterState, Fixnum, Hash)>] PolicyEdgeClusterState data, response status code and response headers
    def get_policy_edge_cluster_state_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeClustersApi.get_policy_edge_cluster_state ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeClustersApi.get_policy_edge_cluster_state"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeClustersApi.get_policy_edge_cluster_state"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EdgeClustersApi.get_policy_edge_cluster_state"
      end
      if @api_client.config.client_side_validation && !opts[:'barrier_id'].nil? && opts[:'barrier_id'] < 0
        fail ArgumentError, 'invalid value for "opts[:"barrier_id"]" when calling EdgeClustersApi.get_policy_edge_cluster_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/state'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'barrier_id'] = opts[:'barrier_id'] if !opts[:'barrier_id'].nil?
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeClusterState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeClustersApi#get_policy_edge_cluster_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy Edge Cluster real time status  under an Enforcement Point
    # Returns the aggregated status for the Edge cluster along with status of all edge nodes in the cluster. Query parameter \"source=realtime\" is the only supported source. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param source Data source type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyEdgeClusterStatus]
    def get_policy_edge_cluster_status(site_id, enforcementpoint_id, edge_cluster_id, source, opts = {})
      data, _status_code, _headers = get_policy_edge_cluster_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, source, opts)
      data
    end

    # Get a Policy Edge Cluster real time status  under an Enforcement Point
    # Returns the aggregated status for the Edge cluster along with status of all edge nodes in the cluster. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param source Data source type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyEdgeClusterStatus, Fixnum, Hash)>] PolicyEdgeClusterStatus data, response status code and response headers
    def get_policy_edge_cluster_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, source, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeClustersApi.get_policy_edge_cluster_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeClustersApi.get_policy_edge_cluster_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeClustersApi.get_policy_edge_cluster_status"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EdgeClustersApi.get_policy_edge_cluster_status"
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling EdgeClustersApi.get_policy_edge_cluster_status"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['realtime', 'cached'].include?(source)
        fail ArgumentError, "invalid value for 'source', must be one of realtime, cached"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EdgeClustersApi.get_policy_edge_cluster_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EdgeClustersApi.get_policy_edge_cluster_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = source
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeClusterStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeClustersApi#get_policy_edge_cluster_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy Edge Cluster allocation status  under an Enforcement Point
    # Returns the allocation details of cluster and its members. Lists the edge node members, active and standby services of each node, utilization details of configured sub-pools. These allocation details can be monitored by customers to trigger migration of certain service contexts to different edge nodes, to balance the utilization of edge node resources. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeClusterAllocationStatus]
    def global_infra_get_policy_edge_cluster_allocation_status(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = global_infra_get_policy_edge_cluster_allocation_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      data
    end

    # Get a Policy Edge Cluster allocation status  under an Enforcement Point
    # Returns the allocation details of cluster and its members. Lists the edge node members, active and standby services of each node, utilization details of configured sub-pools. These allocation details can be monitored by customers to trigger migration of certain service contexts to different edge nodes, to balance the utilization of edge node resources. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeClusterAllocationStatus, Fixnum, Hash)>] PolicyEdgeClusterAllocationStatus data, response status code and response headers
    def global_infra_get_policy_edge_cluster_allocation_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeClustersApi.global_infra_get_policy_edge_cluster_allocation_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeClustersApi.global_infra_get_policy_edge_cluster_allocation_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeClustersApi.global_infra_get_policy_edge_cluster_allocation_status"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EdgeClustersApi.global_infra_get_policy_edge_cluster_allocation_status"
      end
      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/allocation/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeClusterAllocationStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeClustersApi#global_infra_get_policy_edge_cluster_allocation_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy Edge Cluster real time status  under an Enforcement Point
    # Returns the aggregated status for the Edge cluster along with status of all edge nodes in the cluster. Query parameter \"source=realtime\" is the only supported source. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param source Data source type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyEdgeClusterStatus]
    def global_infra_get_policy_edge_cluster_status(site_id, enforcementpoint_id, edge_cluster_id, source, opts = {})
      data, _status_code, _headers = global_infra_get_policy_edge_cluster_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, source, opts)
      data
    end

    # Get a Policy Edge Cluster real time status  under an Enforcement Point
    # Returns the aggregated status for the Edge cluster along with status of all edge nodes in the cluster. Query parameter \&quot;source&#x3D;realtime\&quot; is the only supported source. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param source Data source type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyEdgeClusterStatus, Fixnum, Hash)>] PolicyEdgeClusterStatus data, response status code and response headers
    def global_infra_get_policy_edge_cluster_status_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, source, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeClustersApi.global_infra_get_policy_edge_cluster_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeClustersApi.global_infra_get_policy_edge_cluster_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeClustersApi.global_infra_get_policy_edge_cluster_status"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EdgeClustersApi.global_infra_get_policy_edge_cluster_status"
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling EdgeClustersApi.global_infra_get_policy_edge_cluster_status"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['realtime', 'cached'].include?(source)
        fail ArgumentError, "invalid value for 'source', must be one of realtime, cached"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EdgeClustersApi.global_infra_get_policy_edge_cluster_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EdgeClustersApi.global_infra_get_policy_edge_cluster_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = source
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeClusterStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeClustersApi#global_infra_get_policy_edge_cluster_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Edge Nodes under an Enforcement Point, Edge Cluster
    # Paginated list of all Edge Nodes under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyEdgeNodeListResult]
    def global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      data
    end

    # List Edge Nodes under an Enforcement Point, Edge Cluster
    # Paginated list of all Edge Nodes under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyEdgeNodeListResult, Fixnum, Hash)>] PolicyEdgeNodeListResult data, response status code and response headers
    def global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeClustersApi.global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeClustersApi.global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeClustersApi.global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EdgeClustersApi.global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EdgeClustersApi.global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EdgeClustersApi.global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/edge-nodes'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeNodeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeClustersApi#global_infra_list_edge_nodes_under_edge_cluster_for_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Edge Node under an Enforcement Point, Edge Cluster
    # Read an Edge Node under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param edge_node_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeNode]
    def global_infra_read_edge_node_under_edge_cluster_for_enforcement_point(site_id, enforcementpoint_id, edge_cluster_id, edge_node_id, opts = {})
      data, _status_code, _headers = global_infra_read_edge_node_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, edge_node_id, opts)
      data
    end

    # Read an Edge Node under an Enforcement Point, Edge Cluster
    # Read an Edge Node under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param edge_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeNode, Fixnum, Hash)>] PolicyEdgeNode data, response status code and response headers
    def global_infra_read_edge_node_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, edge_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeClustersApi.global_infra_read_edge_node_under_edge_cluster_for_enforcement_point ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeClustersApi.global_infra_read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeClustersApi.global_infra_read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EdgeClustersApi.global_infra_read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_node_id' is set
      if @api_client.config.client_side_validation && edge_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_node_id' when calling EdgeClustersApi.global_infra_read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # resource path
      local_var_path = '/global-infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/edge-nodes/{edge-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'edge-node-id' + '}', edge_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeClustersApi#global_infra_read_edge_node_under_edge_cluster_for_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Edge Nodes under an Enforcement Point, Edge Cluster
    # Paginated list of all Edge Nodes under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyEdgeNodeListResult]
    def list_edge_nodes_under_edge_cluster_for_enforcement_point(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = list_edge_nodes_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts)
      data
    end

    # List Edge Nodes under an Enforcement Point, Edge Cluster
    # Paginated list of all Edge Nodes under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyEdgeNodeListResult, Fixnum, Hash)>] PolicyEdgeNodeListResult data, response status code and response headers
    def list_edge_nodes_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeClustersApi.list_edge_nodes_under_edge_cluster_for_enforcement_point ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeClustersApi.list_edge_nodes_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeClustersApi.list_edge_nodes_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EdgeClustersApi.list_edge_nodes_under_edge_cluster_for_enforcement_point"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EdgeClustersApi.list_edge_nodes_under_edge_cluster_for_enforcement_point, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EdgeClustersApi.list_edge_nodes_under_edge_cluster_for_enforcement_point, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/edge-nodes'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeNodeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeClustersApi#list_edge_nodes_under_edge_cluster_for_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List  Policy Edge Cluster High Availability Profiles
    # List edge cluster high availability profiles. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_system_owned Whether the list result contains system resources (default to true)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EdgeClusterHighAvailabilityProfileListResult]
    def list_policy_edge_cluster_high_availability_profile(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # List  Policy Edge Cluster High Availability Profiles
    # List edge cluster high availability profiles. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_system_owned Whether the list result contains system resources
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EdgeClusterHighAvailabilityProfileListResult, Fixnum, Hash)>] EdgeClusterHighAvailabilityProfileListResult data, response status code and response headers
    def list_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeClustersApi.list_policy_edge_cluster_high_availability_profile ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeClustersApi.list_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeClustersApi.list_policy_edge_cluster_high_availability_profile"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EdgeClustersApi.list_policy_edge_cluster_high_availability_profile, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling EdgeClustersApi.list_policy_edge_cluster_high_availability_profile, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-cluster-high-availability-profiles'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_system_owned'] = opts[:'include_system_owned'] if !opts[:'include_system_owned'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdgeClusterHighAvailabilityProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeClustersApi#list_policy_edge_cluster_high_availability_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a Policy Edge Cluster
    # Patch a policy edge cluster. It only supports homogeneous members. The Edge Transport Nodes are only allowed in cluster members. DeploymentType (VIRTUAL_MACHINE|PHYSICAL_MACHINE) of these Edge Nodes is recommended to be the same. Any update operation on members of edge cluster is not permitted, To replace the edge transport node for an existing member, refer <b>/policy/api/v1/infra/sites/default/enforcement-points/default/edge-clusters/<edge-cluster-id> /action/replace-policy-edge-node</b> api. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_cluster 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_edge_cluster(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_cluster, opts = {})
      patch_policy_edge_cluster_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_cluster, opts)
      nil
    end

    # Patch a Policy Edge Cluster
    # Patch a policy edge cluster. It only supports homogeneous members. The Edge Transport Nodes are only allowed in cluster members. DeploymentType (VIRTUAL_MACHINE|PHYSICAL_MACHINE) of these Edge Nodes is recommended to be the same. Any update operation on members of edge cluster is not permitted, To replace the edge transport node for an existing member, refer &lt;b&gt;/policy/api/v1/infra/sites/default/enforcement-points/default/edge-clusters/&lt;edge-cluster-id&gt; /action/replace-policy-edge-node&lt;/b&gt; api. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_cluster 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_edge_cluster_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_cluster, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeClustersApi.patch_policy_edge_cluster ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeClustersApi.patch_policy_edge_cluster"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeClustersApi.patch_policy_edge_cluster"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EdgeClustersApi.patch_policy_edge_cluster"
      end
      # verify the required parameter 'policy_edge_cluster' is set
      if @api_client.config.client_side_validation && policy_edge_cluster.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_cluster' when calling EdgeClustersApi.patch_policy_edge_cluster"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_cluster)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeClustersApi#patch_policy_edge_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a Policy EdgeCluster High Availability Profile
    # Patch a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param policy_edge_high_availability_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_edge_cluster_high_availability_profile(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts = {})
      patch_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts)
      nil
    end

    # Patch a Policy EdgeCluster High Availability Profile
    # Patch a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param policy_edge_high_availability_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, policy_edge_high_availability_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeClustersApi.patch_policy_edge_cluster_high_availability_profile ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeClustersApi.patch_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeClustersApi.patch_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'edge_cluster_high_availability_profile_id' is set
      if @api_client.config.client_side_validation && edge_cluster_high_availability_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_high_availability_profile_id' when calling EdgeClustersApi.patch_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'policy_edge_high_availability_profile' is set
      if @api_client.config.client_side_validation && policy_edge_high_availability_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_high_availability_profile' when calling EdgeClustersApi.patch_policy_edge_cluster_high_availability_profile"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-cluster-high-availability-profiles/{edge-cluster-high-availability-profile-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-high-availability-profile-id' + '}', edge_cluster_high_availability_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_high_availability_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeClustersApi#patch_policy_edge_cluster_high_availability_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an Edge Node under an Enforcement Point, Edge Cluster
    # Read an Edge Node under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param edge_node_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeNode]
    def read_edge_node_under_edge_cluster_for_enforcement_point(site_id, enforcementpoint_id, edge_cluster_id, edge_node_id, opts = {})
      data, _status_code, _headers = read_edge_node_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, edge_node_id, opts)
      data
    end

    # Read an Edge Node under an Enforcement Point, Edge Cluster
    # Read an Edge Node under an Enforcement Point, Edge Cluster 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param edge_node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeNode, Fixnum, Hash)>] PolicyEdgeNode data, response status code and response headers
    def read_edge_node_under_edge_cluster_for_enforcement_point_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, edge_node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeClustersApi.read_edge_node_under_edge_cluster_for_enforcement_point ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeClustersApi.read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeClustersApi.read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EdgeClustersApi.read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # verify the required parameter 'edge_node_id' is set
      if @api_client.config.client_side_validation && edge_node_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_node_id' when calling EdgeClustersApi.read_edge_node_under_edge_cluster_for_enforcement_point"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/edge-nodes/{edge-node-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'edge-node-id' + '}', edge_node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeClustersApi#read_edge_node_under_edge_cluster_for_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Policy Edge Cluster High Availability Profile
    # Get a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeHighAvailabilityProfile]
    def read_policy_edge_cluster_high_availability_profile(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts = {})
      data, _status_code, _headers = read_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts)
      data
    end

    # Get a Policy Edge Cluster High Availability Profile
    # Get a policy edge cluster high availability profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_high_availability_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeHighAvailabilityProfile, Fixnum, Hash)>] PolicyEdgeHighAvailabilityProfile data, response status code and response headers
    def read_policy_edge_cluster_high_availability_profile_with_http_info(site_id, enforcementpoint_id, edge_cluster_high_availability_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeClustersApi.read_policy_edge_cluster_high_availability_profile ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeClustersApi.read_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeClustersApi.read_policy_edge_cluster_high_availability_profile"
      end
      # verify the required parameter 'edge_cluster_high_availability_profile_id' is set
      if @api_client.config.client_side_validation && edge_cluster_high_availability_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_high_availability_profile_id' when calling EdgeClustersApi.read_policy_edge_cluster_high_availability_profile"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-cluster-high-availability-profiles/{edge-cluster-high-availability-profile-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-high-availability-profile-id' + '}', edge_cluster_high_availability_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeHighAvailabilityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeClustersApi#read_policy_edge_cluster_high_availability_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Relocate service contexts from policy edge node  and remove policy edge node from the edge-cluster
    # Relocate auto allocated service contexts from policy edge node at given id. For API to perform relocate and remove action the edge node at given id must only have auto allocated service contexts. If any manually allocated service context is present on the edge cluster member, then the task will not be performed. Also, it is recommended to move the edge node for which relocate and remove action is being performed into maintenance mode,before executing the API. If edge is not moved into maintenance mode, then API will move edge node into maintenance mode before performing the actual relocate and remove task.To maintain high availability, Edge cluster should have at least two healthy edge nodes for relocation and removal. Once relocate action is performed successfully, the policy edge node will be removed from the edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_node_relocate_and_remove_member 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def relocate_and_remove_policy_edge_node(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_node_relocate_and_remove_member, opts = {})
      relocate_and_remove_policy_edge_node_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_node_relocate_and_remove_member, opts)
      nil
    end

    # Relocate service contexts from policy edge node  and remove policy edge node from the edge-cluster
    # Relocate auto allocated service contexts from policy edge node at given id. For API to perform relocate and remove action the edge node at given id must only have auto allocated service contexts. If any manually allocated service context is present on the edge cluster member, then the task will not be performed. Also, it is recommended to move the edge node for which relocate and remove action is being performed into maintenance mode,before executing the API. If edge is not moved into maintenance mode, then API will move edge node into maintenance mode before performing the actual relocate and remove task.To maintain high availability, Edge cluster should have at least two healthy edge nodes for relocation and removal. Once relocate action is performed successfully, the policy edge node will be removed from the edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_node_relocate_and_remove_member 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def relocate_and_remove_policy_edge_node_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_node_relocate_and_remove_member, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeClustersApi.relocate_and_remove_policy_edge_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeClustersApi.relocate_and_remove_policy_edge_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeClustersApi.relocate_and_remove_policy_edge_node"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EdgeClustersApi.relocate_and_remove_policy_edge_node"
      end
      # verify the required parameter 'policy_edge_node_relocate_and_remove_member' is set
      if @api_client.config.client_side_validation && policy_edge_node_relocate_and_remove_member.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_node_relocate_and_remove_member' when calling EdgeClustersApi.relocate_and_remove_policy_edge_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/action/relocate-and-remove-edge-transport-node'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_node_relocate_and_remove_member)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeClustersApi#relocate_and_remove_policy_edge_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Replace the policy edge node at the specified member-index in the edge-cluster
    # Replace the Policy Edge Node present at the specified member-index in the edge-cluster. This is a disruptive action. This will move all the Interfaces(uplink and routerLink) hosted on the old Policy Edge Node to the new Policy Edge Node. The same Policy Edge Node cannot be present as a member of any edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_node_replace_member 
    # @param [Hash] opts the optional parameters
    # @return [PolicyEdgeCluster]
    def replace_policy_edge_node(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_node_replace_member, opts = {})
      data, _status_code, _headers = replace_policy_edge_node_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_node_replace_member, opts)
      data
    end

    # Replace the policy edge node at the specified member-index in the edge-cluster
    # Replace the Policy Edge Node present at the specified member-index in the edge-cluster. This is a disruptive action. This will move all the Interfaces(uplink and routerLink) hosted on the old Policy Edge Node to the new Policy Edge Node. The same Policy Edge Node cannot be present as a member of any edge cluster. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param edge_cluster_id 
    # @param policy_edge_node_replace_member 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyEdgeCluster, Fixnum, Hash)>] PolicyEdgeCluster data, response status code and response headers
    def replace_policy_edge_node_with_http_info(site_id, enforcementpoint_id, edge_cluster_id, policy_edge_node_replace_member, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EdgeClustersApi.replace_policy_edge_node ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling EdgeClustersApi.replace_policy_edge_node"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling EdgeClustersApi.replace_policy_edge_node"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling EdgeClustersApi.replace_policy_edge_node"
      end
      # verify the required parameter 'policy_edge_node_replace_member' is set
      if @api_client.config.client_side_validation && policy_edge_node_replace_member.nil?
        fail ArgumentError, "Missing the required parameter 'policy_edge_node_replace_member' when calling EdgeClustersApi.replace_policy_edge_node"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/edge-clusters/{edge-cluster-id}/action/replace-edge-transport-node'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_edge_node_replace_member)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyEdgeCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EdgeClustersApi#replace_policy_edge_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
