=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class ConstraintGlobalConfigurationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infrapatch_constraint_global_config(constraint_global_config, opts = {})
      global_infrapatch_constraint_global_config_with_http_info(constraint_global_config, opts)
      nil
    end

    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infrapatch_constraint_global_config_with_http_info(constraint_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConstraintGlobalConfigurationApi.global_infrapatch_constraint_global_config ...'
      end
      # verify the required parameter 'constraint_global_config' is set
      if @api_client.config.client_side_validation && constraint_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_global_config' when calling ConstraintGlobalConfigurationApi.global_infrapatch_constraint_global_config"
      end
      # resource path
      local_var_path = '/global-infra/constraint-global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(constraint_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConstraintGlobalConfigurationApi#global_infrapatch_constraint_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [ConstraintGlobalConfig]
    def global_infraput_constraint_global_config(constraint_global_config, opts = {})
      data, _status_code, _headers = global_infraput_constraint_global_config_with_http_info(constraint_global_config, opts)
      data
    end

    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConstraintGlobalConfig, Fixnum, Hash)>] ConstraintGlobalConfig data, response status code and response headers
    def global_infraput_constraint_global_config_with_http_info(constraint_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConstraintGlobalConfigurationApi.global_infraput_constraint_global_config ...'
      end
      # verify the required parameter 'constraint_global_config' is set
      if @api_client.config.client_side_validation && constraint_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_global_config' when calling ConstraintGlobalConfigurationApi.global_infraput_constraint_global_config"
      end
      # resource path
      local_var_path = '/global-infra/constraint-global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(constraint_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConstraintGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConstraintGlobalConfigurationApi#global_infraput_constraint_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the constraint global configuration
    # Read the constraint global configuration
    # @param [Hash] opts the optional parameters
    # @return [ConstraintGlobalConfig]
    def global_infraread_constraint_global_config(opts = {})
      data, _status_code, _headers = global_infraread_constraint_global_config_with_http_info(opts)
      data
    end

    # Read the constraint global configuration
    # Read the constraint global configuration
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConstraintGlobalConfig, Fixnum, Hash)>] ConstraintGlobalConfig data, response status code and response headers
    def global_infraread_constraint_global_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConstraintGlobalConfigurationApi.global_infraread_constraint_global_config ...'
      end
      # resource path
      local_var_path = '/global-infra/constraint-global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConstraintGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConstraintGlobalConfigurationApi#global_infraread_constraint_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infrapatch_constraint_global_config(org_id, project_id, constraint_global_config, opts = {})
      orgs_org_id_projects_project_id_infrapatch_constraint_global_config_with_http_info(org_id, project_id, constraint_global_config, opts)
      nil
    end

    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infrapatch_constraint_global_config_with_http_info(org_id, project_id, constraint_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConstraintGlobalConfigurationApi.orgs_org_id_projects_project_id_infrapatch_constraint_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ConstraintGlobalConfigurationApi.orgs_org_id_projects_project_id_infrapatch_constraint_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ConstraintGlobalConfigurationApi.orgs_org_id_projects_project_id_infrapatch_constraint_global_config"
      end
      # verify the required parameter 'constraint_global_config' is set
      if @api_client.config.client_side_validation && constraint_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_global_config' when calling ConstraintGlobalConfigurationApi.orgs_org_id_projects_project_id_infrapatch_constraint_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/constraint-global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(constraint_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConstraintGlobalConfigurationApi#orgs_org_id_projects_project_id_infrapatch_constraint_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [ConstraintGlobalConfig]
    def orgs_org_id_projects_project_id_infraput_constraint_global_config(org_id, project_id, constraint_global_config, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infraput_constraint_global_config_with_http_info(org_id, project_id, constraint_global_config, opts)
      data
    end

    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConstraintGlobalConfig, Fixnum, Hash)>] ConstraintGlobalConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infraput_constraint_global_config_with_http_info(org_id, project_id, constraint_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConstraintGlobalConfigurationApi.orgs_org_id_projects_project_id_infraput_constraint_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ConstraintGlobalConfigurationApi.orgs_org_id_projects_project_id_infraput_constraint_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ConstraintGlobalConfigurationApi.orgs_org_id_projects_project_id_infraput_constraint_global_config"
      end
      # verify the required parameter 'constraint_global_config' is set
      if @api_client.config.client_side_validation && constraint_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_global_config' when calling ConstraintGlobalConfigurationApi.orgs_org_id_projects_project_id_infraput_constraint_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/constraint-global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(constraint_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConstraintGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConstraintGlobalConfigurationApi#orgs_org_id_projects_project_id_infraput_constraint_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the constraint global configuration
    # Read the constraint global configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [ConstraintGlobalConfig]
    def orgs_org_id_projects_project_id_infraread_constraint_global_config(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infraread_constraint_global_config_with_http_info(org_id, project_id, opts)
      data
    end

    # Read the constraint global configuration
    # Read the constraint global configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConstraintGlobalConfig, Fixnum, Hash)>] ConstraintGlobalConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infraread_constraint_global_config_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConstraintGlobalConfigurationApi.orgs_org_id_projects_project_id_infraread_constraint_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ConstraintGlobalConfigurationApi.orgs_org_id_projects_project_id_infraread_constraint_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ConstraintGlobalConfigurationApi.orgs_org_id_projects_project_id_infraread_constraint_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/constraint-global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConstraintGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConstraintGlobalConfigurationApi#orgs_org_id_projects_project_id_infraread_constraint_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_constraint_global_config(constraint_global_config, opts = {})
      patch_constraint_global_config_with_http_info(constraint_global_config, opts)
      nil
    end

    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_constraint_global_config_with_http_info(constraint_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConstraintGlobalConfigurationApi.patch_constraint_global_config ...'
      end
      # verify the required parameter 'constraint_global_config' is set
      if @api_client.config.client_side_validation && constraint_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_global_config' when calling ConstraintGlobalConfigurationApi.patch_constraint_global_config"
      end
      # resource path
      local_var_path = '/infra/constraint-global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(constraint_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConstraintGlobalConfigurationApi#patch_constraint_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [ConstraintGlobalConfig]
    def put_constraint_global_config(constraint_global_config, opts = {})
      data, _status_code, _headers = put_constraint_global_config_with_http_info(constraint_global_config, opts)
      data
    end

    # Update the constraint global configuration
    # Update the constraint global configuration
    # @param constraint_global_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConstraintGlobalConfig, Fixnum, Hash)>] ConstraintGlobalConfig data, response status code and response headers
    def put_constraint_global_config_with_http_info(constraint_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConstraintGlobalConfigurationApi.put_constraint_global_config ...'
      end
      # verify the required parameter 'constraint_global_config' is set
      if @api_client.config.client_side_validation && constraint_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'constraint_global_config' when calling ConstraintGlobalConfigurationApi.put_constraint_global_config"
      end
      # resource path
      local_var_path = '/infra/constraint-global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(constraint_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConstraintGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConstraintGlobalConfigurationApi#put_constraint_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the constraint global configuration
    # Read the constraint global configuration
    # @param [Hash] opts the optional parameters
    # @return [ConstraintGlobalConfig]
    def read_constraint_global_config(opts = {})
      data, _status_code, _headers = read_constraint_global_config_with_http_info(opts)
      data
    end

    # Read the constraint global configuration
    # Read the constraint global configuration
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConstraintGlobalConfig, Fixnum, Hash)>] ConstraintGlobalConfig data, response status code and response headers
    def read_constraint_global_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConstraintGlobalConfigurationApi.read_constraint_global_config ...'
      end
      # resource path
      local_var_path = '/infra/constraint-global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConstraintGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConstraintGlobalConfigurationApi#read_constraint_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
