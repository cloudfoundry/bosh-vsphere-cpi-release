=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class BundleApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get progress status of kubernetes tools bundle upload
    # Get the progress of uploading kubernetes tools bundle from the remote location. This API will also verify the kubernetes tools bundle, before marking upload as a success. 
    # @param site_id 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @return [UploadBundleStatus]
    def get_upload_bundle_status(site_id, bundle_id, opts = {})
      data, _status_code, _headers = get_upload_bundle_status_with_http_info(site_id, bundle_id, opts)
      data
    end

    # Get progress status of kubernetes tools bundle upload
    # Get the progress of uploading kubernetes tools bundle from the remote location. This API will also verify the kubernetes tools bundle, before marking upload as a success. 
    # @param site_id 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadBundleStatus, Fixnum, Hash)>] UploadBundleStatus data, response status code and response headers
    def get_upload_bundle_status_with_http_info(site_id, bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BundleApi.get_upload_bundle_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling BundleApi.get_upload_bundle_status"
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling BundleApi.get_upload_bundle_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/tools/upload/status/{bundle-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'bundle-id' + '}', bundle_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UploadBundleStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundleApi#get_upload_bundle_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload the Kubernetes tools on NSX Manager via File
    # Synchronous call to upload the Kubernetes tools on NSX Manager via File. You need to get this file from VMware website. File will contains kubectl binary, helm binary and signature to verify them. 
    # @param site_id 
    # @param file File to upload
    # @param [Hash] opts the optional parameters
    # @return [UploadBundleId]
    def upload_container_tools(site_id, file, opts = {})
      data, _status_code, _headers = upload_container_tools_with_http_info(site_id, file, opts)
      data
    end

    # Upload the Kubernetes tools on NSX Manager via File
    # Synchronous call to upload the Kubernetes tools on NSX Manager via File. You need to get this file from VMware website. File will contains kubectl binary, helm binary and signature to verify them. 
    # @param site_id 
    # @param file File to upload
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadBundleId, Fixnum, Hash)>] UploadBundleId data, response status code and response headers
    def upload_container_tools_with_http_info(site_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BundleApi.upload_container_tools ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling BundleApi.upload_container_tools"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling BundleApi.upload_container_tools"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/tools/upload'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UploadBundleId')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundleApi#upload_container_tools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload the Kubernetes tools on NSX Manager via remote URL
    # Upload the Kubernetes tools on NSX Manager via remote url. You need to get this file from VMware website. File contains kubectl binary, helm binary and signature to verify them. 
    # @param site_id 
    # @param upload_bundle_remote_server 
    # @param [Hash] opts the optional parameters
    # @return [UploadBundleId]
    def upload_container_tools_from_remote_server(site_id, upload_bundle_remote_server, opts = {})
      data, _status_code, _headers = upload_container_tools_from_remote_server_with_http_info(site_id, upload_bundle_remote_server, opts)
      data
    end

    # Upload the Kubernetes tools on NSX Manager via remote URL
    # Upload the Kubernetes tools on NSX Manager via remote url. You need to get this file from VMware website. File contains kubectl binary, helm binary and signature to verify them. 
    # @param site_id 
    # @param upload_bundle_remote_server 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadBundleId, Fixnum, Hash)>] UploadBundleId data, response status code and response headers
    def upload_container_tools_from_remote_server_with_http_info(site_id, upload_bundle_remote_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BundleApi.upload_container_tools_from_remote_server ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling BundleApi.upload_container_tools_from_remote_server"
      end
      # verify the required parameter 'upload_bundle_remote_server' is set
      if @api_client.config.client_side_validation && upload_bundle_remote_server.nil?
        fail ArgumentError, "Missing the required parameter 'upload_bundle_remote_server' when calling BundleApi.upload_container_tools_from_remote_server"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/tools/upload_from_remote_server'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(upload_bundle_remote_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UploadBundleId')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundleApi#upload_container_tools_from_remote_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
