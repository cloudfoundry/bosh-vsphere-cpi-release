=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class SegmentConnectionBindingMapApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Patch a infra segment connection binding map
    # Patch the infra segment connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param segment_id 
    # @param map_id 
    # @param segment_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SegmentConnectionBindingMap]
    def create_or_update_infra_segment_connection_binding_map(segment_id, map_id, segment_connection_binding_map, opts = {})
      data, _status_code, _headers = create_or_update_infra_segment_connection_binding_map_with_http_info(segment_id, map_id, segment_connection_binding_map, opts)
      data
    end

    # Patch a infra segment connection binding map
    # Patch the infra segment connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param segment_id 
    # @param map_id 
    # @param segment_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentConnectionBindingMap, Fixnum, Hash)>] SegmentConnectionBindingMap data, response status code and response headers
    def create_or_update_infra_segment_connection_binding_map_with_http_info(segment_id, map_id, segment_connection_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentConnectionBindingMapApi.create_or_update_infra_segment_connection_binding_map ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentConnectionBindingMapApi.create_or_update_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SegmentConnectionBindingMapApi.create_or_update_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_connection_binding_map' is set
      if @api_client.config.client_side_validation && segment_connection_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_connection_binding_map' when calling SegmentConnectionBindingMapApi.create_or_update_infra_segment_connection_binding_map"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/segment-connection-binding-maps/{map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_connection_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentConnectionBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentConnectionBindingMapApi#create_or_update_infra_segment_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a tier1 segment connection binding map
    # Patch the infra segment connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param tier_1_id 
    # @param segment_id 
    # @param map_id 
    # @param segment_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SegmentConnectionBindingMap]
    def create_or_update_tier1_segment_connection_binding_map(tier_1_id, segment_id, map_id, segment_connection_binding_map, opts = {})
      data, _status_code, _headers = create_or_update_tier1_segment_connection_binding_map_with_http_info(tier_1_id, segment_id, map_id, segment_connection_binding_map, opts)
      data
    end

    # Patch a tier1 segment connection binding map
    # Patch the infra segment connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param tier_1_id 
    # @param segment_id 
    # @param map_id 
    # @param segment_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentConnectionBindingMap, Fixnum, Hash)>] SegmentConnectionBindingMap data, response status code and response headers
    def create_or_update_tier1_segment_connection_binding_map_with_http_info(tier_1_id, segment_id, map_id, segment_connection_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentConnectionBindingMapApi.create_or_update_tier1_segment_connection_binding_map ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SegmentConnectionBindingMapApi.create_or_update_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentConnectionBindingMapApi.create_or_update_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SegmentConnectionBindingMapApi.create_or_update_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_connection_binding_map' is set
      if @api_client.config.client_side_validation && segment_connection_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_connection_binding_map' when calling SegmentConnectionBindingMapApi.create_or_update_tier1_segment_connection_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-connection-binding-maps/{map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_connection_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentConnectionBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentConnectionBindingMapApi#create_or_update_tier1_segment_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes infra SegmentConnectionBindingMap.
    # Deletes infra SegmentConnectionBindingMap. 
    # @param segment_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_infra_segment_connection_binding_map(segment_id, map_id, opts = {})
      delete_infra_segment_connection_binding_map_with_http_info(segment_id, map_id, opts)
      nil
    end

    # Deletes infra SegmentConnectionBindingMap.
    # Deletes infra SegmentConnectionBindingMap. 
    # @param segment_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_infra_segment_connection_binding_map_with_http_info(segment_id, map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentConnectionBindingMapApi.delete_infra_segment_connection_binding_map ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentConnectionBindingMapApi.delete_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SegmentConnectionBindingMapApi.delete_infra_segment_connection_binding_map"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/segment-connection-binding-maps/{map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentConnectionBindingMapApi#delete_infra_segment_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes infra SegmentConnectionBindingMap.
    # Deletes infra SegmentConnectionBindingMap. 
    # @param tier_1_id 
    # @param segment_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_segment_connection_binding_map(tier_1_id, segment_id, map_id, opts = {})
      delete_tier1_segment_connection_binding_map_with_http_info(tier_1_id, segment_id, map_id, opts)
      nil
    end

    # Deletes infra SegmentConnectionBindingMap.
    # Deletes infra SegmentConnectionBindingMap. 
    # @param tier_1_id 
    # @param segment_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_segment_connection_binding_map_with_http_info(tier_1_id, segment_id, map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentConnectionBindingMapApi.delete_tier1_segment_connection_binding_map ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SegmentConnectionBindingMapApi.delete_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentConnectionBindingMapApi.delete_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SegmentConnectionBindingMapApi.delete_tier1_segment_connection_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-connection-binding-maps/{map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentConnectionBindingMapApi#delete_tier1_segment_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List SegmentConnectionBindingMap specific Segment
    # List SegmentConnectionBindingMap specific Segment 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentConnectionBindingMapListResult]
    def list_infra_segment_connection_binding_map(segment_id, opts = {})
      data, _status_code, _headers = list_infra_segment_connection_binding_map_with_http_info(segment_id, opts)
      data
    end

    # List SegmentConnectionBindingMap specific Segment
    # List SegmentConnectionBindingMap specific Segment 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentConnectionBindingMapListResult, Fixnum, Hash)>] SegmentConnectionBindingMapListResult data, response status code and response headers
    def list_infra_segment_connection_binding_map_with_http_info(segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentConnectionBindingMapApi.list_infra_segment_connection_binding_map ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentConnectionBindingMapApi.list_infra_segment_connection_binding_map"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SegmentConnectionBindingMapApi.list_infra_segment_connection_binding_map, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SegmentConnectionBindingMapApi.list_infra_segment_connection_binding_map, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{segment-id}/segment-connection-binding-maps'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentConnectionBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentConnectionBindingMapApi#list_infra_segment_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List SegmentConnectionBindingMap specific Segment
    # List SegmentConnectionBindingMap specific Segment 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentConnectionBindingMapListResult]
    def list_tier1_segment_connection_binding_map(tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = list_tier1_segment_connection_binding_map_with_http_info(tier_1_id, segment_id, opts)
      data
    end

    # List SegmentConnectionBindingMap specific Segment
    # List SegmentConnectionBindingMap specific Segment 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentConnectionBindingMapListResult, Fixnum, Hash)>] SegmentConnectionBindingMapListResult data, response status code and response headers
    def list_tier1_segment_connection_binding_map_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentConnectionBindingMapApi.list_tier1_segment_connection_binding_map ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SegmentConnectionBindingMapApi.list_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentConnectionBindingMapApi.list_tier1_segment_connection_binding_map"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SegmentConnectionBindingMapApi.list_tier1_segment_connection_binding_map, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SegmentConnectionBindingMapApi.list_tier1_segment_connection_binding_map, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-connection-binding-maps'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentConnectionBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentConnectionBindingMapApi#list_tier1_segment_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a infra segment connection binding map
    # Patch the infra segment connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param map_id 
    # @param segment_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SegmentConnectionBindingMap]
    def orgs_org_id_projects_project_id_infra_create_or_update_infra_segment_connection_binding_map(org_id, project_id, segment_id, map_id, segment_connection_binding_map, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_infra_segment_connection_binding_map_with_http_info(org_id, project_id, segment_id, map_id, segment_connection_binding_map, opts)
      data
    end

    # Patch a infra segment connection binding map
    # Patch the infra segment connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param map_id 
    # @param segment_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentConnectionBindingMap, Fixnum, Hash)>] SegmentConnectionBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_infra_segment_connection_binding_map_with_http_info(org_id, project_id, segment_id, map_id, segment_connection_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_create_or_update_infra_segment_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_create_or_update_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_create_or_update_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_create_or_update_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_create_or_update_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_connection_binding_map' is set
      if @api_client.config.client_side_validation && segment_connection_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_connection_binding_map' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_create_or_update_infra_segment_connection_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/segment-connection-binding-maps/{map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_connection_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentConnectionBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentConnectionBindingMapApi#orgs_org_id_projects_project_id_infra_create_or_update_infra_segment_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a tier1 segment connection binding map
    # Patch the infra segment connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param map_id 
    # @param segment_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SegmentConnectionBindingMap]
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_segment_connection_binding_map(org_id, project_id, tier_1_id, segment_id, map_id, segment_connection_binding_map, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_tier1_segment_connection_binding_map_with_http_info(org_id, project_id, tier_1_id, segment_id, map_id, segment_connection_binding_map, opts)
      data
    end

    # Patch a tier1 segment connection binding map
    # Patch the infra segment connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param map_id 
    # @param segment_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentConnectionBindingMap, Fixnum, Hash)>] SegmentConnectionBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_tier1_segment_connection_binding_map_with_http_info(org_id, project_id, tier_1_id, segment_id, map_id, segment_connection_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_segment_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_connection_binding_map' is set
      if @api_client.config.client_side_validation && segment_connection_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_connection_binding_map' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_create_or_update_tier1_segment_connection_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-connection-binding-maps/{map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_connection_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentConnectionBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentConnectionBindingMapApi#orgs_org_id_projects_project_id_infra_create_or_update_tier1_segment_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes infra SegmentConnectionBindingMap.
    # Deletes infra SegmentConnectionBindingMap. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_infra_segment_connection_binding_map(org_id, project_id, segment_id, map_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_infra_segment_connection_binding_map_with_http_info(org_id, project_id, segment_id, map_id, opts)
      nil
    end

    # Deletes infra SegmentConnectionBindingMap.
    # Deletes infra SegmentConnectionBindingMap. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_infra_segment_connection_binding_map_with_http_info(org_id, project_id, segment_id, map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_delete_infra_segment_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_delete_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_delete_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_delete_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_delete_infra_segment_connection_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/segment-connection-binding-maps/{map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentConnectionBindingMapApi#orgs_org_id_projects_project_id_infra_delete_infra_segment_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes infra SegmentConnectionBindingMap.
    # Deletes infra SegmentConnectionBindingMap. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_segment_connection_binding_map(org_id, project_id, tier_1_id, segment_id, map_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_segment_connection_binding_map_with_http_info(org_id, project_id, tier_1_id, segment_id, map_id, opts)
      nil
    end

    # Deletes infra SegmentConnectionBindingMap.
    # Deletes infra SegmentConnectionBindingMap. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_segment_connection_binding_map_with_http_info(org_id, project_id, tier_1_id, segment_id, map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_delete_tier1_segment_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_delete_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_delete_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_delete_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_delete_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_delete_tier1_segment_connection_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-connection-binding-maps/{map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentConnectionBindingMapApi#orgs_org_id_projects_project_id_infra_delete_tier1_segment_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List SegmentConnectionBindingMap specific Segment
    # List SegmentConnectionBindingMap specific Segment 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentConnectionBindingMapListResult]
    def orgs_org_id_projects_project_id_infra_list_infra_segment_connection_binding_map(org_id, project_id, segment_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_infra_segment_connection_binding_map_with_http_info(org_id, project_id, segment_id, opts)
      data
    end

    # List SegmentConnectionBindingMap specific Segment
    # List SegmentConnectionBindingMap specific Segment 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentConnectionBindingMapListResult, Fixnum, Hash)>] SegmentConnectionBindingMapListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_infra_segment_connection_binding_map_with_http_info(org_id, project_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_list_infra_segment_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_list_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_list_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_list_infra_segment_connection_binding_map"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_list_infra_segment_connection_binding_map, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_list_infra_segment_connection_binding_map, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/segment-connection-binding-maps'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentConnectionBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentConnectionBindingMapApi#orgs_org_id_projects_project_id_infra_list_infra_segment_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List SegmentConnectionBindingMap specific Segment
    # List SegmentConnectionBindingMap specific Segment 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentConnectionBindingMapListResult]
    def orgs_org_id_projects_project_id_infra_list_tier1_segment_connection_binding_map(org_id, project_id, tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_tier1_segment_connection_binding_map_with_http_info(org_id, project_id, tier_1_id, segment_id, opts)
      data
    end

    # List SegmentConnectionBindingMap specific Segment
    # List SegmentConnectionBindingMap specific Segment 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentConnectionBindingMapListResult, Fixnum, Hash)>] SegmentConnectionBindingMapListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_tier1_segment_connection_binding_map_with_http_info(org_id, project_id, tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_list_tier1_segment_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_list_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_list_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_list_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_list_tier1_segment_connection_binding_map"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_list_tier1_segment_connection_binding_map, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_list_tier1_segment_connection_binding_map, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-connection-binding-maps'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentConnectionBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentConnectionBindingMapApi#orgs_org_id_projects_project_id_infra_list_tier1_segment_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a infra segment connection binding map
    # Patch the infra segment connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param map_id 
    # @param segment_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_infra_segment_connection_binding_map(org_id, project_id, segment_id, map_id, segment_connection_binding_map, opts = {})
      orgs_org_id_projects_project_id_infra_patch_infra_segment_connection_binding_map_with_http_info(org_id, project_id, segment_id, map_id, segment_connection_binding_map, opts)
      nil
    end

    # Patch a infra segment connection binding map
    # Patch the infra segment connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param map_id 
    # @param segment_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_infra_segment_connection_binding_map_with_http_info(org_id, project_id, segment_id, map_id, segment_connection_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_connection_binding_map' is set
      if @api_client.config.client_side_validation && segment_connection_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_connection_binding_map' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_connection_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/segment-connection-binding-maps/{map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_connection_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentConnectionBindingMapApi#orgs_org_id_projects_project_id_infra_patch_infra_segment_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a tier1 segment connection binding map
    # Patch the infra segment connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param map_id 
    # @param segment_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_tier1_segment_connection_binding_map(org_id, project_id, tier_1_id, segment_id, map_id, segment_connection_binding_map, opts = {})
      orgs_org_id_projects_project_id_infra_patch_tier1_segment_connection_binding_map_with_http_info(org_id, project_id, tier_1_id, segment_id, map_id, segment_connection_binding_map, opts)
      nil
    end

    # Patch a tier1 segment connection binding map
    # Patch the infra segment connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param map_id 
    # @param segment_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_tier1_segment_connection_binding_map_with_http_info(org_id, project_id, tier_1_id, segment_id, map_id, segment_connection_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_patch_tier1_segment_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_patch_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_patch_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_patch_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_patch_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_patch_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_connection_binding_map' is set
      if @api_client.config.client_side_validation && segment_connection_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_connection_binding_map' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_patch_tier1_segment_connection_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-connection-binding-maps/{map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_connection_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentConnectionBindingMapApi#orgs_org_id_projects_project_id_infra_patch_tier1_segment_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read infra SegmentConnectionBindingMap
    # Read infra SegmentConnectionBindingMap. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [SegmentConnectionBindingMap]
    def orgs_org_id_projects_project_id_infra_read_infra_segment_connection_binding_map(org_id, project_id, segment_id, map_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_infra_segment_connection_binding_map_with_http_info(org_id, project_id, segment_id, map_id, opts)
      data
    end

    # Read infra SegmentConnectionBindingMap
    # Read infra SegmentConnectionBindingMap. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentConnectionBindingMap, Fixnum, Hash)>] SegmentConnectionBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_infra_segment_connection_binding_map_with_http_info(org_id, project_id, segment_id, map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_read_infra_segment_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_read_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_read_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_read_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_read_infra_segment_connection_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/segment-connection-binding-maps/{map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentConnectionBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentConnectionBindingMapApi#orgs_org_id_projects_project_id_infra_read_infra_segment_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Tier1 SegmentConnectionBindingMap
    # Read Tier1 SegmentConnectionBindingMap. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [SegmentConnectionBindingMap]
    def orgs_org_id_projects_project_id_infra_read_tier1_segment_connection_binding_map(org_id, project_id, tier_1_id, segment_id, map_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_tier1_segment_connection_binding_map_with_http_info(org_id, project_id, tier_1_id, segment_id, map_id, opts)
      data
    end

    # Read Tier1 SegmentConnectionBindingMap
    # Read Tier1 SegmentConnectionBindingMap. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentConnectionBindingMap, Fixnum, Hash)>] SegmentConnectionBindingMap data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_tier1_segment_connection_binding_map_with_http_info(org_id, project_id, tier_1_id, segment_id, map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_read_tier1_segment_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_read_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_read_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_read_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_read_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SegmentConnectionBindingMapApi.orgs_org_id_projects_project_id_infra_read_tier1_segment_connection_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-connection-binding-maps/{map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentConnectionBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentConnectionBindingMapApi#orgs_org_id_projects_project_id_infra_read_tier1_segment_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a infra segment connection binding map
    # Patch the infra segment connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param segment_id 
    # @param map_id 
    # @param segment_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_infra_segment_connection_binding_map(segment_id, map_id, segment_connection_binding_map, opts = {})
      patch_infra_segment_connection_binding_map_with_http_info(segment_id, map_id, segment_connection_binding_map, opts)
      nil
    end

    # Patch a infra segment connection binding map
    # Patch the infra segment connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param segment_id 
    # @param map_id 
    # @param segment_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_infra_segment_connection_binding_map_with_http_info(segment_id, map_id, segment_connection_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentConnectionBindingMapApi.patch_infra_segment_connection_binding_map ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentConnectionBindingMapApi.patch_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SegmentConnectionBindingMapApi.patch_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_connection_binding_map' is set
      if @api_client.config.client_side_validation && segment_connection_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_connection_binding_map' when calling SegmentConnectionBindingMapApi.patch_infra_segment_connection_binding_map"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/segment-connection-binding-maps/{map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_connection_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentConnectionBindingMapApi#patch_infra_segment_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a tier1 segment connection binding map
    # Patch the infra segment connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param tier_1_id 
    # @param segment_id 
    # @param map_id 
    # @param segment_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier1_segment_connection_binding_map(tier_1_id, segment_id, map_id, segment_connection_binding_map, opts = {})
      patch_tier1_segment_connection_binding_map_with_http_info(tier_1_id, segment_id, map_id, segment_connection_binding_map, opts)
      nil
    end

    # Patch a tier1 segment connection binding map
    # Patch the infra segment connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param tier_1_id 
    # @param segment_id 
    # @param map_id 
    # @param segment_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier1_segment_connection_binding_map_with_http_info(tier_1_id, segment_id, map_id, segment_connection_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentConnectionBindingMapApi.patch_tier1_segment_connection_binding_map ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SegmentConnectionBindingMapApi.patch_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentConnectionBindingMapApi.patch_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SegmentConnectionBindingMapApi.patch_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_connection_binding_map' is set
      if @api_client.config.client_side_validation && segment_connection_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'segment_connection_binding_map' when calling SegmentConnectionBindingMapApi.patch_tier1_segment_connection_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-connection-binding-maps/{map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_connection_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentConnectionBindingMapApi#patch_tier1_segment_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read infra SegmentConnectionBindingMap
    # Read infra SegmentConnectionBindingMap. 
    # @param segment_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [SegmentConnectionBindingMap]
    def read_infra_segment_connection_binding_map(segment_id, map_id, opts = {})
      data, _status_code, _headers = read_infra_segment_connection_binding_map_with_http_info(segment_id, map_id, opts)
      data
    end

    # Read infra SegmentConnectionBindingMap
    # Read infra SegmentConnectionBindingMap. 
    # @param segment_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentConnectionBindingMap, Fixnum, Hash)>] SegmentConnectionBindingMap data, response status code and response headers
    def read_infra_segment_connection_binding_map_with_http_info(segment_id, map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentConnectionBindingMapApi.read_infra_segment_connection_binding_map ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentConnectionBindingMapApi.read_infra_segment_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SegmentConnectionBindingMapApi.read_infra_segment_connection_binding_map"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/segment-connection-binding-maps/{map-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentConnectionBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentConnectionBindingMapApi#read_infra_segment_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Tier1 SegmentConnectionBindingMap
    # Read Tier1 SegmentConnectionBindingMap. 
    # @param tier_1_id 
    # @param segment_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [SegmentConnectionBindingMap]
    def read_tier1_segment_connection_binding_map(tier_1_id, segment_id, map_id, opts = {})
      data, _status_code, _headers = read_tier1_segment_connection_binding_map_with_http_info(tier_1_id, segment_id, map_id, opts)
      data
    end

    # Read Tier1 SegmentConnectionBindingMap
    # Read Tier1 SegmentConnectionBindingMap. 
    # @param tier_1_id 
    # @param segment_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentConnectionBindingMap, Fixnum, Hash)>] SegmentConnectionBindingMap data, response status code and response headers
    def read_tier1_segment_connection_binding_map_with_http_info(tier_1_id, segment_id, map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SegmentConnectionBindingMapApi.read_tier1_segment_connection_binding_map ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SegmentConnectionBindingMapApi.read_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentConnectionBindingMapApi.read_tier1_segment_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SegmentConnectionBindingMapApi.read_tier1_segment_connection_binding_map"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-connection-binding-maps/{map-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentConnectionBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentConnectionBindingMapApi#read_tier1_segment_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
