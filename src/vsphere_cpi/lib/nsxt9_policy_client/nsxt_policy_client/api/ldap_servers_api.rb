=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class LDAPServersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def global_infra_test_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, action, opts = {})
      global_infra_test_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, action, opts)
      nil
    end

    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_test_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LDAPServersApi.global_infra_test_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling LDAPServersApi.global_infra_test_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling LDAPServersApi.global_infra_test_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling LDAPServersApi.global_infra_test_firewall_identity_store_ldap_server"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CONNECTIVITY'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CONNECTIVITY"
      end
      # resource path
      local_var_path = '/global-infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LDAPServersApi#global_infra_test_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [nil]
    def test_firewall_identity_store_ldap_server(firewall_identity_store_id, ldap_server_id, action, opts = {})
      test_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, action, opts)
      nil
    end

    # Test a LDAP server connection for directory domain
    # The API tests a LDAP server connection for an already configured domain. If the connection is successful, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param firewall_identity_store_id Firewall Identity store identifier
    # @param ldap_server_id LDAP server identifier
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def test_firewall_identity_store_ldap_server_with_http_info(firewall_identity_store_id, ldap_server_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LDAPServersApi.test_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'firewall_identity_store_id' is set
      if @api_client.config.client_side_validation && firewall_identity_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_identity_store_id' when calling LDAPServersApi.test_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'ldap_server_id' is set
      if @api_client.config.client_side_validation && ldap_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_server_id' when calling LDAPServersApi.test_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling LDAPServersApi.test_firewall_identity_store_ldap_server"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CONNECTIVITY'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CONNECTIVITY"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}'.sub('{' + 'firewall-identity-store-id' + '}', firewall_identity_store_id.to_s).sub('{' + 'ldap-server-id' + '}', ldap_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LDAPServersApi#test_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a directory domain event log server connectivity
    # This API tests a event log server connectivity before the actual domain or event log server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 200 and a corresponding error message will be returned. Note - Query param 'enforcement_point_path' would be honoured only in case of Global manager.
    # @param directory_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryEventLogServerStatus]
    def verify_firewall_identity_store_event_log_server(directory_event_log_server, opts = {})
      data, _status_code, _headers = verify_firewall_identity_store_event_log_server_with_http_info(directory_event_log_server, opts)
      data
    end

    # Test a directory domain event log server connectivity
    # This API tests a event log server connectivity before the actual domain or event log server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 200 and a corresponding error message will be returned. Note - Query param &#39;enforcement_point_path&#39; would be honoured only in case of Global manager.
    # @param directory_event_log_server 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryEventLogServerStatus, Fixnum, Hash)>] DirectoryEventLogServerStatus data, response status code and response headers
    def verify_firewall_identity_store_event_log_server_with_http_info(directory_event_log_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LDAPServersApi.verify_firewall_identity_store_event_log_server ...'
      end
      # verify the required parameter 'directory_event_log_server' is set
      if @api_client.config.client_side_validation && directory_event_log_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_event_log_server' when calling LDAPServersApi.verify_firewall_identity_store_event_log_server"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-store-event-log-servers/status'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_event_log_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryEventLogServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LDAPServersApi#verify_firewall_identity_store_event_log_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test a directory domain LDAP server connectivity
    # This API tests a LDAP server connectivity before the actual domain or LDAP server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param directory_ldap_server 
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [DirectoryLdapServerStatus]
    def verify_firewall_identity_store_ldap_server(directory_ldap_server, action, opts = {})
      data, _status_code, _headers = verify_firewall_identity_store_ldap_server_with_http_info(directory_ldap_server, action, opts)
      data
    end

    # Test a directory domain LDAP server connectivity
    # This API tests a LDAP server connectivity before the actual domain or LDAP server is configured. If the connectivity is good, the response will be HTTP status 200. Otherwise the response will be HTTP status 500 and corresponding error message will be returned.
    # @param directory_ldap_server 
    # @param action LDAP server test requested
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(DirectoryLdapServerStatus, Fixnum, Hash)>] DirectoryLdapServerStatus data, response status code and response headers
    def verify_firewall_identity_store_ldap_server_with_http_info(directory_ldap_server, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LDAPServersApi.verify_firewall_identity_store_ldap_server ...'
      end
      # verify the required parameter 'directory_ldap_server' is set
      if @api_client.config.client_side_validation && directory_ldap_server.nil?
        fail ArgumentError, "Missing the required parameter 'directory_ldap_server' when calling LDAPServersApi.verify_firewall_identity_store_ldap_server"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling LDAPServersApi.verify_firewall_identity_store_ldap_server"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CONNECTIVITY'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CONNECTIVITY"
      end
      # resource path
      local_var_path = '/infra/firewall-identity-store-ldap-server'

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(directory_ldap_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryLdapServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LDAPServersApi#verify_firewall_identity_store_ldap_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
