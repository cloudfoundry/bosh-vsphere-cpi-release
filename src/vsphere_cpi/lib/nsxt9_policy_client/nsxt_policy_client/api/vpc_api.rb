=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class VPCApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Apply tags on virtual machine under VPC
    # Allows an admin to apply multiple tags to a virtual machine under VPC. This operation does not store the intent on the policy side. It applies the tag directly on the specified enforcement point. This operation will replace the existing tags on the virtual machine with the ones that have been passed. If the application of tag fails on the enforcement point, then an error is reported. The admin will have to retry the operation again. Policy framework does not perform a retry. Failure could occur due to multiple reasons. For e.g enforcement point is down, Enforcement point could not apply the tag due to constraints like max tags limit exceeded, etc. NOTE: The \"virtual_machine_id\" field in the payload will be ignored and the virtual machine ID provided in the URL will be honored. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param virtual_machine_id 
    # @param virtual_machine_tags_update 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [nil]
    def apply_tag_on_virtual_machine_vpc(org_id, project_id, vpc_id, virtual_machine_id, virtual_machine_tags_update, opts = {})
      apply_tag_on_virtual_machine_vpc_with_http_info(org_id, project_id, vpc_id, virtual_machine_id, virtual_machine_tags_update, opts)
      nil
    end

    # Apply tags on virtual machine under VPC
    # Allows an admin to apply multiple tags to a virtual machine under VPC. This operation does not store the intent on the policy side. It applies the tag directly on the specified enforcement point. This operation will replace the existing tags on the virtual machine with the ones that have been passed. If the application of tag fails on the enforcement point, then an error is reported. The admin will have to retry the operation again. Policy framework does not perform a retry. Failure could occur due to multiple reasons. For e.g enforcement point is down, Enforcement point could not apply the tag due to constraints like max tags limit exceeded, etc. NOTE: The \&quot;virtual_machine_id\&quot; field in the payload will be ignored and the virtual machine ID provided in the URL will be honored. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param virtual_machine_id 
    # @param virtual_machine_tags_update 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def apply_tag_on_virtual_machine_vpc_with_http_info(org_id, project_id, vpc_id, virtual_machine_id, virtual_machine_tags_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.apply_tag_on_virtual_machine_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.apply_tag_on_virtual_machine_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.apply_tag_on_virtual_machine_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.apply_tag_on_virtual_machine_vpc"
      end
      # verify the required parameter 'virtual_machine_id' is set
      if @api_client.config.client_side_validation && virtual_machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_machine_id' when calling VPCApi.apply_tag_on_virtual_machine_vpc"
      end
      # verify the required parameter 'virtual_machine_tags_update' is set
      if @api_client.config.client_side_validation && virtual_machine_tags_update.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_machine_tags_update' when calling VPCApi.apply_tag_on_virtual_machine_vpc"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.apply_tag_on_virtual_machine_vpc, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.apply_tag_on_virtual_machine_vpc, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/virtual-machines/{virtual-machine-id}/tags'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'virtual-machine-id' + '}', virtual_machine_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(virtual_machine_tags_update)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#apply_tag_on_virtual_machine_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update NAT Rule
    # Update NAT Rule on VPC denoted by VPC ID, under NAT section denoted by &lt;nat-id&gt;. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_vpc_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [PolicyVpcNatRule]
    def create_or_replace_policy_nat_rule_on_vpc(org_id, project_id, vpc_id, nat_id, nat_rule_id, policy_vpc_nat_rule, opts = {})
      data, _status_code, _headers = create_or_replace_policy_nat_rule_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, nat_rule_id, policy_vpc_nat_rule, opts)
      data
    end

    # Update NAT Rule
    # Update NAT Rule on VPC denoted by VPC ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_vpc_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyVpcNatRule, Fixnum, Hash)>] PolicyVpcNatRule data, response status code and response headers
    def create_or_replace_policy_nat_rule_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, nat_rule_id, policy_vpc_nat_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.create_or_replace_policy_nat_rule_on_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.create_or_replace_policy_nat_rule_on_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.create_or_replace_policy_nat_rule_on_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.create_or_replace_policy_nat_rule_on_vpc"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling VPCApi.create_or_replace_policy_nat_rule_on_vpc"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling VPCApi.create_or_replace_policy_nat_rule_on_vpc"
      end
      # verify the required parameter 'policy_vpc_nat_rule' is set
      if @api_client.config.client_side_validation && policy_vpc_nat_rule.nil?
        fail ArgumentError, "Missing the required parameter 'policy_vpc_nat_rule' when calling VPCApi.create_or_replace_policy_nat_rule_on_vpc"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_vpc_nat_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyVpcNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#create_or_replace_policy_nat_rule_on_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Or Replace VPC Connectivity Profile
    # If the VPC Connectivity Profile is not already present, create a VPC Connectivity Profile instance. If it already exists, replace the VPC Connectivity Profile instance with this object. 
    # @param org_id 
    # @param project_id 
    # @param vpc_connectivity_profile_id 
    # @param vpc_connectivity_profile 
    # @param [Hash] opts the optional parameters
    # @return [VpcConnectivityProfile]
    def create_or_replace_vpc_connectivity_profile(org_id, project_id, vpc_connectivity_profile_id, vpc_connectivity_profile, opts = {})
      data, _status_code, _headers = create_or_replace_vpc_connectivity_profile_with_http_info(org_id, project_id, vpc_connectivity_profile_id, vpc_connectivity_profile, opts)
      data
    end

    # Create Or Replace VPC Connectivity Profile
    # If the VPC Connectivity Profile is not already present, create a VPC Connectivity Profile instance. If it already exists, replace the VPC Connectivity Profile instance with this object. 
    # @param org_id 
    # @param project_id 
    # @param vpc_connectivity_profile_id 
    # @param vpc_connectivity_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcConnectivityProfile, Fixnum, Hash)>] VpcConnectivityProfile data, response status code and response headers
    def create_or_replace_vpc_connectivity_profile_with_http_info(org_id, project_id, vpc_connectivity_profile_id, vpc_connectivity_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.create_or_replace_vpc_connectivity_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.create_or_replace_vpc_connectivity_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.create_or_replace_vpc_connectivity_profile"
      end
      # verify the required parameter 'vpc_connectivity_profile_id' is set
      if @api_client.config.client_side_validation && vpc_connectivity_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_connectivity_profile_id' when calling VPCApi.create_or_replace_vpc_connectivity_profile"
      end
      # verify the required parameter 'vpc_connectivity_profile' is set
      if @api_client.config.client_side_validation && vpc_connectivity_profile.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_connectivity_profile' when calling VPCApi.create_or_replace_vpc_connectivity_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-connectivity-profiles/{vpc-connectivity-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-connectivity-profile-id' + '}', vpc_connectivity_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_connectivity_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcConnectivityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#create_or_replace_vpc_connectivity_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Or Replace VPC Service Profile
    # If the VPC Service Profile is not already present, create a VPC Service Profile instance. If it already exists, replace the VPC Service Profile instance with this object. 
    # @param org_id 
    # @param project_id 
    # @param vpc_service_profile_id 
    # @param vpc_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [VpcServiceProfile]
    def create_or_replace_vpc_service_profile(org_id, project_id, vpc_service_profile_id, vpc_service_profile, opts = {})
      data, _status_code, _headers = create_or_replace_vpc_service_profile_with_http_info(org_id, project_id, vpc_service_profile_id, vpc_service_profile, opts)
      data
    end

    # Create Or Replace VPC Service Profile
    # If the VPC Service Profile is not already present, create a VPC Service Profile instance. If it already exists, replace the VPC Service Profile instance with this object. 
    # @param org_id 
    # @param project_id 
    # @param vpc_service_profile_id 
    # @param vpc_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcServiceProfile, Fixnum, Hash)>] VpcServiceProfile data, response status code and response headers
    def create_or_replace_vpc_service_profile_with_http_info(org_id, project_id, vpc_service_profile_id, vpc_service_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.create_or_replace_vpc_service_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.create_or_replace_vpc_service_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.create_or_replace_vpc_service_profile"
      end
      # verify the required parameter 'vpc_service_profile_id' is set
      if @api_client.config.client_side_validation && vpc_service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_service_profile_id' when calling VPCApi.create_or_replace_vpc_service_profile"
      end
      # verify the required parameter 'vpc_service_profile' is set
      if @api_client.config.client_side_validation && vpc_service_profile.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_service_profile' when calling VPCApi.create_or_replace_vpc_service_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-service-profiles/{vpc-service-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-service-profile-id' + '}', vpc_service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_service_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcServiceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#create_or_replace_vpc_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a VPC static routes
    # If static routes for route-id are not already present, create static routes. If it already exists, replace the static routes for route-id. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param route_id 
    # @param static_routes 
    # @param [Hash] opts the optional parameters
    # @return [StaticRoutes]
    def create_or_replace_vpc_static_routes(org_id, project_id, vpc_id, route_id, static_routes, opts = {})
      data, _status_code, _headers = create_or_replace_vpc_static_routes_with_http_info(org_id, project_id, vpc_id, route_id, static_routes, opts)
      data
    end

    # Create or update a VPC static routes
    # If static routes for route-id are not already present, create static routes. If it already exists, replace the static routes for route-id. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param route_id 
    # @param static_routes 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StaticRoutes, Fixnum, Hash)>] StaticRoutes data, response status code and response headers
    def create_or_replace_vpc_static_routes_with_http_info(org_id, project_id, vpc_id, route_id, static_routes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.create_or_replace_vpc_static_routes ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.create_or_replace_vpc_static_routes"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.create_or_replace_vpc_static_routes"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.create_or_replace_vpc_static_routes"
      end
      # verify the required parameter 'route_id' is set
      if @api_client.config.client_side_validation && route_id.nil?
        fail ArgumentError, "Missing the required parameter 'route_id' when calling VPCApi.create_or_replace_vpc_static_routes"
      end
      # verify the required parameter 'static_routes' is set
      if @api_client.config.client_side_validation && static_routes.nil?
        fail ArgumentError, "Missing the required parameter 'static_routes' when calling VPCApi.create_or_replace_vpc_static_routes"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/static-routes/{route-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'route-id' + '}', route_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(static_routes)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticRoutes')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#create_or_replace_vpc_static_routes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update VPC Subnet DHCP static binding
    # If binding with the binding-id is not already present, create a new VPC Subnet DHCP static binding instance. If it already exists, replace the existing VPC Subnet DHCP static binding instance with this object. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def create_or_replace_vpc_subnet_dhcp_static_binding(org_id, project_id, vpc_id, subnet_id, binding_id, dhcp_static_binding_config, opts = {})
      data, _status_code, _headers = create_or_replace_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, dhcp_static_binding_config, opts)
      data
    end

    # Create or update VPC Subnet DHCP static binding
    # If binding with the binding-id is not already present, create a new VPC Subnet DHCP static binding instance. If it already exists, replace the existing VPC Subnet DHCP static binding instance with this object. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def create_or_replace_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.create_or_replace_vpc_subnet_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.create_or_replace_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.create_or_replace_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.create_or_replace_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.create_or_replace_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling VPCApi.create_or_replace_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling VPCApi.create_or_replace_vpc_subnet_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#create_or_replace_vpc_subnet_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a subnet connection binding map
    # Patch the subnet connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param subnet_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SubnetConnectionBindingMap]
    def create_or_update_subnet_connection_binding_map(org_id, project_id, vpc_id, subnet_id, map_id, subnet_connection_binding_map, opts = {})
      data, _status_code, _headers = create_or_update_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, subnet_connection_binding_map, opts)
      data
    end

    # Patch a subnet connection binding map
    # Patch the subnet connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param subnet_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubnetConnectionBindingMap, Fixnum, Hash)>] SubnetConnectionBindingMap data, response status code and response headers
    def create_or_update_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, subnet_connection_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.create_or_update_subnet_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.create_or_update_subnet_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.create_or_update_subnet_connection_binding_map"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.create_or_update_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.create_or_update_subnet_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling VPCApi.create_or_update_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_connection_binding_map' is set
      if @api_client.config.client_side_validation && subnet_connection_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_connection_binding_map' when calling VPCApi.create_or_update_subnet_connection_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/subnet-connection-binding-maps/{map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(subnet_connection_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubnetConnectionBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#create_or_update_subnet_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete NAT Rule
    # Delete NAT Rule from VPC denoted by VPC ID, under NAT section denoted by &lt;nat-id&gt;. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema.
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_nat_rule_on_vpc(org_id, project_id, vpc_id, nat_id, nat_rule_id, opts = {})
      delete_policy_nat_rule_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, nat_rule_id, opts)
      nil
    end

    # Delete NAT Rule
    # Delete NAT Rule from VPC denoted by VPC ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema.
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_nat_rule_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_policy_nat_rule_on_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_policy_nat_rule_on_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_policy_nat_rule_on_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_policy_nat_rule_on_vpc"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling VPCApi.delete_policy_nat_rule_on_vpc"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling VPCApi.delete_policy_nat_rule_on_vpc"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_policy_nat_rule_on_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes infra SubnetConnectionBindingMap.
    # Deletes infra SubnetConnectionBindingMap. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_subnet_connection_binding_map(org_id, project_id, vpc_id, subnet_id, map_id, opts = {})
      delete_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, opts)
      nil
    end

    # Deletes infra SubnetConnectionBindingMap.
    # Deletes infra SubnetConnectionBindingMap. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_subnet_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_subnet_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_subnet_connection_binding_map"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.delete_subnet_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling VPCApi.delete_subnet_connection_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/subnet-connection-binding-maps/{map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_subnet_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove Subnet DHCP server leases
    # Remove Subnet DHCP server leases
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param list_addresses 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_subnet_dhcp_server_leases(org_id, project_id, vpc_id, subnet_id, list_addresses, opts = {})
      delete_subnet_dhcp_server_leases_with_http_info(org_id, project_id, vpc_id, subnet_id, list_addresses, opts)
      nil
    end

    # Remove Subnet DHCP server leases
    # Remove Subnet DHCP server leases
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param list_addresses 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_subnet_dhcp_server_leases_with_http_info(org_id, project_id, vpc_id, subnet_id, list_addresses, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_subnet_dhcp_server_leases ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.delete_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'list_addresses' is set
      if @api_client.config.client_side_validation && list_addresses.nil?
        fail ArgumentError, "Missing the required parameter 'list_addresses' when calling VPCApi.delete_subnet_dhcp_server_leases"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/actions/release-dhcp-server-leases'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(list_addresses)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_subnet_dhcp_server_leases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete VPC and its children
    # Delete VPC. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :is_recursive Flag to delete entire VPC tree recursively. (default to false)
    # @return [nil]
    def delete_vpc(org_id, project_id, vpc_id, opts = {})
      delete_vpc_with_http_info(org_id, project_id, vpc_id, opts)
      nil
    end

    # Delete VPC and its children
    # Delete VPC. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :is_recursive Flag to delete entire VPC tree recursively.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'is_recursive'] = opts[:'is_recursive'] if !opts[:'is_recursive'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete VPC Attachment
    # Delete VPC Attachment 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param vpc_attachment_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_attachment(org_id, project_id, vpc_id, vpc_attachment_id, opts = {})
      delete_vpc_attachment_with_http_info(org_id, project_id, vpc_id, vpc_attachment_id, opts)
      nil
    end

    # Delete VPC Attachment
    # Delete VPC Attachment 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param vpc_attachment_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_attachment_with_http_info(org_id, project_id, vpc_id, vpc_attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_attachment ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_attachment"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_attachment"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_attachment"
      end
      # verify the required parameter 'vpc_attachment_id' is set
      if @api_client.config.client_side_validation && vpc_attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_attachment_id' when calling VPCApi.delete_vpc_attachment"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/attachments/{vpc-attachment-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-attachment-id' + '}', vpc_attachment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete VPC Connectivity Profile
    # Deletes the specified VPC Connectivity Profile. 
    # @param org_id 
    # @param project_id 
    # @param vpc_connectivity_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_connectivity_profile(org_id, project_id, vpc_connectivity_profile_id, opts = {})
      delete_vpc_connectivity_profile_with_http_info(org_id, project_id, vpc_connectivity_profile_id, opts)
      nil
    end

    # Delete VPC Connectivity Profile
    # Deletes the specified VPC Connectivity Profile. 
    # @param org_id 
    # @param project_id 
    # @param vpc_connectivity_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_connectivity_profile_with_http_info(org_id, project_id, vpc_connectivity_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_connectivity_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_connectivity_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_connectivity_profile"
      end
      # verify the required parameter 'vpc_connectivity_profile_id' is set
      if @api_client.config.client_side_validation && vpc_connectivity_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_connectivity_profile_id' when calling VPCApi.delete_vpc_connectivity_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-connectivity-profiles/{vpc-connectivity-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-connectivity-profile-id' + '}', vpc_connectivity_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_connectivity_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Gateway Policy
    # Delete Gateway Policy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_gateway_policy(org_id, project_id, vpc_id, gateway_policy_id, opts = {})
      delete_vpc_gateway_policy_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, opts)
      nil
    end

    # Delete Gateway Policy
    # Delete Gateway Policy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_gateway_policy_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_gateway_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_gateway_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_gateway_policy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling VPCApi.delete_vpc_gateway_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete N-S Firewall Rule
    # Delete N-S Firewall Rule DELETE /orgs/org1/projects/project1/vpcs/vpc-1/gateway-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_gateway_rule(org_id, project_id, vpc_id, gateway_policy_id, rule_id, opts = {})
      delete_vpc_gateway_rule_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, opts)
      nil
    end

    # Delete N-S Firewall Rule
    # Delete N-S Firewall Rule DELETE /orgs/org1/projects/project1/vpcs/vpc-1/gateway-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_gateway_rule_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_gateway_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling VPCApi.delete_vpc_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling VPCApi.delete_vpc_gateway_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete VPC Group
    # Delete VPC Group. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_group(org_id, project_id, vpc_id, group_id, opts = {})
      delete_vpc_group_with_http_info(org_id, project_id, vpc_id, group_id, opts)
      nil
    end

    # Delete VPC Group
    # Delete VPC Group. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_group_with_http_info(org_id, project_id, vpc_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_group ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_group"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_group"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling VPCApi.delete_vpc_group"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups/{group-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Records intent to release an IP from an IpPool.
    # Releases the IP that was allocated for this allocation request 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param ip_address_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_ip_address_allocation(org_id, project_id, vpc_id, ip_address_allocation_id, opts = {})
      delete_vpc_ip_address_allocation_with_http_info(org_id, project_id, vpc_id, ip_address_allocation_id, opts)
      nil
    end

    # Records intent to release an IP from an IpPool.
    # Releases the IP that was allocated for this allocation request 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param ip_address_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_ip_address_allocation_with_http_info(org_id, project_id, vpc_id, ip_address_allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_ip_address_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_ip_address_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_ip_address_allocation"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_ip_address_allocation"
      end
      # verify the required parameter 'ip_address_allocation_id' is set
      if @api_client.config.client_side_validation && ip_address_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation_id' when calling VPCApi.delete_vpc_ip_address_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/ip-address-allocations/{ip-address-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'ip-address-allocation-id' + '}', ip_address_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_ip_address_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBAppProfile and all the entities contained by this LBAppProfile
    # Delete the LBAppProfile along with all the entities contained by this LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_app_profile(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts = {})
      delete_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts)
      nil
    end

    # Delete LBAppProfile and all the entities contained by this LBAppProfile
    # Delete the LBAppProfile along with all the entities contained by this LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_lb_app_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_lb_app_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_lb_app_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_app_profile_id' when calling VPCApi.delete_vpc_lb_app_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-app-profiles/{vpc-lb-app-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-app-profile-id' + '}', vpc_lb_app_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBClientSslProfile and all the entities contained by this LBClientSslProfile 
    # Delete the LBClientSslProfile along with all the entities contained by this LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_client_ssl_profile(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts = {})
      delete_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts)
      nil
    end

    # Delete LBClientSslProfile and all the entities contained by this LBClientSslProfile 
    # Delete the LBClientSslProfile along with all the entities contained by this LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_client_ssl_profile_id' when calling VPCApi.delete_vpc_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-client-ssl-profiles/{vpc-lb-client-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-client-ssl-profile-id' + '}', vpc_lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBMonitorProfile and all the entities contained by this LBMonitorProfile
    # Delete the LBMonitorProfile along with all the entities contained by this LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_monitor_profile(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts = {})
      delete_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts)
      nil
    end

    # Delete LBMonitorProfile and all the entities contained by this LBMonitorProfile
    # Delete the LBMonitorProfile along with all the entities contained by this LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_lb_monitor_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_monitor_profile_id' when calling VPCApi.delete_vpc_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-monitor-profiles/{vpc-lb-monitor-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-monitor-profile-id' + '}', vpc_lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBPersistenceProfile and all the entities contained by this LBPersistenceProfile
    # Delete the LBPersistenceProfile along with all the entities contained by this LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_persistence_profile(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts = {})
      delete_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts)
      nil
    end

    # Delete LBPersistenceProfile and all the entities contained by this LBPersistenceProfile
    # Delete the LBPersistenceProfile along with all the entities contained by this LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_lb_persistence_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_persistence_profile_id' when calling VPCApi.delete_vpc_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-persistence-profiles/{vpc-lb-persistence-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-persistence-profile-id' + '}', vpc_lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBPool and all the entities contained by this LBPool
    # Delete the LBPool along with all the entities contained by this LBPool.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_pool(org_id, project_id, vpc_id, vpc_lb_pool_id, opts = {})
      delete_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, opts)
      nil
    end

    # Delete LBPool and all the entities contained by this LBPool
    # Delete the LBPool along with all the entities contained by this LBPool.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_lb_pool ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_lb_pool"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_lb_pool_id' is set
      if @api_client.config.client_side_validation && vpc_lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_pool_id' when calling VPCApi.delete_vpc_lb_pool"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-pools/{vpc-lb-pool-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-pool-id' + '}', vpc_lb_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_lb_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBServerSslProfile and all the entities contained by this LBServerSslProfile 
    # Delete the LBServerSslProfile along with all the entities contained by this LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_server_ssl_profile(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts = {})
      delete_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts)
      nil
    end

    # Delete LBServerSslProfile and all the entities contained by this LBServerSslProfile 
    # Delete the LBServerSslProfile along with all the entities contained by this LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_server_ssl_profile_id' when calling VPCApi.delete_vpc_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-server-ssl-profiles/{vpc-lb-server-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-server-ssl-profile-id' + '}', vpc_lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the load balancer and all the entities contained by this load balancer 
    # Delete the load balancer and all the entities contained by this load balancer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_service(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      delete_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts)
      nil
    end

    # Delete the load balancer and all the entities contained by this load balancer 
    # Delete the load balancer and all the entities contained by this load balancer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_lb_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_lb_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_lb_service"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_lb_service"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling VPCApi.delete_vpc_lb_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_lb_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBVirtualServer and all the entities contained by this LBVirtualServer.
    # Delete the LBVirtualServer along with all the entities contained by this LBVirtualServer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_virtual_server(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, opts = {})
      delete_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, opts)
      nil
    end

    # Delete LBVirtualServer and all the entities contained by this LBVirtualServer.
    # Delete the LBVirtualServer along with all the entities contained by this LBVirtualServer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_lb_virtual_server ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_lb_virtual_server"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && vpc_lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_virtual_server_id' when calling VPCApi.delete_vpc_lb_virtual_server"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-virtual-servers/{vpc-lb-virtual-server-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-virtual-server-id' + '}', vpc_lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_lb_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete E-W Firewall Rule
    # Delete E-W Firewall Rule DELETE /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_policy_rule(org_id, project_id, vpc_id, security_policy_id, rule_id, opts = {})
      delete_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, opts)
      nil
    end

    # Delete E-W Firewall Rule
    # Delete E-W Firewall Rule DELETE /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_policy_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_policy_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_policy_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_policy_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling VPCApi.delete_vpc_policy_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling VPCApi.delete_vpc_policy_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_policy_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete SecurityPolicy
    # Delete SecurityPolicy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_security_policy(org_id, project_id, vpc_id, security_policy_id, opts = {})
      delete_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts)
      nil
    end

    # Delete SecurityPolicy
    # Delete SecurityPolicy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_security_policy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_security_policy"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling VPCApi.delete_vpc_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete VPC Service Profile
    # Deletes the specified VPC Service Profile. 
    # @param org_id 
    # @param project_id 
    # @param vpc_service_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_service_profile(org_id, project_id, vpc_service_profile_id, opts = {})
      delete_vpc_service_profile_with_http_info(org_id, project_id, vpc_service_profile_id, opts)
      nil
    end

    # Delete VPC Service Profile
    # Deletes the specified VPC Service Profile. 
    # @param org_id 
    # @param project_id 
    # @param vpc_service_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_service_profile_with_http_info(org_id, project_id, vpc_service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_service_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_service_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_service_profile"
      end
      # verify the required parameter 'vpc_service_profile_id' is set
      if @api_client.config.client_side_validation && vpc_service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_service_profile_id' when calling VPCApi.delete_vpc_service_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-service-profiles/{vpc-service-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-service-profile-id' + '}', vpc_service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete VPC static routes
    # Delete VPC static routes
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param route_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_static_routes(org_id, project_id, vpc_id, route_id, opts = {})
      delete_vpc_static_routes_with_http_info(org_id, project_id, vpc_id, route_id, opts)
      nil
    end

    # Delete VPC static routes
    # Delete VPC static routes
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param route_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_static_routes_with_http_info(org_id, project_id, vpc_id, route_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_static_routes ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_static_routes"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_static_routes"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_static_routes"
      end
      # verify the required parameter 'route_id' is set
      if @api_client.config.client_side_validation && route_id.nil?
        fail ArgumentError, "Missing the required parameter 'route_id' when calling VPCApi.delete_vpc_static_routes"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/static-routes/{route-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'route-id' + '}', route_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_static_routes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete VPC Subnet
    # Delete VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_subnet(org_id, project_id, vpc_id, subnet_id, opts = {})
      delete_vpc_subnet_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      nil
    end

    # Delete VPC Subnet
    # Delete VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_subnet_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_subnet ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_subnet"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_subnet"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_subnet"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.delete_vpc_subnet"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete VPC Subnet bridge profile
    # Delete VPC Subnet bridge profile 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_subnet_bridge_profile(org_id, project_id, vpc_id, subnet_id, opts = {})
      delete_vpc_subnet_bridge_profile_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      nil
    end

    # Delete VPC Subnet bridge profile
    # Delete VPC Subnet bridge profile 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_subnet_bridge_profile_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_subnet_bridge_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.delete_vpc_subnet_bridge_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/bridge-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_subnet_bridge_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete VPC Subnet DHCP static binding
    # Delete VPC Subnet DHCP static binding
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_subnet_dhcp_static_binding(org_id, project_id, vpc_id, subnet_id, binding_id, opts = {})
      delete_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, opts)
      nil
    end

    # Delete VPC Subnet DHCP static binding
    # Delete VPC Subnet DHCP static binding
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_subnet_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.delete_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling VPCApi.delete_vpc_subnet_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_subnet_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Records intent to release an IP from an IpPool.
    # Releases the IP that was allocated for this allocation request 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_subnet_ip_allocation(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, opts = {})
      delete_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, opts)
      nil
    end

    # Records intent to release an IP from an IpPool.
    # Releases the IP that was allocated for this allocation request 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_subnet_ip_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.delete_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling VPCApi.delete_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_allocation_id' is set
      if @api_client.config.client_side_validation && ip_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_allocation_id' when calling VPCApi.delete_vpc_subnet_ip_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools/{ip-pool-id}/ip-allocations/{ip-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-allocation-id' + '}', ip_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_subnet_ip_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a VPC Subnet Port
    # Delete a VPC Subnet Port by giving ID. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_subnet_port(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      delete_vpc_subnet_port_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts)
      nil
    end

    # Delete a VPC Subnet Port
    # Delete a VPC Subnet Port by giving ID. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_subnet_port_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.delete_vpc_subnet_port ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.delete_vpc_subnet_port"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.delete_vpc_subnet_port"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.delete_vpc_subnet_port"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.delete_vpc_subnet_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling VPCApi.delete_vpc_subnet_port"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ports/{port-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#delete_vpc_subnet_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get DNS Forwarder statistics
    # Get the DNS Forwarder statistics. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [DnsForwarderStats]
    def get_dns_forwarder_stats(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_dns_forwarder_stats_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get DNS Forwarder statistics
    # Get the DNS Forwarder statistics. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DnsForwarderStats, Fixnum, Hash)>] DnsForwarderStats data, response status code and response headers
    def get_dns_forwarder_stats_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_dns_forwarder_stats ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_dns_forwarder_stats"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_dns_forwarder_stats"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_dns_forwarder_stats"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/dns-forwarder-statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DnsForwarderStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_dns_forwarder_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # GET Policy NAT types.
    # Get either of the two supported sections (USER and NAT64) under the given VPC ID. The USER section allows IPV4 based NAT rules, while the NAT64 rules allow translating IPV6 packets to IPV4 packets. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param nat_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyNat]
    def get_policy_nat_on_vpc(org_id, project_id, vpc_id, nat_id, opts = {})
      data, _status_code, _headers = get_policy_nat_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, opts)
      data
    end

    # GET Policy NAT types.
    # Get either of the two supported sections (USER and NAT64) under the given VPC ID. The USER section allows IPV4 based NAT rules, while the NAT64 rules allow translating IPV6 packets to IPV4 packets. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param nat_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyNat, Fixnum, Hash)>] PolicyNat data, response status code and response headers
    def get_policy_nat_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_policy_nat_on_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_policy_nat_on_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_policy_nat_on_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_policy_nat_on_vpc"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling VPCApi.get_policy_nat_on_vpc"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/nat/{nat-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_policy_nat_on_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NAT Rule
    # Get NAT Rule from VPC denoted by VPC ID, under NAT section denoted by &lt;nat-id&gt;. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [PolicyVpcNatRule]
    def get_policy_vpc_nat_rule_on_vpc(org_id, project_id, vpc_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = get_policy_vpc_nat_rule_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get NAT Rule
    # Get NAT Rule from VPC denoted by VPC ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyVpcNatRule, Fixnum, Hash)>] PolicyVpcNatRule data, response status code and response headers
    def get_policy_vpc_nat_rule_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_policy_vpc_nat_rule_on_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_policy_vpc_nat_rule_on_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_policy_vpc_nat_rule_on_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_policy_vpc_nat_rule_on_vpc"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling VPCApi.get_policy_vpc_nat_rule_on_vpc"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling VPCApi.get_policy_vpc_nat_rule_on_vpc"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyVpcNatRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_policy_vpc_nat_rule_on_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NAT Rule Statistics
    # Get NAT Rule Statistics from VPC denoted by VPC ID, under NAT section denoted by &lt;nat-id&gt;. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action on statistics
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyNatRuleStatisticsListResult]
    def get_policy_vpc_nat_rule_statistics(org_id, project_id, vpc_id, nat_id, nat_rule_id, opts = {})
      data, _status_code, _headers = get_policy_vpc_nat_rule_statistics_with_http_info(org_id, project_id, vpc_id, nat_id, nat_rule_id, opts)
      data
    end

    # Get NAT Rule Statistics
    # Get NAT Rule Statistics from VPC denoted by VPC ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action on statistics
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyNatRuleStatisticsListResult, Fixnum, Hash)>] PolicyNatRuleStatisticsListResult data, response status code and response headers
    def get_policy_vpc_nat_rule_statistics_with_http_info(org_id, project_id, vpc_id, nat_id, nat_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_policy_vpc_nat_rule_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_policy_vpc_nat_rule_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_policy_vpc_nat_rule_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_policy_vpc_nat_rule_statistics"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling VPCApi.get_policy_vpc_nat_rule_statistics"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling VPCApi.get_policy_vpc_nat_rule_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['aggregate'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of aggregate'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/nat/{nat-id}/nat-rules/{nat-rule-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_policy_vpc_nat_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LB node capacity
    # API is used to retrieve available load balancer capacity status for all service clusters shared with Project. Currently Edge cluster is supported as service cluster. If the parameter ?service_cluster_path=&lt;service-cluster-path&gt; exists, then API only shows the available load balancer capacity status for this specific service cluster.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :service_cluster_path The service cluster path
    # @option opts [String] :source Data source type.
    # @return [AggregateLBNodeCapacitySummary]
    def get_project_lb_node_capacity_status(org_id, project_id, opts = {})
      data, _status_code, _headers = get_project_lb_node_capacity_status_with_http_info(org_id, project_id, opts)
      data
    end

    # Get LB node capacity
    # API is used to retrieve available load balancer capacity status for all service clusters shared with Project. Currently Edge cluster is supported as service cluster. If the parameter ?service_cluster_path&#x3D;&amp;lt;service-cluster-path&amp;gt; exists, then API only shows the available load balancer capacity status for this specific service cluster.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :service_cluster_path The service cluster path
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBNodeCapacitySummary, Fixnum, Hash)>] AggregateLBNodeCapacitySummary data, response status code and response headers
    def get_project_lb_node_capacity_status_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_project_lb_node_capacity_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_project_lb_node_capacity_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_project_lb_node_capacity_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/lb-node-capacity-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'service_cluster_path'] = opts[:'service_cluster_path'] if !opts[:'service_cluster_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBNodeCapacitySummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_project_lb_node_capacity_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Vpc subnet port statistics information
    # Get Vpc subnet port statistics information. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [SegmentPortStatistics]
    def get_subnet_port_statistics(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      data, _status_code, _headers = get_subnet_port_statistics_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts)
      data
    end

    # Get Vpc subnet port statistics information
    # Get Vpc subnet port statistics information. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [Array<(SegmentPortStatistics, Fixnum, Hash)>] SegmentPortStatistics data, response status code and response headers
    def get_subnet_port_statistics_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_subnet_port_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_subnet_port_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_subnet_port_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_subnet_port_statistics"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.get_subnet_port_statistics"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling VPCApi.get_subnet_port_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'bgp_neighbor_type'] && !['INTER_SR', 'USER'].include?(opts[:'bgp_neighbor_type'])
        fail ArgumentError, 'invalid value for "bgp_neighbor_type", must be one of INTER_SR, USER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_subnet_port_statistics, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_subnet_port_statistics, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'stats_type'] && !['DATAPATH_STATS'].include?(opts[:'stats_type'])
        fail ArgumentError, 'invalid value for "stats_type", must be one of DATAPATH_STATS'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ports/{port-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bgp_neighbor_type'] = opts[:'bgp_neighbor_type'] if !opts[:'bgp_neighbor_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'stats_type'] = opts[:'stats_type'] if !opts[:'stats_type'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_subnet_port_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Vpc subnet port status information
    # Get Vpc subnet port statistics information. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [SegmentPortStatus]
    def get_subnet_port_status(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      data, _status_code, _headers = get_subnet_port_status_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts)
      data
    end

    # Get Vpc subnet port status information
    # Get Vpc subnet port statistics information. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [Array<(SegmentPortStatus, Fixnum, Hash)>] SegmentPortStatus data, response status code and response headers
    def get_subnet_port_status_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_subnet_port_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_subnet_port_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_subnet_port_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_subnet_port_status"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.get_subnet_port_status"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling VPCApi.get_subnet_port_status"
      end
      if @api_client.config.client_side_validation && opts[:'bgp_neighbor_type'] && !['INTER_SR', 'USER'].include?(opts[:'bgp_neighbor_type'])
        fail ArgumentError, 'invalid value for "bgp_neighbor_type", must be one of INTER_SR, USER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_subnet_port_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_subnet_port_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'stats_type'] && !['DATAPATH_STATS'].include?(opts[:'stats_type'])
        fail ArgumentError, 'invalid value for "stats_type", must be one of DATAPATH_STATS'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ports/{port-id}/status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bgp_neighbor_type'] = opts[:'bgp_neighbor_type'] if !opts[:'bgp_neighbor_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'stats_type'] = opts[:'stats_type'] if !opts[:'stats_type'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_subnet_port_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Subnet statistics information
    # Get VPC Subnet statistics information. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [SubnetStatistics]
    def get_subnet_statistics(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_subnet_statistics_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get VPC Subnet statistics information
    # Get VPC Subnet statistics information. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [Array<(SubnetStatistics, Fixnum, Hash)>] SubnetStatistics data, response status code and response headers
    def get_subnet_statistics_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_subnet_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_subnet_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_subnet_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_subnet_statistics"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.get_subnet_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'bgp_neighbor_type'] && !['INTER_SR', 'USER'].include?(opts[:'bgp_neighbor_type'])
        fail ArgumentError, 'invalid value for "bgp_neighbor_type", must be one of INTER_SR, USER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_subnet_statistics, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_subnet_statistics, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'stats_type'] && !['DATAPATH_STATS'].include?(opts[:'stats_type'])
        fail ArgumentError, 'invalid value for "stats_type", must be one of DATAPATH_STATS'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bgp_neighbor_type'] = opts[:'bgp_neighbor_type'] if !opts[:'bgp_neighbor_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'stats_type'] = opts[:'stats_type'] if !opts[:'stats_type'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubnetStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_subnet_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC
    # Get VPC 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [Vpc]
    def get_vpc(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get VPC
    # Get VPC 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Vpc, Fixnum, Hash)>] Vpc data, response status code and response headers
    def get_vpc_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Vpc')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List networks advertised to the VPC
    # Return networks which are advertised to connected VPC. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyAdvertisedNetworksListResult]
    def get_vpc_advertised_networks(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_advertised_networks_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List networks advertised to the VPC
    # Return networks which are advertised to connected VPC. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyAdvertisedNetworksListResult, Fixnum, Hash)>] PolicyAdvertisedNetworksListResult data, response status code and response headers
    def get_vpc_advertised_networks_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_advertised_networks ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_advertised_networks"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_advertised_networks"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_advertised_networks"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_advertised_networks, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_advertised_networks, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/advertised-networks'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyAdvertisedNetworksListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_advertised_networks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List networks advertised to the VPC in CSV format
    # Return networks which are advertised to connected VPC in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyAdvertisedNetworkInCsvFormat]
    def get_vpc_advertised_networks_download(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_advertised_networks_download_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List networks advertised to the VPC in CSV format
    # Return networks which are advertised to connected VPC in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyAdvertisedNetworkInCsvFormat, Fixnum, Hash)>] PolicyAdvertisedNetworkInCsvFormat data, response status code and response headers
    def get_vpc_advertised_networks_download_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_advertised_networks_download ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_advertised_networks_download"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_advertised_networks_download"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_advertised_networks_download"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_advertised_networks_download, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_advertised_networks_download, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/advertised-networks/download'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyAdvertisedNetworkInCsvFormat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_advertised_networks_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get realization failures for vpc
    # Retrieves only the resources with the reason not \"SUCCESS\".  In case of failure or warning of the resource a reason object explaining the type of failure (ERROR, WARNING) and the detailed message of what the user could do to remediate is captured. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyVpcAlarm]
    def get_vpc_alarms(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_alarms_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get realization failures for vpc
    # Retrieves only the resources with the reason not \&quot;SUCCESS\&quot;.  In case of failure or warning of the resource a reason object explaining the type of failure (ERROR, WARNING) and the detailed message of what the user could do to remediate is captured. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyVpcAlarm, Fixnum, Hash)>] PolicyVpcAlarm data, response status code and response headers
    def get_vpc_alarms_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_alarms ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_alarms"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_alarms"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_alarms"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/realization-failures'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyVpcAlarm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_alarms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Address Resolution Protocol proxies
    # Returns ARP proxy table for a VPC. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [PolicyArpProxyTableListResult]
    def get_vpc_arp_proxies(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_arp_proxies_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get VPC Address Resolution Protocol proxies
    # Returns ARP proxy table for a VPC. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(PolicyArpProxyTableListResult, Fixnum, Hash)>] PolicyArpProxyTableListResult data, response status code and response headers
    def get_vpc_arp_proxies_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_arp_proxies ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_arp_proxies"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_arp_proxies"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_arp_proxies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_arp_proxies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_arp_proxies, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/arp-proxies'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyArpProxyTableListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_arp_proxies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Address Resolution Protocol proxies in CSV format
    # Returns ARP proxy table for a VPC in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [PolicyArpProxyTableCsvListResult]
    def get_vpc_arp_proxies_download(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_arp_proxies_download_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get VPC Address Resolution Protocol proxies in CSV format
    # Returns ARP proxy table for a VPC in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(PolicyArpProxyTableCsvListResult, Fixnum, Hash)>] PolicyArpProxyTableCsvListResult data, response status code and response headers
    def get_vpc_arp_proxies_download_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_arp_proxies_download ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_arp_proxies_download"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_arp_proxies_download"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_arp_proxies_download"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/arp-proxies/download'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyArpProxyTableCsvListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_arp_proxies_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Attachment
    # Get VPC Attachment 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param vpc_attachment_id 
    # @param [Hash] opts the optional parameters
    # @return [VpcAttachment]
    def get_vpc_attachment(org_id, project_id, vpc_id, vpc_attachment_id, opts = {})
      data, _status_code, _headers = get_vpc_attachment_with_http_info(org_id, project_id, vpc_id, vpc_attachment_id, opts)
      data
    end

    # Get VPC Attachment
    # Get VPC Attachment 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param vpc_attachment_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcAttachment, Fixnum, Hash)>] VpcAttachment data, response status code and response headers
    def get_vpc_attachment_with_http_info(org_id, project_id, vpc_id, vpc_attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_attachment ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_attachment"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_attachment"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_attachment"
      end
      # verify the required parameter 'vpc_attachment_id' is set
      if @api_client.config.client_side_validation && vpc_attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_attachment_id' when calling VPCApi.get_vpc_attachment"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/attachments/{vpc-attachment-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-attachment-id' + '}', vpc_attachment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcAttachment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the VPC Connectivity Profile
    # Get the VPC Connectivity Profile
    # @param org_id 
    # @param project_id 
    # @param vpc_connectivity_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [VpcConnectivityProfile]
    def get_vpc_connectivity_profile(org_id, project_id, vpc_connectivity_profile_id, opts = {})
      data, _status_code, _headers = get_vpc_connectivity_profile_with_http_info(org_id, project_id, vpc_connectivity_profile_id, opts)
      data
    end

    # Get the VPC Connectivity Profile
    # Get the VPC Connectivity Profile
    # @param org_id 
    # @param project_id 
    # @param vpc_connectivity_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcConnectivityProfile, Fixnum, Hash)>] VpcConnectivityProfile data, response status code and response headers
    def get_vpc_connectivity_profile_with_http_info(org_id, project_id, vpc_connectivity_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_connectivity_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_connectivity_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_connectivity_profile"
      end
      # verify the required parameter 'vpc_connectivity_profile_id' is set
      if @api_client.config.client_side_validation && vpc_connectivity_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_connectivity_profile_id' when calling VPCApi.get_vpc_connectivity_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-connectivity-profiles/{vpc-connectivity-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-connectivity-profile-id' + '}', vpc_connectivity_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcConnectivityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_connectivity_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get forwarding table from VPC
    # Get forwarding table from VPC. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Define the DR routes.
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_id UUID of edge node
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_id UUID of host node
    # @option opts [String] :host_path Policy path of host node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix IPAddress or CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :route_source Filter routes based on the source from which route is learned
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RoutingTableListResult]
    def get_vpc_forwarding_table(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_forwarding_table_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get forwarding table from VPC
    # Get forwarding table from VPC. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Define the DR routes.
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_id UUID of edge node
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_id UUID of host node
    # @option opts [String] :host_path Policy path of host node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix IPAddress or CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :route_source Filter routes based on the source from which route is learned
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RoutingTableListResult, Fixnum, Hash)>] RoutingTableListResult data, response status code and response headers
    def get_vpc_forwarding_table_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_forwarding_table ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_forwarding_table"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_forwarding_table"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_forwarding_table"
      end
      if @api_client.config.client_side_validation && opts[:'component_type'] && !['DR_ROUTES'].include?(opts[:'component_type'])
        fail ArgumentError, 'invalid value for "component_type", must be one of DR_ROUTES'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_forwarding_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_forwarding_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'route_source'] && !['BGP', 'STATIC', 'CONNECTED', 'OSPF'].include?(opts[:'route_source'])
        fail ArgumentError, 'invalid value for "route_source", must be one of BGP, STATIC, CONNECTED, OSPF'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/forwarding-table'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_id'] = opts[:'edge_id'] if !opts[:'edge_id'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'host_id'] = opts[:'host_id'] if !opts[:'host_id'].nil?
      query_params[:'host_path'] = opts[:'host_path'] if !opts[:'host_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'network_prefix'] = opts[:'network_prefix'] if !opts[:'network_prefix'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'route_source'] = opts[:'route_source'] if !opts[:'route_source'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoutingTableListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_forwarding_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get forwarding table from VPC in CSV format
    # Get forwarding table from VPC in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Define the DR routes.
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_id UUID of edge node
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_id UUID of host node
    # @option opts [String] :host_path Policy path of host node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix IPAddress or CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :route_source Filter routes based on the source from which route is learned
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GatewayRouteTableInCsvFormat]
    def get_vpc_forwarding_table_download(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_forwarding_table_download_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get forwarding table from VPC in CSV format
    # Get forwarding table from VPC in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :component_type Define the DR routes.
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_id UUID of edge node
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_id UUID of host node
    # @option opts [String] :host_path Policy path of host node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :network_prefix IPAddress or CIDR Block
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :route_source Filter routes based on the source from which route is learned
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GatewayRouteTableInCsvFormat, Fixnum, Hash)>] GatewayRouteTableInCsvFormat data, response status code and response headers
    def get_vpc_forwarding_table_download_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_forwarding_table_download ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_forwarding_table_download"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_forwarding_table_download"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_forwarding_table_download"
      end
      if @api_client.config.client_side_validation && opts[:'component_type'] && !['DR_ROUTES'].include?(opts[:'component_type'])
        fail ArgumentError, 'invalid value for "component_type", must be one of DR_ROUTES'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_forwarding_table_download, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_forwarding_table_download, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'route_source'] && !['BGP', 'STATIC', 'CONNECTED', 'OSPF'].include?(opts[:'route_source'])
        fail ArgumentError, 'invalid value for "route_source", must be one of BGP, STATIC, CONNECTED, OSPF'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/forwarding-table/download'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'component_type'] = opts[:'component_type'] if !opts[:'component_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_id'] = opts[:'edge_id'] if !opts[:'edge_id'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'host_id'] = opts[:'host_id'] if !opts[:'host_id'].nil?
      query_params[:'host_path'] = opts[:'host_path'] if !opts[:'host_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'network_prefix'] = opts[:'network_prefix'] if !opts[:'network_prefix'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'route_source'] = opts[:'route_source'] if !opts[:'route_source'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayRouteTableInCsvFormat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_forwarding_table_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Gateway Policy
    # Get Gateway Policy 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def get_vpc_gateway_policy(org_id, project_id, vpc_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = get_vpc_gateway_policy_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, opts)
      data
    end

    # Get Gateway Policy
    # Get Gateway Policy 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def get_vpc_gateway_policy_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_gateway_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_gateway_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_gateway_policy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling VPCApi.get_vpc_gateway_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get gateway policy statistics
    # Get statistics of a gateway policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id Org id
    # @param project_id Project id
    # @param vpc_id VPC id
    # @param gateway_policy_id Gateway policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [SecurityPolicyStatisticsListResult]
    def get_vpc_gateway_policy_statistics(org_id, project_id, vpc_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = get_vpc_gateway_policy_statistics_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, opts)
      data
    end

    # Get gateway policy statistics
    # Get statistics of a gateway policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id Org id
    # @param project_id Project id
    # @param vpc_id VPC id
    # @param gateway_policy_id Gateway policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(SecurityPolicyStatisticsListResult, Fixnum, Hash)>] SecurityPolicyStatisticsListResult data, response status code and response headers
    def get_vpc_gateway_policy_statistics_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_gateway_policy_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_gateway_policy_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_gateway_policy_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_gateway_policy_statistics"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling VPCApi.get_vpc_gateway_policy_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_gateway_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read N-S Firewall Rule
    # Read N-S Firewall Rule GET /orgs/org1/projects/project1/vpcs/vpc-1/gateway-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def get_vpc_gateway_rule(org_id, project_id, vpc_id, gateway_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_vpc_gateway_rule_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, opts)
      data
    end

    # Read N-S Firewall Rule
    # Read N-S Firewall Rule GET /orgs/org1/projects/project1/vpcs/vpc-1/gateway-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def get_vpc_gateway_rule_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_gateway_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling VPCApi.get_vpc_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling VPCApi.get_vpc_gateway_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get rule statistics
    # Get statistics of N-S Firewall rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id Org id
    # @param project_id Project id
    # @param vpc_id VPC id
    # @param gateway_policy_id Gateway policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [RuleStatisticsListResult]
    def get_vpc_gateway_rule_statistics(org_id, project_id, vpc_id, gateway_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_vpc_gateway_rule_statistics_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, opts)
      data
    end

    # Get rule statistics
    # Get statistics of N-S Firewall rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id Org id
    # @param project_id Project id
    # @param vpc_id VPC id
    # @param gateway_policy_id Gateway policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(RuleStatisticsListResult, Fixnum, Hash)>] RuleStatisticsListResult data, response status code and response headers
    def get_vpc_gateway_rule_statistics_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_gateway_rule_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_gateway_rule_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_gateway_rule_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_gateway_rule_statistics"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling VPCApi.get_vpc_gateway_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling VPCApi.get_vpc_gateway_rule_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_gateway_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Group
    # Get VPC Group 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [Group]
    def get_vpc_group(org_id, project_id, vpc_id, group_id, opts = {})
      data, _status_code, _headers = get_vpc_group_with_http_info(org_id, project_id, vpc_id, group_id, opts)
      data
    end

    # Get VPC Group
    # Get VPC Group 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Group, Fixnum, Hash)>] Group data, response status code and response headers
    def get_vpc_group_with_http_info(org_id, project_id, vpc_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_group ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_group"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_group"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling VPCApi.get_vpc_group"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups/{group-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IP addresses that belong to this VPC Group
    # Get IP addresses that belong to this VPC Group. This API is applicable for Groups containing either VirtualMachine, VIF, Segment ,Segment Port or IP Address member type.For Groups containing other member types,an empty list is returned 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyGroupIPMembersListResult]
    def get_vpc_group_ip_members(org_id, project_id, vpc_id, group_id, opts = {})
      data, _status_code, _headers = get_vpc_group_ip_members_with_http_info(org_id, project_id, vpc_id, group_id, opts)
      data
    end

    # Get IP addresses that belong to this VPC Group
    # Get IP addresses that belong to this VPC Group. This API is applicable for Groups containing either VirtualMachine, VIF, Segment ,Segment Port or IP Address member type.For Groups containing other member types,an empty list is returned 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyGroupIPMembersListResult, Fixnum, Hash)>] PolicyGroupIPMembersListResult data, response status code and response headers
    def get_vpc_group_ip_members_with_http_info(org_id, project_id, vpc_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_group_ip_members ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_group_ip_members"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_group_ip_members"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_group_ip_members"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling VPCApi.get_vpc_group_ip_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_group_ip_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_group_ip_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups/{group-id}/members/ip-addresses'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyGroupIPMembersListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_group_ip_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get member types for a given VPC Group
    # It retrieves member types for a given VPC group. In case of nested VPC groups, it calculates member types of child groups as well. Considers member type for members added via static members and dynamic membership criteria. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [GroupMemberTypeListResult]
    def get_vpc_group_member_types(org_id, project_id, vpc_id, group_id, opts = {})
      data, _status_code, _headers = get_vpc_group_member_types_with_http_info(org_id, project_id, vpc_id, group_id, opts)
      data
    end

    # Get member types for a given VPC Group
    # It retrieves member types for a given VPC group. In case of nested VPC groups, it calculates member types of child groups as well. Considers member type for members added via static members and dynamic membership criteria. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupMemberTypeListResult, Fixnum, Hash)>] GroupMemberTypeListResult data, response status code and response headers
    def get_vpc_group_member_types_with_http_info(org_id, project_id, vpc_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_group_member_types ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_group_member_types"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_group_member_types"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_group_member_types"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling VPCApi.get_vpc_group_member_types"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups/{group-id}/member-types'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupMemberTypeListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_group_member_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get subnets that belong to this VPC Group
    # Get subnets that belong to this VPC Group 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyGroupMembersListResult]
    def get_vpc_group_subnet_members(org_id, project_id, vpc_id, group_id, opts = {})
      data, _status_code, _headers = get_vpc_group_subnet_members_with_http_info(org_id, project_id, vpc_id, group_id, opts)
      data
    end

    # Get subnets that belong to this VPC Group
    # Get subnets that belong to this VPC Group 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyGroupMembersListResult, Fixnum, Hash)>] PolicyGroupMembersListResult data, response status code and response headers
    def get_vpc_group_subnet_members_with_http_info(org_id, project_id, vpc_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_group_subnet_members ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_group_subnet_members"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_group_subnet_members"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_group_subnet_members"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling VPCApi.get_vpc_group_subnet_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_group_subnet_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_group_subnet_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups/{group-id}/members/subnets'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyGroupMembersListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_group_subnet_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get subnet ports that belong to this VPC Group
    # Get subnet ports that belong to this VPC Group 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyGroupMembersListResult]
    def get_vpc_group_subnet_port_members(org_id, project_id, vpc_id, group_id, opts = {})
      data, _status_code, _headers = get_vpc_group_subnet_port_members_with_http_info(org_id, project_id, vpc_id, group_id, opts)
      data
    end

    # Get subnet ports that belong to this VPC Group
    # Get subnet ports that belong to this VPC Group 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyGroupMembersListResult, Fixnum, Hash)>] PolicyGroupMembersListResult data, response status code and response headers
    def get_vpc_group_subnet_port_members_with_http_info(org_id, project_id, vpc_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_group_subnet_port_members ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_group_subnet_port_members"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_group_subnet_port_members"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_group_subnet_port_members"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling VPCApi.get_vpc_group_subnet_port_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_group_subnet_port_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_group_subnet_port_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups/{group-id}/members/subnet-ports'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyGroupMembersListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_group_subnet_port_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Virtual Network Interface instances that belong to this Group
    # Get Virtual Network Interface instances that belong to this Group. This API is applicable for Groups containing VirtualNetworkInterface and VirtualMachine member types. For Groups containing other member types,an empty list is returned. target_id in response is external_id of VirtualNetworkInterface or VirtualMachine. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VirtualNetworkInterfaceListResult]
    def get_vpc_group_vif_members(org_id, project_id, vpc_id, group_id, opts = {})
      data, _status_code, _headers = get_vpc_group_vif_members_with_http_info(org_id, project_id, vpc_id, group_id, opts)
      data
    end

    # Get Virtual Network Interface instances that belong to this Group
    # Get Virtual Network Interface instances that belong to this Group. This API is applicable for Groups containing VirtualNetworkInterface and VirtualMachine member types. For Groups containing other member types,an empty list is returned. target_id in response is external_id of VirtualNetworkInterface or VirtualMachine. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VirtualNetworkInterfaceListResult, Fixnum, Hash)>] VirtualNetworkInterfaceListResult data, response status code and response headers
    def get_vpc_group_vif_members_with_http_info(org_id, project_id, vpc_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_group_vif_members ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_group_vif_members"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_group_vif_members"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_group_vif_members"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling VPCApi.get_vpc_group_vif_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_group_vif_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_group_vif_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups/{group-id}/members/vifs'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualNetworkInterfaceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_group_vif_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Virtual machines that belong to this VPC Group
    # Get Virtual machines that belong to this VPC Group. This API is applicable for Groups containing VirtualMachine,member type. For Groups containing other member types,an empty list is returned. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RealizedVirtualMachineListResult]
    def get_vpc_group_vm_members(org_id, project_id, vpc_id, group_id, opts = {})
      data, _status_code, _headers = get_vpc_group_vm_members_with_http_info(org_id, project_id, vpc_id, group_id, opts)
      data
    end

    # Get Virtual machines that belong to this VPC Group
    # Get Virtual machines that belong to this VPC Group. This API is applicable for Groups containing VirtualMachine,member type. For Groups containing other member types,an empty list is returned. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RealizedVirtualMachineListResult, Fixnum, Hash)>] RealizedVirtualMachineListResult data, response status code and response headers
    def get_vpc_group_vm_members_with_http_info(org_id, project_id, vpc_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_group_vm_members ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_group_vm_members"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_group_vm_members"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_group_vm_members"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling VPCApi.get_vpc_group_vm_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_group_vm_members, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_group_vm_members, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups/{group-id}/members/virtual-machines'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedVirtualMachineListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_group_vm_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get groups for which the given IP address is a member
    # Get policy groups for which the given IP address is a member. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param ip_address IPAddress
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyResourceReferenceForEPListResult]
    def get_vpc_groups_for_ip_address(org_id, project_id, vpc_id, ip_address, opts = {})
      data, _status_code, _headers = get_vpc_groups_for_ip_address_with_http_info(org_id, project_id, vpc_id, ip_address, opts)
      data
    end

    # Get groups for which the given IP address is a member
    # Get policy groups for which the given IP address is a member. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param ip_address IPAddress
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyResourceReferenceForEPListResult, Fixnum, Hash)>] PolicyResourceReferenceForEPListResult data, response status code and response headers
    def get_vpc_groups_for_ip_address_with_http_info(org_id, project_id, vpc_id, ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_groups_for_ip_address ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_groups_for_ip_address"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_groups_for_ip_address"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_groups_for_ip_address"
      end
      # verify the required parameter 'ip_address' is set
      if @api_client.config.client_side_validation && ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address' when calling VPCApi.get_vpc_groups_for_ip_address"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_groups_for_ip_address, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_groups_for_ip_address, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/ip-address-group-associations'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ip_address'] = ip_address
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReferenceForEPListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_groups_for_ip_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get groups for which the given object is a member
    # Get policy groups for which the given object is a member. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param intent_path String path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyResourceReferenceForEPListResult]
    def get_vpc_groups_for_object(org_id, project_id, vpc_id, intent_path, opts = {})
      data, _status_code, _headers = get_vpc_groups_for_object_with_http_info(org_id, project_id, vpc_id, intent_path, opts)
      data
    end

    # Get groups for which the given object is a member
    # Get policy groups for which the given object is a member. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param intent_path String path of the intent object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyResourceReferenceForEPListResult, Fixnum, Hash)>] PolicyResourceReferenceForEPListResult data, response status code and response headers
    def get_vpc_groups_for_object_with_http_info(org_id, project_id, vpc_id, intent_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_groups_for_object ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_groups_for_object"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_groups_for_object"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_groups_for_object"
      end
      # verify the required parameter 'intent_path' is set
      if @api_client.config.client_side_validation && intent_path.nil?
        fail ArgumentError, "Missing the required parameter 'intent_path' when calling VPCApi.get_vpc_groups_for_object"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_groups_for_object, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_groups_for_object, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/group-associations'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'intent_path'] = intent_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReferenceForEPListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_groups_for_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get groups for which the given VIF is a member
    # Get policy groups for which the given VIF is a member. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param vif_external_id Virtual network interface external ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyResourceReferenceForEPListResult]
    def get_vpc_groups_for_vif(org_id, project_id, vpc_id, vif_external_id, opts = {})
      data, _status_code, _headers = get_vpc_groups_for_vif_with_http_info(org_id, project_id, vpc_id, vif_external_id, opts)
      data
    end

    # Get groups for which the given VIF is a member
    # Get policy groups for which the given VIF is a member. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param vif_external_id Virtual network interface external ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyResourceReferenceForEPListResult, Fixnum, Hash)>] PolicyResourceReferenceForEPListResult data, response status code and response headers
    def get_vpc_groups_for_vif_with_http_info(org_id, project_id, vpc_id, vif_external_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_groups_for_vif ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_groups_for_vif"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_groups_for_vif"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_groups_for_vif"
      end
      # verify the required parameter 'vif_external_id' is set
      if @api_client.config.client_side_validation && vif_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'vif_external_id' when calling VPCApi.get_vpc_groups_for_vif"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_groups_for_vif, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_groups_for_vif, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/virtual-network-interface-group-associations'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'vif_external_id'] = vif_external_id
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReferenceForEPListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_groups_for_vif\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get groups for which the given VM is a member
    # Get policy groups for which the given VM is a member. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param vm_external_id Virtual machine external ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyResourceReferenceForEPListResult]
    def get_vpc_groups_for_vm(org_id, project_id, vpc_id, vm_external_id, opts = {})
      data, _status_code, _headers = get_vpc_groups_for_vm_with_http_info(org_id, project_id, vpc_id, vm_external_id, opts)
      data
    end

    # Get groups for which the given VM is a member
    # Get policy groups for which the given VM is a member. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param vm_external_id Virtual machine external ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyResourceReferenceForEPListResult, Fixnum, Hash)>] PolicyResourceReferenceForEPListResult data, response status code and response headers
    def get_vpc_groups_for_vm_with_http_info(org_id, project_id, vpc_id, vm_external_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_groups_for_vm ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_groups_for_vm"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_groups_for_vm"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_groups_for_vm"
      end
      # verify the required parameter 'vm_external_id' is set
      if @api_client.config.client_side_validation && vm_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_external_id' when calling VPCApi.get_vpc_groups_for_vm"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_groups_for_vm, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_groups_for_vm, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/virtual-machine-group-associations'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'vm_external_id'] = vm_external_id
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReferenceForEPListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_groups_for_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC ip allocation by ID
    # Get detail information on VPC ip allocation by giving ID. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param ip_address_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [VpcIpAddressAllocation]
    def get_vpc_ip_address_allocation(org_id, project_id, vpc_id, ip_address_allocation_id, opts = {})
      data, _status_code, _headers = get_vpc_ip_address_allocation_with_http_info(org_id, project_id, vpc_id, ip_address_allocation_id, opts)
      data
    end

    # Get VPC ip allocation by ID
    # Get detail information on VPC ip allocation by giving ID. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param ip_address_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcIpAddressAllocation, Fixnum, Hash)>] VpcIpAddressAllocation data, response status code and response headers
    def get_vpc_ip_address_allocation_with_http_info(org_id, project_id, vpc_id, ip_address_allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_ip_address_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_ip_address_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_ip_address_allocation"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_ip_address_allocation"
      end
      # verify the required parameter 'ip_address_allocation_id' is set
      if @api_client.config.client_side_validation && ip_address_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation_id' when calling VPCApi.get_vpc_ip_address_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/ip-address-allocations/{ip-address-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'ip-address-allocation-id' + '}', ip_address_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcIpAddressAllocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_ip_address_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LB node capacity
    # API is used to retrieve available load balancer capacity status for all service clusters shared with VPC. Currently Edge cluster is supported as service cluster. If the parameter ?service_cluster_path=&lt;service-cluster-path&gt; exists, then API only shows the available load balancer capacity status for this specific service cluster.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :service_cluster_path The service cluster path
    # @option opts [String] :source Data source type.
    # @return [AggregateLBNodeCapacitySummary]
    def get_vpc_lb_node_capacity_status(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_node_capacity_status_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get LB node capacity
    # API is used to retrieve available load balancer capacity status for all service clusters shared with VPC. Currently Edge cluster is supported as service cluster. If the parameter ?service_cluster_path&#x3D;&amp;lt;service-cluster-path&amp;gt; exists, then API only shows the available load balancer capacity status for this specific service cluster.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :service_cluster_path The service cluster path
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBNodeCapacitySummary, Fixnum, Hash)>] AggregateLBNodeCapacitySummary data, response status code and response headers
    def get_vpc_lb_node_capacity_status_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_lb_node_capacity_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_lb_node_capacity_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_lb_node_capacity_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_lb_node_capacity_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-node-capacity-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'service_cluster_path'] = opts[:'service_cluster_path'] if !opts[:'service_cluster_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBNodeCapacitySummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_lb_node_capacity_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBPool statistics information
    # Get LBPoolStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBPoolStatistics]
    def get_vpc_lb_pool_statistics(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_pool_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_pool_statistics_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_pool_id, opts)
      data
    end

    # Get LBPool statistics information
    # Get LBPoolStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBPoolStatistics, Fixnum, Hash)>] AggregateLBPoolStatistics data, response status code and response headers
    def get_vpc_lb_pool_statistics_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_lb_pool_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_lb_pool_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_lb_pool_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_lb_pool_statistics"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling VPCApi.get_vpc_lb_pool_statistics"
      end
      # verify the required parameter 'vpc_lb_pool_id' is set
      if @api_client.config.client_side_validation && vpc_lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_pool_id' when calling VPCApi.get_vpc_lb_pool_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/vpc-lb-pools/{vpc-lb-pool-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s).sub('{' + 'vpc-lb-pool-id' + '}', vpc_lb_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBPoolStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_lb_pool_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBPool status information
    # Get LBPool detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBPoolStatus]
    def get_vpc_lb_pool_status(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_pool_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_pool_status_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_pool_id, opts)
      data
    end

    # Get LBPool status information
    # Get LBPool detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBPoolStatus, Fixnum, Hash)>] AggregateLBPoolStatus data, response status code and response headers
    def get_vpc_lb_pool_status_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_lb_pool_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_lb_pool_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_lb_pool_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_lb_pool_status"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling VPCApi.get_vpc_lb_pool_status"
      end
      # verify the required parameter 'vpc_lb_pool_id' is set
      if @api_client.config.client_side_validation && vpc_lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_pool_id' when calling VPCApi.get_vpc_lb_pool_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/vpc-lb-pools/{vpc-lb-pool-id}/detailed-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s).sub('{' + 'vpc-lb-pool-id' + '}', vpc_lb_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBPoolStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_lb_pool_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get load balancer statistics information
    # Get load balancer statistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBServiceStatistics]
    def get_vpc_lb_service_statistics(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_service_statistics_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts)
      data
    end

    # Get load balancer statistics information
    # Get load balancer statistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBServiceStatistics, Fixnum, Hash)>] AggregateLBServiceStatistics data, response status code and response headers
    def get_vpc_lb_service_statistics_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_lb_service_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_lb_service_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_lb_service_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_lb_service_statistics"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling VPCApi.get_vpc_lb_service_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBServiceStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_lb_service_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get load balancer status information
    # Get load balancer detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBServiceStatus]
    def get_vpc_lb_service_status(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_service_status_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts)
      data
    end

    # Get load balancer status information
    # Get load balancer detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBServiceStatus, Fixnum, Hash)>] AggregateLBServiceStatus data, response status code and response headers
    def get_vpc_lb_service_status_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_lb_service_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_lb_service_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_lb_service_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_lb_service_status"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling VPCApi.get_vpc_lb_service_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/detailed-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBServiceStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_lb_service_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get load balancer usage information
    # Get load balancer usage information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBServiceUsage]
    def get_vpc_lb_service_usage(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_service_usage_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts)
      data
    end

    # Get load balancer usage information
    # Get load balancer usage information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBServiceUsage, Fixnum, Hash)>] AggregateLBServiceUsage data, response status code and response headers
    def get_vpc_lb_service_usage_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_lb_service_usage ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_lb_service_usage"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_lb_service_usage"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_lb_service_usage"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling VPCApi.get_vpc_lb_service_usage"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/usage'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBServiceUsage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_lb_service_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBVirtualServer statistics information
    # Get LBVirtualServerStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBVirtualServerStatistics]
    def get_vpc_lb_virtual_server_statistics(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_virtual_server_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_virtual_server_statistics_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_virtual_server_id, opts)
      data
    end

    # Get LBVirtualServer statistics information
    # Get LBVirtualServerStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBVirtualServerStatistics, Fixnum, Hash)>] AggregateLBVirtualServerStatistics data, response status code and response headers
    def get_vpc_lb_virtual_server_statistics_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_lb_virtual_server_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_lb_virtual_server_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_lb_virtual_server_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_lb_virtual_server_statistics"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling VPCApi.get_vpc_lb_virtual_server_statistics"
      end
      # verify the required parameter 'vpc_lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && vpc_lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_virtual_server_id' when calling VPCApi.get_vpc_lb_virtual_server_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/vpc-lb-virtual-servers/{vpc-lb-virtual-server-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s).sub('{' + 'vpc-lb-virtual-server-id' + '}', vpc_lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBVirtualServerStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_lb_virtual_server_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBVirtualServer status information
    # Get LBVirtualServer detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBVirtualServerStatus]
    def get_vpc_lb_virtual_server_status(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_virtual_server_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_virtual_server_status_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_virtual_server_id, opts)
      data
    end

    # Get LBVirtualServer status information
    # Get LBVirtualServer detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBVirtualServerStatus, Fixnum, Hash)>] AggregateLBVirtualServerStatus data, response status code and response headers
    def get_vpc_lb_virtual_server_status_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_lb_virtual_server_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_lb_virtual_server_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_lb_virtual_server_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_lb_virtual_server_status"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling VPCApi.get_vpc_lb_virtual_server_status"
      end
      # verify the required parameter 'vpc_lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && vpc_lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_virtual_server_id' when calling VPCApi.get_vpc_lb_virtual_server_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/vpc-lb-virtual-servers/{vpc-lb-virtual-server-id}/detailed-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s).sub('{' + 'vpc-lb-virtual-server-id' + '}', vpc_lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBVirtualServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_lb_virtual_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read E-W Firewall Rule
    # Read Rule GET /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def get_vpc_policy_rule(org_id, project_id, vpc_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, opts)
      data
    end

    # Read E-W Firewall Rule
    # Read Rule GET /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def get_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_policy_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_policy_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_policy_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_policy_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling VPCApi.get_vpc_policy_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling VPCApi.get_vpc_policy_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_policy_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get SecurityPolicy
    # Get SecurityPolicy 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def get_vpc_security_policy(org_id, project_id, vpc_id, security_policy_id, opts = {})
      data, _status_code, _headers = get_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts)
      data
    end

    # Get SecurityPolicy
    # Get SecurityPolicy 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def get_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_security_policy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_security_policy"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling VPCApi.get_vpc_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get security policy realization failures for vpc
    # Retrieves only the resources with the reason not \"SUCCESS\".  In case of failure or warning of the resource a reason object explaining the type of failure (ERROR, WARNING) and the detailed message of what the user could do to remediate is captured. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyVpcSecurityPoliciesAlarm]
    def get_vpc_security_policy_alarms(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_security_policy_alarms_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get security policy realization failures for vpc
    # Retrieves only the resources with the reason not \&quot;SUCCESS\&quot;.  In case of failure or warning of the resource a reason object explaining the type of failure (ERROR, WARNING) and the detailed message of what the user could do to remediate is captured. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyVpcSecurityPoliciesAlarm, Fixnum, Hash)>] PolicyVpcSecurityPoliciesAlarm data, response status code and response headers
    def get_vpc_security_policy_alarms_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_security_policy_alarms ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_security_policy_alarms"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_security_policy_alarms"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_security_policy_alarms"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/realization-failures'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyVpcSecurityPoliciesAlarm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_security_policy_alarms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get security policy statistics
    # Get statistics of a security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id Org id
    # @param project_id Project id
    # @param vpc_id VPC id
    # @param security_policy_id Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [SecurityPolicyStatisticsListResult]
    def get_vpc_security_policy_statistics(org_id, project_id, vpc_id, security_policy_id, opts = {})
      data, _status_code, _headers = get_vpc_security_policy_statistics_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts)
      data
    end

    # Get security policy statistics
    # Get statistics of a security policy. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id Org id
    # @param project_id Project id
    # @param vpc_id VPC id
    # @param security_policy_id Security policy id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(SecurityPolicyStatisticsListResult, Fixnum, Hash)>] SecurityPolicyStatisticsListResult data, response status code and response headers
    def get_vpc_security_policy_statistics_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_security_policy_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_security_policy_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_security_policy_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_security_policy_statistics"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling VPCApi.get_vpc_security_policy_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_security_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VpcSecurityProfile
    # Get security profile with the specified ID. Currently only the default security profile at the project level can be queried using this API. 
    # @param org_id 
    # @param project_id 
    # @param vpc_security_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [VpcSecurityProfile]
    def get_vpc_security_profile(org_id, project_id, vpc_security_profile_id, opts = {})
      data, _status_code, _headers = get_vpc_security_profile_with_http_info(org_id, project_id, vpc_security_profile_id, opts)
      data
    end

    # Get VpcSecurityProfile
    # Get security profile with the specified ID. Currently only the default security profile at the project level can be queried using this API. 
    # @param org_id 
    # @param project_id 
    # @param vpc_security_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcSecurityProfile, Fixnum, Hash)>] VpcSecurityProfile data, response status code and response headers
    def get_vpc_security_profile_with_http_info(org_id, project_id, vpc_security_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_security_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_security_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_security_profile"
      end
      # verify the required parameter 'vpc_security_profile_id' is set
      if @api_client.config.client_side_validation && vpc_security_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_security_profile_id' when calling VPCApi.get_vpc_security_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-security-profiles/{vpc-security-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-security-profile-id' + '}', vpc_security_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSecurityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get rule statistics
    # Get statistics of E-W Firewall rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id Org id
    # @param project_id Project id
    # @param vpc_id VPC id
    # @param security_policy_id Security policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [RuleStatisticsListResult]
    def get_vpc_security_rule_statistics(org_id, project_id, vpc_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_vpc_security_rule_statistics_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, opts)
      data
    end

    # Get rule statistics
    # Get statistics of E-W Firewall rule. - no enforcement point path specified: Stats will be evaluated on each enforcement point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id Org id
    # @param project_id Project id
    # @param vpc_id VPC id
    # @param security_policy_id Security policy id
    # @param rule_id Rule id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(RuleStatisticsListResult, Fixnum, Hash)>] RuleStatisticsListResult data, response status code and response headers
    def get_vpc_security_rule_statistics_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_security_rule_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_security_rule_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_security_rule_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_security_rule_statistics"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling VPCApi.get_vpc_security_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling VPCApi.get_vpc_security_rule_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_security_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the VPC Service Profile
    # Get the VPC Service Profile
    # @param org_id 
    # @param project_id 
    # @param vpc_service_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [VpcServiceProfile]
    def get_vpc_service_profile(org_id, project_id, vpc_service_profile_id, opts = {})
      data, _status_code, _headers = get_vpc_service_profile_with_http_info(org_id, project_id, vpc_service_profile_id, opts)
      data
    end

    # Get the VPC Service Profile
    # Get the VPC Service Profile
    # @param org_id 
    # @param project_id 
    # @param vpc_service_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcServiceProfile, Fixnum, Hash)>] VpcServiceProfile data, response status code and response headers
    def get_vpc_service_profile_with_http_info(org_id, project_id, vpc_service_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_service_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_service_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_service_profile"
      end
      # verify the required parameter 'vpc_service_profile_id' is set
      if @api_client.config.client_side_validation && vpc_service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_service_profile_id' when calling VPCApi.get_vpc_service_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-service-profiles/{vpc-service-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-service-profile-id' + '}', vpc_service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcServiceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC state
    # Get the VPC's runtime state that includes the gateway id and the HA details, if applicable. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [VpcState]
    def get_vpc_state(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_state_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get VPC state
    # Get the VPC&#39;s runtime state that includes the gateway id and the HA details, if applicable. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(VpcState, Fixnum, Hash)>] VpcState data, response status code and response headers
    def get_vpc_state_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_state ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_state"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_state"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_state"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/state'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Statistics
    # Get VPC Statistics 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [VpcStatistics]
    def get_vpc_statistics(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_statistics_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get VPC Statistics
    # Get VPC Statistics 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcStatistics, Fixnum, Hash)>] VpcStatistics data, response status code and response headers
    def get_vpc_statistics_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Statistics Summary
    # Get VPC Statistics Summary 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [AggregatedLogicalRouterPortCounters]
    def get_vpc_statistics_summary(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_statistics_summary_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get VPC Statistics Summary
    # Get VPC Statistics Summary 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregatedLogicalRouterPortCounters, Fixnum, Hash)>] AggregatedLogicalRouterPortCounters data, response status code and response headers
    def get_vpc_statistics_summary_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_statistics_summary ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_statistics_summary"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_statistics_summary"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_statistics_summary"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/statistics/summary'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregatedLogicalRouterPortCounters')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_statistics_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Status
    # Get VPC Status 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [VpcStatus]
    def get_vpc_status(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_status_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get VPC Status
    # Get VPC Status 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcStatus, Fixnum, Hash)>] VpcStatus data, response status code and response headers
    def get_vpc_status_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_status"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Subnet
    # Get VPC Subnet 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [VpcSubnet]
    def get_vpc_subnet(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get VPC Subnet
    # Get VPC Subnet 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcSubnet, Fixnum, Hash)>] VpcSubnet data, response status code and response headers
    def get_vpc_subnet_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_subnet ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_subnet"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_subnet"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_subnet"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.get_vpc_subnet"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSubnet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get subnet realization failures for vpc
    # Retrieves only the resources with the reason not \"SUCCESS\".  In case of failure or warning of the resource a reason object explaining the type of failure (ERROR, WARNING) and the detailed message of what the user could do to remediate is captured. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyVpcSubnetAlarm]
    def get_vpc_subnet_alarms(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_alarms_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get subnet realization failures for vpc
    # Retrieves only the resources with the reason not \&quot;SUCCESS\&quot;.  In case of failure or warning of the resource a reason object explaining the type of failure (ERROR, WARNING) and the detailed message of what the user could do to remediate is captured. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyVpcSubnetAlarm, Fixnum, Hash)>] PolicyVpcSubnetAlarm data, response status code and response headers
    def get_vpc_subnet_alarms_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_subnet_alarms ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_subnet_alarms"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_subnet_alarms"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_subnet_alarms"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/realization-failures'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyVpcSubnetAlarm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_subnet_alarms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get downlink port Address Resolution Protocol Proxy for VPC subnet
    # Returns ARP proxy table for downlink port connected to the VPC subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [PolicyArpProxyTableListResult]
    def get_vpc_subnet_arp_proxy(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_arp_proxy_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get downlink port Address Resolution Protocol Proxy for VPC subnet
    # Returns ARP proxy table for downlink port connected to the VPC subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(PolicyArpProxyTableListResult, Fixnum, Hash)>] PolicyArpProxyTableListResult data, response status code and response headers
    def get_vpc_subnet_arp_proxy_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_subnet_arp_proxy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_subnet_arp_proxy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_subnet_arp_proxy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_subnet_arp_proxy"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.get_vpc_subnet_arp_proxy"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_subnet_arp_proxy, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_subnet_arp_proxy, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/arp-proxy'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyArpProxyTableListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_subnet_arp_proxy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get downlink port Address Resolution Protocol Proxy for VPC subnet in CSV format
    # Returns ARP proxy table for downlink port connected to the VPC subnet in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [PolicyArpProxyTableCsvListResult]
    def get_vpc_subnet_arp_proxy_download(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_arp_proxy_download_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get downlink port Address Resolution Protocol Proxy for VPC subnet in CSV format
    # Returns ARP proxy table for downlink port connected to the VPC subnet in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(PolicyArpProxyTableCsvListResult, Fixnum, Hash)>] PolicyArpProxyTableCsvListResult data, response status code and response headers
    def get_vpc_subnet_arp_proxy_download_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_subnet_arp_proxy_download ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_subnet_arp_proxy_download"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_subnet_arp_proxy_download"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_subnet_arp_proxy_download"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.get_vpc_subnet_arp_proxy_download"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/arp-proxy/download'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyArpProxyTableCsvListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_subnet_arp_proxy_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get ARP table from VPC subnet (downlink)
    # Returns ARP table (IPv4) or Neighbor Discovery table (IPv6) for the interface (downlink) attaching subnet to VPC, on a edge node specified in edge_path parameter. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_transport_node_path Policy path of host transport node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [InterfaceArpTable]
    def get_vpc_subnet_arp_table(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_arp_table_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get ARP table from VPC subnet (downlink)
    # Returns ARP table (IPv4) or Neighbor Discovery table (IPv6) for the interface (downlink) attaching subnet to VPC, on a edge node specified in edge_path parameter. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_transport_node_path Policy path of host transport node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(InterfaceArpTable, Fixnum, Hash)>] InterfaceArpTable data, response status code and response headers
    def get_vpc_subnet_arp_table_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_subnet_arp_table ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_subnet_arp_table"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_subnet_arp_table"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_subnet_arp_table"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.get_vpc_subnet_arp_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_subnet_arp_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_subnet_arp_table, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/arp-table'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'host_transport_node_path'] = opts[:'host_transport_node_path'] if !opts[:'host_transport_node_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InterfaceArpTable')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_subnet_arp_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get ARP table from VPC subnet (downlink) in CSV format
    # Returns ARP table (IPv4) or Neighbor Discovery table (IPv6) in VSC format for the interface (downlink) attaching subnet to VPC, on a edge node specified in edge_path parameter. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_transport_node_path Policy path of host transport node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [InterfaceArpTableInCsvFormat]
    def get_vpc_subnet_arp_table_download(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_arp_table_download_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get ARP table from VPC subnet (downlink) in CSV format
    # Returns ARP table (IPv4) or Neighbor Discovery table (IPv6) in VSC format for the interface (downlink) attaching subnet to VPC, on a edge node specified in edge_path parameter. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_transport_node_path Policy path of host transport node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(InterfaceArpTableInCsvFormat, Fixnum, Hash)>] InterfaceArpTableInCsvFormat data, response status code and response headers
    def get_vpc_subnet_arp_table_download_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_subnet_arp_table_download ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_subnet_arp_table_download"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_subnet_arp_table_download"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_subnet_arp_table_download"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.get_vpc_subnet_arp_table_download"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_subnet_arp_table_download, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_subnet_arp_table_download, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/arp-table/download'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'host_transport_node_path'] = opts[:'host_transport_node_path'] if !opts[:'host_transport_node_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InterfaceArpTableInCsvFormat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_subnet_arp_table_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Subnet bridge profile
    # Get VPC Subnet Bridge Profile 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [VpcSubnetBridgeProfile]
    def get_vpc_subnet_bridge_profile(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_bridge_profile_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get VPC Subnet bridge profile
    # Get VPC Subnet Bridge Profile 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcSubnetBridgeProfile, Fixnum, Hash)>] VpcSubnetBridgeProfile data, response status code and response headers
    def get_vpc_subnet_bridge_profile_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_subnet_bridge_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.get_vpc_subnet_bridge_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/bridge-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSubnetBridgeProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_subnet_bridge_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read VPC Subnet DHCP server statistics
    # Read VPC Subnet DHCP server statistics along with ip pool usage information.
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatistics]
    def get_vpc_subnet_dhcp_server_stats(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_dhcp_server_stats_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Read VPC Subnet DHCP server statistics
    # Read VPC Subnet DHCP server statistics along with ip pool usage information.
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatistics, Fixnum, Hash)>] DhcpServerStatistics data, response status code and response headers
    def get_vpc_subnet_dhcp_server_stats_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_subnet_dhcp_server_stats ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_subnet_dhcp_server_stats"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_subnet_dhcp_server_stats"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_subnet_dhcp_server_stats"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.get_vpc_subnet_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_subnet_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_subnet_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-server-config/stats'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_subnet_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Vpc Subnet DHCP server status
    # Read Vpc Subnet DHCP server status
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatus]
    def get_vpc_subnet_dhcp_server_status(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_dhcp_server_status_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Read Vpc Subnet DHCP server status
    # Read Vpc Subnet DHCP server status
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatus, Fixnum, Hash)>] DhcpServerStatus data, response status code and response headers
    def get_vpc_subnet_dhcp_server_status_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_subnet_dhcp_server_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_subnet_dhcp_server_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_subnet_dhcp_server_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_subnet_dhcp_server_status"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.get_vpc_subnet_dhcp_server_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_subnet_dhcp_server_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_subnet_dhcp_server_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-server-config/status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_subnet_dhcp_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get statistics for downlink router port
    # Get statistics for downlink router port 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyInterfaceStatisticsSummary]
    def get_vpc_subnet_gateway_interface_statistics_summary(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_gateway_interface_statistics_summary_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get statistics for downlink router port
    # Get statistics for downlink router port 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyInterfaceStatisticsSummary, Fixnum, Hash)>] PolicyInterfaceStatisticsSummary data, response status code and response headers
    def get_vpc_subnet_gateway_interface_statistics_summary_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_subnet_gateway_interface_statistics_summary ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_subnet_gateway_interface_statistics_summary"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_subnet_gateway_interface_statistics_summary"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_subnet_gateway_interface_statistics_summary"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.get_vpc_subnet_gateway_interface_statistics_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/gateway-interface-statistics/summary'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyInterfaceStatisticsSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_subnet_gateway_interface_statistics_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Subnet ip allocation by ID
    # Get detail information on VPC Subnet ip allocation by giving ID. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressAllocation]
    def get_vpc_subnet_ip_allocation(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, opts)
      data
    end

    # Get VPC Subnet ip allocation by ID
    # Get detail information on VPC Subnet ip allocation by giving ID. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressAllocation, Fixnum, Hash)>] IpAddressAllocation data, response status code and response headers
    def get_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_subnet_ip_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.get_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling VPCApi.get_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_allocation_id' is set
      if @api_client.config.client_side_validation && ip_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_allocation_id' when calling VPCApi.get_vpc_subnet_ip_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools/{ip-pool-id}/ip-allocations/{ip-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-allocation-id' + '}', ip_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressAllocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_subnet_ip_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC subnet MAC table
    # Returns MAC table for a VPC subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [SegmentMacAddressListResult]
    def get_vpc_subnet_mac_table(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_mac_table_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get VPC subnet MAC table
    # Returns MAC table for a VPC subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(SegmentMacAddressListResult, Fixnum, Hash)>] SegmentMacAddressListResult data, response status code and response headers
    def get_vpc_subnet_mac_table_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_subnet_mac_table ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_subnet_mac_table"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_subnet_mac_table"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_subnet_mac_table"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.get_vpc_subnet_mac_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_subnet_mac_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_subnet_mac_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/mac-table'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentMacAddressListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_subnet_mac_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC subnet MAC table in CSV format
    # Returns MAC table for a VPC subnet in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [MacAddressCsvListResult]
    def get_vpc_subnet_mac_table_download(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_mac_table_download_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get VPC subnet MAC table in CSV format
    # Returns MAC table for a VPC subnet in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(MacAddressCsvListResult, Fixnum, Hash)>] MacAddressCsvListResult data, response status code and response headers
    def get_vpc_subnet_mac_table_download_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_subnet_mac_table_download ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_subnet_mac_table_download"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_subnet_mac_table_download"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_subnet_mac_table_download"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.get_vpc_subnet_mac_table_download"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/mac-table/download'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MacAddressCsvListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_subnet_mac_table_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Subnet Port by ID
    # Get detail information on VPC Subnet Port by giving ID. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [VpcSubnetPort]
    def get_vpc_subnet_port(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_port_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts)
      data
    end

    # Get VPC Subnet Port by ID
    # Get detail information on VPC Subnet Port by giving ID. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcSubnetPort, Fixnum, Hash)>] VpcSubnetPort data, response status code and response headers
    def get_vpc_subnet_port_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_subnet_port ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_subnet_port"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_subnet_port"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_subnet_port"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.get_vpc_subnet_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling VPCApi.get_vpc_subnet_port"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ports/{port-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSubnetPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_subnet_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get MAC table for VPC Subnet port
    # Returns MAC table for a VPC Subnet port 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [SegmentPortMacAddressListResult]
    def get_vpc_subnet_port_mac_table(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_port_mac_table_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts)
      data
    end

    # Get MAC table for VPC Subnet port
    # Returns MAC table for a VPC Subnet port 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(SegmentPortMacAddressListResult, Fixnum, Hash)>] SegmentPortMacAddressListResult data, response status code and response headers
    def get_vpc_subnet_port_mac_table_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_subnet_port_mac_table ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_subnet_port_mac_table"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_subnet_port_mac_table"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_subnet_port_mac_table"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.get_vpc_subnet_port_mac_table"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling VPCApi.get_vpc_subnet_port_mac_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_subnet_port_mac_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_subnet_port_mac_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ports/{port-id}/mac-table'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortMacAddressListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_subnet_port_mac_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Subnet port MAC table in CSV
    # Returns MAC table for a VPC Subnet port 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [SegmentPortMacAddressCsvListResult]
    def get_vpc_subnet_port_mac_table_in_csv(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_port_mac_table_in_csv_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts)
      data
    end

    # Get VPC Subnet port MAC table in CSV
    # Returns MAC table for a VPC Subnet port 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(SegmentPortMacAddressCsvListResult, Fixnum, Hash)>] SegmentPortMacAddressCsvListResult data, response status code and response headers
    def get_vpc_subnet_port_mac_table_in_csv_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_subnet_port_mac_table_in_csv ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_subnet_port_mac_table_in_csv"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_subnet_port_mac_table_in_csv"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_subnet_port_mac_table_in_csv"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.get_vpc_subnet_port_mac_table_in_csv"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling VPCApi.get_vpc_subnet_port_mac_table_in_csv"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ports/{port-id}/mac-table/csv'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortMacAddressCsvListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_subnet_port_mac_table_in_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Subnet port state
    # Returns VPC Subnet port state on enforcement point 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [SegmentPortState]
    def get_vpc_subnet_port_state(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_port_state_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts)
      data
    end

    # Get VPC Subnet port state
    # Returns VPC Subnet port state on enforcement point 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(SegmentPortState, Fixnum, Hash)>] SegmentPortState data, response status code and response headers
    def get_vpc_subnet_port_state_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_subnet_port_state ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_subnet_port_state"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_subnet_port_state"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_subnet_port_state"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.get_vpc_subnet_port_state"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling VPCApi.get_vpc_subnet_port_state"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ports/{port-id}/state'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_subnet_port_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Subnet status
    # Get VPC Subnet status Provides status of the VPC subnet as well as network information such as gateway address, subnet mask, dhcp server address, dhcp range, static ip pools, static ip pool range. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [VpcSubnetStatusListResult]
    def get_vpc_subnet_status(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_status_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get VPC Subnet status
    # Get VPC Subnet status Provides status of the VPC subnet as well as network information such as gateway address, subnet mask, dhcp server address, dhcp range, static ip pools, static ip pool range. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcSubnetStatusListResult, Fixnum, Hash)>] VpcSubnetStatusListResult data, response status code and response headers
    def get_vpc_subnet_status_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_subnet_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_subnet_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_subnet_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_subnet_status"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.get_vpc_subnet_status"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSubnetStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_subnet_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get details of tag bulk operation request
    # Get details of tag bulk operation request with which tag is applied or removed on virtual machines. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param operation_id 
    # @param [Hash] opts the optional parameters
    # @return [TagBulkOperation]
    def get_vpc_tag_bulk_operation(org_id, project_id, vpc_id, operation_id, opts = {})
      data, _status_code, _headers = get_vpc_tag_bulk_operation_with_http_info(org_id, project_id, vpc_id, operation_id, opts)
      data
    end

    # Get details of tag bulk operation request
    # Get details of tag bulk operation request with which tag is applied or removed on virtual machines. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param operation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TagBulkOperation, Fixnum, Hash)>] TagBulkOperation data, response status code and response headers
    def get_vpc_tag_bulk_operation_with_http_info(org_id, project_id, vpc_id, operation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_tag_bulk_operation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_tag_bulk_operation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_tag_bulk_operation"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_tag_bulk_operation"
      end
      # verify the required parameter 'operation_id' is set
      if @api_client.config.client_side_validation && operation_id.nil?
        fail ArgumentError, "Missing the required parameter 'operation_id' when calling VPCApi.get_vpc_tag_bulk_operation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/tags/vpc-tag-operations/{operation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'operation-id' + '}', operation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TagBulkOperation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_tag_bulk_operation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get status of tag bulk operation
    # Get status of tag bulk operation with details of tag operation on each virtual machine. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param operation_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TagBulkOperationStatus]
    def get_vpc_tag_bulk_operation_status(org_id, project_id, vpc_id, operation_id, opts = {})
      data, _status_code, _headers = get_vpc_tag_bulk_operation_status_with_http_info(org_id, project_id, vpc_id, operation_id, opts)
      data
    end

    # Get status of tag bulk operation
    # Get status of tag bulk operation with details of tag operation on each virtual machine. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param operation_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TagBulkOperationStatus, Fixnum, Hash)>] TagBulkOperationStatus data, response status code and response headers
    def get_vpc_tag_bulk_operation_status_with_http_info(org_id, project_id, vpc_id, operation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_tag_bulk_operation_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_tag_bulk_operation_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_tag_bulk_operation_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_tag_bulk_operation_status"
      end
      # verify the required parameter 'operation_id' is set
      if @api_client.config.client_side_validation && operation_id.nil?
        fail ArgumentError, "Missing the required parameter 'operation_id' when calling VPCApi.get_vpc_tag_bulk_operation_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_tag_bulk_operation_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.get_vpc_tag_bulk_operation_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/tags/vpc-tag-operations/{operation-id}/status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'operation-id' + '}', operation_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TagBulkOperationStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_tag_bulk_operation_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # VC Folder Status for Vpc
    # Returns the VC Folder Status on vCenter for the Vpc. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [VCFolderStatus]
    def get_vpc_vc_folder_status(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_vc_folder_status_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # VC Folder Status for Vpc
    # Returns the VC Folder Status on vCenter for the Vpc. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VCFolderStatus, Fixnum, Hash)>] VCFolderStatus data, response status code and response headers
    def get_vpc_vc_folder_status_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.get_vpc_vc_folder_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.get_vpc_vc_folder_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.get_vpc_vc_folder_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.get_vpc_vc_folder_status"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vc-folder-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VCFolderStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#get_vpc_vc_folder_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all unique tags.
    # Returns paginated list of all unique tags. Supports filtering by scope, tag and source from which tags are synced. Supports starts with, ends with, equals and contains operators on scope and tag values. To filter tags by starts with on scope or tag, use '*' as suffix after the value. To filter tags by ends with on scope or tag, use '*' as prefix before the value. To filter tags by contain on scope or tag, use '*' as prefix and suffix on the value. Below special characters in the filter value needs to be escaped with hex values. - Character '&' needs to be escaped as '%26' - Character '[' needs to be escaped as '%5B' - Character ']' needs to be escaped as '%5D' - Character '+' needs to be escaped as '%2B' - Character '#' needs to be escaped as '%23' Sort option for list of unique tags is available only on tag and scope properties. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :scope Tag scope
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Source from which tags are synced.
    # @option opts [String] :tag Tag value
    # @return [TagInfoListResult]
    def list_all_vpc_tags(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_all_vpc_tags_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List all unique tags.
    # Returns paginated list of all unique tags. Supports filtering by scope, tag and source from which tags are synced. Supports starts with, ends with, equals and contains operators on scope and tag values. To filter tags by starts with on scope or tag, use &#39;*&#39; as suffix after the value. To filter tags by ends with on scope or tag, use &#39;*&#39; as prefix before the value. To filter tags by contain on scope or tag, use &#39;*&#39; as prefix and suffix on the value. Below special characters in the filter value needs to be escaped with hex values. - Character &#39;&amp;&#39; needs to be escaped as &#39;%26&#39; - Character &#39;[&#39; needs to be escaped as &#39;%5B&#39; - Character &#39;]&#39; needs to be escaped as &#39;%5D&#39; - Character &#39;+&#39; needs to be escaped as &#39;%2B&#39; - Character &#39;#&#39; needs to be escaped as &#39;%23&#39; Sort option for list of unique tags is available only on tag and scope properties. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :scope Tag scope
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Source from which tags are synced.
    # @option opts [String] :tag Tag value
    # @return [Array<(TagInfoListResult, Fixnum, Hash)>] TagInfoListResult data, response status code and response headers
    def list_all_vpc_tags_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_all_vpc_tags ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_all_vpc_tags"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_all_vpc_tags"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_all_vpc_tags"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_all_vpc_tags, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_all_vpc_tags, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['Amazon', 'Azure', 'NSX', 'ANY'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of Amazon, Azure, NSX, ANY'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/tags'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TagInfoListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_all_vpc_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all virtual machines for this VPC
    # This API lists the Virtual Machines for this VPC. Only those VMs are listed which are connected to the subnets of this VPC. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VirtualMachineListResult]
    def list_all_vpc_virtual_machines(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_all_vpc_virtual_machines_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List all virtual machines for this VPC
    # This API lists the Virtual Machines for this VPC. Only those VMs are listed which are connected to the subnets of this VPC. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VirtualMachineListResult, Fixnum, Hash)>] VirtualMachineListResult data, response status code and response headers
    def list_all_vpc_virtual_machines_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_all_vpc_virtual_machines ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_all_vpc_virtual_machines"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_all_vpc_virtual_machines"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_all_vpc_virtual_machines"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_all_vpc_virtual_machines, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_all_vpc_virtual_machines, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/virtual-machines'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VirtualMachineListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_all_vpc_virtual_machines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy NAT types.
    # List the two supported sections (USER and NAT64) under the given VPC ID. The USER section allows IPV4 based NAT rules, while the NAT64 rules allow translating IPV6 packets to IPV4 packets. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatListResult]
    def list_policy_nat_on_vpc(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_policy_nat_on_vpc_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List Policy NAT types.
    # List the two supported sections (USER and NAT64) under the given VPC ID. The USER section allows IPV4 based NAT rules, while the NAT64 rules allow translating IPV6 packets to IPV4 packets. For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatListResult, Fixnum, Hash)>] PolicyNatListResult data, response status code and response headers
    def list_policy_nat_on_vpc_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_policy_nat_on_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_policy_nat_on_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_policy_nat_on_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_policy_nat_on_vpc"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_policy_nat_on_vpc, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_policy_nat_on_vpc, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/nat'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_policy_nat_on_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules
    # List NAT Rules from VPC denoted by VPC ID, under NAT section denoted by &lt;nat-id&gt;. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyVpcNatRuleListResult]
    def list_policy_nat_rules_on_vpc(org_id, project_id, vpc_id, nat_id, opts = {})
      data, _status_code, _headers = list_policy_nat_rules_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, opts)
      data
    end

    # List NAT Rules
    # List NAT Rules from VPC denoted by VPC ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param nat_id NAT id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyVpcNatRuleListResult, Fixnum, Hash)>] PolicyVpcNatRuleListResult data, response status code and response headers
    def list_policy_nat_rules_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_policy_nat_rules_on_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_policy_nat_rules_on_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_policy_nat_rules_on_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_policy_nat_rules_on_vpc"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling VPCApi.list_policy_nat_rules_on_vpc"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_policy_nat_rules_on_vpc, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_policy_nat_rules_on_vpc, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/nat/{nat-id}/nat-rules'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyVpcNatRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_policy_nat_rules_on_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List NAT Rules Statistics
    # List NAT Rules Statistics from VPC denoted by VPC ID.
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyNatRuleStatisticsPerLogicalRouterListResult]
    def list_policy_vpc_nat_rules_statistics(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_policy_vpc_nat_rules_statistics_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List NAT Rules Statistics
    # List NAT Rules Statistics from VPC denoted by VPC ID.
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyNatRuleStatisticsPerLogicalRouterListResult, Fixnum, Hash)>] PolicyNatRuleStatisticsPerLogicalRouterListResult data, response status code and response headers
    def list_policy_vpc_nat_rules_statistics_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_policy_vpc_nat_rules_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_policy_vpc_nat_rules_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_policy_vpc_nat_rules_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_policy_vpc_nat_rules_statistics"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_policy_vpc_nat_rules_statistics, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_policy_vpc_nat_rules_statistics, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/nat/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyNatRuleStatisticsPerLogicalRouterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_policy_vpc_nat_rules_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List SubnetConnectionBindingMap specific Segment
    # List SubnetConnectionBindingMap specific subnet 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SubnetConnectionBindingMapListResult]
    def list_subnet_connection_binding_map(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = list_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # List SubnetConnectionBindingMap specific Segment
    # List SubnetConnectionBindingMap specific subnet 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SubnetConnectionBindingMapListResult, Fixnum, Hash)>] SubnetConnectionBindingMapListResult data, response status code and response headers
    def list_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_subnet_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_subnet_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_subnet_connection_binding_map"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.list_subnet_connection_binding_map"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_subnet_connection_binding_map, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_subnet_connection_binding_map, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/subnet-connection-binding-maps'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubnetConnectionBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_subnet_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Subnet DHCP server leases
    # List Subnet DHCP server leases
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP, IP range or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpLeasesResult]
    def list_subnet_dhcp_server_leases(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = list_subnet_dhcp_server_leases_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # List Subnet DHCP server leases
    # List Subnet DHCP server leases
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP, IP range or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpLeasesResult, Fixnum, Hash)>] DhcpLeasesResult data, response status code and response headers
    def list_subnet_dhcp_server_leases_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_subnet_dhcp_server_leases ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.list_subnet_dhcp_server_leases"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_subnet_dhcp_server_leases, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_subnet_dhcp_server_leases, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/state/dhcp-server-leases'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpLeasesResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_subnet_dhcp_server_leases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all objects assigned with matching scope and tag values
    # Paginated list of all objects assigned with matching scope and tag values. Objects are represented in form of resource reference. Sort option is available only on target_type and target_display_name properties. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :filter_by Comma-separated list of field names to filter tagged objects.
    # @option opts [String] :filter_text Filter text to restrict tagged objects list with matching filter text.
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :scope Tag scope
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :tag Tag value
    # @return [PolicyResourceReferenceListResult]
    def list_tagged_objects_for_vpc(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_tagged_objects_for_vpc_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List all objects assigned with matching scope and tag values
    # Paginated list of all objects assigned with matching scope and tag values. Objects are represented in form of resource reference. Sort option is available only on target_type and target_display_name properties. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :filter_by Comma-separated list of field names to filter tagged objects.
    # @option opts [String] :filter_text Filter text to restrict tagged objects list with matching filter text.
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :scope Tag scope
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :tag Tag value
    # @return [Array<(PolicyResourceReferenceListResult, Fixnum, Hash)>] PolicyResourceReferenceListResult data, response status code and response headers
    def list_tagged_objects_for_vpc_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_tagged_objects_for_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_tagged_objects_for_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_tagged_objects_for_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_tagged_objects_for_vpc"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_tagged_objects_for_vpc, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_tagged_objects_for_vpc, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/tags/effective-resources'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'filter_by'] = opts[:'filter_by'] if !opts[:'filter_by'].nil?
      query_params[:'filter_text'] = opts[:'filter_text'] if !opts[:'filter_text'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyResourceReferenceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_tagged_objects_for_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of VPC
    # Paginated list of VPC. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VpcListResult]
    def list_vpc(org_id, project_id, opts = {})
      data, _status_code, _headers = list_vpc_with_http_info(org_id, project_id, opts)
      data
    end

    # List of VPC
    # Paginated list of VPC. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VpcListResult, Fixnum, Hash)>] VpcListResult data, response status code and response headers
    def list_vpc_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of VPC Attachment
    # Paginated list of VPC Attachment. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VpcAttachmentListResult]
    def list_vpc_attachment(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_attachment_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List of VPC Attachment
    # Paginated list of VPC Attachment. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VpcAttachmentListResult, Fixnum, Hash)>] VpcAttachmentListResult data, response status code and response headers
    def list_vpc_attachment_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_attachment ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_attachment"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_attachment"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_attachment"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_attachment, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_attachment, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/attachments'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcAttachmentListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List VPC Connectivity Profiles
    # List VPC Connectivity Profiles. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VpcConnectivityProfileListResult]
    def list_vpc_connectivity_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = list_vpc_connectivity_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # List VPC Connectivity Profiles
    # List VPC Connectivity Profiles. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VpcConnectivityProfileListResult, Fixnum, Hash)>] VpcConnectivityProfileListResult data, response status code and response headers
    def list_vpc_connectivity_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_connectivity_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_connectivity_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_connectivity_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_connectivity_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_connectivity_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-connectivity-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcConnectivityProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_connectivity_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of VPC gateway policies
    # Paginated list of VPC gateway policies. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GatewayPolicyListResult]
    def list_vpc_gateway_policies(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_gateway_policies_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List of VPC gateway policies
    # Paginated list of VPC gateway policies. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def list_vpc_gateway_policies_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_gateway_policies ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_gateway_policies"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_gateway_policies"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_gateway_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_gateway_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_gateway_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_gateway_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List N-S Firewall Rules
    # List N-S Firewall Rules GET /orgs/org1/projects/project1/vpcs/vpc-1/gateway-policies/default/rules 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def list_vpc_gateway_rules(org_id, project_id, vpc_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = list_vpc_gateway_rules_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, opts)
      data
    end

    # List N-S Firewall Rules
    # List N-S Firewall Rules GET /orgs/org1/projects/project1/vpcs/vpc-1/gateway-policies/default/rules 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def list_vpc_gateway_rules_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_gateway_rules ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_gateway_rules"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_gateway_rules"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_gateway_rules"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling VPCApi.list_vpc_gateway_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_gateway_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_gateway_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}/rules'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_gateway_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List VPC Groups
    # Paginated list of VPC Groups. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :member_types Comma Separated Member types
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GroupListResult]
    def list_vpc_groups(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_groups_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List VPC Groups
    # Paginated list of VPC Groups. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [String] :member_types Comma Separated Member types
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GroupListResult, Fixnum, Hash)>] GroupListResult data, response status code and response headers
    def list_vpc_groups_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_groups ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_groups"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_groups"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_groups"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_groups, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'member_types'] = opts[:'member_types'] if !opts[:'member_types'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List VPC ip allocations
    # List all the ip allocations for a VPC. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VpcIpAddressAllocationListResult]
    def list_vpc_ip_address_allocations(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_ip_address_allocations_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List VPC ip allocations
    # List all the ip allocations for a VPC. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VpcIpAddressAllocationListResult, Fixnum, Hash)>] VpcIpAddressAllocationListResult data, response status code and response headers
    def list_vpc_ip_address_allocations_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_ip_address_allocations ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_ip_address_allocations"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_ip_address_allocations"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_ip_address_allocations"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_ip_address_allocations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_ip_address_allocations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/ip-address-allocations'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcIpAddressAllocationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_ip_address_allocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBAppProfiles
    # Paginated list of all LBAppProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBAppProfileListResult]
    def list_vpc_lb_app_profiles(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_app_profiles_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBAppProfiles
    # Paginated list of all LBAppProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBAppProfileListResult, Fixnum, Hash)>] LBAppProfileListResult data, response status code and response headers
    def list_vpc_lb_app_profiles_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_lb_app_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_lb_app_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_lb_app_profiles"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_lb_app_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_lb_app_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_lb_app_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-app-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_lb_app_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBClientSslProfiles
    # Paginated list of all LBClientSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBClientSslProfileListResult]
    def list_vpc_lb_client_ssl_profiles(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_client_ssl_profiles_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBClientSslProfiles
    # Paginated list of all LBClientSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBClientSslProfileListResult, Fixnum, Hash)>] LBClientSslProfileListResult data, response status code and response headers
    def list_vpc_lb_client_ssl_profiles_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_lb_client_ssl_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_lb_client_ssl_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_lb_client_ssl_profiles"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_lb_client_ssl_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_lb_client_ssl_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_lb_client_ssl_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-client-ssl-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_lb_client_ssl_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBMonitorProfiles specified Vpc
    # Paginated list of all LBMonitorProfiles specified Vpc.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBMonitorProfileListResult]
    def list_vpc_lb_monitor_profiles(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_monitor_profiles_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBMonitorProfiles specified Vpc
    # Paginated list of all LBMonitorProfiles specified Vpc.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBMonitorProfileListResult, Fixnum, Hash)>] LBMonitorProfileListResult data, response status code and response headers
    def list_vpc_lb_monitor_profiles_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_lb_monitor_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_lb_monitor_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_lb_monitor_profiles"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_lb_monitor_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_lb_monitor_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_lb_monitor_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-monitor-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_lb_monitor_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBPersistenceProfiles for the specified Vpc
    # Paginated list of all LBPersistenceProfiles specified Vpc.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBPersistenceProfileListResult]
    def list_vpc_lb_persistence_profiles(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_persistence_profiles_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBPersistenceProfiles for the specified Vpc
    # Paginated list of all LBPersistenceProfiles specified Vpc.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBPersistenceProfileListResult, Fixnum, Hash)>] LBPersistenceProfileListResult data, response status code and response headers
    def list_vpc_lb_persistence_profiles_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_lb_persistence_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_lb_persistence_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_lb_persistence_profiles"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_lb_persistence_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_lb_persistence_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_lb_persistence_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-persistence-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_lb_persistence_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBPools
    # Paginated list of all LBPools.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBPoolListResult]
    def list_vpc_lb_pools(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_pools_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBPools
    # Paginated list of all LBPools.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBPoolListResult, Fixnum, Hash)>] LBPoolListResult data, response status code and response headers
    def list_vpc_lb_pools_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_lb_pools ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_lb_pools"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_lb_pools"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_lb_pools"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_lb_pools, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_lb_pools, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-pools'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPoolListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_lb_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBServerSslProfiles
    # Paginated list of all LBServerSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBServerSslProfileListResult]
    def list_vpc_lb_server_ssl_profiles(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_server_ssl_profiles_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBServerSslProfiles
    # Paginated list of all LBServerSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBServerSslProfileListResult, Fixnum, Hash)>] LBServerSslProfileListResult data, response status code and response headers
    def list_vpc_lb_server_ssl_profiles_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_lb_server_ssl_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_lb_server_ssl_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_lb_server_ssl_profiles"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_lb_server_ssl_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_lb_server_ssl_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_lb_server_ssl_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-server-ssl-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_lb_server_ssl_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List load balancers
    # Paginated list of all load balancers.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBServiceListResult]
    def list_vpc_lb_services(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_services_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List load balancers
    # Paginated list of all load balancers.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBServiceListResult, Fixnum, Hash)>] LBServiceListResult data, response status code and response headers
    def list_vpc_lb_services_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_lb_services ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_lb_services"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_lb_services"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_lb_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_lb_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_lb_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_lb_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBVirtualServers
    # Paginated list of all LBVirtualServers.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBVirtualServerListResult]
    def list_vpc_lb_virtual_servers(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_virtual_servers_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBVirtualServers
    # Paginated list of all LBVirtualServers.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBVirtualServerListResult, Fixnum, Hash)>] LBVirtualServerListResult data, response status code and response headers
    def list_vpc_lb_virtual_servers_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_lb_virtual_servers ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_lb_virtual_servers"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_lb_virtual_servers"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_lb_virtual_servers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_lb_virtual_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_lb_virtual_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-virtual-servers'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBVirtualServerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_lb_virtual_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List E-W Firewall Rules
    # List Rules GET /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def list_vpc_policy_rules(org_id, project_id, vpc_id, security_policy_id, opts = {})
      data, _status_code, _headers = list_vpc_policy_rules_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts)
      data
    end

    # List E-W Firewall Rules
    # List Rules GET /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def list_vpc_policy_rules_with_http_info(org_id, project_id, vpc_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_policy_rules ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_policy_rules"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_policy_rules"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_policy_rules"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling VPCApi.list_vpc_policy_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_policy_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_policy_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_policy_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of VPC security policies
    # Paginated list of VPC security policies. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityPolicyListResult]
    def list_vpc_security_policies(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_security_policies_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List of VPC security policies
    # Paginated list of VPC security policies. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityPolicyListResult, Fixnum, Hash)>] SecurityPolicyListResult data, response status code and response headers
    def list_vpc_security_policies_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_security_policies ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_security_policies"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_security_policies"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_security_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_security_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_security_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of VpcSecurityProfiles
    # Paginated list of VpcSecurityProfiles. Note: Currently this API will return only a single default security profile at the project level. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VpcSecurityProfileListResult]
    def list_vpc_security_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = list_vpc_security_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # List of VpcSecurityProfiles
    # Paginated list of VpcSecurityProfiles. Note: Currently this API will return only a single default security profile at the project level. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VpcSecurityProfileListResult, Fixnum, Hash)>] VpcSecurityProfileListResult data, response status code and response headers
    def list_vpc_security_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_security_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_security_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_security_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_security_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_security_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-security-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSecurityProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_security_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List VPC Service Profiles
    # List VPC Service Profiles. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VpcServiceProfileListResult]
    def list_vpc_service_profiles(org_id, project_id, opts = {})
      data, _status_code, _headers = list_vpc_service_profiles_with_http_info(org_id, project_id, opts)
      data
    end

    # List VPC Service Profiles
    # List VPC Service Profiles. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VpcServiceProfileListResult, Fixnum, Hash)>] VpcServiceProfileListResult data, response status code and response headers
    def list_vpc_service_profiles_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_service_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_service_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_service_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_service_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_service_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-service-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcServiceProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_service_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List VPC Static Routes
    # Paginated list of all VPC Static Routes 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [StaticRoutesListResult]
    def list_vpc_static_routes(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_static_routes_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List VPC Static Routes
    # Paginated list of all VPC Static Routes 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(StaticRoutesListResult, Fixnum, Hash)>] StaticRoutesListResult data, response status code and response headers
    def list_vpc_static_routes_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_static_routes ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_static_routes"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_static_routes"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_static_routes"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_static_routes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_static_routes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/static-routes'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticRoutesListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_static_routes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of VPC Subnet
    # Paginated list of VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VpcSubnetListResult]
    def list_vpc_subnet(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_subnet_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List of VPC Subnet
    # Paginated list of VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VpcSubnetListResult, Fixnum, Hash)>] VpcSubnetListResult data, response status code and response headers
    def list_vpc_subnet_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_subnet ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_subnet"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_subnet"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_subnet"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_subnet, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_subnet, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSubnetListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all VPC Subnet DHCP static bindings
    # Paginated list of all VPC Subnet DHCP static binding instances 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpStaticBindingConfigListResult]
    def list_vpc_subnet_dhcp_static_binding(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = list_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # List all VPC Subnet DHCP static bindings
    # Paginated list of all VPC Subnet DHCP static binding instances 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpStaticBindingConfigListResult, Fixnum, Hash)>] DhcpStaticBindingConfigListResult data, response status code and response headers
    def list_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_subnet_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.list_vpc_subnet_dhcp_static_binding"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_subnet_dhcp_static_binding, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_subnet_dhcp_static_binding, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-static-binding-configs'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_subnet_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of static ip pools of the Subnet.
    # Paginated list of static ip pools of the Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IpAddressPoolListResult]
    def list_vpc_subnet_ip_address_pools(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = list_vpc_subnet_ip_address_pools_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # List of static ip pools of the Subnet.
    # Paginated list of static ip pools of the Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IpAddressPoolListResult, Fixnum, Hash)>] IpAddressPoolListResult data, response status code and response headers
    def list_vpc_subnet_ip_address_pools_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_subnet_ip_address_pools ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_subnet_ip_address_pools"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_subnet_ip_address_pools"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_subnet_ip_address_pools"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.list_vpc_subnet_ip_address_pools"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_subnet_ip_address_pools, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_subnet_ip_address_pools, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressPoolListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_subnet_ip_address_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List VPC Subnet ip allocations
    # List all the ip allocations for a VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IpAddressAllocationListResult]
    def list_vpc_subnet_ip_allocations(org_id, project_id, vpc_id, subnet_id, ip_pool_id, opts = {})
      data, _status_code, _headers = list_vpc_subnet_ip_allocations_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, opts)
      data
    end

    # List VPC Subnet ip allocations
    # List all the ip allocations for a VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IpAddressAllocationListResult, Fixnum, Hash)>] IpAddressAllocationListResult data, response status code and response headers
    def list_vpc_subnet_ip_allocations_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_subnet_ip_allocations ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_subnet_ip_allocations"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_subnet_ip_allocations"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_subnet_ip_allocations"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.list_vpc_subnet_ip_allocations"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling VPCApi.list_vpc_subnet_ip_allocations"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_subnet_ip_allocations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_subnet_ip_allocations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools/{ip-pool-id}/ip-allocations'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressAllocationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_subnet_ip_allocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List VPC Subnet Ports
    # List all the ports for a VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VpcSubnetPortListResult]
    def list_vpc_subnet_ports(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = list_vpc_subnet_ports_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # List VPC Subnet Ports
    # List all the ports for a VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VpcSubnetPortListResult, Fixnum, Hash)>] VpcSubnetPortListResult data, response status code and response headers
    def list_vpc_subnet_ports_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.list_vpc_subnet_ports ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.list_vpc_subnet_ports"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.list_vpc_subnet_ports"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.list_vpc_subnet_ports"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.list_vpc_subnet_ports"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_subnet_ports, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling VPCApi.list_vpc_subnet_ports, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ports'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSubnetPortListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#list_vpc_subnet_ports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Nat Rule
    # If a NAT Rule is not already present on VPC denoted by VPC ID, under NAT section denoted by &lt;nat-id&gt;, create a new NAT Rule. If it already exists, update the NAT Rule. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_vpc_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_vpc_nat_rule_on_vpc(org_id, project_id, vpc_id, nat_id, nat_rule_id, policy_vpc_nat_rule, opts = {})
      patch_policy_vpc_nat_rule_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, nat_rule_id, policy_vpc_nat_rule, opts)
      nil
    end

    # Create or update a Nat Rule
    # If a NAT Rule is not already present on VPC denoted by VPC ID, under NAT section denoted by &amp;lt;nat-id&amp;gt;, create a new NAT Rule. If it already exists, update the NAT Rule. Under VPC there will be 2 different NATs(sections). (USER and NAT64) For more details related to NAT section please refer to PolicyNAT schema. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param nat_id NAT id
    # @param nat_rule_id Rule ID
    # @param policy_vpc_nat_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_vpc_nat_rule_on_vpc_with_http_info(org_id, project_id, vpc_id, nat_id, nat_rule_id, policy_vpc_nat_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_policy_vpc_nat_rule_on_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_policy_vpc_nat_rule_on_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_policy_vpc_nat_rule_on_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_policy_vpc_nat_rule_on_vpc"
      end
      # verify the required parameter 'nat_id' is set
      if @api_client.config.client_side_validation && nat_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_id' when calling VPCApi.patch_policy_vpc_nat_rule_on_vpc"
      end
      # verify the required parameter 'nat_rule_id' is set
      if @api_client.config.client_side_validation && nat_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'nat_rule_id' when calling VPCApi.patch_policy_vpc_nat_rule_on_vpc"
      end
      # verify the required parameter 'policy_vpc_nat_rule' is set
      if @api_client.config.client_side_validation && policy_vpc_nat_rule.nil?
        fail ArgumentError, "Missing the required parameter 'policy_vpc_nat_rule' when calling VPCApi.patch_policy_vpc_nat_rule_on_vpc"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/nat/{nat-id}/nat-rules/{nat-rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'nat-id' + '}', nat_id.to_s).sub('{' + 'nat-rule-id' + '}', nat_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_vpc_nat_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_policy_vpc_nat_rule_on_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a vpc subnet connection binding map
    # Patch the vpc subnet connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param subnet_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_subnet_connection_binding_map(org_id, project_id, vpc_id, subnet_id, map_id, subnet_connection_binding_map, opts = {})
      patch_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, subnet_connection_binding_map, opts)
      nil
    end

    # Patch a vpc subnet connection binding map
    # Patch the vpc subnet connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param subnet_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, subnet_connection_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_subnet_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_subnet_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_subnet_connection_binding_map"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.patch_subnet_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling VPCApi.patch_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_connection_binding_map' is set
      if @api_client.config.client_side_validation && subnet_connection_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_connection_binding_map' when calling VPCApi.patch_subnet_connection_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/subnet-connection-binding-maps/{map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(subnet_connection_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_subnet_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update VPC
    # If a VPC with the vpc-id is not already present, create a new VPC. If it already exists, update the VPC. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param vpc 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc(org_id, project_id, vpc_id, vpc, opts = {})
      patch_vpc_with_http_info(org_id, project_id, vpc_id, vpc, opts)
      nil
    end

    # Create or update VPC
    # If a VPC with the vpc-id is not already present, create a new VPC. If it already exists, update the VPC. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param vpc 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_with_http_info(org_id, project_id, vpc_id, vpc, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc"
      end
      # verify the required parameter 'vpc' is set
      if @api_client.config.client_side_validation && vpc.nil?
        fail ArgumentError, "Missing the required parameter 'vpc' when calling VPCApi.patch_vpc"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update VPC Attachment
    # Each VPC has one attachment. This API will update the VPC attachment. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param vpc_attachment_id 
    # @param vpc_attachment 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_attachment(org_id, project_id, vpc_id, vpc_attachment_id, vpc_attachment, opts = {})
      patch_vpc_attachment_with_http_info(org_id, project_id, vpc_id, vpc_attachment_id, vpc_attachment, opts)
      nil
    end

    # Update VPC Attachment
    # Each VPC has one attachment. This API will update the VPC attachment. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param vpc_attachment_id 
    # @param vpc_attachment 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_attachment_with_http_info(org_id, project_id, vpc_id, vpc_attachment_id, vpc_attachment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_attachment ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_attachment"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_attachment"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_attachment"
      end
      # verify the required parameter 'vpc_attachment_id' is set
      if @api_client.config.client_side_validation && vpc_attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_attachment_id' when calling VPCApi.patch_vpc_attachment"
      end
      # verify the required parameter 'vpc_attachment' is set
      if @api_client.config.client_side_validation && vpc_attachment.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_attachment' when calling VPCApi.patch_vpc_attachment"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/attachments/{vpc-attachment-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-attachment-id' + '}', vpc_attachment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_attachment)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch VPC Connectivity Profile
    # Create VPC Connectivity Profile if not already present, otherwise update the VPC Connectivity Profile. 
    # @param org_id 
    # @param project_id 
    # @param vpc_connectivity_profile_id 
    # @param vpc_connectivity_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_connectivity_profile(org_id, project_id, vpc_connectivity_profile_id, vpc_connectivity_profile, opts = {})
      patch_vpc_connectivity_profile_with_http_info(org_id, project_id, vpc_connectivity_profile_id, vpc_connectivity_profile, opts)
      nil
    end

    # Patch VPC Connectivity Profile
    # Create VPC Connectivity Profile if not already present, otherwise update the VPC Connectivity Profile. 
    # @param org_id 
    # @param project_id 
    # @param vpc_connectivity_profile_id 
    # @param vpc_connectivity_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_connectivity_profile_with_http_info(org_id, project_id, vpc_connectivity_profile_id, vpc_connectivity_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_connectivity_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_connectivity_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_connectivity_profile"
      end
      # verify the required parameter 'vpc_connectivity_profile_id' is set
      if @api_client.config.client_side_validation && vpc_connectivity_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_connectivity_profile_id' when calling VPCApi.patch_vpc_connectivity_profile"
      end
      # verify the required parameter 'vpc_connectivity_profile' is set
      if @api_client.config.client_side_validation && vpc_connectivity_profile.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_connectivity_profile' when calling VPCApi.patch_vpc_connectivity_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-connectivity-profiles/{vpc-connectivity-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-connectivity-profile-id' + '}', vpc_connectivity_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_connectivity_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_connectivity_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update Gateway Policy
    # If a GatewayPolicy with the policy-id is not already present, create a new GatewayPolicy. If it already exists, update the GatewayPolicy. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_gateway_policy(org_id, project_id, vpc_id, gateway_policy_id, gateway_policy, opts = {})
      patch_vpc_gateway_policy_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, gateway_policy, opts)
      nil
    end

    # Create or update Gateway Policy
    # If a GatewayPolicy with the policy-id is not already present, create a new GatewayPolicy. If it already exists, update the GatewayPolicy. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_gateway_policy_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_gateway_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_gateway_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_gateway_policy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling VPCApi.patch_vpc_gateway_policy"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling VPCApi.patch_vpc_gateway_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch N-S Firewall Rule
    # Patch the N-S Firewall Rule. If a Rule for the given Rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace PATCH /orgs/org1/projects/project1/vpcs/vpc-1/gateway-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_gateway_rule(org_id, project_id, vpc_id, gateway_policy_id, rule_id, rule, opts = {})
      patch_vpc_gateway_rule_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, rule, opts)
      nil
    end

    # Patch N-S Firewall Rule
    # Patch the N-S Firewall Rule. If a Rule for the given Rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace PATCH /orgs/org1/projects/project1/vpcs/vpc-1/gateway-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_gateway_rule_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_gateway_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling VPCApi.patch_vpc_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling VPCApi.patch_vpc_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling VPCApi.patch_vpc_gateway_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update VPC Group
    # If a VPC group with the group-id is not already present, create a new VPC group. If it already exists, update the group. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_group(org_id, project_id, vpc_id, group_id, group, opts = {})
      patch_vpc_group_with_http_info(org_id, project_id, vpc_id, group_id, group, opts)
      nil
    end

    # Create or update VPC Group
    # If a VPC group with the group-id is not already present, create a new VPC group. If it already exists, update the group. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_group_with_http_info(org_id, project_id, vpc_id, group_id, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_group ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_group"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_group"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling VPCApi.patch_vpc_group"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling VPCApi.patch_vpc_group"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups/{group-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a VPC ip allocation
    # Create a VPC ip allocation if it does not exist 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param ip_address_allocation_id 
    # @param vpc_ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_ip_address_allocation(org_id, project_id, vpc_id, ip_address_allocation_id, vpc_ip_address_allocation, opts = {})
      patch_vpc_ip_address_allocation_with_http_info(org_id, project_id, vpc_id, ip_address_allocation_id, vpc_ip_address_allocation, opts)
      nil
    end

    # Patch a VPC ip allocation
    # Create a VPC ip allocation if it does not exist 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param ip_address_allocation_id 
    # @param vpc_ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_ip_address_allocation_with_http_info(org_id, project_id, vpc_id, ip_address_allocation_id, vpc_ip_address_allocation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_ip_address_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_ip_address_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_ip_address_allocation"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_ip_address_allocation"
      end
      # verify the required parameter 'ip_address_allocation_id' is set
      if @api_client.config.client_side_validation && ip_address_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation_id' when calling VPCApi.patch_vpc_ip_address_allocation"
      end
      # verify the required parameter 'vpc_ip_address_allocation' is set
      if @api_client.config.client_side_validation && vpc_ip_address_allocation.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_ip_address_allocation' when calling VPCApi.patch_vpc_ip_address_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/ip-address-allocations/{ip-address-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'ip-address-allocation-id' + '}', ip_address_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_ip_address_allocation)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_ip_address_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBAppProfile
    # If a LBAppProfile with the vpc-lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_app_profile(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts = {})
      patch_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts)
      nil
    end

    # Create or update a LBAppProfile
    # If a LBAppProfile with the vpc-lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_lb_app_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_lb_app_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_lb_app_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_app_profile_id' when calling VPCApi.patch_vpc_lb_app_profile"
      end
      # verify the required parameter 'lb_app_profile' is set
      if @api_client.config.client_side_validation && lb_app_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile' when calling VPCApi.patch_vpc_lb_app_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-app-profiles/{vpc-lb-app-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-app-profile-id' + '}', vpc_lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_app_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the vpc-lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_client_ssl_profile(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      patch_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts)
      nil
    end

    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the vpc-lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_client_ssl_profile_id' when calling VPCApi.patch_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'lb_client_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile' when calling VPCApi.patch_vpc_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-client-ssl-profiles/{vpc-lb-client-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-client-ssl-profile-id' + '}', vpc_lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_client_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the vpc-lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_monitor_profile(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts = {})
      patch_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts)
      nil
    end

    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the vpc-lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_lb_monitor_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_monitor_profile_id' when calling VPCApi.patch_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'lb_monitor_profile' is set
      if @api_client.config.client_side_validation && lb_monitor_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile' when calling VPCApi.patch_vpc_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-monitor-profiles/{vpc-lb-monitor-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-monitor-profile-id' + '}', vpc_lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_monitor_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the vpc-lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_persistence_profile(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts = {})
      patch_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts)
      nil
    end

    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the vpc-lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_lb_persistence_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_persistence_profile_id' when calling VPCApi.patch_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'lb_persistence_profile' is set
      if @api_client.config.client_side_validation && lb_persistence_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile' when calling VPCApi.patch_vpc_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-persistence-profiles/{vpc-lb-persistence-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-persistence-profile-id' + '}', vpc_lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_persistence_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPool
    # If a LBPool with the vpc-lb-pool-id is not already present, create a new LBPool. If it already exists, update the LBPool. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_pool(org_id, project_id, vpc_id, vpc_lb_pool_id, lb_pool, opts = {})
      patch_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, lb_pool, opts)
      nil
    end

    # Create or update a LBPool
    # If a LBPool with the vpc-lb-pool-id is not already present, create a new LBPool. If it already exists, update the LBPool. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, lb_pool, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_lb_pool ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_lb_pool"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_lb_pool_id' is set
      if @api_client.config.client_side_validation && vpc_lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_pool_id' when calling VPCApi.patch_vpc_lb_pool"
      end
      # verify the required parameter 'lb_pool' is set
      if @api_client.config.client_side_validation && lb_pool.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool' when calling VPCApi.patch_vpc_lb_pool"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-pools/{vpc-lb-pool-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-pool-id' + '}', vpc_lb_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_pool)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_lb_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the vpc-lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_server_ssl_profile(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      patch_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts)
      nil
    end

    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the vpc-lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_server_ssl_profile_id' when calling VPCApi.patch_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'lb_server_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile' when calling VPCApi.patch_vpc_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-server-ssl-profiles/{vpc-lb-server-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-server-ssl-profile-id' + '}', vpc_lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_server_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a load balancer
    # If a load balancer with the vpc-lb-id doesn't exist, create a new Load Balancer. If it has already existed, update the load balancer. This is a full replacement.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param lb_service 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Load Balancer Operation
    # @return [nil]
    def patch_vpc_lb_service(org_id, project_id, vpc_id, vpc_lb_id, lb_service, opts = {})
      patch_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, lb_service, opts)
      nil
    end

    # Create or update a load balancer
    # If a load balancer with the vpc-lb-id doesn&#39;t exist, create a new Load Balancer. If it has already existed, update the load balancer. This is a full replacement.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param lb_service 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Load Balancer Operation
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, lb_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_lb_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_lb_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_lb_service"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_lb_service"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling VPCApi.patch_vpc_lb_service"
      end
      # verify the required parameter 'lb_service' is set
      if @api_client.config.client_side_validation && lb_service.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service' when calling VPCApi.patch_vpc_lb_service"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['allow_auto_relocation'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of allow_auto_relocation'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_lb_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBVirtualServer
    # If a LBVirtualServer with the vpc-lb-virtual-server-id is not already present, create a new LBVirtualServer. If it already exists, update the LBVirtualServer. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param lb_virtual_server 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_virtual_server(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, lb_virtual_server, opts = {})
      patch_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, lb_virtual_server, opts)
      nil
    end

    # Create or update a LBVirtualServer
    # If a LBVirtualServer with the vpc-lb-virtual-server-id is not already present, create a new LBVirtualServer. If it already exists, update the LBVirtualServer. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param lb_virtual_server 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, lb_virtual_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_lb_virtual_server ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_lb_virtual_server"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && vpc_lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_virtual_server_id' when calling VPCApi.patch_vpc_lb_virtual_server"
      end
      # verify the required parameter 'lb_virtual_server' is set
      if @api_client.config.client_side_validation && lb_virtual_server.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server' when calling VPCApi.patch_vpc_lb_virtual_server"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-virtual-servers/{vpc-lb-virtual-server-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-virtual-server-id' + '}', vpc_lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_virtual_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_lb_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch E-W Firewall Rule
    # Patch the E-W Firewall Rule. If a Rule for the given Rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace PATCH /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_policy_rule(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts = {})
      patch_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts)
      nil
    end

    # Patch E-W Firewall Rule
    # Patch the E-W Firewall Rule. If a Rule for the given Rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace PATCH /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_policy_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_policy_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_policy_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_policy_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling VPCApi.patch_vpc_policy_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling VPCApi.patch_vpc_policy_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling VPCApi.patch_vpc_policy_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_policy_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update SecurityPolicy
    # If a SecurityPolicy with the policy-id is not already present, create a new SecurityPolicy. If it already exists, update the SecurityPolicy. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_security_policy(org_id, project_id, vpc_id, security_policy_id, security_policy, opts = {})
      patch_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, security_policy, opts)
      nil
    end

    # Create or update SecurityPolicy
    # If a SecurityPolicy with the policy-id is not already present, create a new SecurityPolicy. If it already exists, update the SecurityPolicy. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_security_policy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_security_policy"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling VPCApi.patch_vpc_security_policy"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling VPCApi.patch_vpc_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Security Profile
    # Update existing default security profile. Note: Currently, user will not be able to create new security profiles. 
    # @param org_id 
    # @param project_id 
    # @param vpc_security_profile_id 
    # @param vpc_security_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_security_profile(org_id, project_id, vpc_security_profile_id, vpc_security_profile, opts = {})
      patch_vpc_security_profile_with_http_info(org_id, project_id, vpc_security_profile_id, vpc_security_profile, opts)
      nil
    end

    # Update Security Profile
    # Update existing default security profile. Note: Currently, user will not be able to create new security profiles. 
    # @param org_id 
    # @param project_id 
    # @param vpc_security_profile_id 
    # @param vpc_security_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_security_profile_with_http_info(org_id, project_id, vpc_security_profile_id, vpc_security_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_security_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_security_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_security_profile"
      end
      # verify the required parameter 'vpc_security_profile_id' is set
      if @api_client.config.client_side_validation && vpc_security_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_security_profile_id' when calling VPCApi.patch_vpc_security_profile"
      end
      # verify the required parameter 'vpc_security_profile' is set
      if @api_client.config.client_side_validation && vpc_security_profile.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_security_profile' when calling VPCApi.patch_vpc_security_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-security-profiles/{vpc-security-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-security-profile-id' + '}', vpc_security_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_security_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch VPC Service Profile
    # Create VPC Service Profile if not already present, otherwise update the VPC Service Profile. 
    # @param org_id 
    # @param project_id 
    # @param vpc_service_profile_id 
    # @param vpc_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_service_profile(org_id, project_id, vpc_service_profile_id, vpc_service_profile, opts = {})
      patch_vpc_service_profile_with_http_info(org_id, project_id, vpc_service_profile_id, vpc_service_profile, opts)
      nil
    end

    # Patch VPC Service Profile
    # Create VPC Service Profile if not already present, otherwise update the VPC Service Profile. 
    # @param org_id 
    # @param project_id 
    # @param vpc_service_profile_id 
    # @param vpc_service_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_service_profile_with_http_info(org_id, project_id, vpc_service_profile_id, vpc_service_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_service_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_service_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_service_profile"
      end
      # verify the required parameter 'vpc_service_profile_id' is set
      if @api_client.config.client_side_validation && vpc_service_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_service_profile_id' when calling VPCApi.patch_vpc_service_profile"
      end
      # verify the required parameter 'vpc_service_profile' is set
      if @api_client.config.client_side_validation && vpc_service_profile.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_service_profile' when calling VPCApi.patch_vpc_service_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-service-profiles/{vpc-service-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-service-profile-id' + '}', vpc_service_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_service_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_service_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a VPC static routes
    # If static routes for route-id are not already present, create static routes. If it already exists, update static routes for route-id. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param route_id 
    # @param static_routes 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_static_routes(org_id, project_id, vpc_id, route_id, static_routes, opts = {})
      patch_vpc_static_routes_with_http_info(org_id, project_id, vpc_id, route_id, static_routes, opts)
      nil
    end

    # Create or update a VPC static routes
    # If static routes for route-id are not already present, create static routes. If it already exists, update static routes for route-id. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param route_id 
    # @param static_routes 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_static_routes_with_http_info(org_id, project_id, vpc_id, route_id, static_routes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_static_routes ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_static_routes"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_static_routes"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_static_routes"
      end
      # verify the required parameter 'route_id' is set
      if @api_client.config.client_side_validation && route_id.nil?
        fail ArgumentError, "Missing the required parameter 'route_id' when calling VPCApi.patch_vpc_static_routes"
      end
      # verify the required parameter 'static_routes' is set
      if @api_client.config.client_side_validation && static_routes.nil?
        fail ArgumentError, "Missing the required parameter 'static_routes' when calling VPCApi.patch_vpc_static_routes"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/static-routes/{route-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'route-id' + '}', route_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(static_routes)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_static_routes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update VPC Subnet
    # If a VPC Subnet with the subnet-id is not already present, create a new VPC Subnet. If it already exists, update the VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param vpc_subnet 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_subnet(org_id, project_id, vpc_id, subnet_id, vpc_subnet, opts = {})
      patch_vpc_subnet_with_http_info(org_id, project_id, vpc_id, subnet_id, vpc_subnet, opts)
      nil
    end

    # Create or update VPC Subnet
    # If a VPC Subnet with the subnet-id is not already present, create a new VPC Subnet. If it already exists, update the VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param vpc_subnet 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_subnet_with_http_info(org_id, project_id, vpc_id, subnet_id, vpc_subnet, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_subnet ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_subnet"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_subnet"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_subnet"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.patch_vpc_subnet"
      end
      # verify the required parameter 'vpc_subnet' is set
      if @api_client.config.client_side_validation && vpc_subnet.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_subnet' when calling VPCApi.patch_vpc_subnet"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_subnet)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the VPC subnet bridge profile
    # Patch VPC Subnet bridge profile 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param vpc_subnet_bridge_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_subnet_bridge_profile(org_id, project_id, vpc_id, subnet_id, vpc_subnet_bridge_profile, opts = {})
      patch_vpc_subnet_bridge_profile_with_http_info(org_id, project_id, vpc_id, subnet_id, vpc_subnet_bridge_profile, opts)
      nil
    end

    # Create or update the VPC subnet bridge profile
    # Patch VPC Subnet bridge profile 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param vpc_subnet_bridge_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_subnet_bridge_profile_with_http_info(org_id, project_id, vpc_id, subnet_id, vpc_subnet_bridge_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_subnet_bridge_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.patch_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'vpc_subnet_bridge_profile' is set
      if @api_client.config.client_side_validation && vpc_subnet_bridge_profile.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_subnet_bridge_profile' when calling VPCApi.patch_vpc_subnet_bridge_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/bridge-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_subnet_bridge_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_subnet_bridge_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update VPC Subnet DHCP static binding
    # If binding with the binding-id is not already present, create a new VPC Subnet DHCP static binding instance. If it already exists, replace the existing VPC Subnet DHCP static binding instance with specified attributes. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_subnet_dhcp_static_binding(org_id, project_id, vpc_id, subnet_id, binding_id, dhcp_static_binding_config, opts = {})
      patch_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, dhcp_static_binding_config, opts)
      nil
    end

    # Create or update VPC Subnet DHCP static binding
    # If binding with the binding-id is not already present, create a new VPC Subnet DHCP static binding instance. If it already exists, replace the existing VPC Subnet DHCP static binding instance with specified attributes. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_subnet_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.patch_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling VPCApi.patch_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling VPCApi.patch_vpc_subnet_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_subnet_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a VPC Subnet ip_allocations
    # Create a VPC Subnet ip-allocation if it does not exist based on the IDs, or update existing ip-allocation 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_subnet_ip_allocation(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts = {})
      patch_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts)
      nil
    end

    # Patch a VPC Subnet ip_allocations
    # Create a VPC Subnet ip-allocation if it does not exist based on the IDs, or update existing ip-allocation 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_subnet_ip_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.patch_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling VPCApi.patch_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_allocation_id' is set
      if @api_client.config.client_side_validation && ip_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_allocation_id' when calling VPCApi.patch_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_address_allocation' is set
      if @api_client.config.client_side_validation && ip_address_allocation.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation' when calling VPCApi.patch_vpc_subnet_ip_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools/{ip-pool-id}/ip-allocations/{ip-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-allocation-id' + '}', ip_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_allocation)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_subnet_ip_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a VPC Subnet Port
    # Create a VPC Subnet port if it does not exist based on the IDs, or update existing port information by replacing the port object fields which presents in the request body. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param vpc_subnet_port 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_subnet_port(org_id, project_id, vpc_id, subnet_id, port_id, vpc_subnet_port, opts = {})
      patch_vpc_subnet_port_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, vpc_subnet_port, opts)
      nil
    end

    # Patch a VPC Subnet Port
    # Create a VPC Subnet port if it does not exist based on the IDs, or update existing port information by replacing the port object fields which presents in the request body. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param vpc_subnet_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_subnet_port_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, vpc_subnet_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.patch_vpc_subnet_port ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.patch_vpc_subnet_port"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.patch_vpc_subnet_port"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.patch_vpc_subnet_port"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.patch_vpc_subnet_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling VPCApi.patch_vpc_subnet_port"
      end
      # verify the required parameter 'vpc_subnet_port' is set
      if @api_client.config.client_side_validation && vpc_subnet_port.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_subnet_port' when calling VPCApi.patch_vpc_subnet_port"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ports/{port-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_subnet_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#patch_vpc_subnet_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the VPC Subnet bridge profile
    # Put VPC Subnet bridge profile 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param vpc_subnet_bridge_profile 
    # @param [Hash] opts the optional parameters
    # @return [VpcSubnetBridgeProfile]
    def put_vpc_subnet_bridge_profile(org_id, project_id, vpc_id, subnet_id, vpc_subnet_bridge_profile, opts = {})
      data, _status_code, _headers = put_vpc_subnet_bridge_profile_with_http_info(org_id, project_id, vpc_id, subnet_id, vpc_subnet_bridge_profile, opts)
      data
    end

    # Create or update the VPC Subnet bridge profile
    # Put VPC Subnet bridge profile 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param vpc_subnet_bridge_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcSubnetBridgeProfile, Fixnum, Hash)>] VpcSubnetBridgeProfile data, response status code and response headers
    def put_vpc_subnet_bridge_profile_with_http_info(org_id, project_id, vpc_id, subnet_id, vpc_subnet_bridge_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.put_vpc_subnet_bridge_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.put_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.put_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.put_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.put_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'vpc_subnet_bridge_profile' is set
      if @api_client.config.client_side_validation && vpc_subnet_bridge_profile.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_subnet_bridge_profile' when calling VPCApi.put_vpc_subnet_bridge_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/bridge-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_subnet_bridge_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSubnetBridgeProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#put_vpc_subnet_bridge_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read SubnetConnectionBindingMap
    # Read SubnetConnectionBindingMap. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [SubnetConnectionBindingMap]
    def read_subnet_connection_binding_map(org_id, project_id, vpc_id, subnet_id, map_id, opts = {})
      data, _status_code, _headers = read_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, opts)
      data
    end

    # Read SubnetConnectionBindingMap
    # Read SubnetConnectionBindingMap. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubnetConnectionBindingMap, Fixnum, Hash)>] SubnetConnectionBindingMap data, response status code and response headers
    def read_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.read_subnet_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.read_subnet_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.read_subnet_connection_binding_map"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.read_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.read_subnet_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling VPCApi.read_subnet_connection_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/subnet-connection-binding-maps/{map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubnetConnectionBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#read_subnet_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBAppProfile
    # Read a LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBAppProfile]
    def read_vpc_lb_app_profile(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts)
      data
    end

    # Read LBAppProfile
    # Read a LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBAppProfile, Fixnum, Hash)>] LBAppProfile data, response status code and response headers
    def read_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.read_vpc_lb_app_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.read_vpc_lb_app_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.read_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.read_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_lb_app_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_app_profile_id' when calling VPCApi.read_vpc_lb_app_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-app-profiles/{vpc-lb-app-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-app-profile-id' + '}', vpc_lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#read_vpc_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBClientSslProfile
    # Read a LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBClientSslProfile]
    def read_vpc_lb_client_ssl_profile(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts)
      data
    end

    # Read LBClientSslProfile
    # Read a LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBClientSslProfile, Fixnum, Hash)>] LBClientSslProfile data, response status code and response headers
    def read_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.read_vpc_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.read_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.read_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.read_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_client_ssl_profile_id' when calling VPCApi.read_vpc_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-client-ssl-profiles/{vpc-lb-client-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-client-ssl-profile-id' + '}', vpc_lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#read_vpc_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBMonitorProfile
    # Read a LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBMonitorProfile]
    def read_vpc_lb_monitor_profile(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts)
      data
    end

    # Read LBMonitorProfile
    # Read a LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBMonitorProfile, Fixnum, Hash)>] LBMonitorProfile data, response status code and response headers
    def read_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.read_vpc_lb_monitor_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.read_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.read_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.read_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_monitor_profile_id' when calling VPCApi.read_vpc_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-monitor-profiles/{vpc-lb-monitor-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-monitor-profile-id' + '}', vpc_lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#read_vpc_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBPersistenceProfile
    # Read a LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBPersistenceProfile]
    def read_vpc_lb_persistence_profile(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts)
      data
    end

    # Read LBPersistenceProfile
    # Read a LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPersistenceProfile, Fixnum, Hash)>] LBPersistenceProfile data, response status code and response headers
    def read_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.read_vpc_lb_persistence_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.read_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.read_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.read_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_persistence_profile_id' when calling VPCApi.read_vpc_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-persistence-profiles/{vpc-lb-persistence-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-persistence-profile-id' + '}', vpc_lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#read_vpc_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBPool
    # Read a LBPool.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param [Hash] opts the optional parameters
    # @return [LBPool]
    def read_vpc_lb_pool(org_id, project_id, vpc_id, vpc_lb_pool_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, opts)
      data
    end

    # Read LBPool
    # Read a LBPool.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPool, Fixnum, Hash)>] LBPool data, response status code and response headers
    def read_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.read_vpc_lb_pool ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.read_vpc_lb_pool"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.read_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.read_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_lb_pool_id' is set
      if @api_client.config.client_side_validation && vpc_lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_pool_id' when calling VPCApi.read_vpc_lb_pool"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-pools/{vpc-lb-pool-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-pool-id' + '}', vpc_lb_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#read_vpc_lb_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBServerSslProfile
    # Read a LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBServerSslProfile]
    def read_vpc_lb_server_ssl_profile(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts)
      data
    end

    # Read LBServerSslProfile
    # Read a LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBServerSslProfile, Fixnum, Hash)>] LBServerSslProfile data, response status code and response headers
    def read_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.read_vpc_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.read_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.read_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.read_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_server_ssl_profile_id' when calling VPCApi.read_vpc_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-server-ssl-profiles/{vpc-lb-server-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-server-ssl-profile-id' + '}', vpc_lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#read_vpc_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a load balancer
    # Read a load balancer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @return [LBService]
    def read_vpc_lb_service(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts)
      data
    end

    # Read a load balancer
    # Read a load balancer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBService, Fixnum, Hash)>] LBService data, response status code and response headers
    def read_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.read_vpc_lb_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.read_vpc_lb_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.read_vpc_lb_service"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.read_vpc_lb_service"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling VPCApi.read_vpc_lb_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#read_vpc_lb_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBVirtualServer
    # Read a LBVirtualServer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param [Hash] opts the optional parameters
    # @return [LBVirtualServer]
    def read_vpc_lb_virtual_server(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, opts)
      data
    end

    # Read LBVirtualServer
    # Read a LBVirtualServer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBVirtualServer, Fixnum, Hash)>] LBVirtualServer data, response status code and response headers
    def read_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.read_vpc_lb_virtual_server ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.read_vpc_lb_virtual_server"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.read_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.read_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && vpc_lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_virtual_server_id' when calling VPCApi.read_vpc_lb_virtual_server"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-virtual-servers/{vpc-lb-virtual-server-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-virtual-server-id' + '}', vpc_lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBVirtualServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#read_vpc_lb_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read VPC static routes
    # Read VPC static routes
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param route_id 
    # @param [Hash] opts the optional parameters
    # @return [StaticRoutes]
    def read_vpc_static_routes(org_id, project_id, vpc_id, route_id, opts = {})
      data, _status_code, _headers = read_vpc_static_routes_with_http_info(org_id, project_id, vpc_id, route_id, opts)
      data
    end

    # Read VPC static routes
    # Read VPC static routes
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param route_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StaticRoutes, Fixnum, Hash)>] StaticRoutes data, response status code and response headers
    def read_vpc_static_routes_with_http_info(org_id, project_id, vpc_id, route_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.read_vpc_static_routes ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.read_vpc_static_routes"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.read_vpc_static_routes"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.read_vpc_static_routes"
      end
      # verify the required parameter 'route_id' is set
      if @api_client.config.client_side_validation && route_id.nil?
        fail ArgumentError, "Missing the required parameter 'route_id' when calling VPCApi.read_vpc_static_routes"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/static-routes/{route-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'route-id' + '}', route_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticRoutes')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#read_vpc_static_routes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read VPC Subnet DHCP static binding
    # Read VPC Subnet DHCP static binding
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def read_vpc_subnet_dhcp_static_binding(org_id, project_id, vpc_id, subnet_id, binding_id, opts = {})
      data, _status_code, _headers = read_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, opts)
      data
    end

    # Read VPC Subnet DHCP static binding
    # Read VPC Subnet DHCP static binding
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def read_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.read_vpc_subnet_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.read_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.read_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.read_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.read_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling VPCApi.read_vpc_subnet_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#read_vpc_subnet_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an IpAddressPool of VPC Subnet.
    # Read IpAddressPool with given Id. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressPool]
    def read_vpc_subnet_ip_address_pool(org_id, project_id, vpc_id, subnet_id, ip_pool_id, opts = {})
      data, _status_code, _headers = read_vpc_subnet_ip_address_pool_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, opts)
      data
    end

    # Read an IpAddressPool of VPC Subnet.
    # Read IpAddressPool with given Id. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressPool, Fixnum, Hash)>] IpAddressPool data, response status code and response headers
    def read_vpc_subnet_ip_address_pool_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.read_vpc_subnet_ip_address_pool ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.read_vpc_subnet_ip_address_pool"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.read_vpc_subnet_ip_address_pool"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.read_vpc_subnet_ip_address_pool"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.read_vpc_subnet_ip_address_pool"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling VPCApi.read_vpc_subnet_ip_address_pool"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools/{ip-pool-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#read_vpc_subnet_ip_address_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of VPC gateway policies
    # This is used to set a precedence of a VPC gateway policy w.r.t others. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [GatewayPolicy]
    def revise_vpc_gateway_policies(org_id, project_id, vpc_id, gateway_policy_id, gateway_policy, opts = {})
      data, _status_code, _headers = revise_vpc_gateway_policies_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, gateway_policy, opts)
      data
    end

    # Revise the positioning of VPC gateway policies
    # This is used to set a precedence of a VPC gateway policy w.r.t others. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def revise_vpc_gateway_policies_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.revise_vpc_gateway_policies ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.revise_vpc_gateway_policies"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.revise_vpc_gateway_policies"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.revise_vpc_gateway_policies"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling VPCApi.revise_vpc_gateway_policies"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling VPCApi.revise_vpc_gateway_policies"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#revise_vpc_gateway_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of VPC N-S Firewall rule
    # This is used to re-order a rule within a VPC gateway policy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [Rule]
    def revise_vpc_gateway_rule(org_id, project_id, vpc_id, gateway_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = revise_vpc_gateway_rule_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of VPC N-S Firewall rule
    # This is used to re-order a rule within a VPC gateway policy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def revise_vpc_gateway_rule_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.revise_vpc_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.revise_vpc_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.revise_vpc_gateway_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.revise_vpc_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling VPCApi.revise_vpc_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling VPCApi.revise_vpc_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling VPCApi.revise_vpc_gateway_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#revise_vpc_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of VPC security policies
    # This is used to set a precedence of a VPC security policy w.r.t others. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [SecurityPolicy]
    def revise_vpc_security_policies(org_id, project_id, vpc_id, security_policy_id, security_policy, opts = {})
      data, _status_code, _headers = revise_vpc_security_policies_with_http_info(org_id, project_id, vpc_id, security_policy_id, security_policy, opts)
      data
    end

    # Revise the positioning of VPC security policies
    # This is used to set a precedence of a VPC security policy w.r.t others. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def revise_vpc_security_policies_with_http_info(org_id, project_id, vpc_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.revise_vpc_security_policies ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.revise_vpc_security_policies"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.revise_vpc_security_policies"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.revise_vpc_security_policies"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling VPCApi.revise_vpc_security_policies"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling VPCApi.revise_vpc_security_policies"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#revise_vpc_security_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of VPC E-W Firewall rule
    # This is used to re-order a rule within a VPC security policy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [Rule]
    def revise_vpc_security_rule(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = revise_vpc_security_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of VPC E-W Firewall rule
    # This is used to re-order a rule within a VPC security policy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def revise_vpc_security_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.revise_vpc_security_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.revise_vpc_security_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.revise_vpc_security_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.revise_vpc_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling VPCApi.revise_vpc_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling VPCApi.revise_vpc_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling VPCApi.revise_vpc_security_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#revise_vpc_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the VPC
    # Update the VPC. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param vpc 
    # @param [Hash] opts the optional parameters
    # @return [Vpc]
    def update_vpc(org_id, project_id, vpc_id, vpc, opts = {})
      data, _status_code, _headers = update_vpc_with_http_info(org_id, project_id, vpc_id, vpc, opts)
      data
    end

    # Update the VPC
    # Update the VPC. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param vpc 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Vpc, Fixnum, Hash)>] Vpc data, response status code and response headers
    def update_vpc_with_http_info(org_id, project_id, vpc_id, vpc, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.update_vpc ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.update_vpc"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.update_vpc"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.update_vpc"
      end
      # verify the required parameter 'vpc' is set
      if @api_client.config.client_side_validation && vpc.nil?
        fail ArgumentError, "Missing the required parameter 'vpc' when calling VPCApi.update_vpc"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Vpc')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#update_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the VPC attachment
    # Update the VPC attachment. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param vpc_attachment_id 
    # @param vpc_attachment 
    # @param [Hash] opts the optional parameters
    # @return [VpcAttachment]
    def update_vpc_attachment(org_id, project_id, vpc_id, vpc_attachment_id, vpc_attachment, opts = {})
      data, _status_code, _headers = update_vpc_attachment_with_http_info(org_id, project_id, vpc_id, vpc_attachment_id, vpc_attachment, opts)
      data
    end

    # Update the VPC attachment
    # Update the VPC attachment. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param vpc_attachment_id 
    # @param vpc_attachment 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcAttachment, Fixnum, Hash)>] VpcAttachment data, response status code and response headers
    def update_vpc_attachment_with_http_info(org_id, project_id, vpc_id, vpc_attachment_id, vpc_attachment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.update_vpc_attachment ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.update_vpc_attachment"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.update_vpc_attachment"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.update_vpc_attachment"
      end
      # verify the required parameter 'vpc_attachment_id' is set
      if @api_client.config.client_side_validation && vpc_attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_attachment_id' when calling VPCApi.update_vpc_attachment"
      end
      # verify the required parameter 'vpc_attachment' is set
      if @api_client.config.client_side_validation && vpc_attachment.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_attachment' when calling VPCApi.update_vpc_attachment"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/attachments/{vpc-attachment-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-attachment-id' + '}', vpc_attachment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_attachment)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcAttachment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#update_vpc_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the Gateway Policy
    # Update the Gateway Policy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def update_vpc_gateway_policy(org_id, project_id, vpc_id, gateway_policy_id, gateway_policy, opts = {})
      data, _status_code, _headers = update_vpc_gateway_policy_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, gateway_policy, opts)
      data
    end

    # Update the Gateway Policy
    # Update the Gateway Policy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def update_vpc_gateway_policy_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.update_vpc_gateway_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.update_vpc_gateway_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.update_vpc_gateway_policy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.update_vpc_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling VPCApi.update_vpc_gateway_policy"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling VPCApi.update_vpc_gateway_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#update_vpc_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update N-S Firewall Rule
    # Update the N-S Firewall Rule. If a Rule with the rule-id is not already present, this API fails with a 404. Creation of Rules is not allowed using this API. PUT /orgs/org1/projects/project1/vpcs/vpc-1/gateway-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def update_vpc_gateway_rule(org_id, project_id, vpc_id, gateway_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = update_vpc_gateway_rule_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, rule, opts)
      data
    end

    # Create or update N-S Firewall Rule
    # Update the N-S Firewall Rule. If a Rule with the rule-id is not already present, this API fails with a 404. Creation of Rules is not allowed using this API. PUT /orgs/org1/projects/project1/vpcs/vpc-1/gateway-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def update_vpc_gateway_rule_with_http_info(org_id, project_id, vpc_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.update_vpc_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.update_vpc_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.update_vpc_gateway_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.update_vpc_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling VPCApi.update_vpc_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling VPCApi.update_vpc_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling VPCApi.update_vpc_gateway_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#update_vpc_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update VPC Group
    # If a VPC group with the group-id is not already present, create a new VPC group. If it already exists, update the VPC group. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [Group]
    def update_vpc_group(org_id, project_id, vpc_id, group_id, group, opts = {})
      data, _status_code, _headers = update_vpc_group_with_http_info(org_id, project_id, vpc_id, group_id, group, opts)
      data
    end

    # Create or update VPC Group
    # If a VPC group with the group-id is not already present, create a new VPC group. If it already exists, update the VPC group. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param group_id 
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Group, Fixnum, Hash)>] Group data, response status code and response headers
    def update_vpc_group_with_http_info(org_id, project_id, vpc_id, group_id, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.update_vpc_group ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.update_vpc_group"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.update_vpc_group"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.update_vpc_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling VPCApi.update_vpc_group"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling VPCApi.update_vpc_group"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/groups/{group-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#update_vpc_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a VPC ip allocation
    # Create a VPC ip allocation if it does not exist 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param ip_address_allocation_id 
    # @param vpc_ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [VpcIpAddressAllocation]
    def update_vpc_ip_address_allocation(org_id, project_id, vpc_id, ip_address_allocation_id, vpc_ip_address_allocation, opts = {})
      data, _status_code, _headers = update_vpc_ip_address_allocation_with_http_info(org_id, project_id, vpc_id, ip_address_allocation_id, vpc_ip_address_allocation, opts)
      data
    end

    # Create or update a VPC ip allocation
    # Create a VPC ip allocation if it does not exist 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param ip_address_allocation_id 
    # @param vpc_ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcIpAddressAllocation, Fixnum, Hash)>] VpcIpAddressAllocation data, response status code and response headers
    def update_vpc_ip_address_allocation_with_http_info(org_id, project_id, vpc_id, ip_address_allocation_id, vpc_ip_address_allocation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.update_vpc_ip_address_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.update_vpc_ip_address_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.update_vpc_ip_address_allocation"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.update_vpc_ip_address_allocation"
      end
      # verify the required parameter 'ip_address_allocation_id' is set
      if @api_client.config.client_side_validation && ip_address_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation_id' when calling VPCApi.update_vpc_ip_address_allocation"
      end
      # verify the required parameter 'vpc_ip_address_allocation' is set
      if @api_client.config.client_side_validation && vpc_ip_address_allocation.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_ip_address_allocation' when calling VPCApi.update_vpc_ip_address_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/ip-address-allocations/{ip-address-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'ip-address-allocation-id' + '}', ip_address_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_ip_address_allocation)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcIpAddressAllocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#update_vpc_ip_address_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBAppProfile
    # If a LBAppProfile with the vpc-lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBAppProfile]
    def update_vpc_lb_app_profile(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts = {})
      data, _status_code, _headers = update_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts)
      data
    end

    # Create or update a LBAppProfile
    # If a LBAppProfile with the vpc-lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBAppProfile, Fixnum, Hash)>] LBAppProfile data, response status code and response headers
    def update_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.update_vpc_lb_app_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.update_vpc_lb_app_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.update_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.update_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_lb_app_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_app_profile_id' when calling VPCApi.update_vpc_lb_app_profile"
      end
      # verify the required parameter 'lb_app_profile' is set
      if @api_client.config.client_side_validation && lb_app_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile' when calling VPCApi.update_vpc_lb_app_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-app-profiles/{vpc-lb-app-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-app-profile-id' + '}', vpc_lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_app_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#update_vpc_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the vpc-lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBClientSslProfile]
    def update_vpc_lb_client_ssl_profile(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      data, _status_code, _headers = update_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts)
      data
    end

    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the vpc-lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBClientSslProfile, Fixnum, Hash)>] LBClientSslProfile data, response status code and response headers
    def update_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.update_vpc_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.update_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.update_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.update_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_client_ssl_profile_id' when calling VPCApi.update_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'lb_client_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile' when calling VPCApi.update_vpc_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-client-ssl-profiles/{vpc-lb-client-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-client-ssl-profile-id' + '}', vpc_lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_client_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#update_vpc_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the vpc-lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBMonitorProfile]
    def update_vpc_lb_monitor_profile(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts = {})
      data, _status_code, _headers = update_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts)
      data
    end

    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the vpc-lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBMonitorProfile, Fixnum, Hash)>] LBMonitorProfile data, response status code and response headers
    def update_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.update_vpc_lb_monitor_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.update_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.update_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.update_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_monitor_profile_id' when calling VPCApi.update_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'lb_monitor_profile' is set
      if @api_client.config.client_side_validation && lb_monitor_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile' when calling VPCApi.update_vpc_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-monitor-profiles/{vpc-lb-monitor-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-monitor-profile-id' + '}', vpc_lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_monitor_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#update_vpc_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the vpc-lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBPersistenceProfile]
    def update_vpc_lb_persistence_profile(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts = {})
      data, _status_code, _headers = update_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts)
      data
    end

    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the vpc-lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPersistenceProfile, Fixnum, Hash)>] LBPersistenceProfile data, response status code and response headers
    def update_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.update_vpc_lb_persistence_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.update_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.update_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.update_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_persistence_profile_id' when calling VPCApi.update_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'lb_persistence_profile' is set
      if @api_client.config.client_side_validation && lb_persistence_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile' when calling VPCApi.update_vpc_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-persistence-profiles/{vpc-lb-persistence-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-persistence-profile-id' + '}', vpc_lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_persistence_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#update_vpc_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPool
    # If a LBPool with the vpc-lb-pool-id is not already present, create a new LBPool. If it already exists, update the LBPool. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [LBPool]
    def update_vpc_lb_pool(org_id, project_id, vpc_id, vpc_lb_pool_id, lb_pool, opts = {})
      data, _status_code, _headers = update_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, lb_pool, opts)
      data
    end

    # Create or update a LBPool
    # If a LBPool with the vpc-lb-pool-id is not already present, create a new LBPool. If it already exists, update the LBPool. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPool, Fixnum, Hash)>] LBPool data, response status code and response headers
    def update_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, lb_pool, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.update_vpc_lb_pool ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.update_vpc_lb_pool"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.update_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.update_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_lb_pool_id' is set
      if @api_client.config.client_side_validation && vpc_lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_pool_id' when calling VPCApi.update_vpc_lb_pool"
      end
      # verify the required parameter 'lb_pool' is set
      if @api_client.config.client_side_validation && lb_pool.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool' when calling VPCApi.update_vpc_lb_pool"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-pools/{vpc-lb-pool-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-pool-id' + '}', vpc_lb_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_pool)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#update_vpc_lb_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the vpc-lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBServerSslProfile]
    def update_vpc_lb_server_ssl_profile(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      data, _status_code, _headers = update_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts)
      data
    end

    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the vpc-lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBServerSslProfile, Fixnum, Hash)>] LBServerSslProfile data, response status code and response headers
    def update_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.update_vpc_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.update_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.update_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.update_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_server_ssl_profile_id' when calling VPCApi.update_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'lb_server_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile' when calling VPCApi.update_vpc_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-server-ssl-profiles/{vpc-lb-server-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-server-ssl-profile-id' + '}', vpc_lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_server_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#update_vpc_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a load balancer
    # If a load balancer with the vpc-lb-id doesn't exist, create a new Load Balancer. If it has already existed, update the load balancer. This is a full replacement.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param lb_service 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Load Balancer Operation
    # @return [LBService]
    def update_vpc_lb_service(org_id, project_id, vpc_id, vpc_lb_id, lb_service, opts = {})
      data, _status_code, _headers = update_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, lb_service, opts)
      data
    end

    # Create or update a load balancer
    # If a load balancer with the vpc-lb-id doesn&#39;t exist, create a new Load Balancer. If it has already existed, update the load balancer. This is a full replacement.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param lb_service 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Load Balancer Operation
    # @return [Array<(LBService, Fixnum, Hash)>] LBService data, response status code and response headers
    def update_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, lb_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.update_vpc_lb_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.update_vpc_lb_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.update_vpc_lb_service"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.update_vpc_lb_service"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling VPCApi.update_vpc_lb_service"
      end
      # verify the required parameter 'lb_service' is set
      if @api_client.config.client_side_validation && lb_service.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service' when calling VPCApi.update_vpc_lb_service"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['allow_auto_relocation'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of allow_auto_relocation'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#update_vpc_lb_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBVirtualServer
    # If a LBVirtualServer with the vpc-lb-virtual-server-id is not already present, create a new LBVirtualServer. If it already exists, update the LBVirtualServer. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param lb_virtual_server 
    # @param [Hash] opts the optional parameters
    # @return [LBVirtualServer]
    def update_vpc_lb_virtual_server(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, lb_virtual_server, opts = {})
      data, _status_code, _headers = update_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, lb_virtual_server, opts)
      data
    end

    # Create or update a LBVirtualServer
    # If a LBVirtualServer with the vpc-lb-virtual-server-id is not already present, create a new LBVirtualServer. If it already exists, update the LBVirtualServer. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param lb_virtual_server 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBVirtualServer, Fixnum, Hash)>] LBVirtualServer data, response status code and response headers
    def update_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, lb_virtual_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.update_vpc_lb_virtual_server ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.update_vpc_lb_virtual_server"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.update_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.update_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && vpc_lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_virtual_server_id' when calling VPCApi.update_vpc_lb_virtual_server"
      end
      # verify the required parameter 'lb_virtual_server' is set
      if @api_client.config.client_side_validation && lb_virtual_server.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server' when calling VPCApi.update_vpc_lb_virtual_server"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-virtual-servers/{vpc-lb-virtual-server-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-virtual-server-id' + '}', vpc_lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_virtual_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBVirtualServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#update_vpc_lb_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update E-W Firewall Rule
    # Update the E-W Firewall Rule. If a Rule with the rule-id is not already present, this API fails with a 404. Creation of Rules is not allowed using this API. PUT /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def update_vpc_policy_rule(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = update_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts)
      data
    end

    # Create or update E-W Firewall Rule
    # Update the E-W Firewall Rule. If a Rule with the rule-id is not already present, this API fails with a 404. Creation of Rules is not allowed using this API. PUT /orgs/org1/projects/project1/vpcs/vpc-1/security-policies/default/rules/rule-1 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def update_vpc_policy_rule_with_http_info(org_id, project_id, vpc_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.update_vpc_policy_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.update_vpc_policy_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.update_vpc_policy_rule"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.update_vpc_policy_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling VPCApi.update_vpc_policy_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling VPCApi.update_vpc_policy_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling VPCApi.update_vpc_policy_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#update_vpc_policy_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the SecurityPolicy
    # Update the SecurityPolicy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def update_vpc_security_policy(org_id, project_id, vpc_id, security_policy_id, security_policy, opts = {})
      data, _status_code, _headers = update_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, security_policy, opts)
      data
    end

    # Update the SecurityPolicy
    # Update the SecurityPolicy. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def update_vpc_security_policy_with_http_info(org_id, project_id, vpc_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.update_vpc_security_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.update_vpc_security_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.update_vpc_security_policy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.update_vpc_security_policy"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling VPCApi.update_vpc_security_policy"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling VPCApi.update_vpc_security_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/security-policies/{security-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#update_vpc_security_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Security Profile
    # Update existing security profile. Note: Currently, user will not be able to create new security profiles. 
    # @param org_id 
    # @param project_id 
    # @param vpc_security_profile_id 
    # @param vpc_security_profile 
    # @param [Hash] opts the optional parameters
    # @return [VpcSecurityProfile]
    def update_vpc_security_profile(org_id, project_id, vpc_security_profile_id, vpc_security_profile, opts = {})
      data, _status_code, _headers = update_vpc_security_profile_with_http_info(org_id, project_id, vpc_security_profile_id, vpc_security_profile, opts)
      data
    end

    # Update Security Profile
    # Update existing security profile. Note: Currently, user will not be able to create new security profiles. 
    # @param org_id 
    # @param project_id 
    # @param vpc_security_profile_id 
    # @param vpc_security_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcSecurityProfile, Fixnum, Hash)>] VpcSecurityProfile data, response status code and response headers
    def update_vpc_security_profile_with_http_info(org_id, project_id, vpc_security_profile_id, vpc_security_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.update_vpc_security_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.update_vpc_security_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.update_vpc_security_profile"
      end
      # verify the required parameter 'vpc_security_profile_id' is set
      if @api_client.config.client_side_validation && vpc_security_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_security_profile_id' when calling VPCApi.update_vpc_security_profile"
      end
      # verify the required parameter 'vpc_security_profile' is set
      if @api_client.config.client_side_validation && vpc_security_profile.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_security_profile' when calling VPCApi.update_vpc_security_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpc-security-profiles/{vpc-security-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-security-profile-id' + '}', vpc_security_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_security_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSecurityProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#update_vpc_security_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the VPC Subnet
    # Update the VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param vpc_subnet 
    # @param [Hash] opts the optional parameters
    # @return [VpcSubnet]
    def update_vpc_subnet(org_id, project_id, vpc_id, subnet_id, vpc_subnet, opts = {})
      data, _status_code, _headers = update_vpc_subnet_with_http_info(org_id, project_id, vpc_id, subnet_id, vpc_subnet, opts)
      data
    end

    # Update the VPC Subnet
    # Update the VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param vpc_subnet 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcSubnet, Fixnum, Hash)>] VpcSubnet data, response status code and response headers
    def update_vpc_subnet_with_http_info(org_id, project_id, vpc_id, subnet_id, vpc_subnet, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.update_vpc_subnet ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.update_vpc_subnet"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.update_vpc_subnet"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.update_vpc_subnet"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.update_vpc_subnet"
      end
      # verify the required parameter 'vpc_subnet' is set
      if @api_client.config.client_side_validation && vpc_subnet.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_subnet' when calling VPCApi.update_vpc_subnet"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_subnet)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSubnet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#update_vpc_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a VPC Subnet ip allocation
    # Create a VPC Subnet ip allocation if it does not exist based on the IDs, or update existing ip-allocation information by replacing the port object already exists. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressAllocation]
    def update_vpc_subnet_ip_allocation(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts = {})
      data, _status_code, _headers = update_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts)
      data
    end

    # Create or update a VPC Subnet ip allocation
    # Create a VPC Subnet ip allocation if it does not exist based on the IDs, or update existing ip-allocation information by replacing the port object already exists. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressAllocation, Fixnum, Hash)>] IpAddressAllocation data, response status code and response headers
    def update_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.update_vpc_subnet_ip_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.update_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.update_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.update_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.update_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling VPCApi.update_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_allocation_id' is set
      if @api_client.config.client_side_validation && ip_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_allocation_id' when calling VPCApi.update_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_address_allocation' is set
      if @api_client.config.client_side_validation && ip_address_allocation.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation' when calling VPCApi.update_vpc_subnet_ip_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools/{ip-pool-id}/ip-allocations/{ip-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-allocation-id' + '}', ip_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_allocation)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressAllocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#update_vpc_subnet_ip_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a VPC Subnet Port
    # Create a VPC Subnet port if it does not exist based on the IDs, or update existing port information by replacing the port object already exists. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param vpc_subnet_port 
    # @param [Hash] opts the optional parameters
    # @return [VpcSubnetPort]
    def update_vpc_subnet_port(org_id, project_id, vpc_id, subnet_id, port_id, vpc_subnet_port, opts = {})
      data, _status_code, _headers = update_vpc_subnet_port_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, vpc_subnet_port, opts)
      data
    end

    # Create or update a VPC Subnet Port
    # Create a VPC Subnet port if it does not exist based on the IDs, or update existing port information by replacing the port object already exists. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param vpc_subnet_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcSubnetPort, Fixnum, Hash)>] VpcSubnetPort data, response status code and response headers
    def update_vpc_subnet_port_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, vpc_subnet_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.update_vpc_subnet_port ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.update_vpc_subnet_port"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.update_vpc_subnet_port"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.update_vpc_subnet_port"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling VPCApi.update_vpc_subnet_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling VPCApi.update_vpc_subnet_port"
      end
      # verify the required parameter 'vpc_subnet_port' is set
      if @api_client.config.client_side_validation && vpc_subnet_port.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_subnet_port' when calling VPCApi.update_vpc_subnet_port"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ports/{port-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_subnet_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSubnetPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#update_vpc_subnet_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Assign or Unassign tag on multiple Virtual Machines.
    # Tag can be assigned or unassigned on multiple objects. Supported object type is restricted to Virtual Machine for now and support for other objects will be added later. Permissions for tag bulk operation would be similar to virtual machine tag permissions. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param operation_id 
    # @param tag_bulk_operation 
    # @param [Hash] opts the optional parameters
    # @return [TagBulkOperation]
    def vpc_tag_bulk_update(org_id, project_id, vpc_id, operation_id, tag_bulk_operation, opts = {})
      data, _status_code, _headers = vpc_tag_bulk_update_with_http_info(org_id, project_id, vpc_id, operation_id, tag_bulk_operation, opts)
      data
    end

    # Assign or Unassign tag on multiple Virtual Machines.
    # Tag can be assigned or unassigned on multiple objects. Supported object type is restricted to Virtual Machine for now and support for other objects will be added later. Permissions for tag bulk operation would be similar to virtual machine tag permissions. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param operation_id 
    # @param tag_bulk_operation 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TagBulkOperation, Fixnum, Hash)>] TagBulkOperation data, response status code and response headers
    def vpc_tag_bulk_update_with_http_info(org_id, project_id, vpc_id, operation_id, tag_bulk_operation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCApi.vpc_tag_bulk_update ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling VPCApi.vpc_tag_bulk_update"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VPCApi.vpc_tag_bulk_update"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCApi.vpc_tag_bulk_update"
      end
      # verify the required parameter 'operation_id' is set
      if @api_client.config.client_side_validation && operation_id.nil?
        fail ArgumentError, "Missing the required parameter 'operation_id' when calling VPCApi.vpc_tag_bulk_update"
      end
      # verify the required parameter 'tag_bulk_operation' is set
      if @api_client.config.client_side_validation && tag_bulk_operation.nil?
        fail ArgumentError, "Missing the required parameter 'tag_bulk_operation' when calling VPCApi.vpc_tag_bulk_update"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/tags/vpc-tag-operations/{operation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'operation-id' + '}', operation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tag_bulk_operation)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TagBulkOperation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCApi#vpc_tag_bulk_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
