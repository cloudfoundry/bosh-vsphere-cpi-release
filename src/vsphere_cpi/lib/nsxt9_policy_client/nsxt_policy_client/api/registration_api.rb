=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class RegistrationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a registered NSX Application Platform as specified
    # Get the registered NSX Application Platform as specified. 
    # @param cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [NappRegistration]
    def get_napp_registration(cluster_id, opts = {})
      data, _status_code, _headers = get_napp_registration_with_http_info(cluster_id, opts)
      data
    end

    # Get a registered NSX Application Platform as specified
    # Get the registered NSX Application Platform as specified. 
    # @param cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NappRegistration, Fixnum, Hash)>] NappRegistration data, response status code and response headers
    def get_napp_registration_with_http_info(cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_napp_registration ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling RegistrationApi.get_napp_registration"
      end
      # resource path
      local_var_path = '/infra/sites/napp/registration/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NappRegistration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_napp_registration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all registered NSX Application Platforms
    # Get all registered NSX Application Platforms. 
    # @param [Hash] opts the optional parameters
    # @return [NappRegistrationList]
    def list_napp_registrations(opts = {})
      data, _status_code, _headers = list_napp_registrations_with_http_info(opts)
      data
    end

    # Get all registered NSX Application Platforms
    # Get all registered NSX Application Platforms. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NappRegistrationList, Fixnum, Hash)>] NappRegistrationList data, response status code and response headers
    def list_napp_registrations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.list_napp_registrations ...'
      end
      # resource path
      local_var_path = '/infra/sites/napp/registration'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NappRegistrationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#list_napp_registrations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
