=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class SignaturesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add IDS custom signatures
    # Add IDS custom signatures 
    # @param version_id 
    # @param ids_raw_signatures 
    # @param action Action to add custom signatures
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_custom_signatures(version_id, ids_raw_signatures, action, opts = {})
      add_custom_signatures_with_http_info(version_id, ids_raw_signatures, action, opts)
      nil
    end

    # Add IDS custom signatures
    # Add IDS custom signatures 
    # @param version_id 
    # @param ids_raw_signatures 
    # @param action Action to add custom signatures
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_custom_signatures_with_http_info(version_id, ids_raw_signatures, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.add_custom_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SignaturesApi.add_custom_signatures"
      end
      # verify the required parameter 'ids_raw_signatures' is set
      if @api_client.config.client_side_validation && ids_raw_signatures.nil?
        fail ArgumentError, "Missing the required parameter 'ids_raw_signatures' when calling SignaturesApi.add_custom_signatures"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling SignaturesApi.add_custom_signatures"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ADD_CUSTOM_SIGNATURES'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of ADD_CUSTOM_SIGNATURES"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_raw_signatures)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#add_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Publish/Cancel/Validate the custom signatures
    # Publish/Cancel/Validate the customer signatures. CANCEL: Revert to earlier published state i.e. cancel/remove all the unpublished custom signatures. VALIDATE: Trigger the validation of the custom signatures. PUBLISH: Publish the custom signatures. This action will push all the valid custom signatures to datapath. 
    # @param version_id 
    # @param custom_signature_validation_payload 
    # @param action Different Actions on Custom signatures
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def apply_custom_signatures_action(version_id, custom_signature_validation_payload, action, opts = {})
      apply_custom_signatures_action_with_http_info(version_id, custom_signature_validation_payload, action, opts)
      nil
    end

    # Publish/Cancel/Validate the custom signatures
    # Publish/Cancel/Validate the customer signatures. CANCEL: Revert to earlier published state i.e. cancel/remove all the unpublished custom signatures. VALIDATE: Trigger the validation of the custom signatures. PUBLISH: Publish the custom signatures. This action will push all the valid custom signatures to datapath. 
    # @param version_id 
    # @param custom_signature_validation_payload 
    # @param action Different Actions on Custom signatures
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def apply_custom_signatures_action_with_http_info(version_id, custom_signature_validation_payload, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.apply_custom_signatures_action ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SignaturesApi.apply_custom_signatures_action"
      end
      # verify the required parameter 'custom_signature_validation_payload' is set
      if @api_client.config.client_side_validation && custom_signature_validation_payload.nil?
        fail ArgumentError, "Missing the required parameter 'custom_signature_validation_payload' when calling SignaturesApi.apply_custom_signatures_action"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling SignaturesApi.apply_custom_signatures_action"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CANCEL', 'PUBLISH', 'VALIDATE'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of CANCEL, PUBLISH, VALIDATE"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(custom_signature_validation_payload)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#apply_custom_signatures_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create or update Global IDS Signature
    # Update global intrusion detection signature.
    # @param signature_id Signature ID
    # @param global_ids_signature 
    # @param [Hash] opts the optional parameters
    # @return [GlobalIdsSignature]
    def create_or_update_global_ids_signature(signature_id, global_ids_signature, opts = {})
      data, _status_code, _headers = create_or_update_global_ids_signature_with_http_info(signature_id, global_ids_signature, opts)
      data
    end

    # create or update Global IDS Signature
    # Update global intrusion detection signature.
    # @param signature_id Signature ID
    # @param global_ids_signature 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalIdsSignature, Fixnum, Hash)>] GlobalIdsSignature data, response status code and response headers
    def create_or_update_global_ids_signature_with_http_info(signature_id, global_ids_signature, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.create_or_update_global_ids_signature ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SignaturesApi.create_or_update_global_ids_signature"
      end
      # verify the required parameter 'global_ids_signature' is set
      if @api_client.config.client_side_validation && global_ids_signature.nil?
        fail ArgumentError, "Missing the required parameter 'global_ids_signature' when calling SignaturesApi.create_or_update_global_ids_signature"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_ids_signature)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#create_or_update_global_ids_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Global IDS signature
    # Delete global intrusion detection signature. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_global_ids_signature(signature_id, opts = {})
      delete_global_ids_signature_with_http_info(signature_id, opts)
      nil
    end

    # Delete Global IDS signature
    # Delete global intrusion detection signature. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_global_ids_signature_with_http_info(signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.delete_global_ids_signature ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SignaturesApi.delete_global_ids_signature"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#delete_global_ids_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete threshold configuration for IDS system signature
    # Resets threshold configuration for IDS system signature to default values. This API is applicable only for 'System' signatures. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ids_signature_threshold_config(signature_id, opts = {})
      delete_ids_signature_threshold_config_with_http_info(signature_id, opts)
      nil
    end

    # Delete threshold configuration for IDS system signature
    # Resets threshold configuration for IDS system signature to default values. This API is applicable only for &#39;System&#39; signatures. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ids_signature_threshold_config_with_http_info(signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.delete_ids_signature_threshold_config ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SignaturesApi.delete_ids_signature_threshold_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/threshold-configs/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#delete_ids_signature_threshold_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export Custom signatures into a file.
    # API can be used for user to export the existing custom signatures. Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param version_id 
    # @param include Custom signatures to be exported
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def export_ids_custom_signatures(version_id, include, opts = {})
      export_ids_custom_signatures_with_http_info(version_id, include, opts)
      nil
    end

    # Export Custom signatures into a file.
    # API can be used for user to export the existing custom signatures. Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param version_id 
    # @param include Custom signatures to be exported
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def export_ids_custom_signatures_with_http_info(version_id, include, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.export_ids_custom_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SignaturesApi.export_ids_custom_signatures"
      end
      # verify the required parameter 'include' is set
      if @api_client.config.client_side_validation && include.nil?
        fail ArgumentError, "Missing the required parameter 'include' when calling SignaturesApi.export_ids_custom_signatures"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['VALID', 'INVALID', 'ALL'].include?(include)
        fail ArgumentError, "invalid value for 'include', must be one of VALID, INVALID, ALL"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures/export'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = include

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#export_ids_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Global IDS signature.
    # Read global intrusion detection signature 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [GlobalIdsSignature]
    def get_global_ids_signature(signature_id, opts = {})
      data, _status_code, _headers = get_global_ids_signature_with_http_info(signature_id, opts)
      data
    end

    # Get Global IDS signature.
    # Read global intrusion detection signature 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalIdsSignature, Fixnum, Hash)>] GlobalIdsSignature data, response status code and response headers
    def get_global_ids_signature_with_http_info(signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.get_global_ids_signature ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SignaturesApi.get_global_ids_signature"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#get_global_ids_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature
    # Get IDS Custom Signature. 
    # @param version_id 
    # @param sig_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignature]
    def get_ids_custom_signature(version_id, sig_id, opts = {})
      data, _status_code, _headers = get_ids_custom_signature_with_http_info(version_id, sig_id, opts)
      data
    end

    # Get IDS Custom Signature
    # Get IDS Custom Signature. 
    # @param version_id 
    # @param sig_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignature, Fixnum, Hash)>] IdsCustomSignature data, response status code and response headers
    def get_ids_custom_signature_with_http_info(version_id, sig_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.get_ids_custom_signature ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SignaturesApi.get_ids_custom_signature"
      end
      # verify the required parameter 'sig_id' is set
      if @api_client.config.client_side_validation && sig_id.nil?
        fail ArgumentError, "Missing the required parameter 'sig_id' when calling SignaturesApi.get_ids_custom_signature"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures/{sig-id}'.sub('{' + 'version-id' + '}', version_id.to_s).sub('{' + 'sig-id' + '}', sig_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#get_ids_custom_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature Version
    # Get IDS Custom Signature Version. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignatureVersion]
    def get_ids_custom_signature_version(version_id, opts = {})
      data, _status_code, _headers = get_ids_custom_signature_version_with_http_info(version_id, opts)
      data
    end

    # Get IDS Custom Signature Version
    # Get IDS Custom Signature Version. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignatureVersion, Fixnum, Hash)>] IdsCustomSignatureVersion data, response status code and response headers
    def get_ids_custom_signature_version_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.get_ids_custom_signature_version ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SignaturesApi.get_ids_custom_signature_version"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureVersion')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#get_ids_custom_signature_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature difference
    # Get published and unpublished custom signatures difference. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignaturesDiff]
    def get_ids_custom_signatures_diff(version_id, opts = {})
      data, _status_code, _headers = get_ids_custom_signatures_diff_with_http_info(version_id, opts)
      data
    end

    # Get IDS Custom Signature difference
    # Get published and unpublished custom signatures difference. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignaturesDiff, Fixnum, Hash)>] IdsCustomSignaturesDiff data, response status code and response headers
    def get_ids_custom_signatures_diff_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.get_ids_custom_signatures_diff ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SignaturesApi.get_ids_custom_signatures_diff"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures-diff'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignaturesDiff')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#get_ids_custom_signatures_diff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS signature status
    # Intrusion detection system signatures status. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [IdsSignatureStatus]
    def get_ids_signature_status(opts = {})
      data, _status_code, _headers = get_ids_signature_status_with_http_info(opts)
      data
    end

    # Get IDS signature status
    # Intrusion detection system signatures status. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(IdsSignatureStatus, Fixnum, Hash)>] IdsSignatureStatus data, response status code and response headers
    def get_ids_signature_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.get_ids_signature_status ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signatures/status'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSignatureStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#get_ids_signature_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get threshold configuration for IDS system signature
    # Retrieve threshold and rate filter configuration for IDS signature. This API is applicable only for 'System' signatures. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [IdsThresholdConfig]
    def get_ids_signature_threshold_config(signature_id, opts = {})
      data, _status_code, _headers = get_ids_signature_threshold_config_with_http_info(signature_id, opts)
      data
    end

    # Get threshold configuration for IDS system signature
    # Retrieve threshold and rate filter configuration for IDS signature. This API is applicable only for &#39;System&#39; signatures. 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsThresholdConfig, Fixnum, Hash)>] IdsThresholdConfig data, response status code and response headers
    def get_ids_signature_threshold_config_with_http_info(signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.get_ids_signature_threshold_config ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SignaturesApi.get_ids_signature_threshold_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/threshold-configs/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsThresholdConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#get_ids_signature_threshold_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS signature version
    # Intrusion detection system signature version. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsSignatureVersion]
    def get_ids_signature_version(version_id, opts = {})
      data, _status_code, _headers = get_ids_signature_version_with_http_info(version_id, opts)
      data
    end

    # Get IDS signature version
    # Intrusion detection system signature version. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSignatureVersion, Fixnum, Hash)>] IdsSignatureVersion data, response status code and response headers
    def get_ids_signature_version_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.get_ids_signature_version ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SignaturesApi.get_ids_signature_version"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signature-versions/{version-id}'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSignatureVersion')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#get_ids_signature_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS signature versions
    # Intrusion detection system signature versions. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSignatureVersionListResult]
    def get_ids_signature_versions(opts = {})
      data, _status_code, _headers = get_ids_signature_versions_with_http_info(opts)
      data
    end

    # Get IDS signature versions
    # Intrusion detection system signature versions. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSignatureVersionListResult, Fixnum, Hash)>] IdsSignatureVersionListResult data, response status code and response headers
    def get_ids_signature_versions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.get_ids_signature_versions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.get_ids_signature_versions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.get_ids_signature_versions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signature-versions'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSignatureVersionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#get_ids_signature_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Global IDS signature.
    # Read global intrusion detection signature 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [GlobalIdsSignature]
    def global_infra_get_global_ids_signature_gm(signature_id, opts = {})
      data, _status_code, _headers = global_infra_get_global_ids_signature_gm_with_http_info(signature_id, opts)
      data
    end

    # Get Global IDS signature.
    # Read global intrusion detection signature 
    # @param signature_id Signature ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalIdsSignature, Fixnum, Hash)>] GlobalIdsSignature data, response status code and response headers
    def global_infra_get_global_ids_signature_gm_with_http_info(signature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.global_infra_get_global_ids_signature_gm ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SignaturesApi.global_infra_get_global_ids_signature_gm"
      end
      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/gsm/global-signatures/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#global_infra_get_global_ids_signature_gm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalIdsSignatureListResult]
    def global_infra_list_global_ids_signatures_gm(opts = {})
      data, _status_code, _headers = global_infra_list_global_ids_signatures_gm_with_http_info(opts)
      data
    end

    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalIdsSignatureListResult, Fixnum, Hash)>] GlobalIdsSignatureListResult data, response status code and response headers
    def global_infra_list_global_ids_signatures_gm_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.global_infra_list_global_ids_signatures_gm ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.global_infra_list_global_ids_signatures_gm, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.global_infra_list_global_ids_signatures_gm, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/gsm/global-signatures'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#global_infra_list_global_ids_signatures_gm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS signatures
    # List intrusion detection system signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSignatureListResult]
    def global_infra_list_ids_signatures(version_id, opts = {})
      data, _status_code, _headers = global_infra_list_ids_signatures_with_http_info(version_id, opts)
      data
    end

    # List IDS signatures
    # List intrusion detection system signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSignatureListResult, Fixnum, Hash)>] IdsSignatureListResult data, response status code and response headers
    def global_infra_list_ids_signatures_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.global_infra_list_ids_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SignaturesApi.global_infra_list_ids_signatures"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.global_infra_list_ids_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.global_infra_list_ids_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/settings/firewall/security/intrusion-services/signature-versions/{version-id}/signatures'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#global_infra_list_ids_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalIdsSignatureListResult]
    def list_global_ids_signatures(opts = {})
      data, _status_code, _headers = list_global_ids_signatures_with_http_info(opts)
      data
    end

    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalIdsSignatureListResult, Fixnum, Hash)>] GlobalIdsSignatureListResult data, response status code and response headers
    def list_global_ids_signatures_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.list_global_ids_signatures ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.list_global_ids_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.list_global_ids_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#list_global_ids_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalIdsSignatureListResult]
    def list_global_ids_signatures_gm(opts = {})
      data, _status_code, _headers = list_global_ids_signatures_gm_with_http_info(opts)
      data
    end

    # List Global IDS signatures
    # List global intrusion detection signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalIdsSignatureListResult, Fixnum, Hash)>] GlobalIdsSignatureListResult data, response status code and response headers
    def list_global_ids_signatures_gm_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.list_global_ids_signatures_gm ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.list_global_ids_signatures_gm, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.list_global_ids_signatures_gm, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/gsm/global-signatures'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalIdsSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#list_global_ids_signatures_gm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Custom Signature Versions
    # List IDS Custom Signature Versions. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsCustomSignatureVersionListResult]
    def list_ids_custom_signature_versions(opts = {})
      data, _status_code, _headers = list_ids_custom_signature_versions_with_http_info(opts)
      data
    end

    # List IDS Custom Signature Versions
    # List IDS Custom Signature Versions. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsCustomSignatureVersionListResult, Fixnum, Hash)>] IdsCustomSignatureVersionListResult data, response status code and response headers
    def list_ids_custom_signature_versions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.list_ids_custom_signature_versions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.list_ids_custom_signature_versions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.list_ids_custom_signature_versions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureVersionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#list_ids_custom_signature_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Custom Signatures
    # List IDS Custom Signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :include Custom signatures to be returned
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsCustomSignatureListResult]
    def list_ids_custom_signatures(version_id, opts = {})
      data, _status_code, _headers = list_ids_custom_signatures_with_http_info(version_id, opts)
      data
    end

    # List IDS Custom Signatures
    # List IDS Custom Signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :include Custom signatures to be returned
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsCustomSignatureListResult, Fixnum, Hash)>] IdsCustomSignatureListResult data, response status code and response headers
    def list_ids_custom_signatures_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.list_ids_custom_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SignaturesApi.list_ids_custom_signatures"
      end
      if @api_client.config.client_side_validation && opts[:'include'] && !['PREVIEW_CUSTOM_SIGNATURES', 'CUSTOM_SIGNATURES'].include?(opts[:'include'])
        fail ArgumentError, 'invalid value for "include", must be one of PREVIEW_CUSTOM_SIGNATURES, CUSTOM_SIGNATURES'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.list_ids_custom_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.list_ids_custom_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#list_ids_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all threshold configurations for IDS system signature
    # List all threshold configurations for IDS signatures. This API is applicable only for 'System' signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsThresholdConfigListResult]
    def list_ids_signature_threshold_configs(opts = {})
      data, _status_code, _headers = list_ids_signature_threshold_configs_with_http_info(opts)
      data
    end

    # List all threshold configurations for IDS system signature
    # List all threshold configurations for IDS signatures. This API is applicable only for &#39;System&#39; signatures. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsThresholdConfigListResult, Fixnum, Hash)>] IdsThresholdConfigListResult data, response status code and response headers
    def list_ids_signature_threshold_configs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.list_ids_signature_threshold_configs ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.list_ids_signature_threshold_configs, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.list_ids_signature_threshold_configs, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/threshold-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsThresholdConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#list_ids_signature_threshold_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS signatures
    # List intrusion detection system signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsSignatureListResult]
    def list_ids_signatures(version_id, opts = {})
      data, _status_code, _headers = list_ids_signatures_with_http_info(version_id, opts)
      data
    end

    # List IDS signatures
    # List intrusion detection system signatures. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsSignatureListResult, Fixnum, Hash)>] IdsSignatureListResult data, response status code and response headers
    def list_ids_signatures_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.list_ids_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SignaturesApi.list_ids_signatures"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.list_ids_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.list_ids_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signature-versions/{version-id}/signatures'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#list_ids_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Change the state of IDS Signature Version
    # Make this IDS Signature version as ACTIVE version and other versions as NOTACTIVE. 
    # @param ids_signature_version 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def make_version_as_active(ids_signature_version, opts = {})
      make_version_as_active_with_http_info(ids_signature_version, opts)
      nil
    end

    # Change the state of IDS Signature Version
    # Make this IDS Signature version as ACTIVE version and other versions as NOTACTIVE. 
    # @param ids_signature_version 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def make_version_as_active_with_http_info(ids_signature_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.make_version_as_active ...'
      end
      # verify the required parameter 'ids_signature_version' is set
      if @api_client.config.client_side_validation && ids_signature_version.nil?
        fail ArgumentError, "Missing the required parameter 'ids_signature_version' when calling SignaturesApi.make_version_as_active"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signature-versions?action=make_active_version'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_signature_version)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#make_version_as_active\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export Custom signatures into a file.
    # API can be used for user to export the existing custom signatures. Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param include Custom signatures to be exported
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_export_ids_custom_signatures(org_id, project_id, version_id, include, opts = {})
      orgs_org_id_projects_project_id_infra_export_ids_custom_signatures_with_http_info(org_id, project_id, version_id, include, opts)
      nil
    end

    # Export Custom signatures into a file.
    # API can be used for user to export the existing custom signatures. Accept              application/json, text/plain, */* Accept-Encoding     gzip, deflate, br 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param include Custom signatures to be exported
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_export_ids_custom_signatures_with_http_info(org_id, project_id, version_id, include, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.orgs_org_id_projects_project_id_infra_export_ids_custom_signatures ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SignaturesApi.orgs_org_id_projects_project_id_infra_export_ids_custom_signatures"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SignaturesApi.orgs_org_id_projects_project_id_infra_export_ids_custom_signatures"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SignaturesApi.orgs_org_id_projects_project_id_infra_export_ids_custom_signatures"
      end
      # verify the required parameter 'include' is set
      if @api_client.config.client_side_validation && include.nil?
        fail ArgumentError, "Missing the required parameter 'include' when calling SignaturesApi.orgs_org_id_projects_project_id_infra_export_ids_custom_signatures"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['VALID', 'INVALID', 'ALL'].include?(include)
        fail ArgumentError, "invalid value for 'include', must be one of VALID, INVALID, ALL"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures/export'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = include

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#orgs_org_id_projects_project_id_infra_export_ids_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature
    # Get IDS Custom Signature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param sig_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignature]
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signature(org_id, project_id, version_id, sig_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_custom_signature_with_http_info(org_id, project_id, version_id, sig_id, opts)
      data
    end

    # Get IDS Custom Signature
    # Get IDS Custom Signature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param sig_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignature, Fixnum, Hash)>] IdsCustomSignature data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signature_with_http_info(org_id, project_id, version_id, sig_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SignaturesApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SignaturesApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SignaturesApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature"
      end
      # verify the required parameter 'sig_id' is set
      if @api_client.config.client_side_validation && sig_id.nil?
        fail ArgumentError, "Missing the required parameter 'sig_id' when calling SignaturesApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures/{sig-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'version-id' + '}', version_id.to_s).sub('{' + 'sig-id' + '}', sig_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignature')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#orgs_org_id_projects_project_id_infra_get_ids_custom_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature Version
    # Get IDS Custom Signature Version. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignatureVersion]
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version(org_id, project_id, version_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version_with_http_info(org_id, project_id, version_id, opts)
      data
    end

    # Get IDS Custom Signature Version
    # Get IDS Custom Signature Version. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignatureVersion, Fixnum, Hash)>] IdsCustomSignatureVersion data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version_with_http_info(org_id, project_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SignaturesApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SignaturesApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SignaturesApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureVersion')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#orgs_org_id_projects_project_id_infra_get_ids_custom_signature_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS Custom Signature difference
    # Get published and unpublished custom signatures difference. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignaturesDiff]
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff(org_id, project_id, version_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff_with_http_info(org_id, project_id, version_id, opts)
      data
    end

    # Get IDS Custom Signature difference
    # Get published and unpublished custom signatures difference. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignaturesDiff, Fixnum, Hash)>] IdsCustomSignaturesDiff data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff_with_http_info(org_id, project_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SignaturesApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SignaturesApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SignaturesApi.orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures-diff'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignaturesDiff')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#orgs_org_id_projects_project_id_infra_get_ids_custom_signatures_diff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Custom Signature Versions
    # List IDS Custom Signature Versions. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsCustomSignatureVersionListResult]
    def orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions_with_http_info(org_id, project_id, opts)
      data
    end

    # List IDS Custom Signature Versions
    # List IDS Custom Signature Versions. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsCustomSignatureVersionListResult, Fixnum, Hash)>] IdsCustomSignatureVersionListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SignaturesApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SignaturesApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureVersionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#orgs_org_id_projects_project_id_infra_list_ids_custom_signature_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IDS Custom Signatures
    # List IDS Custom Signatures. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :include Custom signatures to be returned
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IdsCustomSignatureListResult]
    def orgs_org_id_projects_project_id_infra_list_ids_custom_signatures(org_id, project_id, version_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_ids_custom_signatures_with_http_info(org_id, project_id, version_id, opts)
      data
    end

    # List IDS Custom Signatures
    # List IDS Custom Signatures. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :include Custom signatures to be returned
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IdsCustomSignatureListResult, Fixnum, Hash)>] IdsCustomSignatureListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_ids_custom_signatures_with_http_info(org_id, project_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SignaturesApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SignaturesApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SignaturesApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures"
      end
      if @api_client.config.client_side_validation && opts[:'include'] && !['PREVIEW_CUSTOM_SIGNATURES', 'CUSTOM_SIGNATURES'].include?(opts[:'include'])
        fail ArgumentError, 'invalid value for "include", must be one of PREVIEW_CUSTOM_SIGNATURES, CUSTOM_SIGNATURES'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SignaturesApi.orgs_org_id_projects_project_id_infra_list_ids_custom_signatures, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#orgs_org_id_projects_project_id_infra_list_ids_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Global IDS Signature
    # Patch global intrusion detection system signature.
    # @param signature_id Signature ID
    # @param global_ids_signature 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_global_ids_signature(signature_id, global_ids_signature, opts = {})
      patch_global_ids_signature_with_http_info(signature_id, global_ids_signature, opts)
      nil
    end

    # Patch Global IDS Signature
    # Patch global intrusion detection system signature.
    # @param signature_id Signature ID
    # @param global_ids_signature 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_global_ids_signature_with_http_info(signature_id, global_ids_signature, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.patch_global_ids_signature ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SignaturesApi.patch_global_ids_signature"
      end
      # verify the required parameter 'global_ids_signature' is set
      if @api_client.config.client_side_validation && global_ids_signature.nil?
        fail ArgumentError, "Missing the required parameter 'global_ids_signature' when calling SignaturesApi.patch_global_ids_signature"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_ids_signature)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#patch_global_ids_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch threshold configuration for IDS system signature
    # Patch threshold and rate filter configuration for IDS signature globally. This API is applicable only for 'System' signatures. Either or both of threshold and rate filter configuration can be provided. 
    # @param signature_id Signature ID
    # @param ids_threshold_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_signature_threshold_config(signature_id, ids_threshold_config, opts = {})
      patch_ids_signature_threshold_config_with_http_info(signature_id, ids_threshold_config, opts)
      nil
    end

    # Patch threshold configuration for IDS system signature
    # Patch threshold and rate filter configuration for IDS signature globally. This API is applicable only for &#39;System&#39; signatures. Either or both of threshold and rate filter configuration can be provided. 
    # @param signature_id Signature ID
    # @param ids_threshold_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_signature_threshold_config_with_http_info(signature_id, ids_threshold_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.patch_ids_signature_threshold_config ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SignaturesApi.patch_ids_signature_threshold_config"
      end
      # verify the required parameter 'ids_threshold_config' is set
      if @api_client.config.client_side_validation && ids_threshold_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_threshold_config' when calling SignaturesApi.patch_ids_signature_threshold_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/threshold-configs/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_threshold_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#patch_ids_signature_threshold_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update threshold configuration for IDS system signature
    # Update threshold and rate filter configuration for IDS signature globally. This API is applicable only for 'System' signatures. Either or both of threshold and rate filter configuration can be provided. 
    # @param signature_id Signature ID
    # @param ids_threshold_config 
    # @param [Hash] opts the optional parameters
    # @return [IdsThresholdConfig]
    def update_ids_signature_threshold_config(signature_id, ids_threshold_config, opts = {})
      data, _status_code, _headers = update_ids_signature_threshold_config_with_http_info(signature_id, ids_threshold_config, opts)
      data
    end

    # Update threshold configuration for IDS system signature
    # Update threshold and rate filter configuration for IDS signature globally. This API is applicable only for &#39;System&#39; signatures. Either or both of threshold and rate filter configuration can be provided. 
    # @param signature_id Signature ID
    # @param ids_threshold_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsThresholdConfig, Fixnum, Hash)>] IdsThresholdConfig data, response status code and response headers
    def update_ids_signature_threshold_config_with_http_info(signature_id, ids_threshold_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.update_ids_signature_threshold_config ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SignaturesApi.update_ids_signature_threshold_config"
      end
      # verify the required parameter 'ids_threshold_config' is set
      if @api_client.config.client_side_validation && ids_threshold_config.nil?
        fail ArgumentError, "Missing the required parameter 'ids_threshold_config' when calling SignaturesApi.update_ids_signature_threshold_config"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/global-signatures/threshold-configs/{signature-id}'.sub('{' + 'signature-id' + '}', signature_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_threshold_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsThresholdConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#update_ids_signature_threshold_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download and update IDS signatures
    # Trigger the process to Download and update the IDS signatures manually. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_ids_signatures(opts = {})
      update_ids_signatures_with_http_info(opts)
      nil
    end

    # Download and update IDS signatures
    # Trigger the process to Download and update the IDS signatures manually. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_ids_signatures_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.update_ids_signatures ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/signatures?action=update_signatures'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#update_ids_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload IDS custom signature bundle
    # Upload IDS custom signature bundle. 
    # @param version_id 
    # @param file IDS custom signatures file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version_name IDS custom signature version name
    # @return [nil]
    def upload_ids_custom_signatures(version_id, file, opts = {})
      upload_ids_custom_signatures_with_http_info(version_id, file, opts)
      nil
    end

    # Upload IDS custom signature bundle
    # Upload IDS custom signature bundle. 
    # @param version_id 
    # @param file IDS custom signatures file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version_name IDS custom signature version name
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upload_ids_custom_signatures_with_http_info(version_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignaturesApi.upload_ids_custom_signatures ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling SignaturesApi.upload_ids_custom_signatures"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling SignaturesApi.upload_ids_custom_signatures"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/custom-signatures/upload-custom-signatures'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'version_name'] = opts[:'version_name'] if !opts[:'version_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignaturesApi#upload_ids_custom_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
