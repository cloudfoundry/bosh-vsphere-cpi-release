=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class SubnetApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update VPC Subnet DHCP static binding
    # If binding with the binding-id is not already present, create a new VPC Subnet DHCP static binding instance. If it already exists, replace the existing VPC Subnet DHCP static binding instance with this object. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def create_or_replace_vpc_subnet_dhcp_static_binding(org_id, project_id, vpc_id, subnet_id, binding_id, dhcp_static_binding_config, opts = {})
      data, _status_code, _headers = create_or_replace_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, dhcp_static_binding_config, opts)
      data
    end

    # Create or update VPC Subnet DHCP static binding
    # If binding with the binding-id is not already present, create a new VPC Subnet DHCP static binding instance. If it already exists, replace the existing VPC Subnet DHCP static binding instance with this object. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def create_or_replace_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.create_or_replace_vpc_subnet_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.create_or_replace_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.create_or_replace_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.create_or_replace_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.create_or_replace_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling SubnetApi.create_or_replace_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling SubnetApi.create_or_replace_vpc_subnet_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#create_or_replace_vpc_subnet_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a subnet connection binding map
    # Patch the subnet connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param subnet_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [SubnetConnectionBindingMap]
    def create_or_update_subnet_connection_binding_map(org_id, project_id, vpc_id, subnet_id, map_id, subnet_connection_binding_map, opts = {})
      data, _status_code, _headers = create_or_update_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, subnet_connection_binding_map, opts)
      data
    end

    # Patch a subnet connection binding map
    # Patch the subnet connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param subnet_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubnetConnectionBindingMap, Fixnum, Hash)>] SubnetConnectionBindingMap data, response status code and response headers
    def create_or_update_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, subnet_connection_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.create_or_update_subnet_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.create_or_update_subnet_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.create_or_update_subnet_connection_binding_map"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.create_or_update_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.create_or_update_subnet_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SubnetApi.create_or_update_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_connection_binding_map' is set
      if @api_client.config.client_side_validation && subnet_connection_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_connection_binding_map' when calling SubnetApi.create_or_update_subnet_connection_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/subnet-connection-binding-maps/{map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(subnet_connection_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubnetConnectionBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#create_or_update_subnet_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes infra SubnetConnectionBindingMap.
    # Deletes infra SubnetConnectionBindingMap. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_subnet_connection_binding_map(org_id, project_id, vpc_id, subnet_id, map_id, opts = {})
      delete_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, opts)
      nil
    end

    # Deletes infra SubnetConnectionBindingMap.
    # Deletes infra SubnetConnectionBindingMap. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.delete_subnet_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.delete_subnet_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.delete_subnet_connection_binding_map"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.delete_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.delete_subnet_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SubnetApi.delete_subnet_connection_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/subnet-connection-binding-maps/{map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#delete_subnet_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove Subnet DHCP server leases
    # Remove Subnet DHCP server leases
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param list_addresses 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_subnet_dhcp_server_leases(org_id, project_id, vpc_id, subnet_id, list_addresses, opts = {})
      delete_subnet_dhcp_server_leases_with_http_info(org_id, project_id, vpc_id, subnet_id, list_addresses, opts)
      nil
    end

    # Remove Subnet DHCP server leases
    # Remove Subnet DHCP server leases
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param list_addresses 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_subnet_dhcp_server_leases_with_http_info(org_id, project_id, vpc_id, subnet_id, list_addresses, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.delete_subnet_dhcp_server_leases ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.delete_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.delete_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.delete_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.delete_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'list_addresses' is set
      if @api_client.config.client_side_validation && list_addresses.nil?
        fail ArgumentError, "Missing the required parameter 'list_addresses' when calling SubnetApi.delete_subnet_dhcp_server_leases"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/actions/release-dhcp-server-leases'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(list_addresses)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#delete_subnet_dhcp_server_leases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete VPC Subnet
    # Delete VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_subnet(org_id, project_id, vpc_id, subnet_id, opts = {})
      delete_vpc_subnet_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      nil
    end

    # Delete VPC Subnet
    # Delete VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_subnet_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.delete_vpc_subnet ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.delete_vpc_subnet"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.delete_vpc_subnet"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.delete_vpc_subnet"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.delete_vpc_subnet"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#delete_vpc_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete VPC Subnet bridge profile
    # Delete VPC Subnet bridge profile 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_subnet_bridge_profile(org_id, project_id, vpc_id, subnet_id, opts = {})
      delete_vpc_subnet_bridge_profile_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      nil
    end

    # Delete VPC Subnet bridge profile
    # Delete VPC Subnet bridge profile 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_subnet_bridge_profile_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.delete_vpc_subnet_bridge_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.delete_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.delete_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.delete_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.delete_vpc_subnet_bridge_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/bridge-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#delete_vpc_subnet_bridge_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete VPC Subnet DHCP static binding
    # Delete VPC Subnet DHCP static binding
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_subnet_dhcp_static_binding(org_id, project_id, vpc_id, subnet_id, binding_id, opts = {})
      delete_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, opts)
      nil
    end

    # Delete VPC Subnet DHCP static binding
    # Delete VPC Subnet DHCP static binding
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.delete_vpc_subnet_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.delete_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.delete_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.delete_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.delete_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling SubnetApi.delete_vpc_subnet_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#delete_vpc_subnet_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Records intent to release an IP from an IpPool.
    # Releases the IP that was allocated for this allocation request 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_subnet_ip_allocation(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, opts = {})
      delete_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, opts)
      nil
    end

    # Records intent to release an IP from an IpPool.
    # Releases the IP that was allocated for this allocation request 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.delete_vpc_subnet_ip_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.delete_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.delete_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.delete_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.delete_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling SubnetApi.delete_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_allocation_id' is set
      if @api_client.config.client_side_validation && ip_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_allocation_id' when calling SubnetApi.delete_vpc_subnet_ip_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools/{ip-pool-id}/ip-allocations/{ip-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-allocation-id' + '}', ip_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#delete_vpc_subnet_ip_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a VPC Subnet Port
    # Delete a VPC Subnet Port by giving ID. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_subnet_port(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      delete_vpc_subnet_port_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts)
      nil
    end

    # Delete a VPC Subnet Port
    # Delete a VPC Subnet Port by giving ID. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_subnet_port_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.delete_vpc_subnet_port ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.delete_vpc_subnet_port"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.delete_vpc_subnet_port"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.delete_vpc_subnet_port"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.delete_vpc_subnet_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling SubnetApi.delete_vpc_subnet_port"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ports/{port-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#delete_vpc_subnet_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Vpc subnet port statistics information
    # Get Vpc subnet port statistics information. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [SegmentPortStatistics]
    def get_subnet_port_statistics(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      data, _status_code, _headers = get_subnet_port_statistics_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts)
      data
    end

    # Get Vpc subnet port statistics information
    # Get Vpc subnet port statistics information. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [Array<(SegmentPortStatistics, Fixnum, Hash)>] SegmentPortStatistics data, response status code and response headers
    def get_subnet_port_statistics_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_subnet_port_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_subnet_port_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_subnet_port_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_subnet_port_statistics"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.get_subnet_port_statistics"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling SubnetApi.get_subnet_port_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'bgp_neighbor_type'] && !['INTER_SR', 'USER'].include?(opts[:'bgp_neighbor_type'])
        fail ArgumentError, 'invalid value for "bgp_neighbor_type", must be one of INTER_SR, USER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.get_subnet_port_statistics, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.get_subnet_port_statistics, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'stats_type'] && !['DATAPATH_STATS'].include?(opts[:'stats_type'])
        fail ArgumentError, 'invalid value for "stats_type", must be one of DATAPATH_STATS'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ports/{port-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bgp_neighbor_type'] = opts[:'bgp_neighbor_type'] if !opts[:'bgp_neighbor_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'stats_type'] = opts[:'stats_type'] if !opts[:'stats_type'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_subnet_port_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Vpc subnet port status information
    # Get Vpc subnet port statistics information. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [SegmentPortStatus]
    def get_subnet_port_status(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      data, _status_code, _headers = get_subnet_port_status_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts)
      data
    end

    # Get Vpc subnet port status information
    # Get Vpc subnet port statistics information. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [Array<(SegmentPortStatus, Fixnum, Hash)>] SegmentPortStatus data, response status code and response headers
    def get_subnet_port_status_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_subnet_port_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_subnet_port_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_subnet_port_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_subnet_port_status"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.get_subnet_port_status"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling SubnetApi.get_subnet_port_status"
      end
      if @api_client.config.client_side_validation && opts[:'bgp_neighbor_type'] && !['INTER_SR', 'USER'].include?(opts[:'bgp_neighbor_type'])
        fail ArgumentError, 'invalid value for "bgp_neighbor_type", must be one of INTER_SR, USER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.get_subnet_port_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.get_subnet_port_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'stats_type'] && !['DATAPATH_STATS'].include?(opts[:'stats_type'])
        fail ArgumentError, 'invalid value for "stats_type", must be one of DATAPATH_STATS'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ports/{port-id}/status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bgp_neighbor_type'] = opts[:'bgp_neighbor_type'] if !opts[:'bgp_neighbor_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'stats_type'] = opts[:'stats_type'] if !opts[:'stats_type'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_subnet_port_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Subnet statistics information
    # Get VPC Subnet statistics information. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [SubnetStatistics]
    def get_subnet_statistics(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_subnet_statistics_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get VPC Subnet statistics information
    # Get VPC Subnet statistics information. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [Array<(SubnetStatistics, Fixnum, Hash)>] SubnetStatistics data, response status code and response headers
    def get_subnet_statistics_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_subnet_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_subnet_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_subnet_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_subnet_statistics"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.get_subnet_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'bgp_neighbor_type'] && !['INTER_SR', 'USER'].include?(opts[:'bgp_neighbor_type'])
        fail ArgumentError, 'invalid value for "bgp_neighbor_type", must be one of INTER_SR, USER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.get_subnet_statistics, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.get_subnet_statistics, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'stats_type'] && !['DATAPATH_STATS'].include?(opts[:'stats_type'])
        fail ArgumentError, 'invalid value for "stats_type", must be one of DATAPATH_STATS'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bgp_neighbor_type'] = opts[:'bgp_neighbor_type'] if !opts[:'bgp_neighbor_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'stats_type'] = opts[:'stats_type'] if !opts[:'stats_type'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubnetStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_subnet_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Subnet
    # Get VPC Subnet 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [VpcSubnet]
    def get_vpc_subnet(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get VPC Subnet
    # Get VPC Subnet 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcSubnet, Fixnum, Hash)>] VpcSubnet data, response status code and response headers
    def get_vpc_subnet_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_vpc_subnet ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_vpc_subnet"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_vpc_subnet"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_vpc_subnet"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.get_vpc_subnet"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSubnet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_vpc_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get subnet realization failures for vpc
    # Retrieves only the resources with the reason not \"SUCCESS\".  In case of failure or warning of the resource a reason object explaining the type of failure (ERROR, WARNING) and the detailed message of what the user could do to remediate is captured. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyVpcSubnetAlarm]
    def get_vpc_subnet_alarms(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_alarms_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get subnet realization failures for vpc
    # Retrieves only the resources with the reason not \&quot;SUCCESS\&quot;.  In case of failure or warning of the resource a reason object explaining the type of failure (ERROR, WARNING) and the detailed message of what the user could do to remediate is captured. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyVpcSubnetAlarm, Fixnum, Hash)>] PolicyVpcSubnetAlarm data, response status code and response headers
    def get_vpc_subnet_alarms_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_vpc_subnet_alarms ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_vpc_subnet_alarms"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_vpc_subnet_alarms"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_vpc_subnet_alarms"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/realization-failures'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyVpcSubnetAlarm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_vpc_subnet_alarms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get downlink port Address Resolution Protocol Proxy for VPC subnet
    # Returns ARP proxy table for downlink port connected to the VPC subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [PolicyArpProxyTableListResult]
    def get_vpc_subnet_arp_proxy(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_arp_proxy_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get downlink port Address Resolution Protocol Proxy for VPC subnet
    # Returns ARP proxy table for downlink port connected to the VPC subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(PolicyArpProxyTableListResult, Fixnum, Hash)>] PolicyArpProxyTableListResult data, response status code and response headers
    def get_vpc_subnet_arp_proxy_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_vpc_subnet_arp_proxy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_vpc_subnet_arp_proxy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_vpc_subnet_arp_proxy"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_vpc_subnet_arp_proxy"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.get_vpc_subnet_arp_proxy"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.get_vpc_subnet_arp_proxy, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.get_vpc_subnet_arp_proxy, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/arp-proxy'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyArpProxyTableListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_vpc_subnet_arp_proxy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get downlink port Address Resolution Protocol Proxy for VPC subnet in CSV format
    # Returns ARP proxy table for downlink port connected to the VPC subnet in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [PolicyArpProxyTableCsvListResult]
    def get_vpc_subnet_arp_proxy_download(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_arp_proxy_download_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get downlink port Address Resolution Protocol Proxy for VPC subnet in CSV format
    # Returns ARP proxy table for downlink port connected to the VPC subnet in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(PolicyArpProxyTableCsvListResult, Fixnum, Hash)>] PolicyArpProxyTableCsvListResult data, response status code and response headers
    def get_vpc_subnet_arp_proxy_download_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_vpc_subnet_arp_proxy_download ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_vpc_subnet_arp_proxy_download"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_vpc_subnet_arp_proxy_download"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_vpc_subnet_arp_proxy_download"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.get_vpc_subnet_arp_proxy_download"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/arp-proxy/download'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyArpProxyTableCsvListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_vpc_subnet_arp_proxy_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get ARP table from VPC subnet (downlink)
    # Returns ARP table (IPv4) or Neighbor Discovery table (IPv6) for the interface (downlink) attaching subnet to VPC, on a edge node specified in edge_path parameter. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_transport_node_path Policy path of host transport node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [InterfaceArpTable]
    def get_vpc_subnet_arp_table(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_arp_table_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get ARP table from VPC subnet (downlink)
    # Returns ARP table (IPv4) or Neighbor Discovery table (IPv6) for the interface (downlink) attaching subnet to VPC, on a edge node specified in edge_path parameter. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_transport_node_path Policy path of host transport node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(InterfaceArpTable, Fixnum, Hash)>] InterfaceArpTable data, response status code and response headers
    def get_vpc_subnet_arp_table_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_vpc_subnet_arp_table ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_vpc_subnet_arp_table"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_vpc_subnet_arp_table"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_vpc_subnet_arp_table"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.get_vpc_subnet_arp_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.get_vpc_subnet_arp_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.get_vpc_subnet_arp_table, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/arp-table'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'host_transport_node_path'] = opts[:'host_transport_node_path'] if !opts[:'host_transport_node_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InterfaceArpTable')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_vpc_subnet_arp_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get ARP table from VPC subnet (downlink) in CSV format
    # Returns ARP table (IPv4) or Neighbor Discovery table (IPv6) in VSC format for the interface (downlink) attaching subnet to VPC, on a edge node specified in edge_path parameter. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_transport_node_path Policy path of host transport node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [InterfaceArpTableInCsvFormat]
    def get_vpc_subnet_arp_table_download(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_arp_table_download_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get ARP table from VPC subnet (downlink) in CSV format
    # Returns ARP table (IPv4) or Neighbor Discovery table (IPv6) in VSC format for the interface (downlink) attaching subnet to VPC, on a edge node specified in edge_path parameter. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :host_transport_node_path Policy path of host transport node
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(InterfaceArpTableInCsvFormat, Fixnum, Hash)>] InterfaceArpTableInCsvFormat data, response status code and response headers
    def get_vpc_subnet_arp_table_download_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_vpc_subnet_arp_table_download ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_vpc_subnet_arp_table_download"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_vpc_subnet_arp_table_download"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_vpc_subnet_arp_table_download"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.get_vpc_subnet_arp_table_download"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.get_vpc_subnet_arp_table_download, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.get_vpc_subnet_arp_table_download, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/arp-table/download'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'host_transport_node_path'] = opts[:'host_transport_node_path'] if !opts[:'host_transport_node_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InterfaceArpTableInCsvFormat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_vpc_subnet_arp_table_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Subnet bridge profile
    # Get VPC Subnet Bridge Profile 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [VpcSubnetBridgeProfile]
    def get_vpc_subnet_bridge_profile(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_bridge_profile_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get VPC Subnet bridge profile
    # Get VPC Subnet Bridge Profile 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcSubnetBridgeProfile, Fixnum, Hash)>] VpcSubnetBridgeProfile data, response status code and response headers
    def get_vpc_subnet_bridge_profile_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_vpc_subnet_bridge_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.get_vpc_subnet_bridge_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/bridge-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSubnetBridgeProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_vpc_subnet_bridge_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read VPC Subnet DHCP server statistics
    # Read VPC Subnet DHCP server statistics along with ip pool usage information.
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatistics]
    def get_vpc_subnet_dhcp_server_stats(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_dhcp_server_stats_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Read VPC Subnet DHCP server statistics
    # Read VPC Subnet DHCP server statistics along with ip pool usage information.
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatistics, Fixnum, Hash)>] DhcpServerStatistics data, response status code and response headers
    def get_vpc_subnet_dhcp_server_stats_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_vpc_subnet_dhcp_server_stats ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_vpc_subnet_dhcp_server_stats"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_vpc_subnet_dhcp_server_stats"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_vpc_subnet_dhcp_server_stats"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.get_vpc_subnet_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.get_vpc_subnet_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.get_vpc_subnet_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-server-config/stats'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_vpc_subnet_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Vpc Subnet DHCP server status
    # Read Vpc Subnet DHCP server status
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatus]
    def get_vpc_subnet_dhcp_server_status(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_dhcp_server_status_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Read Vpc Subnet DHCP server status
    # Read Vpc Subnet DHCP server status
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatus, Fixnum, Hash)>] DhcpServerStatus data, response status code and response headers
    def get_vpc_subnet_dhcp_server_status_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_vpc_subnet_dhcp_server_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_vpc_subnet_dhcp_server_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_vpc_subnet_dhcp_server_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_vpc_subnet_dhcp_server_status"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.get_vpc_subnet_dhcp_server_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.get_vpc_subnet_dhcp_server_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.get_vpc_subnet_dhcp_server_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-server-config/status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_vpc_subnet_dhcp_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get statistics for downlink router port
    # Get statistics for downlink router port 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [PolicyInterfaceStatisticsSummary]
    def get_vpc_subnet_gateway_interface_statistics_summary(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_gateway_interface_statistics_summary_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get statistics for downlink router port
    # Get statistics for downlink router port 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(PolicyInterfaceStatisticsSummary, Fixnum, Hash)>] PolicyInterfaceStatisticsSummary data, response status code and response headers
    def get_vpc_subnet_gateway_interface_statistics_summary_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_vpc_subnet_gateway_interface_statistics_summary ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_vpc_subnet_gateway_interface_statistics_summary"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_vpc_subnet_gateway_interface_statistics_summary"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_vpc_subnet_gateway_interface_statistics_summary"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.get_vpc_subnet_gateway_interface_statistics_summary"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/gateway-interface-statistics/summary'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyInterfaceStatisticsSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_vpc_subnet_gateway_interface_statistics_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Subnet ip allocation by ID
    # Get detail information on VPC Subnet ip allocation by giving ID. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressAllocation]
    def get_vpc_subnet_ip_allocation(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, opts)
      data
    end

    # Get VPC Subnet ip allocation by ID
    # Get detail information on VPC Subnet ip allocation by giving ID. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressAllocation, Fixnum, Hash)>] IpAddressAllocation data, response status code and response headers
    def get_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_vpc_subnet_ip_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.get_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling SubnetApi.get_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_allocation_id' is set
      if @api_client.config.client_side_validation && ip_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_allocation_id' when calling SubnetApi.get_vpc_subnet_ip_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools/{ip-pool-id}/ip-allocations/{ip-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-allocation-id' + '}', ip_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressAllocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_vpc_subnet_ip_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC subnet MAC table
    # Returns MAC table for a VPC subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [SegmentMacAddressListResult]
    def get_vpc_subnet_mac_table(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_mac_table_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get VPC subnet MAC table
    # Returns MAC table for a VPC subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(SegmentMacAddressListResult, Fixnum, Hash)>] SegmentMacAddressListResult data, response status code and response headers
    def get_vpc_subnet_mac_table_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_vpc_subnet_mac_table ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_vpc_subnet_mac_table"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_vpc_subnet_mac_table"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_vpc_subnet_mac_table"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.get_vpc_subnet_mac_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.get_vpc_subnet_mac_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.get_vpc_subnet_mac_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/mac-table'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentMacAddressListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_vpc_subnet_mac_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC subnet MAC table in CSV format
    # Returns MAC table for a VPC subnet in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [MacAddressCsvListResult]
    def get_vpc_subnet_mac_table_download(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_mac_table_download_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get VPC subnet MAC table in CSV format
    # Returns MAC table for a VPC subnet in CSV format. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(MacAddressCsvListResult, Fixnum, Hash)>] MacAddressCsvListResult data, response status code and response headers
    def get_vpc_subnet_mac_table_download_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_vpc_subnet_mac_table_download ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_vpc_subnet_mac_table_download"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_vpc_subnet_mac_table_download"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_vpc_subnet_mac_table_download"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.get_vpc_subnet_mac_table_download"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/mac-table/download'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MacAddressCsvListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_vpc_subnet_mac_table_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Subnet Port by ID
    # Get detail information on VPC Subnet Port by giving ID. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [VpcSubnetPort]
    def get_vpc_subnet_port(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_port_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts)
      data
    end

    # Get VPC Subnet Port by ID
    # Get detail information on VPC Subnet Port by giving ID. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcSubnetPort, Fixnum, Hash)>] VpcSubnetPort data, response status code and response headers
    def get_vpc_subnet_port_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_vpc_subnet_port ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_vpc_subnet_port"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_vpc_subnet_port"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_vpc_subnet_port"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.get_vpc_subnet_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling SubnetApi.get_vpc_subnet_port"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ports/{port-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSubnetPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_vpc_subnet_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get MAC table for VPC Subnet port
    # Returns MAC table for a VPC Subnet port 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [SegmentPortMacAddressListResult]
    def get_vpc_subnet_port_mac_table(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_port_mac_table_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts)
      data
    end

    # Get MAC table for VPC Subnet port
    # Returns MAC table for a VPC Subnet port 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(SegmentPortMacAddressListResult, Fixnum, Hash)>] SegmentPortMacAddressListResult data, response status code and response headers
    def get_vpc_subnet_port_mac_table_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_vpc_subnet_port_mac_table ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_vpc_subnet_port_mac_table"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_vpc_subnet_port_mac_table"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_vpc_subnet_port_mac_table"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.get_vpc_subnet_port_mac_table"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling SubnetApi.get_vpc_subnet_port_mac_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.get_vpc_subnet_port_mac_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.get_vpc_subnet_port_mac_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ports/{port-id}/mac-table'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortMacAddressListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_vpc_subnet_port_mac_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Subnet port MAC table in CSV
    # Returns MAC table for a VPC Subnet port 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [SegmentPortMacAddressCsvListResult]
    def get_vpc_subnet_port_mac_table_in_csv(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_port_mac_table_in_csv_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts)
      data
    end

    # Get VPC Subnet port MAC table in CSV
    # Returns MAC table for a VPC Subnet port 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(SegmentPortMacAddressCsvListResult, Fixnum, Hash)>] SegmentPortMacAddressCsvListResult data, response status code and response headers
    def get_vpc_subnet_port_mac_table_in_csv_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_vpc_subnet_port_mac_table_in_csv ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_vpc_subnet_port_mac_table_in_csv"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_vpc_subnet_port_mac_table_in_csv"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_vpc_subnet_port_mac_table_in_csv"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.get_vpc_subnet_port_mac_table_in_csv"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling SubnetApi.get_vpc_subnet_port_mac_table_in_csv"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ports/{port-id}/mac-table/csv'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortMacAddressCsvListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_vpc_subnet_port_mac_table_in_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Subnet port state
    # Returns VPC Subnet port state on enforcement point 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [SegmentPortState]
    def get_vpc_subnet_port_state(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_port_state_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts)
      data
    end

    # Get VPC Subnet port state
    # Returns VPC Subnet port state on enforcement point 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(SegmentPortState, Fixnum, Hash)>] SegmentPortState data, response status code and response headers
    def get_vpc_subnet_port_state_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_vpc_subnet_port_state ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_vpc_subnet_port_state"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_vpc_subnet_port_state"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_vpc_subnet_port_state"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.get_vpc_subnet_port_state"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling SubnetApi.get_vpc_subnet_port_state"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ports/{port-id}/state'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_vpc_subnet_port_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VPC Subnet status
    # Get VPC Subnet status Provides status of the VPC subnet as well as network information such as gateway address, subnet mask, dhcp server address, dhcp range, static ip pools, static ip pool range. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [VpcSubnetStatusListResult]
    def get_vpc_subnet_status(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = get_vpc_subnet_status_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # Get VPC Subnet status
    # Get VPC Subnet status Provides status of the VPC subnet as well as network information such as gateway address, subnet mask, dhcp server address, dhcp range, static ip pools, static ip pool range. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcSubnetStatusListResult, Fixnum, Hash)>] VpcSubnetStatusListResult data, response status code and response headers
    def get_vpc_subnet_status_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.get_vpc_subnet_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.get_vpc_subnet_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.get_vpc_subnet_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.get_vpc_subnet_status"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.get_vpc_subnet_status"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSubnetStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#get_vpc_subnet_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List SubnetConnectionBindingMap specific Segment
    # List SubnetConnectionBindingMap specific subnet 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SubnetConnectionBindingMapListResult]
    def list_subnet_connection_binding_map(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = list_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # List SubnetConnectionBindingMap specific Segment
    # List SubnetConnectionBindingMap specific subnet 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SubnetConnectionBindingMapListResult, Fixnum, Hash)>] SubnetConnectionBindingMapListResult data, response status code and response headers
    def list_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.list_subnet_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.list_subnet_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.list_subnet_connection_binding_map"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.list_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.list_subnet_connection_binding_map"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.list_subnet_connection_binding_map, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.list_subnet_connection_binding_map, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/subnet-connection-binding-maps'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubnetConnectionBindingMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#list_subnet_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Subnet DHCP server leases
    # List Subnet DHCP server leases
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP, IP range or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpLeasesResult]
    def list_subnet_dhcp_server_leases(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = list_subnet_dhcp_server_leases_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # List Subnet DHCP server leases
    # List Subnet DHCP server leases
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP, IP range or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpLeasesResult, Fixnum, Hash)>] DhcpLeasesResult data, response status code and response headers
    def list_subnet_dhcp_server_leases_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.list_subnet_dhcp_server_leases ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.list_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.list_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.list_subnet_dhcp_server_leases"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.list_subnet_dhcp_server_leases"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.list_subnet_dhcp_server_leases, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.list_subnet_dhcp_server_leases, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/state/dhcp-server-leases'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpLeasesResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#list_subnet_dhcp_server_leases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of VPC Subnet
    # Paginated list of VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VpcSubnetListResult]
    def list_vpc_subnet(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_subnet_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List of VPC Subnet
    # Paginated list of VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VpcSubnetListResult, Fixnum, Hash)>] VpcSubnetListResult data, response status code and response headers
    def list_vpc_subnet_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.list_vpc_subnet ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.list_vpc_subnet"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.list_vpc_subnet"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.list_vpc_subnet"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.list_vpc_subnet, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.list_vpc_subnet, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSubnetListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#list_vpc_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all VPC Subnet DHCP static bindings
    # Paginated list of all VPC Subnet DHCP static binding instances 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpStaticBindingConfigListResult]
    def list_vpc_subnet_dhcp_static_binding(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = list_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # List all VPC Subnet DHCP static bindings
    # Paginated list of all VPC Subnet DHCP static binding instances 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpStaticBindingConfigListResult, Fixnum, Hash)>] DhcpStaticBindingConfigListResult data, response status code and response headers
    def list_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.list_vpc_subnet_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.list_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.list_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.list_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.list_vpc_subnet_dhcp_static_binding"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.list_vpc_subnet_dhcp_static_binding, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.list_vpc_subnet_dhcp_static_binding, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-static-binding-configs'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#list_vpc_subnet_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of static ip pools of the Subnet.
    # Paginated list of static ip pools of the Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IpAddressPoolListResult]
    def list_vpc_subnet_ip_address_pools(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = list_vpc_subnet_ip_address_pools_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # List of static ip pools of the Subnet.
    # Paginated list of static ip pools of the Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IpAddressPoolListResult, Fixnum, Hash)>] IpAddressPoolListResult data, response status code and response headers
    def list_vpc_subnet_ip_address_pools_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.list_vpc_subnet_ip_address_pools ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.list_vpc_subnet_ip_address_pools"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.list_vpc_subnet_ip_address_pools"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.list_vpc_subnet_ip_address_pools"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.list_vpc_subnet_ip_address_pools"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.list_vpc_subnet_ip_address_pools, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.list_vpc_subnet_ip_address_pools, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressPoolListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#list_vpc_subnet_ip_address_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List VPC Subnet ip allocations
    # List all the ip allocations for a VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IpAddressAllocationListResult]
    def list_vpc_subnet_ip_allocations(org_id, project_id, vpc_id, subnet_id, ip_pool_id, opts = {})
      data, _status_code, _headers = list_vpc_subnet_ip_allocations_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, opts)
      data
    end

    # List VPC Subnet ip allocations
    # List all the ip allocations for a VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IpAddressAllocationListResult, Fixnum, Hash)>] IpAddressAllocationListResult data, response status code and response headers
    def list_vpc_subnet_ip_allocations_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.list_vpc_subnet_ip_allocations ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.list_vpc_subnet_ip_allocations"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.list_vpc_subnet_ip_allocations"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.list_vpc_subnet_ip_allocations"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.list_vpc_subnet_ip_allocations"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling SubnetApi.list_vpc_subnet_ip_allocations"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.list_vpc_subnet_ip_allocations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.list_vpc_subnet_ip_allocations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools/{ip-pool-id}/ip-allocations'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressAllocationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#list_vpc_subnet_ip_allocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List VPC Subnet Ports
    # List all the ports for a VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [VpcSubnetPortListResult]
    def list_vpc_subnet_ports(org_id, project_id, vpc_id, subnet_id, opts = {})
      data, _status_code, _headers = list_vpc_subnet_ports_with_http_info(org_id, project_id, vpc_id, subnet_id, opts)
      data
    end

    # List VPC Subnet Ports
    # List all the ports for a VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(VpcSubnetPortListResult, Fixnum, Hash)>] VpcSubnetPortListResult data, response status code and response headers
    def list_vpc_subnet_ports_with_http_info(org_id, project_id, vpc_id, subnet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.list_vpc_subnet_ports ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.list_vpc_subnet_ports"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.list_vpc_subnet_ports"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.list_vpc_subnet_ports"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.list_vpc_subnet_ports"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.list_vpc_subnet_ports, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SubnetApi.list_vpc_subnet_ports, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ports'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSubnetPortListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#list_vpc_subnet_ports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a vpc subnet connection binding map
    # Patch the vpc subnet connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param subnet_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_subnet_connection_binding_map(org_id, project_id, vpc_id, subnet_id, map_id, subnet_connection_binding_map, opts = {})
      patch_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, subnet_connection_binding_map, opts)
      nil
    end

    # Patch a vpc subnet connection binding map
    # Patch the vpc subnet connection binding map. If binding map corresponding to the the given values is not present, the object will get created and if it is present it will be updated. This is a full replace. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param subnet_connection_binding_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, subnet_connection_binding_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.patch_subnet_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.patch_subnet_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.patch_subnet_connection_binding_map"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.patch_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.patch_subnet_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SubnetApi.patch_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_connection_binding_map' is set
      if @api_client.config.client_side_validation && subnet_connection_binding_map.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_connection_binding_map' when calling SubnetApi.patch_subnet_connection_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/subnet-connection-binding-maps/{map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(subnet_connection_binding_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#patch_subnet_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update VPC Subnet
    # If a VPC Subnet with the subnet-id is not already present, create a new VPC Subnet. If it already exists, update the VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param vpc_subnet 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_subnet(org_id, project_id, vpc_id, subnet_id, vpc_subnet, opts = {})
      patch_vpc_subnet_with_http_info(org_id, project_id, vpc_id, subnet_id, vpc_subnet, opts)
      nil
    end

    # Create or update VPC Subnet
    # If a VPC Subnet with the subnet-id is not already present, create a new VPC Subnet. If it already exists, update the VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param vpc_subnet 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_subnet_with_http_info(org_id, project_id, vpc_id, subnet_id, vpc_subnet, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.patch_vpc_subnet ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.patch_vpc_subnet"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.patch_vpc_subnet"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.patch_vpc_subnet"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.patch_vpc_subnet"
      end
      # verify the required parameter 'vpc_subnet' is set
      if @api_client.config.client_side_validation && vpc_subnet.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_subnet' when calling SubnetApi.patch_vpc_subnet"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_subnet)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#patch_vpc_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the VPC subnet bridge profile
    # Patch VPC Subnet bridge profile 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param vpc_subnet_bridge_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_subnet_bridge_profile(org_id, project_id, vpc_id, subnet_id, vpc_subnet_bridge_profile, opts = {})
      patch_vpc_subnet_bridge_profile_with_http_info(org_id, project_id, vpc_id, subnet_id, vpc_subnet_bridge_profile, opts)
      nil
    end

    # Create or update the VPC subnet bridge profile
    # Patch VPC Subnet bridge profile 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param vpc_subnet_bridge_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_subnet_bridge_profile_with_http_info(org_id, project_id, vpc_id, subnet_id, vpc_subnet_bridge_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.patch_vpc_subnet_bridge_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.patch_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.patch_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.patch_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.patch_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'vpc_subnet_bridge_profile' is set
      if @api_client.config.client_side_validation && vpc_subnet_bridge_profile.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_subnet_bridge_profile' when calling SubnetApi.patch_vpc_subnet_bridge_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/bridge-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_subnet_bridge_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#patch_vpc_subnet_bridge_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update VPC Subnet DHCP static binding
    # If binding with the binding-id is not already present, create a new VPC Subnet DHCP static binding instance. If it already exists, replace the existing VPC Subnet DHCP static binding instance with specified attributes. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_subnet_dhcp_static_binding(org_id, project_id, vpc_id, subnet_id, binding_id, dhcp_static_binding_config, opts = {})
      patch_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, dhcp_static_binding_config, opts)
      nil
    end

    # Create or update VPC Subnet DHCP static binding
    # If binding with the binding-id is not already present, create a new VPC Subnet DHCP static binding instance. If it already exists, replace the existing VPC Subnet DHCP static binding instance with specified attributes. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param dhcp_static_binding_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, dhcp_static_binding_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.patch_vpc_subnet_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.patch_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.patch_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.patch_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.patch_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling SubnetApi.patch_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'dhcp_static_binding_config' is set
      if @api_client.config.client_side_validation && dhcp_static_binding_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_static_binding_config' when calling SubnetApi.patch_vpc_subnet_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_static_binding_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#patch_vpc_subnet_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a VPC Subnet ip_allocations
    # Create a VPC Subnet ip-allocation if it does not exist based on the IDs, or update existing ip-allocation 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_subnet_ip_allocation(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts = {})
      patch_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts)
      nil
    end

    # Patch a VPC Subnet ip_allocations
    # Create a VPC Subnet ip-allocation if it does not exist based on the IDs, or update existing ip-allocation 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.patch_vpc_subnet_ip_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.patch_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.patch_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.patch_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.patch_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling SubnetApi.patch_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_allocation_id' is set
      if @api_client.config.client_side_validation && ip_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_allocation_id' when calling SubnetApi.patch_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_address_allocation' is set
      if @api_client.config.client_side_validation && ip_address_allocation.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation' when calling SubnetApi.patch_vpc_subnet_ip_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools/{ip-pool-id}/ip-allocations/{ip-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-allocation-id' + '}', ip_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_allocation)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#patch_vpc_subnet_ip_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a VPC Subnet Port
    # Create a VPC Subnet port if it does not exist based on the IDs, or update existing port information by replacing the port object fields which presents in the request body. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param vpc_subnet_port 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_subnet_port(org_id, project_id, vpc_id, subnet_id, port_id, vpc_subnet_port, opts = {})
      patch_vpc_subnet_port_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, vpc_subnet_port, opts)
      nil
    end

    # Patch a VPC Subnet Port
    # Create a VPC Subnet port if it does not exist based on the IDs, or update existing port information by replacing the port object fields which presents in the request body. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param vpc_subnet_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_subnet_port_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, vpc_subnet_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.patch_vpc_subnet_port ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.patch_vpc_subnet_port"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.patch_vpc_subnet_port"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.patch_vpc_subnet_port"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.patch_vpc_subnet_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling SubnetApi.patch_vpc_subnet_port"
      end
      # verify the required parameter 'vpc_subnet_port' is set
      if @api_client.config.client_side_validation && vpc_subnet_port.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_subnet_port' when calling SubnetApi.patch_vpc_subnet_port"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ports/{port-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_subnet_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#patch_vpc_subnet_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the VPC Subnet bridge profile
    # Put VPC Subnet bridge profile 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param vpc_subnet_bridge_profile 
    # @param [Hash] opts the optional parameters
    # @return [VpcSubnetBridgeProfile]
    def put_vpc_subnet_bridge_profile(org_id, project_id, vpc_id, subnet_id, vpc_subnet_bridge_profile, opts = {})
      data, _status_code, _headers = put_vpc_subnet_bridge_profile_with_http_info(org_id, project_id, vpc_id, subnet_id, vpc_subnet_bridge_profile, opts)
      data
    end

    # Create or update the VPC Subnet bridge profile
    # Put VPC Subnet bridge profile 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param vpc_subnet_bridge_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcSubnetBridgeProfile, Fixnum, Hash)>] VpcSubnetBridgeProfile data, response status code and response headers
    def put_vpc_subnet_bridge_profile_with_http_info(org_id, project_id, vpc_id, subnet_id, vpc_subnet_bridge_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.put_vpc_subnet_bridge_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.put_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.put_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.put_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.put_vpc_subnet_bridge_profile"
      end
      # verify the required parameter 'vpc_subnet_bridge_profile' is set
      if @api_client.config.client_side_validation && vpc_subnet_bridge_profile.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_subnet_bridge_profile' when calling SubnetApi.put_vpc_subnet_bridge_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/bridge-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_subnet_bridge_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSubnetBridgeProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#put_vpc_subnet_bridge_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read SubnetConnectionBindingMap
    # Read SubnetConnectionBindingMap. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [SubnetConnectionBindingMap]
    def read_subnet_connection_binding_map(org_id, project_id, vpc_id, subnet_id, map_id, opts = {})
      data, _status_code, _headers = read_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, opts)
      data
    end

    # Read SubnetConnectionBindingMap
    # Read SubnetConnectionBindingMap. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubnetConnectionBindingMap, Fixnum, Hash)>] SubnetConnectionBindingMap data, response status code and response headers
    def read_subnet_connection_binding_map_with_http_info(org_id, project_id, vpc_id, subnet_id, map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.read_subnet_connection_binding_map ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.read_subnet_connection_binding_map"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.read_subnet_connection_binding_map"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.read_subnet_connection_binding_map"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.read_subnet_connection_binding_map"
      end
      # verify the required parameter 'map_id' is set
      if @api_client.config.client_side_validation && map_id.nil?
        fail ArgumentError, "Missing the required parameter 'map_id' when calling SubnetApi.read_subnet_connection_binding_map"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/subnet-connection-binding-maps/{map-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'map-id' + '}', map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubnetConnectionBindingMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#read_subnet_connection_binding_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read VPC Subnet DHCP static binding
    # Read VPC Subnet DHCP static binding
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [DhcpStaticBindingConfig]
    def read_vpc_subnet_dhcp_static_binding(org_id, project_id, vpc_id, subnet_id, binding_id, opts = {})
      data, _status_code, _headers = read_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, opts)
      data
    end

    # Read VPC Subnet DHCP static binding
    # Read VPC Subnet DHCP static binding
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param binding_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpStaticBindingConfig, Fixnum, Hash)>] DhcpStaticBindingConfig data, response status code and response headers
    def read_vpc_subnet_dhcp_static_binding_with_http_info(org_id, project_id, vpc_id, subnet_id, binding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.read_vpc_subnet_dhcp_static_binding ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.read_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.read_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.read_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.read_vpc_subnet_dhcp_static_binding"
      end
      # verify the required parameter 'binding_id' is set
      if @api_client.config.client_side_validation && binding_id.nil?
        fail ArgumentError, "Missing the required parameter 'binding_id' when calling SubnetApi.read_vpc_subnet_dhcp_static_binding"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/dhcp-static-binding-configs/{binding-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'binding-id' + '}', binding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpStaticBindingConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#read_vpc_subnet_dhcp_static_binding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read an IpAddressPool of VPC Subnet.
    # Read IpAddressPool with given Id. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressPool]
    def read_vpc_subnet_ip_address_pool(org_id, project_id, vpc_id, subnet_id, ip_pool_id, opts = {})
      data, _status_code, _headers = read_vpc_subnet_ip_address_pool_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, opts)
      data
    end

    # Read an IpAddressPool of VPC Subnet.
    # Read IpAddressPool with given Id. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressPool, Fixnum, Hash)>] IpAddressPool data, response status code and response headers
    def read_vpc_subnet_ip_address_pool_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.read_vpc_subnet_ip_address_pool ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.read_vpc_subnet_ip_address_pool"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.read_vpc_subnet_ip_address_pool"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.read_vpc_subnet_ip_address_pool"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.read_vpc_subnet_ip_address_pool"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling SubnetApi.read_vpc_subnet_ip_address_pool"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools/{ip-pool-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#read_vpc_subnet_ip_address_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the VPC Subnet
    # Update the VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param vpc_subnet 
    # @param [Hash] opts the optional parameters
    # @return [VpcSubnet]
    def update_vpc_subnet(org_id, project_id, vpc_id, subnet_id, vpc_subnet, opts = {})
      data, _status_code, _headers = update_vpc_subnet_with_http_info(org_id, project_id, vpc_id, subnet_id, vpc_subnet, opts)
      data
    end

    # Update the VPC Subnet
    # Update the VPC Subnet. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param vpc_subnet 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcSubnet, Fixnum, Hash)>] VpcSubnet data, response status code and response headers
    def update_vpc_subnet_with_http_info(org_id, project_id, vpc_id, subnet_id, vpc_subnet, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.update_vpc_subnet ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.update_vpc_subnet"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.update_vpc_subnet"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.update_vpc_subnet"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.update_vpc_subnet"
      end
      # verify the required parameter 'vpc_subnet' is set
      if @api_client.config.client_side_validation && vpc_subnet.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_subnet' when calling SubnetApi.update_vpc_subnet"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_subnet)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSubnet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#update_vpc_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a VPC Subnet ip allocation
    # Create a VPC Subnet ip allocation if it does not exist based on the IDs, or update existing ip-allocation information by replacing the port object already exists. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressAllocation]
    def update_vpc_subnet_ip_allocation(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts = {})
      data, _status_code, _headers = update_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts)
      data
    end

    # Create or update a VPC Subnet ip allocation
    # Create a VPC Subnet ip allocation if it does not exist based on the IDs, or update existing ip-allocation information by replacing the port object already exists. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param ip_pool_id 
    # @param ip_allocation_id 
    # @param ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressAllocation, Fixnum, Hash)>] IpAddressAllocation data, response status code and response headers
    def update_vpc_subnet_ip_allocation_with_http_info(org_id, project_id, vpc_id, subnet_id, ip_pool_id, ip_allocation_id, ip_address_allocation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.update_vpc_subnet_ip_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.update_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.update_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.update_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.update_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_pool_id' is set
      if @api_client.config.client_side_validation && ip_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_pool_id' when calling SubnetApi.update_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_allocation_id' is set
      if @api_client.config.client_side_validation && ip_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_allocation_id' when calling SubnetApi.update_vpc_subnet_ip_allocation"
      end
      # verify the required parameter 'ip_address_allocation' is set
      if @api_client.config.client_side_validation && ip_address_allocation.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation' when calling SubnetApi.update_vpc_subnet_ip_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ip-pools/{ip-pool-id}/ip-allocations/{ip-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'ip-pool-id' + '}', ip_pool_id.to_s).sub('{' + 'ip-allocation-id' + '}', ip_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ip_address_allocation)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressAllocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#update_vpc_subnet_ip_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a VPC Subnet Port
    # Create a VPC Subnet port if it does not exist based on the IDs, or update existing port information by replacing the port object already exists. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param vpc_subnet_port 
    # @param [Hash] opts the optional parameters
    # @return [VpcSubnetPort]
    def update_vpc_subnet_port(org_id, project_id, vpc_id, subnet_id, port_id, vpc_subnet_port, opts = {})
      data, _status_code, _headers = update_vpc_subnet_port_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, vpc_subnet_port, opts)
      data
    end

    # Create or update a VPC Subnet Port
    # Create a VPC Subnet port if it does not exist based on the IDs, or update existing port information by replacing the port object already exists. 
    # @param org_id 
    # @param project_id 
    # @param vpc_id 
    # @param subnet_id 
    # @param port_id 
    # @param vpc_subnet_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpcSubnetPort, Fixnum, Hash)>] VpcSubnetPort data, response status code and response headers
    def update_vpc_subnet_port_with_http_info(org_id, project_id, vpc_id, subnet_id, port_id, vpc_subnet_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubnetApi.update_vpc_subnet_port ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SubnetApi.update_vpc_subnet_port"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SubnetApi.update_vpc_subnet_port"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling SubnetApi.update_vpc_subnet_port"
      end
      # verify the required parameter 'subnet_id' is set
      if @api_client.config.client_side_validation && subnet_id.nil?
        fail ArgumentError, "Missing the required parameter 'subnet_id' when calling SubnetApi.update_vpc_subnet_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling SubnetApi.update_vpc_subnet_port"
      end
      # verify the required parameter 'vpc_subnet_port' is set
      if @api_client.config.client_side_validation && vpc_subnet_port.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_subnet_port' when calling SubnetApi.update_vpc_subnet_port"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/subnets/{subnet-id}/ports/{port-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'subnet-id' + '}', subnet_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vpc_subnet_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VpcSubnetPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubnetApi#update_vpc_subnet_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
