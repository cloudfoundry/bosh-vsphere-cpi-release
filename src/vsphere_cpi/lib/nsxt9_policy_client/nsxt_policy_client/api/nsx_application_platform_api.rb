=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class NSXApplicationPlatformApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get available deployment form factors for NSX Application Platform
    # Get available deployment form factors for NSX Application Platform.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [PlatformFormFactors]
    def get_available_form_factors(site_id, opts = {})
      data, _status_code, _headers = get_available_form_factors_with_http_info(site_id, opts)
      data
    end

    # Get available deployment form factors for NSX Application Platform
    # Get available deployment form factors for NSX Application Platform.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlatformFormFactors, Fixnum, Hash)>] PlatformFormFactors data, response status code and response headers
    def get_available_form_factors_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.get_available_form_factors ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.get_available_form_factors"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/platform/form-factors'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PlatformFormFactors')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#get_available_form_factors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NSX Application Platform upgrade-coordinator versions
    # Get NSX Application Platform upgrade-coordinator versions.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [DeploymentVersions]
    def get_available_uc_versions(site_id, opts = {})
      data, _status_code, _headers = get_available_uc_versions_with_http_info(site_id, opts)
      data
    end

    # Get NSX Application Platform upgrade-coordinator versions
    # Get NSX Application Platform upgrade-coordinator versions.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentVersions, Fixnum, Hash)>] DeploymentVersions data, response status code and response headers
    def get_available_uc_versions_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.get_available_uc_versions ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.get_available_uc_versions"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/upgrade-coordinator/versions'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentVersions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#get_available_uc_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NSX Application Platform versions
    # Get NSX Application Platform versions.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [DeploymentVersions]
    def get_available_versions(site_id, opts = {})
      data, _status_code, _headers = get_available_versions_with_http_info(site_id, opts)
      data
    end

    # Get NSX Application Platform versions
    # Get NSX Application Platform versions.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentVersions, Fixnum, Hash)>] DeploymentVersions data, response status code and response headers
    def get_available_versions_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.get_available_versions ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.get_available_versions"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/platform/versions'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentVersions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#get_available_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NSX Application Platform Common Agent host configuration
    # Get the current NSX Application Platform Common Agent host configuration. Recommend to keep the value same for flow_data_collection_interval and context_data_collection_interval. 
    # @param [Hash] opts the optional parameters
    # @return [CommonAgentHostConfigurationInfo]
    def get_common_agent_host_configuration(opts = {})
      data, _status_code, _headers = get_common_agent_host_configuration_with_http_info(opts)
      data
    end

    # Get NSX Application Platform Common Agent host configuration
    # Get the current NSX Application Platform Common Agent host configuration. Recommend to keep the value same for flow_data_collection_interval and context_data_collection_interval. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommonAgentHostConfigurationInfo, Fixnum, Hash)>] CommonAgentHostConfigurationInfo data, response status code and response headers
    def get_common_agent_host_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.get_common_agent_host_configuration ...'
      end
      # resource path
      local_var_path = '/infra/napp/common-agent/host-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommonAgentHostConfigurationInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#get_common_agent_host_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get helm repo and docker registry url
    # Get helm repo and docker registry url for chart deployment.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [DeploymentRegistry]
    def get_deployment_registry(site_id, opts = {})
      data, _status_code, _headers = get_deployment_registry_with_http_info(site_id, opts)
      data
    end

    # Get helm repo and docker registry url
    # Get helm repo and docker registry url for chart deployment.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentRegistry, Fixnum, Hash)>] DeploymentRegistry data, response status code and response headers
    def get_deployment_registry_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.get_deployment_registry ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.get_deployment_registry"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/registry'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentRegistry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#get_deployment_registry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information about kubeconfig file
    # To get more information about kubeconfig file like user, cluster, context, namespace etc. 
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [KubeconfigInfo]
    def get_kubeconfig_info(site_id, opts = {})
      data, _status_code, _headers = get_kubeconfig_info_with_http_info(site_id, opts)
      data
    end

    # Get information about kubeconfig file
    # To get more information about kubeconfig file like user, cluster, context, namespace etc. 
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(KubeconfigInfo, Fixnum, Hash)>] KubeconfigInfo data, response status code and response headers
    def get_kubeconfig_info_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.get_kubeconfig_info ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.get_kubeconfig_info"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/kubeconfig'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'KubeconfigInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#get_kubeconfig_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information about Kubernetes tools
    # To show information about Kubernetes tools version. It will list kubectl client version, kube-apiserver version. Also show, whether kubectl client version is compatible with kube-apiserver version.kubectl is supported within one minor version (older or newer) of kube-apiserver. 
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [KubernetesToolsInfo]
    def get_kubernetes_tools_info(site_id, opts = {})
      data, _status_code, _headers = get_kubernetes_tools_info_with_http_info(site_id, opts)
      data
    end

    # Get information about Kubernetes tools
    # To show information about Kubernetes tools version. It will list kubectl client version, kube-apiserver version. Also show, whether kubectl client version is compatible with kube-apiserver version.kubectl is supported within one minor version (older or newer) of kube-apiserver. 
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(KubernetesToolsInfo, Fixnum, Hash)>] KubernetesToolsInfo data, response status code and response headers
    def get_kubernetes_tools_info_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.get_kubernetes_tools_info ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.get_kubernetes_tools_info"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/kubernetes-tools'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'KubernetesToolsInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#get_kubernetes_tools_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a registered NSX Application Platform as specified
    # Get the registered NSX Application Platform as specified. 
    # @param cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [NappRegistration]
    def get_napp_registration(cluster_id, opts = {})
      data, _status_code, _headers = get_napp_registration_with_http_info(cluster_id, opts)
      data
    end

    # Get a registered NSX Application Platform as specified
    # Get the registered NSX Application Platform as specified. 
    # @param cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NappRegistration, Fixnum, Hash)>] NappRegistration data, response status code and response headers
    def get_napp_registration_with_http_info(cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.get_napp_registration ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling NSXApplicationPlatformApi.get_napp_registration"
      end
      # resource path
      local_var_path = '/infra/sites/napp/registration/{cluster-id}'.sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NappRegistration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#get_napp_registration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NSX Application Platform pre/post checks execution required
    # Get NSX Application Platform pre/post checks execution required.
    # @param site_id 
    # @param form_factor Form factor types
    # @param [Hash] opts the optional parameters
    # @return [DeploymentChecksExecutionRequiredResult]
    def get_platform_deployment_checks_execution_required(site_id, form_factor, opts = {})
      data, _status_code, _headers = get_platform_deployment_checks_execution_required_with_http_info(site_id, form_factor, opts)
      data
    end

    # Get NSX Application Platform pre/post checks execution required
    # Get NSX Application Platform pre/post checks execution required.
    # @param site_id 
    # @param form_factor Form factor types
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentChecksExecutionRequiredResult, Fixnum, Hash)>] DeploymentChecksExecutionRequiredResult data, response status code and response headers
    def get_platform_deployment_checks_execution_required_with_http_info(site_id, form_factor, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.get_platform_deployment_checks_execution_required ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.get_platform_deployment_checks_execution_required"
      end
      # verify the required parameter 'form_factor' is set
      if @api_client.config.client_side_validation && form_factor.nil?
        fail ArgumentError, "Missing the required parameter 'form_factor' when calling NSXApplicationPlatformApi.get_platform_deployment_checks_execution_required"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['standard', 'advanced', 'evaluation'].include?(form_factor)
        fail ArgumentError, "invalid value for 'form_factor', must be one of standard, advanced, evaluation"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/platform/checks/execution/required'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'form_factor'] = form_factor

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentChecksExecutionRequiredResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#get_platform_deployment_checks_execution_required\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NSX Application Platform pre/post checks progress status
    # Get NSX Application Platform pre/post checks progress status.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [DeploymentChecksStatusResult]
    def get_platform_deployment_checks_status(site_id, opts = {})
      data, _status_code, _headers = get_platform_deployment_checks_status_with_http_info(site_id, opts)
      data
    end

    # Get NSX Application Platform pre/post checks progress status
    # Get NSX Application Platform pre/post checks progress status.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentChecksStatusResult, Fixnum, Hash)>] DeploymentChecksStatusResult data, response status code and response headers
    def get_platform_deployment_checks_status_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.get_platform_deployment_checks_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.get_platform_deployment_checks_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/platform/checks/status'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentChecksStatusResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#get_platform_deployment_checks_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NSX Application Platform deployment configuration
    # Get input parameters required to deploy NSX Application Platform.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [PlatformDeploymentConfig]
    def get_platform_deployment_config(site_id, opts = {})
      data, _status_code, _headers = get_platform_deployment_config_with_http_info(site_id, opts)
      data
    end

    # Get NSX Application Platform deployment configuration
    # Get input parameters required to deploy NSX Application Platform.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlatformDeploymentConfig, Fixnum, Hash)>] PlatformDeploymentConfig data, response status code and response headers
    def get_platform_deployment_config_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.get_platform_deployment_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.get_platform_deployment_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/platform'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PlatformDeploymentConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#get_platform_deployment_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of Kubernetes storage classes
    # Get the list of Kubernetes storage classes. 
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [StorageClasses]
    def get_storage_classes(site_id, opts = {})
      data, _status_code, _headers = get_storage_classes_with_http_info(site_id, opts)
      data
    end

    # Get list of Kubernetes storage classes
    # Get the list of Kubernetes storage classes. 
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StorageClasses, Fixnum, Hash)>] StorageClasses data, response status code and response headers
    def get_storage_classes_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.get_storage_classes ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.get_storage_classes"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/storage-classes'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StorageClasses')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#get_storage_classes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get NSX Application Platform upgrade-coordinator pre/post checks progress status.
    # Get NSX Application Platform upgrade-coordinator pre/post checks progress status.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [DeploymentChecksStatusResult]
    def get_uc_deployment_checks_status(site_id, opts = {})
      data, _status_code, _headers = get_uc_deployment_checks_status_with_http_info(site_id, opts)
      data
    end

    # Get NSX Application Platform upgrade-coordinator pre/post checks progress status.
    # Get NSX Application Platform upgrade-coordinator pre/post checks progress status.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentChecksStatusResult, Fixnum, Hash)>] DeploymentChecksStatusResult data, response status code and response headers
    def get_uc_deployment_checks_status_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.get_uc_deployment_checks_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.get_uc_deployment_checks_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/upgrade-coordinator/checks/status'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentChecksStatusResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#get_uc_deployment_checks_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get upgrade coordinator deployment configuration
    # Get input parameters required to deploy upgrade-coordinator.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [UpgradeCoordinatorDeploymentConfig]
    def get_upgrade_coordinator_deployment_config(site_id, opts = {})
      data, _status_code, _headers = get_upgrade_coordinator_deployment_config_with_http_info(site_id, opts)
      data
    end

    # Get upgrade coordinator deployment configuration
    # Get input parameters required to deploy upgrade-coordinator.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeCoordinatorDeploymentConfig, Fixnum, Hash)>] UpgradeCoordinatorDeploymentConfig data, response status code and response headers
    def get_upgrade_coordinator_deployment_config_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.get_upgrade_coordinator_deployment_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.get_upgrade_coordinator_deployment_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/upgrade-coordinator'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeCoordinatorDeploymentConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#get_upgrade_coordinator_deployment_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get deployment or undeployment progress status
    # Get deployment or undeployment progress status.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [DeploymentProgressStatus]
    def get_upgrade_coordinator_deployment_progress_status(site_id, opts = {})
      data, _status_code, _headers = get_upgrade_coordinator_deployment_progress_status_with_http_info(site_id, opts)
      data
    end

    # Get deployment or undeployment progress status
    # Get deployment or undeployment progress status.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentProgressStatus, Fixnum, Hash)>] DeploymentProgressStatus data, response status code and response headers
    def get_upgrade_coordinator_deployment_progress_status_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.get_upgrade_coordinator_deployment_progress_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.get_upgrade_coordinator_deployment_progress_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/upgrade-coordinator/status'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentProgressStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#get_upgrade_coordinator_deployment_progress_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get progress status of kubernetes tools bundle upload
    # Get the progress of uploading kubernetes tools bundle from the remote location. This API will also verify the kubernetes tools bundle, before marking upload as a success. 
    # @param site_id 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @return [UploadBundleStatus]
    def get_upload_bundle_status(site_id, bundle_id, opts = {})
      data, _status_code, _headers = get_upload_bundle_status_with_http_info(site_id, bundle_id, opts)
      data
    end

    # Get progress status of kubernetes tools bundle upload
    # Get the progress of uploading kubernetes tools bundle from the remote location. This API will also verify the kubernetes tools bundle, before marking upload as a success. 
    # @param site_id 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadBundleStatus, Fixnum, Hash)>] UploadBundleStatus data, response status code and response headers
    def get_upload_bundle_status_with_http_info(site_id, bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.get_upload_bundle_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.get_upload_bundle_status"
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling NSXApplicationPlatformApi.get_upload_bundle_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/tools/upload/status/{bundle-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'bundle-id' + '}', bundle_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UploadBundleStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#get_upload_bundle_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all registered NSX Application Platforms
    # Get all registered NSX Application Platforms. 
    # @param [Hash] opts the optional parameters
    # @return [NappRegistrationList]
    def list_napp_registrations(opts = {})
      data, _status_code, _headers = list_napp_registrations_with_http_info(opts)
      data
    end

    # Get all registered NSX Application Platforms
    # Get all registered NSX Application Platforms. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NappRegistrationList, Fixnum, Hash)>] NappRegistrationList data, response status code and response headers
    def list_napp_registrations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.list_napp_registrations ...'
      end
      # resource path
      local_var_path = '/infra/sites/napp/registration'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NappRegistrationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#list_napp_registrations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch NSX Application Platform Common Agent host configuration
    # Patch the current NSX Application Platform Common Agent host configuration. Return error if NSX Application Platform Common Agent is not registered with NSX. \"private_ip_range\" is the only field allowed to patch. 
    # @param common_agent_host_configuration_info 
    # @param [Hash] opts the optional parameters
    # @return [CommonAgentHostConfigurationInfo]
    def patch_common_agent_host_configuration(common_agent_host_configuration_info, opts = {})
      data, _status_code, _headers = patch_common_agent_host_configuration_with_http_info(common_agent_host_configuration_info, opts)
      data
    end

    # Patch NSX Application Platform Common Agent host configuration
    # Patch the current NSX Application Platform Common Agent host configuration. Return error if NSX Application Platform Common Agent is not registered with NSX. \&quot;private_ip_range\&quot; is the only field allowed to patch. 
    # @param common_agent_host_configuration_info 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommonAgentHostConfigurationInfo, Fixnum, Hash)>] CommonAgentHostConfigurationInfo data, response status code and response headers
    def patch_common_agent_host_configuration_with_http_info(common_agent_host_configuration_info, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.patch_common_agent_host_configuration ...'
      end
      # verify the required parameter 'common_agent_host_configuration_info' is set
      if @api_client.config.client_side_validation && common_agent_host_configuration_info.nil?
        fail ArgumentError, "Missing the required parameter 'common_agent_host_configuration_info' when calling NSXApplicationPlatformApi.patch_common_agent_host_configuration"
      end
      # resource path
      local_var_path = '/infra/napp/common-agent/host-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(common_agent_host_configuration_info)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommonAgentHostConfigurationInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#patch_common_agent_host_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get platform deployment or undeployment progress status
    # Get platform deployment or undeployment progress status.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [DeploymentProgressStatus]
    def platform_deployment_progress(site_id, opts = {})
      data, _status_code, _headers = platform_deployment_progress_with_http_info(site_id, opts)
      data
    end

    # Get platform deployment or undeployment progress status
    # Get platform deployment or undeployment progress status.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentProgressStatus, Fixnum, Hash)>] DeploymentProgressStatus data, response status code and response headers
    def platform_deployment_progress_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.platform_deployment_progress ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.platform_deployment_progress"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/platform/status'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentProgressStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#platform_deployment_progress\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset NSX Application Platform Common Agent host configuration
    # Reset NSX Application Platform Common Agent host configuration to the default setting. Clear NSX Application Platform Common Agent host configuration if NSX Application Platform Common Agent is not registered with NSX. Return the NSX Application Platform Common Agent host configuration after reset operation. 
    # @param [Hash] opts the optional parameters
    # @return [CommonAgentHostConfigurationInfo]
    def reset_common_agent_host_configuration(opts = {})
      data, _status_code, _headers = reset_common_agent_host_configuration_with_http_info(opts)
      data
    end

    # Reset NSX Application Platform Common Agent host configuration
    # Reset NSX Application Platform Common Agent host configuration to the default setting. Clear NSX Application Platform Common Agent host configuration if NSX Application Platform Common Agent is not registered with NSX. Return the NSX Application Platform Common Agent host configuration after reset operation. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommonAgentHostConfigurationInfo, Fixnum, Hash)>] CommonAgentHostConfigurationInfo data, response status code and response headers
    def reset_common_agent_host_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.reset_common_agent_host_configuration ...'
      end
      # resource path
      local_var_path = '/infra/napp/common-agent/host-config?action=reset'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommonAgentHostConfigurationInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#reset_common_agent_host_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset helm and docker url to default one
    # Reset helm and docker url to default one
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [DeploymentRegistry]
    def reset_deployment_registry(site_id, opts = {})
      data, _status_code, _headers = reset_deployment_registry_with_http_info(site_id, opts)
      data
    end

    # Reset helm and docker url to default one
    # Reset helm and docker url to default one
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentRegistry, Fixnum, Hash)>] DeploymentRegistry data, response status code and response headers
    def reset_deployment_registry_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.reset_deployment_registry ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.reset_deployment_registry"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/registry/reset'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentRegistry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#reset_deployment_registry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Run pre/post checks for NSX Application Platform
    # Run pre/post checks for NSX Application Platform 
    # @param site_id 
    # @param platform_deployment_checks_action 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def run_deployment_checks(site_id, platform_deployment_checks_action, opts = {})
      run_deployment_checks_with_http_info(site_id, platform_deployment_checks_action, opts)
      nil
    end

    # Run pre/post checks for NSX Application Platform
    # Run pre/post checks for NSX Application Platform 
    # @param site_id 
    # @param platform_deployment_checks_action 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def run_deployment_checks_with_http_info(site_id, platform_deployment_checks_action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.run_deployment_checks ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.run_deployment_checks"
      end
      # verify the required parameter 'platform_deployment_checks_action' is set
      if @api_client.config.client_side_validation && platform_deployment_checks_action.nil?
        fail ArgumentError, "Missing the required parameter 'platform_deployment_checks_action' when calling NSXApplicationPlatformApi.run_deployment_checks"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/platform/checks'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(platform_deployment_checks_action)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#run_deployment_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Run pre/post checks for NSX Application Platform upgrade-coordinator
    # Run pre/post checks for NSX Application Platform upgrade-coordinator. 
    # @param site_id 
    # @param deployment_checks_action 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def run_uc_deployment_checks(site_id, deployment_checks_action, opts = {})
      run_uc_deployment_checks_with_http_info(site_id, deployment_checks_action, opts)
      nil
    end

    # Run pre/post checks for NSX Application Platform upgrade-coordinator
    # Run pre/post checks for NSX Application Platform upgrade-coordinator. 
    # @param site_id 
    # @param deployment_checks_action 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def run_uc_deployment_checks_with_http_info(site_id, deployment_checks_action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.run_uc_deployment_checks ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.run_uc_deployment_checks"
      end
      # verify the required parameter 'deployment_checks_action' is set
      if @api_client.config.client_side_validation && deployment_checks_action.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_checks_action' when calling NSXApplicationPlatformApi.run_uc_deployment_checks"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/upgrade-coordinator/checks'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(deployment_checks_action)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#run_uc_deployment_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Docker registry and helm repository url.
    # In case of helm chart present in private repository and containers are hosted in private hub. You can change docker and helm url to use these private URL instead of default public one. 
    # @param site_id 
    # @param deployment_registry 
    # @param [Hash] opts the optional parameters
    # @return [DeploymentRegistry]
    def update_deployment_registry(site_id, deployment_registry, opts = {})
      data, _status_code, _headers = update_deployment_registry_with_http_info(site_id, deployment_registry, opts)
      data
    end

    # Update Docker registry and helm repository url.
    # In case of helm chart present in private repository and containers are hosted in private hub. You can change docker and helm url to use these private URL instead of default public one. 
    # @param site_id 
    # @param deployment_registry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentRegistry, Fixnum, Hash)>] DeploymentRegistry data, response status code and response headers
    def update_deployment_registry_with_http_info(site_id, deployment_registry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.update_deployment_registry ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.update_deployment_registry"
      end
      # verify the required parameter 'deployment_registry' is set
      if @api_client.config.client_side_validation && deployment_registry.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_registry' when calling NSXApplicationPlatformApi.update_deployment_registry"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/registry'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(deployment_registry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentRegistry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#update_deployment_registry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update platform configuration
    # Update input parameters required to deploy platform related pods. The UI has option to deploy kubernetes tools. You need to get this file from VMware website. File contains kubectl binary, helm binary and signature to verify them. 
    # @param site_id 
    # @param platform_deployment_config 
    # @param [Hash] opts the optional parameters
    # @return [PlatformDeploymentConfig]
    def update_platform_deployment_config(site_id, platform_deployment_config, opts = {})
      data, _status_code, _headers = update_platform_deployment_config_with_http_info(site_id, platform_deployment_config, opts)
      data
    end

    # Update platform configuration
    # Update input parameters required to deploy platform related pods. The UI has option to deploy kubernetes tools. You need to get this file from VMware website. File contains kubectl binary, helm binary and signature to verify them. 
    # @param site_id 
    # @param platform_deployment_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlatformDeploymentConfig, Fixnum, Hash)>] PlatformDeploymentConfig data, response status code and response headers
    def update_platform_deployment_config_with_http_info(site_id, platform_deployment_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.update_platform_deployment_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.update_platform_deployment_config"
      end
      # verify the required parameter 'platform_deployment_config' is set
      if @api_client.config.client_side_validation && platform_deployment_config.nil?
        fail ArgumentError, "Missing the required parameter 'platform_deployment_config' when calling NSXApplicationPlatformApi.update_platform_deployment_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/platform'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(platform_deployment_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PlatformDeploymentConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#update_platform_deployment_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update upgrade-coordinator configuration
    # Update input parameter require to deploy upgrade-coordinator related pods. Advanced configuraion option on UI has option to deploy kubernetes tools. You need to get this file from VMware website. File contains kubectl binary, helm binary and signature to verify them. 
    # @param site_id 
    # @param upgrade_coordinator_deployment_config 
    # @param [Hash] opts the optional parameters
    # @return [UpgradeCoordinatorDeploymentConfig]
    def update_upgrade_coordinator_deployment_config(site_id, upgrade_coordinator_deployment_config, opts = {})
      data, _status_code, _headers = update_upgrade_coordinator_deployment_config_with_http_info(site_id, upgrade_coordinator_deployment_config, opts)
      data
    end

    # Update upgrade-coordinator configuration
    # Update input parameter require to deploy upgrade-coordinator related pods. Advanced configuraion option on UI has option to deploy kubernetes tools. You need to get this file from VMware website. File contains kubectl binary, helm binary and signature to verify them. 
    # @param site_id 
    # @param upgrade_coordinator_deployment_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeCoordinatorDeploymentConfig, Fixnum, Hash)>] UpgradeCoordinatorDeploymentConfig data, response status code and response headers
    def update_upgrade_coordinator_deployment_config_with_http_info(site_id, upgrade_coordinator_deployment_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.update_upgrade_coordinator_deployment_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.update_upgrade_coordinator_deployment_config"
      end
      # verify the required parameter 'upgrade_coordinator_deployment_config' is set
      if @api_client.config.client_side_validation && upgrade_coordinator_deployment_config.nil?
        fail ArgumentError, "Missing the required parameter 'upgrade_coordinator_deployment_config' when calling NSXApplicationPlatformApi.update_upgrade_coordinator_deployment_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/upgrade-coordinator'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(upgrade_coordinator_deployment_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpgradeCoordinatorDeploymentConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#update_upgrade_coordinator_deployment_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload the Kubernetes tools on NSX Manager via File
    # Synchronous call to upload the Kubernetes tools on NSX Manager via File. You need to get this file from VMware website. File will contains kubectl binary, helm binary and signature to verify them. 
    # @param site_id 
    # @param file File to upload
    # @param [Hash] opts the optional parameters
    # @return [UploadBundleId]
    def upload_container_tools(site_id, file, opts = {})
      data, _status_code, _headers = upload_container_tools_with_http_info(site_id, file, opts)
      data
    end

    # Upload the Kubernetes tools on NSX Manager via File
    # Synchronous call to upload the Kubernetes tools on NSX Manager via File. You need to get this file from VMware website. File will contains kubectl binary, helm binary and signature to verify them. 
    # @param site_id 
    # @param file File to upload
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadBundleId, Fixnum, Hash)>] UploadBundleId data, response status code and response headers
    def upload_container_tools_with_http_info(site_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.upload_container_tools ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.upload_container_tools"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling NSXApplicationPlatformApi.upload_container_tools"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/tools/upload'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UploadBundleId')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#upload_container_tools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload the Kubernetes tools on NSX Manager via remote URL
    # Upload the Kubernetes tools on NSX Manager via remote url. You need to get this file from VMware website. File contains kubectl binary, helm binary and signature to verify them. 
    # @param site_id 
    # @param upload_bundle_remote_server 
    # @param [Hash] opts the optional parameters
    # @return [UploadBundleId]
    def upload_container_tools_from_remote_server(site_id, upload_bundle_remote_server, opts = {})
      data, _status_code, _headers = upload_container_tools_from_remote_server_with_http_info(site_id, upload_bundle_remote_server, opts)
      data
    end

    # Upload the Kubernetes tools on NSX Manager via remote URL
    # Upload the Kubernetes tools on NSX Manager via remote url. You need to get this file from VMware website. File contains kubectl binary, helm binary and signature to verify them. 
    # @param site_id 
    # @param upload_bundle_remote_server 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadBundleId, Fixnum, Hash)>] UploadBundleId data, response status code and response headers
    def upload_container_tools_from_remote_server_with_http_info(site_id, upload_bundle_remote_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.upload_container_tools_from_remote_server ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.upload_container_tools_from_remote_server"
      end
      # verify the required parameter 'upload_bundle_remote_server' is set
      if @api_client.config.client_side_validation && upload_bundle_remote_server.nil?
        fail ArgumentError, "Missing the required parameter 'upload_bundle_remote_server' when calling NSXApplicationPlatformApi.upload_container_tools_from_remote_server"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/tools/upload_from_remote_server'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(upload_bundle_remote_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UploadBundleId')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#upload_container_tools_from_remote_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload kubeconfig file
    # Synchronous call to upload kubeconfig file on orchestrator node. This will be used to connect with Kubernetes cluster. 
    # @param site_id 
    # @param file File to upload
    # @param [Hash] opts the optional parameters
    # @return [UploadBundleId]
    def upload_kubeconfig(site_id, file, opts = {})
      data, _status_code, _headers = upload_kubeconfig_with_http_info(site_id, file, opts)
      data
    end

    # Upload kubeconfig file
    # Synchronous call to upload kubeconfig file on orchestrator node. This will be used to connect with Kubernetes cluster. 
    # @param site_id 
    # @param file File to upload
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadBundleId, Fixnum, Hash)>] UploadBundleId data, response status code and response headers
    def upload_kubeconfig_with_http_info(site_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXApplicationPlatformApi.upload_kubeconfig ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NSXApplicationPlatformApi.upload_kubeconfig"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling NSXApplicationPlatformApi.upload_kubeconfig"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/kubeconfig'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UploadBundleId')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXApplicationPlatformApi#upload_kubeconfig\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
