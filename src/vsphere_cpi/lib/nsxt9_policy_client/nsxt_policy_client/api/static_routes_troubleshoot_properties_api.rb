=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class StaticRoutesTroubleshootPropertiesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update a StaticRouteBfdTroubleshootConfig
    # If a StaticRouteBfdTroubleshootConfig is not already present, create a new StaticRouteBfdTroubleshootConfig. If it already exists, update the StaticRouteBfdTroubleshootConfig. This operation will fully replace the object. 
    # @param tier_0_id Tier-0 ID
    # @param static_route_bfd_troubleshoot_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [StaticRouteBfdTroubleshootConfig]
    def create_or_replace_static_route_bfd_troubleshoot_config(tier_0_id, static_route_bfd_troubleshoot_config, opts = {})
      data, _status_code, _headers = create_or_replace_static_route_bfd_troubleshoot_config_with_http_info(tier_0_id, static_route_bfd_troubleshoot_config, opts)
      data
    end

    # Create or update a StaticRouteBfdTroubleshootConfig
    # If a StaticRouteBfdTroubleshootConfig is not already present, create a new StaticRouteBfdTroubleshootConfig. If it already exists, update the StaticRouteBfdTroubleshootConfig. This operation will fully replace the object. 
    # @param tier_0_id Tier-0 ID
    # @param static_route_bfd_troubleshoot_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(StaticRouteBfdTroubleshootConfig, Fixnum, Hash)>] StaticRouteBfdTroubleshootConfig data, response status code and response headers
    def create_or_replace_static_route_bfd_troubleshoot_config_with_http_info(tier_0_id, static_route_bfd_troubleshoot_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StaticRoutesTroubleshootPropertiesApi.create_or_replace_static_route_bfd_troubleshoot_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling StaticRoutesTroubleshootPropertiesApi.create_or_replace_static_route_bfd_troubleshoot_config"
      end
      # verify the required parameter 'static_route_bfd_troubleshoot_config' is set
      if @api_client.config.client_side_validation && static_route_bfd_troubleshoot_config.nil?
        fail ArgumentError, "Missing the required parameter 'static_route_bfd_troubleshoot_config' when calling StaticRoutesTroubleshootPropertiesApi.create_or_replace_static_route_bfd_troubleshoot_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/static-routes/bfd-peers/troubleshoot'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(static_route_bfd_troubleshoot_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticRouteBfdTroubleshootConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StaticRoutesTroubleshootPropertiesApi#create_or_replace_static_route_bfd_troubleshoot_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a StaticRouteBfdTroubleshootConfig
    # If a StaticRouteBfdTroubleshootConfig is not already present, create a new StaticRouteBfdTroubleshootConfig. If it already exists, update the StaticRouteBfdTroubleshootConfig. This operation will fully replace the object. 
    # @param tier_0_id Tier-0 ID
    # @param static_route_bfd_troubleshoot_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [StaticRouteBfdTroubleshootConfig]
    def global_infra_create_or_replace_static_route_bfd_troubleshoot_config(tier_0_id, static_route_bfd_troubleshoot_config, opts = {})
      data, _status_code, _headers = global_infra_create_or_replace_static_route_bfd_troubleshoot_config_with_http_info(tier_0_id, static_route_bfd_troubleshoot_config, opts)
      data
    end

    # Create or update a StaticRouteBfdTroubleshootConfig
    # If a StaticRouteBfdTroubleshootConfig is not already present, create a new StaticRouteBfdTroubleshootConfig. If it already exists, update the StaticRouteBfdTroubleshootConfig. This operation will fully replace the object. 
    # @param tier_0_id Tier-0 ID
    # @param static_route_bfd_troubleshoot_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(StaticRouteBfdTroubleshootConfig, Fixnum, Hash)>] StaticRouteBfdTroubleshootConfig data, response status code and response headers
    def global_infra_create_or_replace_static_route_bfd_troubleshoot_config_with_http_info(tier_0_id, static_route_bfd_troubleshoot_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StaticRoutesTroubleshootPropertiesApi.global_infra_create_or_replace_static_route_bfd_troubleshoot_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling StaticRoutesTroubleshootPropertiesApi.global_infra_create_or_replace_static_route_bfd_troubleshoot_config"
      end
      # verify the required parameter 'static_route_bfd_troubleshoot_config' is set
      if @api_client.config.client_side_validation && static_route_bfd_troubleshoot_config.nil?
        fail ArgumentError, "Missing the required parameter 'static_route_bfd_troubleshoot_config' when calling StaticRoutesTroubleshootPropertiesApi.global_infra_create_or_replace_static_route_bfd_troubleshoot_config"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/static-routes/bfd-peers/troubleshoot'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(static_route_bfd_troubleshoot_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticRouteBfdTroubleshootConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StaticRoutesTroubleshootPropertiesApi#global_infra_create_or_replace_static_route_bfd_troubleshoot_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a StaticRouteBfdTroubleshootConfig
    # If a StaticRouteBfdTroubleshootConfig is not already present, create a new StaticRouteBfdTroubleshootConfig. If it already exists, update the StaticRouteBfdTroubleshootConfig. This is a full replace. 
    # @param tier_0_id Tier-0 ID
    # @param static_route_bfd_troubleshoot_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def global_infra_patch_static_route_bfd_troubleshoot_config(tier_0_id, static_route_bfd_troubleshoot_config, opts = {})
      global_infra_patch_static_route_bfd_troubleshoot_config_with_http_info(tier_0_id, static_route_bfd_troubleshoot_config, opts)
      nil
    end

    # Create or update a StaticRouteBfdTroubleshootConfig
    # If a StaticRouteBfdTroubleshootConfig is not already present, create a new StaticRouteBfdTroubleshootConfig. If it already exists, update the StaticRouteBfdTroubleshootConfig. This is a full replace. 
    # @param tier_0_id Tier-0 ID
    # @param static_route_bfd_troubleshoot_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_static_route_bfd_troubleshoot_config_with_http_info(tier_0_id, static_route_bfd_troubleshoot_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StaticRoutesTroubleshootPropertiesApi.global_infra_patch_static_route_bfd_troubleshoot_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling StaticRoutesTroubleshootPropertiesApi.global_infra_patch_static_route_bfd_troubleshoot_config"
      end
      # verify the required parameter 'static_route_bfd_troubleshoot_config' is set
      if @api_client.config.client_side_validation && static_route_bfd_troubleshoot_config.nil?
        fail ArgumentError, "Missing the required parameter 'static_route_bfd_troubleshoot_config' when calling StaticRoutesTroubleshootPropertiesApi.global_infra_patch_static_route_bfd_troubleshoot_config"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/static-routes/bfd-peers/troubleshoot'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(static_route_bfd_troubleshoot_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StaticRoutesTroubleshootPropertiesApi#global_infra_patch_static_route_bfd_troubleshoot_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a StaticRouteBfdTroubleshootConfig
    # Read a StaticRouteBfdTroubleshootConfig 
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @return [StaticRouteBfdTroubleshootConfig]
    def global_infra_read_static_route_bfd_troubleshoot_config(tier_0_id, opts = {})
      data, _status_code, _headers = global_infra_read_static_route_bfd_troubleshoot_config_with_http_info(tier_0_id, opts)
      data
    end

    # Read a StaticRouteBfdTroubleshootConfig
    # Read a StaticRouteBfdTroubleshootConfig 
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(StaticRouteBfdTroubleshootConfig, Fixnum, Hash)>] StaticRouteBfdTroubleshootConfig data, response status code and response headers
    def global_infra_read_static_route_bfd_troubleshoot_config_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StaticRoutesTroubleshootPropertiesApi.global_infra_read_static_route_bfd_troubleshoot_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling StaticRoutesTroubleshootPropertiesApi.global_infra_read_static_route_bfd_troubleshoot_config"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/static-routes/bfd-peers/troubleshoot'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticRouteBfdTroubleshootConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StaticRoutesTroubleshootPropertiesApi#global_infra_read_static_route_bfd_troubleshoot_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a StaticRouteBfdTroubleshootConfig
    # If a StaticRouteBfdTroubleshootConfig is not already present, create a new StaticRouteBfdTroubleshootConfig. If it already exists, update the StaticRouteBfdTroubleshootConfig. This is a full replace. 
    # @param tier_0_id Tier-0 ID
    # @param static_route_bfd_troubleshoot_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_static_route_bfd_troubleshoot_config(tier_0_id, static_route_bfd_troubleshoot_config, opts = {})
      patch_static_route_bfd_troubleshoot_config_with_http_info(tier_0_id, static_route_bfd_troubleshoot_config, opts)
      nil
    end

    # Create or update a StaticRouteBfdTroubleshootConfig
    # If a StaticRouteBfdTroubleshootConfig is not already present, create a new StaticRouteBfdTroubleshootConfig. If it already exists, update the StaticRouteBfdTroubleshootConfig. This is a full replace. 
    # @param tier_0_id Tier-0 ID
    # @param static_route_bfd_troubleshoot_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_static_route_bfd_troubleshoot_config_with_http_info(tier_0_id, static_route_bfd_troubleshoot_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StaticRoutesTroubleshootPropertiesApi.patch_static_route_bfd_troubleshoot_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling StaticRoutesTroubleshootPropertiesApi.patch_static_route_bfd_troubleshoot_config"
      end
      # verify the required parameter 'static_route_bfd_troubleshoot_config' is set
      if @api_client.config.client_side_validation && static_route_bfd_troubleshoot_config.nil?
        fail ArgumentError, "Missing the required parameter 'static_route_bfd_troubleshoot_config' when calling StaticRoutesTroubleshootPropertiesApi.patch_static_route_bfd_troubleshoot_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/static-routes/bfd-peers/troubleshoot'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(static_route_bfd_troubleshoot_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StaticRoutesTroubleshootPropertiesApi#patch_static_route_bfd_troubleshoot_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a StaticRouteBfdTroubleshootConfig
    # Read a StaticRouteBfdTroubleshootConfig 
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @return [StaticRouteBfdTroubleshootConfig]
    def read_static_route_bfd_troubleshoot_config(tier_0_id, opts = {})
      data, _status_code, _headers = read_static_route_bfd_troubleshoot_config_with_http_info(tier_0_id, opts)
      data
    end

    # Read a StaticRouteBfdTroubleshootConfig
    # Read a StaticRouteBfdTroubleshootConfig 
    # @param tier_0_id Tier-0 ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(StaticRouteBfdTroubleshootConfig, Fixnum, Hash)>] StaticRouteBfdTroubleshootConfig data, response status code and response headers
    def read_static_route_bfd_troubleshoot_config_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StaticRoutesTroubleshootPropertiesApi.read_static_route_bfd_troubleshoot_config ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling StaticRoutesTroubleshootPropertiesApi.read_static_route_bfd_troubleshoot_config"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/static-routes/bfd-peers/troubleshoot'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StaticRouteBfdTroubleshootConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StaticRoutesTroubleshootPropertiesApi#read_static_route_bfd_troubleshoot_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
