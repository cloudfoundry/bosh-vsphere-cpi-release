=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class FullSynchronizationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Performs realized object actions specified in the action.
    # Performs realized object actions specified in the action.
    # @param action 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :site site id
    # @option opts [String] :sync_type Type of full sync being requested
    # @return [nil]
    def full_sync_actions(action, opts = {})
      full_sync_actions_with_http_info(action, opts)
      nil
    end

    # Performs realized object actions specified in the action.
    # Performs realized object actions specified in the action.
    # @param action 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :site site id
    # @option opts [String] :sync_type Type of full sync being requested
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def full_sync_actions_with_http_info(action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FullSynchronizationApi.full_sync_actions ...'
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling FullSynchronizationApi.full_sync_actions"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['request_full_sync', 'request_notifications_full_sync', 'abort_current_sync', 'purge_history'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of request_full_sync, request_notifications_full_sync, abort_current_sync, purge_history"
      end
      if @api_client.config.client_side_validation && opts[:'sync_type'] && !['gm_to_lm_full_sync'].include?(opts[:'sync_type'])
        fail ArgumentError, 'invalid value for "sync_type", must be one of gm_to_lm_full_sync'
      end
      # resource path
      local_var_path = '/infra/full-sync-action'

      # query parameters
      query_params = {}
      query_params[:'action'] = action
      query_params[:'site'] = opts[:'site'] if !opts[:'site'].nil?
      query_params[:'sync_type'] = opts[:'sync_type'] if !opts[:'sync_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FullSynchronizationApi#full_sync_actions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get full sync state
    # Get full sync state.
    # @param full_sync_id 
    # @param [Hash] opts the optional parameters
    # @return [FullSyncState]
    def get_full_sync_states(full_sync_id, opts = {})
      data, _status_code, _headers = get_full_sync_states_with_http_info(full_sync_id, opts)
      data
    end

    # Get full sync state
    # Get full sync state.
    # @param full_sync_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FullSyncState, Fixnum, Hash)>] FullSyncState data, response status code and response headers
    def get_full_sync_states_with_http_info(full_sync_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FullSynchronizationApi.get_full_sync_states ...'
      end
      # verify the required parameter 'full_sync_id' is set
      if @api_client.config.client_side_validation && full_sync_id.nil?
        fail ArgumentError, "Missing the required parameter 'full_sync_id' when calling FullSynchronizationApi.get_full_sync_states"
      end
      # resource path
      local_var_path = '/infra/full-sync-states/{full-sync-id}'.sub('{' + 'full-sync-id' + '}', full_sync_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FullSyncState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FullSynchronizationApi#get_full_sync_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get full sync state
    # Get full sync state.
    # @param full_sync_id 
    # @param [Hash] opts the optional parameters
    # @return [FullSyncState]
    def global_infra_get_full_sync_states(full_sync_id, opts = {})
      data, _status_code, _headers = global_infra_get_full_sync_states_with_http_info(full_sync_id, opts)
      data
    end

    # Get full sync state
    # Get full sync state.
    # @param full_sync_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FullSyncState, Fixnum, Hash)>] FullSyncState data, response status code and response headers
    def global_infra_get_full_sync_states_with_http_info(full_sync_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FullSynchronizationApi.global_infra_get_full_sync_states ...'
      end
      # verify the required parameter 'full_sync_id' is set
      if @api_client.config.client_side_validation && full_sync_id.nil?
        fail ArgumentError, "Missing the required parameter 'full_sync_id' when calling FullSynchronizationApi.global_infra_get_full_sync_states"
      end
      # resource path
      local_var_path = '/global-infra/full-sync-states/{full-sync-id}'.sub('{' + 'full-sync-id' + '}', full_sync_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FullSyncState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FullSynchronizationApi#global_infra_get_full_sync_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List full sync states
    # List full sync state.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [FullSyncStateListResult]
    def global_infra_list_full_sync_states(opts = {})
      data, _status_code, _headers = global_infra_list_full_sync_states_with_http_info(opts)
      data
    end

    # List full sync states
    # List full sync state.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(FullSyncStateListResult, Fixnum, Hash)>] FullSyncStateListResult data, response status code and response headers
    def global_infra_list_full_sync_states_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FullSynchronizationApi.global_infra_list_full_sync_states ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FullSynchronizationApi.global_infra_list_full_sync_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FullSynchronizationApi.global_infra_list_full_sync_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/full-sync-states'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FullSyncStateListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FullSynchronizationApi#global_infra_list_full_sync_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List full sync states
    # List full sync state.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [FullSyncStateListResult]
    def list_full_sync_states(opts = {})
      data, _status_code, _headers = list_full_sync_states_with_http_info(opts)
      data
    end

    # List full sync states
    # List full sync state.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(FullSyncStateListResult, Fixnum, Hash)>] FullSyncStateListResult data, response status code and response headers
    def list_full_sync_states_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FullSynchronizationApi.list_full_sync_states ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FullSynchronizationApi.list_full_sync_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FullSynchronizationApi.list_full_sync_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/full-sync-states'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FullSyncStateListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FullSynchronizationApi#list_full_sync_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
