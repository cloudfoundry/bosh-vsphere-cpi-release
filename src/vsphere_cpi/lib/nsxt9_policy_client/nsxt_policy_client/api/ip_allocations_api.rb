=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class IPAllocationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update a project ip allocation
    # If a Project IP Address Allocation is absent, create a new one.  If it already exists, replace the Project IP Address Allocation instance with the new object. 
    # @param org_id 
    # @param project_id 
    # @param ip_address_allocation_id 
    # @param project_ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [ProjectIpAddressAllocation]
    def create_or_replace_project_ip_address_allocation(org_id, project_id, ip_address_allocation_id, project_ip_address_allocation, opts = {})
      data, _status_code, _headers = create_or_replace_project_ip_address_allocation_with_http_info(org_id, project_id, ip_address_allocation_id, project_ip_address_allocation, opts)
      data
    end

    # Create or update a project ip allocation
    # If a Project IP Address Allocation is absent, create a new one.  If it already exists, replace the Project IP Address Allocation instance with the new object. 
    # @param org_id 
    # @param project_id 
    # @param ip_address_allocation_id 
    # @param project_ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectIpAddressAllocation, Fixnum, Hash)>] ProjectIpAddressAllocation data, response status code and response headers
    def create_or_replace_project_ip_address_allocation_with_http_info(org_id, project_id, ip_address_allocation_id, project_ip_address_allocation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPAllocationsApi.create_or_replace_project_ip_address_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPAllocationsApi.create_or_replace_project_ip_address_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPAllocationsApi.create_or_replace_project_ip_address_allocation"
      end
      # verify the required parameter 'ip_address_allocation_id' is set
      if @api_client.config.client_side_validation && ip_address_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation_id' when calling IPAllocationsApi.create_or_replace_project_ip_address_allocation"
      end
      # verify the required parameter 'project_ip_address_allocation' is set
      if @api_client.config.client_side_validation && project_ip_address_allocation.nil?
        fail ArgumentError, "Missing the required parameter 'project_ip_address_allocation' when calling IPAllocationsApi.create_or_replace_project_ip_address_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/ip-address-allocations/{ip-address-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-address-allocation-id' + '}', ip_address_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(project_ip_address_allocation)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectIpAddressAllocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPAllocationsApi#create_or_replace_project_ip_address_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Records intent to release an IP from an IpPool.
    # Releases the IP that was allocated for this allocation request 
    # @param org_id 
    # @param project_id 
    # @param ip_address_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_project_ip_address_allocation(org_id, project_id, ip_address_allocation_id, opts = {})
      delete_project_ip_address_allocation_with_http_info(org_id, project_id, ip_address_allocation_id, opts)
      nil
    end

    # Records intent to release an IP from an IpPool.
    # Releases the IP that was allocated for this allocation request 
    # @param org_id 
    # @param project_id 
    # @param ip_address_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_project_ip_address_allocation_with_http_info(org_id, project_id, ip_address_allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPAllocationsApi.delete_project_ip_address_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPAllocationsApi.delete_project_ip_address_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPAllocationsApi.delete_project_ip_address_allocation"
      end
      # verify the required parameter 'ip_address_allocation_id' is set
      if @api_client.config.client_side_validation && ip_address_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation_id' when calling IPAllocationsApi.delete_project_ip_address_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/ip-address-allocations/{ip-address-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-address-allocation-id' + '}', ip_address_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPAllocationsApi#delete_project_ip_address_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Project ip allocations
    # List all the ip allocations for a Project. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ProjectIpAddressAllocationListResult]
    def list_project_ip_address_allocations(org_id, project_id, opts = {})
      data, _status_code, _headers = list_project_ip_address_allocations_with_http_info(org_id, project_id, opts)
      data
    end

    # List Project ip allocations
    # List all the ip allocations for a Project. 
    # @param org_id 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ProjectIpAddressAllocationListResult, Fixnum, Hash)>] ProjectIpAddressAllocationListResult data, response status code and response headers
    def list_project_ip_address_allocations_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPAllocationsApi.list_project_ip_address_allocations ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPAllocationsApi.list_project_ip_address_allocations"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPAllocationsApi.list_project_ip_address_allocations"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPAllocationsApi.list_project_ip_address_allocations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IPAllocationsApi.list_project_ip_address_allocations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/ip-address-allocations'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectIpAddressAllocationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPAllocationsApi#list_project_ip_address_allocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a Project ip allocation
    # Create a Project ip allocation if it does not exist 
    # @param org_id 
    # @param project_id 
    # @param ip_address_allocation_id 
    # @param project_ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_project_ip_address_allocation(org_id, project_id, ip_address_allocation_id, project_ip_address_allocation, opts = {})
      patch_project_ip_address_allocation_with_http_info(org_id, project_id, ip_address_allocation_id, project_ip_address_allocation, opts)
      nil
    end

    # Patch a Project ip allocation
    # Create a Project ip allocation if it does not exist 
    # @param org_id 
    # @param project_id 
    # @param ip_address_allocation_id 
    # @param project_ip_address_allocation 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_project_ip_address_allocation_with_http_info(org_id, project_id, ip_address_allocation_id, project_ip_address_allocation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPAllocationsApi.patch_project_ip_address_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPAllocationsApi.patch_project_ip_address_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPAllocationsApi.patch_project_ip_address_allocation"
      end
      # verify the required parameter 'ip_address_allocation_id' is set
      if @api_client.config.client_side_validation && ip_address_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation_id' when calling IPAllocationsApi.patch_project_ip_address_allocation"
      end
      # verify the required parameter 'project_ip_address_allocation' is set
      if @api_client.config.client_side_validation && project_ip_address_allocation.nil?
        fail ArgumentError, "Missing the required parameter 'project_ip_address_allocation' when calling IPAllocationsApi.patch_project_ip_address_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/ip-address-allocations/{ip-address-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-address-allocation-id' + '}', ip_address_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(project_ip_address_allocation)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPAllocationsApi#patch_project_ip_address_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Project ip allocation by ID
    # Get detail information on Project ip allocation by giving ID. 
    # @param org_id 
    # @param project_id 
    # @param ip_address_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [ProjectIpAddressAllocation]
    def read_project_ip_address_allocation(org_id, project_id, ip_address_allocation_id, opts = {})
      data, _status_code, _headers = read_project_ip_address_allocation_with_http_info(org_id, project_id, ip_address_allocation_id, opts)
      data
    end

    # Get Project ip allocation by ID
    # Get detail information on Project ip allocation by giving ID. 
    # @param org_id 
    # @param project_id 
    # @param ip_address_allocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectIpAddressAllocation, Fixnum, Hash)>] ProjectIpAddressAllocation data, response status code and response headers
    def read_project_ip_address_allocation_with_http_info(org_id, project_id, ip_address_allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IPAllocationsApi.read_project_ip_address_allocation ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling IPAllocationsApi.read_project_ip_address_allocation"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling IPAllocationsApi.read_project_ip_address_allocation"
      end
      # verify the required parameter 'ip_address_allocation_id' is set
      if @api_client.config.client_side_validation && ip_address_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address_allocation_id' when calling IPAllocationsApi.read_project_ip_address_allocation"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/ip-address-allocations/{ip-address-allocation-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'ip-address-allocation-id' + '}', ip_address_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectIpAddressAllocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IPAllocationsApi#read_project_ip_address_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
