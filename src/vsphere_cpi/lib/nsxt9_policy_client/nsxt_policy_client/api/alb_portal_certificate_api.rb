=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class AlbPortalCertificateApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create portal certificate CSR for Avi Load Balancer Controller.
    # Use this API to create portal certificate CSR for Avi Load Balancer Controller. 
    # @param alb_controller_certificate_csr 
    # @param [Hash] opts the optional parameters
    # @return [ALBControllerCertificate]
    def create_alb_portal_certificate_csr(alb_controller_certificate_csr, opts = {})
      data, _status_code, _headers = create_alb_portal_certificate_csr_with_http_info(alb_controller_certificate_csr, opts)
      data
    end

    # Create portal certificate CSR for Avi Load Balancer Controller.
    # Use this API to create portal certificate CSR for Avi Load Balancer Controller. 
    # @param alb_controller_certificate_csr 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ALBControllerCertificate, Fixnum, Hash)>] ALBControllerCertificate data, response status code and response headers
    def create_alb_portal_certificate_csr_with_http_info(alb_controller_certificate_csr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlbPortalCertificateApi.create_alb_portal_certificate_csr ...'
      end
      # verify the required parameter 'alb_controller_certificate_csr' is set
      if @api_client.config.client_side_validation && alb_controller_certificate_csr.nil?
        fail ArgumentError, "Missing the required parameter 'alb_controller_certificate_csr' when calling AlbPortalCertificateApi.create_alb_portal_certificate_csr"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/certificate/csr'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(alb_controller_certificate_csr)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlbPortalCertificateApi#create_alb_portal_certificate_csr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Install and update portal certificate in Avi Load Balancer Controller.
    # Use this API to install and update portal certificate in Avi Load Balancer Controller. 
    # @param alb_controller_certificate 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ca_only Add given CA certificate to NSX Truststore
    # @return [ALBControllerCertificate]
    def install_alb_portal_certificate(alb_controller_certificate, opts = {})
      data, _status_code, _headers = install_alb_portal_certificate_with_http_info(alb_controller_certificate, opts)
      data
    end

    # Install and update portal certificate in Avi Load Balancer Controller.
    # Use this API to install and update portal certificate in Avi Load Balancer Controller. 
    # @param alb_controller_certificate 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ca_only Add given CA certificate to NSX Truststore
    # @return [Array<(ALBControllerCertificate, Fixnum, Hash)>] ALBControllerCertificate data, response status code and response headers
    def install_alb_portal_certificate_with_http_info(alb_controller_certificate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlbPortalCertificateApi.install_alb_portal_certificate ...'
      end
      # verify the required parameter 'alb_controller_certificate' is set
      if @api_client.config.client_side_validation && alb_controller_certificate.nil?
        fail ArgumentError, "Missing the required parameter 'alb_controller_certificate' when calling AlbPortalCertificateApi.install_alb_portal_certificate"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/certificate/install'

      # query parameters
      query_params = {}
      query_params[:'ca_only'] = opts[:'ca_only'] if !opts[:'ca_only'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(alb_controller_certificate)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlbPortalCertificateApi#install_alb_portal_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
