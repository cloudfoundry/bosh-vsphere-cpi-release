=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class MonitoringApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create container cluster status
    # Create container cluster status
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param container_cluster_status 
    # @param [Hash] opts the optional parameters
    # @return [ContainerClusterStatus]
    def add_container_cluster_status(site_id, enforcement_point_id, container_cluster_status, opts = {})
      data, _status_code, _headers = add_container_cluster_status_with_http_info(site_id, enforcement_point_id, container_cluster_status, opts)
      data
    end

    # Create container cluster status
    # Create container cluster status
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param container_cluster_status 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContainerClusterStatus, Fixnum, Hash)>] ContainerClusterStatus data, response status code and response headers
    def add_container_cluster_status_with_http_info(site_id, enforcement_point_id, container_cluster_status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.add_container_cluster_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.add_container_cluster_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.add_container_cluster_status"
      end
      # verify the required parameter 'container_cluster_status' is set
      if @api_client.config.client_side_validation && container_cluster_status.nil?
        fail ArgumentError, "Missing the required parameter 'container_cluster_status' when calling MonitoringApi.add_container_cluster_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/container-cluster-ncpstatus'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(container_cluster_status)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerClusterStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#add_container_cluster_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Restart the packet capture session
    # Restart the packet capture session 
    # @param session_id Packet capture session id
    # @param action Indicates which action will be taken by session conduction.
    # @param [Hash] opts the optional parameters
    # @return [PktCaptureSession]
    def control_pkt_capture_session(session_id, action, opts = {})
      data, _status_code, _headers = control_pkt_capture_session_with_http_info(session_id, action, opts)
      data
    end

    # Restart the packet capture session
    # Restart the packet capture session 
    # @param session_id Packet capture session id
    # @param action Indicates which action will be taken by session conduction.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PktCaptureSession, Fixnum, Hash)>] PktCaptureSession data, response status code and response headers
    def control_pkt_capture_session_with_http_info(session_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.control_pkt_capture_session ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling MonitoringApi.control_pkt_capture_session"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling MonitoringApi.control_pkt_capture_session"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['restart', 'terminate'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of restart, terminate"
      end
      # resource path
      local_var_path = '/infra/pktcap/session/{session-id}'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PktCaptureSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#control_pkt_capture_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new manual health check config
    # Create a new manual health check config with essential properties. It's disallowed to create new one until the count of in-progress manual health check is less than 50. A manual health check will be deleted automatically after finished for 24 hours. 
    # @param manual_health_check_id 
    # @param policy_manual_health_check 
    # @param [Hash] opts the optional parameters
    # @return [PolicyManualHealthCheck]
    def create_manual_health_check_config(manual_health_check_id, policy_manual_health_check, opts = {})
      data, _status_code, _headers = create_manual_health_check_config_with_http_info(manual_health_check_id, policy_manual_health_check, opts)
      data
    end

    # Create a new manual health check config
    # Create a new manual health check config with essential properties. It&#39;s disallowed to create new one until the count of in-progress manual health check is less than 50. A manual health check will be deleted automatically after finished for 24 hours. 
    # @param manual_health_check_id 
    # @param policy_manual_health_check 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyManualHealthCheck, Fixnum, Hash)>] PolicyManualHealthCheck data, response status code and response headers
    def create_manual_health_check_config_with_http_info(manual_health_check_id, policy_manual_health_check, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.create_manual_health_check_config ...'
      end
      # verify the required parameter 'manual_health_check_id' is set
      if @api_client.config.client_side_validation && manual_health_check_id.nil?
        fail ArgumentError, "Missing the required parameter 'manual_health_check_id' when calling MonitoringApi.create_manual_health_check_config"
      end
      # verify the required parameter 'policy_manual_health_check' is set
      if @api_client.config.client_side_validation && policy_manual_health_check.nil?
        fail ArgumentError, "Missing the required parameter 'policy_manual_health_check' when calling MonitoringApi.create_manual_health_check_config"
      end
      # resource path
      local_var_path = '/infra/manual-health-checks/{manual-health-check-id}'.sub('{' + 'manual-health-check-id' + '}', manual_health_check_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_manual_health_check)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyManualHealthCheck')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#create_manual_health_check_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create request to collect artifacts generated by an Online Diagnostic System runbook invocations
    # Create request to collect the artifacts generated by Online Diagnostic System runbook invocations in a batch. 
    # @param request_id 
    # @param ods_runbook_invocation_artifact_batch_request 
    # @param [Hash] opts the optional parameters
    # @return [OdsRunbookInvocationArtifactBatchResult]
    def create_ods_invocation_artifact_in_batch_request(request_id, ods_runbook_invocation_artifact_batch_request, opts = {})
      data, _status_code, _headers = create_ods_invocation_artifact_in_batch_request_with_http_info(request_id, ods_runbook_invocation_artifact_batch_request, opts)
      data
    end

    # Create request to collect artifacts generated by an Online Diagnostic System runbook invocations
    # Create request to collect the artifacts generated by Online Diagnostic System runbook invocations in a batch. 
    # @param request_id 
    # @param ods_runbook_invocation_artifact_batch_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsRunbookInvocationArtifactBatchResult, Fixnum, Hash)>] OdsRunbookInvocationArtifactBatchResult data, response status code and response headers
    def create_ods_invocation_artifact_in_batch_request_with_http_info(request_id, ods_runbook_invocation_artifact_batch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.create_ods_invocation_artifact_in_batch_request ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling MonitoringApi.create_ods_invocation_artifact_in_batch_request"
      end
      # verify the required parameter 'ods_runbook_invocation_artifact_batch_request' is set
      if @api_client.config.client_side_validation && ods_runbook_invocation_artifact_batch_request.nil?
        fail ArgumentError, "Missing the required parameter 'ods_runbook_invocation_artifact_batch_request' when calling MonitoringApi.create_ods_invocation_artifact_in_batch_request"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-artifacts/{request-id}'.sub('{' + 'request-id' + '}', request_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ods_runbook_invocation_artifact_batch_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookInvocationArtifactBatchResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#create_ods_invocation_artifact_in_batch_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a runbook invocation
    # Create an Online Diagnostic System Runbook invocation. If an invocation with <invocation-id> already exists, throw an exception. Otherwise, create a new runbook invocation. A runbook invocation along with its report and status will be deleted automatically after 2 hours, if it is not deleted by delete API. 
    # @param invocation_id 
    # @param ods_runbook_invocation 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_ods_runbook_invocation(invocation_id, ods_runbook_invocation, opts = {})
      create_ods_runbook_invocation_with_http_info(invocation_id, ods_runbook_invocation, opts)
      nil
    end

    # Create a runbook invocation
    # Create an Online Diagnostic System Runbook invocation. If an invocation with &lt;invocation-id&gt; already exists, throw an exception. Otherwise, create a new runbook invocation. A runbook invocation along with its report and status will be deleted automatically after 2 hours, if it is not deleted by delete API. 
    # @param invocation_id 
    # @param ods_runbook_invocation 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_ods_runbook_invocation_with_http_info(invocation_id, ods_runbook_invocation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.create_ods_runbook_invocation ...'
      end
      # verify the required parameter 'invocation_id' is set
      if @api_client.config.client_side_validation && invocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invocation_id' when calling MonitoringApi.create_ods_runbook_invocation"
      end
      # verify the required parameter 'ods_runbook_invocation' is set
      if @api_client.config.client_side_validation && ods_runbook_invocation.nil?
        fail ArgumentError, "Missing the required parameter 'ods_runbook_invocation' when calling MonitoringApi.create_ods_runbook_invocation"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-invocations/{invocation-id}'.sub('{' + 'invocation-id' + '}', invocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ods_runbook_invocation)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#create_ods_runbook_invocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace IPFIX dfw collector profile
    # Create or Replace IPFIX dfw collector profile. IPFIX data will be sent to IPFIX collector port. 
    # @param ipfix_dfw_collector_profile_id IPFIX dfw collector profile id
    # @param ipfixdfw_collector_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [IPFIXDFWCollectorProfile]
    def create_or_replace_ipfixdfw_collector_profile(ipfix_dfw_collector_profile_id, ipfixdfw_collector_profile, opts = {})
      data, _status_code, _headers = create_or_replace_ipfixdfw_collector_profile_with_http_info(ipfix_dfw_collector_profile_id, ipfixdfw_collector_profile, opts)
      data
    end

    # Create or Replace IPFIX dfw collector profile
    # Create or Replace IPFIX dfw collector profile. IPFIX data will be sent to IPFIX collector port. 
    # @param ipfix_dfw_collector_profile_id IPFIX dfw collector profile id
    # @param ipfixdfw_collector_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(IPFIXDFWCollectorProfile, Fixnum, Hash)>] IPFIXDFWCollectorProfile data, response status code and response headers
    def create_or_replace_ipfixdfw_collector_profile_with_http_info(ipfix_dfw_collector_profile_id, ipfixdfw_collector_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.create_or_replace_ipfixdfw_collector_profile ...'
      end
      # verify the required parameter 'ipfix_dfw_collector_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_dfw_collector_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_dfw_collector_profile_id' when calling MonitoringApi.create_or_replace_ipfixdfw_collector_profile"
      end
      # verify the required parameter 'ipfixdfw_collector_profile' is set
      if @api_client.config.client_side_validation && ipfixdfw_collector_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipfixdfw_collector_profile' when calling MonitoringApi.create_or_replace_ipfixdfw_collector_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-dfw-collector-profiles/{ipfix-dfw-collector-profile-id}'.sub('{' + 'ipfix-dfw-collector-profile-id' + '}', ipfix_dfw_collector_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfixdfw_collector_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXDFWCollectorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#create_or_replace_ipfixdfw_collector_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace IPFIX DFW collection Config.
    # Create or replace IPFIX DFW profile. Config will start forwarding data to provided IPFIX DFW collector. 
    # @param ipfix_dfw_profile_id IPFIX DFW Profile ID
    # @param ipfixdfw_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [IPFIXDFWProfile]
    def create_or_replace_ipfixdfw_profile(ipfix_dfw_profile_id, ipfixdfw_profile, opts = {})
      data, _status_code, _headers = create_or_replace_ipfixdfw_profile_with_http_info(ipfix_dfw_profile_id, ipfixdfw_profile, opts)
      data
    end

    # Create or Replace IPFIX DFW collection Config.
    # Create or replace IPFIX DFW profile. Config will start forwarding data to provided IPFIX DFW collector. 
    # @param ipfix_dfw_profile_id IPFIX DFW Profile ID
    # @param ipfixdfw_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(IPFIXDFWProfile, Fixnum, Hash)>] IPFIXDFWProfile data, response status code and response headers
    def create_or_replace_ipfixdfw_profile_with_http_info(ipfix_dfw_profile_id, ipfixdfw_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.create_or_replace_ipfixdfw_profile ...'
      end
      # verify the required parameter 'ipfix_dfw_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_dfw_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_dfw_profile_id' when calling MonitoringApi.create_or_replace_ipfixdfw_profile"
      end
      # verify the required parameter 'ipfixdfw_profile' is set
      if @api_client.config.client_side_validation && ipfixdfw_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipfixdfw_profile' when calling MonitoringApi.create_or_replace_ipfixdfw_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-dfw-profiles/{ipfix-dfw-profile-id}'.sub('{' + 'ipfix-dfw-profile-id' + '}', ipfix_dfw_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfixdfw_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXDFWProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#create_or_replace_ipfixdfw_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace IPFIX collector profile
    # Create or Replace IPFIX collector profile. IPFIX data will be sent to IPFIX collector. 
    # @param ipfix_l2_collector_profile_id IPFIX collector profile id
    # @param ipfixl2_collector_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [IPFIXL2CollectorProfile]
    def create_or_replace_ipfixl2_collector_profile(ipfix_l2_collector_profile_id, ipfixl2_collector_profile, opts = {})
      data, _status_code, _headers = create_or_replace_ipfixl2_collector_profile_with_http_info(ipfix_l2_collector_profile_id, ipfixl2_collector_profile, opts)
      data
    end

    # Create or Replace IPFIX collector profile
    # Create or Replace IPFIX collector profile. IPFIX data will be sent to IPFIX collector. 
    # @param ipfix_l2_collector_profile_id IPFIX collector profile id
    # @param ipfixl2_collector_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(IPFIXL2CollectorProfile, Fixnum, Hash)>] IPFIXL2CollectorProfile data, response status code and response headers
    def create_or_replace_ipfixl2_collector_profile_with_http_info(ipfix_l2_collector_profile_id, ipfixl2_collector_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.create_or_replace_ipfixl2_collector_profile ...'
      end
      # verify the required parameter 'ipfix_l2_collector_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_l2_collector_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_l2_collector_profile_id' when calling MonitoringApi.create_or_replace_ipfixl2_collector_profile"
      end
      # verify the required parameter 'ipfixl2_collector_profile' is set
      if @api_client.config.client_side_validation && ipfixl2_collector_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipfixl2_collector_profile' when calling MonitoringApi.create_or_replace_ipfixl2_collector_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-l2-collector-profiles/{ipfix-l2-collector-profile-id}'.sub('{' + 'ipfix-l2-collector-profile-id' + '}', ipfix_l2_collector_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfixl2_collector_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXL2CollectorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#create_or_replace_ipfixl2_collector_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace IPFIX L2 profile
    # Create or replace IPFIX L2 Profile. Profile is reusable entity. Single profile can attached multiple bindings e.g group, segment and port. 
    # @param ipfix_l2_profile_id IPFIX L2 Profile ID
    # @param ipfixl2_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [IPFIXL2Profile]
    def create_or_replace_ipfixl2_profile(ipfix_l2_profile_id, ipfixl2_profile, opts = {})
      data, _status_code, _headers = create_or_replace_ipfixl2_profile_with_http_info(ipfix_l2_profile_id, ipfixl2_profile, opts)
      data
    end

    # Create or Replace IPFIX L2 profile
    # Create or replace IPFIX L2 Profile. Profile is reusable entity. Single profile can attached multiple bindings e.g group, segment and port. 
    # @param ipfix_l2_profile_id IPFIX L2 Profile ID
    # @param ipfixl2_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(IPFIXL2Profile, Fixnum, Hash)>] IPFIXL2Profile data, response status code and response headers
    def create_or_replace_ipfixl2_profile_with_http_info(ipfix_l2_profile_id, ipfixl2_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.create_or_replace_ipfixl2_profile ...'
      end
      # verify the required parameter 'ipfix_l2_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_l2_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_l2_profile_id' when calling MonitoringApi.create_or_replace_ipfixl2_profile"
      end
      # verify the required parameter 'ipfixl2_profile' is set
      if @api_client.config.client_side_validation && ipfixl2_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipfixl2_profile' when calling MonitoringApi.create_or_replace_ipfixl2_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-l2-profiles/{ipfix-l2-profile-id}'.sub('{' + 'ipfix-l2-profile-id' + '}', ipfix_l2_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfixl2_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXL2Profile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#create_or_replace_ipfixl2_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace latency profile
    # Create or Replace latency profile. 
    # @param profile_id Latency profile id
    # @param policy_latency_stat_profile 
    # @param [Hash] opts the optional parameters
    # @return [PolicyLatencyStatProfile]
    def create_or_replace_policy_latency_stat_profile(profile_id, policy_latency_stat_profile, opts = {})
      data, _status_code, _headers = create_or_replace_policy_latency_stat_profile_with_http_info(profile_id, policy_latency_stat_profile, opts)
      data
    end

    # Create or Replace latency profile
    # Create or Replace latency profile. 
    # @param profile_id Latency profile id
    # @param policy_latency_stat_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyLatencyStatProfile, Fixnum, Hash)>] PolicyLatencyStatProfile data, response status code and response headers
    def create_or_replace_policy_latency_stat_profile_with_http_info(profile_id, policy_latency_stat_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.create_or_replace_policy_latency_stat_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling MonitoringApi.create_or_replace_policy_latency_stat_profile"
      end
      # verify the required parameter 'policy_latency_stat_profile' is set
      if @api_client.config.client_side_validation && policy_latency_stat_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_latency_stat_profile' when calling MonitoringApi.create_or_replace_policy_latency_stat_profile"
      end
      # resource path
      local_var_path = '/infra/latency-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_latency_stat_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyLatencyStatProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#create_or_replace_policy_latency_stat_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace Port Mirroring Instance.
    # Create or Replace port mirroring instance. Packets will be mirrored from source group to destination group. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param port_mirroring_instance 
    # @param [Hash] opts the optional parameters
    # @return [PortMirroringInstance]
    def create_or_replace_port_mirroring_instance(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts = {})
      data, _status_code, _headers = create_or_replace_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts)
      data
    end

    # Create or Replace Port Mirroring Instance.
    # Create or Replace port mirroring instance. Packets will be mirrored from source group to destination group. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param port_mirroring_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortMirroringInstance, Fixnum, Hash)>] PortMirroringInstance data, response status code and response headers
    def create_or_replace_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.create_or_replace_port_mirroring_instance ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling MonitoringApi.create_or_replace_port_mirroring_instance"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling MonitoringApi.create_or_replace_port_mirroring_instance"
      end
      # verify the required parameter 'port_mirroring_instance_id' is set
      if @api_client.config.client_side_validation && port_mirroring_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance_id' when calling MonitoringApi.create_or_replace_port_mirroring_instance"
      end
      # verify the required parameter 'port_mirroring_instance' is set
      if @api_client.config.client_side_validation && port_mirroring_instance.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance' when calling MonitoringApi.create_or_replace_port_mirroring_instance"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'port-mirroring-instance-id' + '}', port_mirroring_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_mirroring_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#create_or_replace_port_mirroring_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace Port Mirroring Profile.
    # Create or Replace port mirroring profile. Packets will be mirrored from source group, segment, port to destination group. Realized entities of this API can be found using the path of monitoring profile binding map that is used to apply this profile. 
    # @param port_mirroring_profile_id Port Mirroring Profiles Id
    # @param port_mirroring_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [PortMirroringProfile]
    def create_or_replace_port_mirroring_profile(port_mirroring_profile_id, port_mirroring_profile, opts = {})
      data, _status_code, _headers = create_or_replace_port_mirroring_profile_with_http_info(port_mirroring_profile_id, port_mirroring_profile, opts)
      data
    end

    # Create or Replace Port Mirroring Profile.
    # Create or Replace port mirroring profile. Packets will be mirrored from source group, segment, port to destination group. Realized entities of this API can be found using the path of monitoring profile binding map that is used to apply this profile. 
    # @param port_mirroring_profile_id Port Mirroring Profiles Id
    # @param port_mirroring_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(PortMirroringProfile, Fixnum, Hash)>] PortMirroringProfile data, response status code and response headers
    def create_or_replace_port_mirroring_profile_with_http_info(port_mirroring_profile_id, port_mirroring_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.create_or_replace_port_mirroring_profile ...'
      end
      # verify the required parameter 'port_mirroring_profile_id' is set
      if @api_client.config.client_side_validation && port_mirroring_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_profile_id' when calling MonitoringApi.create_or_replace_port_mirroring_profile"
      end
      # verify the required parameter 'port_mirroring_profile' is set
      if @api_client.config.client_side_validation && port_mirroring_profile.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_profile' when calling MonitoringApi.create_or_replace_port_mirroring_profile"
      end
      # resource path
      local_var_path = '/infra/port-mirroring-profiles/{port-mirroring-profile-id}'.sub('{' + 'port-mirroring-profile-id' + '}', port_mirroring_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_mirroring_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#create_or_replace_port_mirroring_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Sha dynamic plugin
    # Create Sha dynamic plugin. 
    # @param plugin_id Sha plugin id
    # @param sha_dynamic_plugin 
    # @param [Hash] opts the optional parameters
    # @return [ShaDynamicPlugin]
    def create_or_replace_sha_dynamic_plugin(plugin_id, sha_dynamic_plugin, opts = {})
      data, _status_code, _headers = create_or_replace_sha_dynamic_plugin_with_http_info(plugin_id, sha_dynamic_plugin, opts)
      data
    end

    # Create Sha dynamic plugin
    # Create Sha dynamic plugin. 
    # @param plugin_id Sha plugin id
    # @param sha_dynamic_plugin 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaDynamicPlugin, Fixnum, Hash)>] ShaDynamicPlugin data, response status code and response headers
    def create_or_replace_sha_dynamic_plugin_with_http_info(plugin_id, sha_dynamic_plugin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.create_or_replace_sha_dynamic_plugin ...'
      end
      # verify the required parameter 'plugin_id' is set
      if @api_client.config.client_side_validation && plugin_id.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_id' when calling MonitoringApi.create_or_replace_sha_dynamic_plugin"
      end
      # verify the required parameter 'sha_dynamic_plugin' is set
      if @api_client.config.client_side_validation && sha_dynamic_plugin.nil?
        fail ArgumentError, "Missing the required parameter 'sha_dynamic_plugin' when calling MonitoringApi.create_or_replace_sha_dynamic_plugin"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-plugins/{plugin-id}'.sub('{' + 'plugin-id' + '}', plugin_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sha_dynamic_plugin)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaDynamicPlugin')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#create_or_replace_sha_dynamic_plugin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace Sha profile
    # Create or Replace Sha profile. 
    # @param sha_profile_id Sha profile id
    # @param sha_plugin_profile 
    # @param [Hash] opts the optional parameters
    # @return [ShaPluginProfile]
    def create_or_replace_sha_plugin_profile(sha_profile_id, sha_plugin_profile, opts = {})
      data, _status_code, _headers = create_or_replace_sha_plugin_profile_with_http_info(sha_profile_id, sha_plugin_profile, opts)
      data
    end

    # Create or Replace Sha profile
    # Create or Replace Sha profile. 
    # @param sha_profile_id Sha profile id
    # @param sha_plugin_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaPluginProfile, Fixnum, Hash)>] ShaPluginProfile data, response status code and response headers
    def create_or_replace_sha_plugin_profile_with_http_info(sha_profile_id, sha_plugin_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.create_or_replace_sha_plugin_profile ...'
      end
      # verify the required parameter 'sha_profile_id' is set
      if @api_client.config.client_side_validation && sha_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'sha_profile_id' when calling MonitoringApi.create_or_replace_sha_plugin_profile"
      end
      # verify the required parameter 'sha_plugin_profile' is set
      if @api_client.config.client_side_validation && sha_plugin_profile.nil?
        fail ArgumentError, "Missing the required parameter 'sha_plugin_profile' when calling MonitoringApi.create_or_replace_sha_plugin_profile"
      end
      # resource path
      local_var_path = '/infra/sha/plugin-profiles/{sha-profile-id}'.sub('{' + 'sha-profile-id' + '}', sha_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sha_plugin_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaPluginProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#create_or_replace_sha_plugin_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an new packet capture session
    # Create an new packet capture session on given node with specified options 
    # @param pkt_capture_request 
    # @param [Hash] opts the optional parameters
    # @return [PktCaptureSession]
    def create_pkt_capture_session(pkt_capture_request, opts = {})
      data, _status_code, _headers = create_pkt_capture_session_with_http_info(pkt_capture_request, opts)
      data
    end

    # Create an new packet capture session
    # Create an new packet capture session on given node with specified options 
    # @param pkt_capture_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PktCaptureSession, Fixnum, Hash)>] PktCaptureSession data, response status code and response headers
    def create_pkt_capture_session_with_http_info(pkt_capture_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.create_pkt_capture_session ...'
      end
      # verify the required parameter 'pkt_capture_request' is set
      if @api_client.config.client_side_validation && pkt_capture_request.nil?
        fail ArgumentError, "Missing the required parameter 'pkt_capture_request' when calling MonitoringApi.create_pkt_capture_session"
      end
      # resource path
      local_var_path = '/infra/pktcap/session'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pkt_capture_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PktCaptureSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#create_pkt_capture_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new View.
    # Creates a new View. <br> This API is deprecated and will be unavailable in later releases.
    # @param view 
    # @param [Hash] opts the optional parameters
    # @return [View]
    def create_view(view, opts = {})
      data, _status_code, _headers = create_view_with_http_info(view, opts)
      data
    end

    # Creates a new View.
    # Creates a new View. &lt;br&gt; This API is deprecated and will be unavailable in later releases.
    # @param view 
    # @param [Hash] opts the optional parameters
    # @return [Array<(View, Fixnum, Hash)>] View data, response status code and response headers
    def create_view_with_http_info(view, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.create_view ...'
      end
      # verify the required parameter 'view' is set
      if @api_client.config.client_side_validation && view.nil?
        fail ArgumentError, "Missing the required parameter 'view' when calling MonitoringApi.create_view"
      end
      # resource path
      local_var_path = '/ui-views'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(view)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'View')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#create_view\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new Widget Configuration.
    # Creates a new Widget Configuration and adds it to the specified view. Supported resource_types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration and ContainerConfiguration.  Note: Expressions should be given in a single line. If an expression spans   multiple lines, then form the expression in a single line. For label-value pairs, expressions are evaluated as follows:   a. First, render configurations are evaluated in their order of      appearance in the widget config. The 'field' is evaluated at the end.   b. Second, when render configuration is provided then the order of      evaluation is      1. If expressions provided in 'condition' and 'display value' are         well-formed and free of runtime-errors such as 'null pointers' and         evaluates to 'true'; Then remaining render configurations are not         evaluated, and the current render configuration's 'display value'         is taken as the final value.      2. If expression provided in 'condition' of render configuration is         false, then next render configuration is evaluated.      3. Finally, 'field' is evaluated only when every render configuration         evaluates to false and no error occurs during steps 1 and 2 above.  If an error occurs during evaluation of render configuration, then an   error message is shown. The display value corresponding to that label is   not shown and evaluation of the remaining render configurations continues   to collect and show all the error messages (marked with the 'Label' for   identification) as 'Error_Messages: {}'.  If during evaluation of expressions for any label-value pair an error   occurs, then it is marked with error. The errors are shown in the report,   along with the label value pairs that are error-free.  Important: For elements that take expressions, strings should be provided   by escaping them with a back-slash. These elements are - condition, field,   tooltip text and render_configuration's display_value.  <br> This API is deprecated and will be unavailable in later releases.
    # @param view_id 
    # @param widget_configuration 
    # @param [Hash] opts the optional parameters
    # @return [WidgetConfiguration]
    def create_widget_configuration(view_id, widget_configuration, opts = {})
      data, _status_code, _headers = create_widget_configuration_with_http_info(view_id, widget_configuration, opts)
      data
    end

    # Creates a new Widget Configuration.
    # Creates a new Widget Configuration and adds it to the specified view. Supported resource_types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration and ContainerConfiguration.  Note: Expressions should be given in a single line. If an expression spans   multiple lines, then form the expression in a single line. For label-value pairs, expressions are evaluated as follows:   a. First, render configurations are evaluated in their order of      appearance in the widget config. The &#39;field&#39; is evaluated at the end.   b. Second, when render configuration is provided then the order of      evaluation is      1. If expressions provided in &#39;condition&#39; and &#39;display value&#39; are         well-formed and free of runtime-errors such as &#39;null pointers&#39; and         evaluates to &#39;true&#39;; Then remaining render configurations are not         evaluated, and the current render configuration&#39;s &#39;display value&#39;         is taken as the final value.      2. If expression provided in &#39;condition&#39; of render configuration is         false, then next render configuration is evaluated.      3. Finally, &#39;field&#39; is evaluated only when every render configuration         evaluates to false and no error occurs during steps 1 and 2 above.  If an error occurs during evaluation of render configuration, then an   error message is shown. The display value corresponding to that label is   not shown and evaluation of the remaining render configurations continues   to collect and show all the error messages (marked with the &#39;Label&#39; for   identification) as &#39;Error_Messages: {}&#39;.  If during evaluation of expressions for any label-value pair an error   occurs, then it is marked with error. The errors are shown in the report,   along with the label value pairs that are error-free.  Important: For elements that take expressions, strings should be provided   by escaping them with a back-slash. These elements are - condition, field,   tooltip text and render_configuration&#39;s display_value.  &lt;br&gt; This API is deprecated and will be unavailable in later releases.
    # @param view_id 
    # @param widget_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WidgetConfiguration, Fixnum, Hash)>] WidgetConfiguration data, response status code and response headers
    def create_widget_configuration_with_http_info(view_id, widget_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.create_widget_configuration ...'
      end
      # verify the required parameter 'view_id' is set
      if @api_client.config.client_side_validation && view_id.nil?
        fail ArgumentError, "Missing the required parameter 'view_id' when calling MonitoringApi.create_widget_configuration"
      end
      # verify the required parameter 'widget_configuration' is set
      if @api_client.config.client_side_validation && widget_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'widget_configuration' when calling MonitoringApi.create_widget_configuration"
      end
      # resource path
      local_var_path = '/ui-views/{view-id}/widgetconfigurations'.sub('{' + 'view-id' + '}', view_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(widget_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WidgetConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#create_widget_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete View
    # Delete View <br> This API is deprecated and will be unavailable in later releases.
    # @param view_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delet_view(view_id, opts = {})
      delet_view_with_http_info(view_id, opts)
      nil
    end

    # Delete View
    # Delete View &lt;br&gt; This API is deprecated and will be unavailable in later releases.
    # @param view_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delet_view_with_http_info(view_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delet_view ...'
      end
      # verify the required parameter 'view_id' is set
      if @api_client.config.client_side_validation && view_id.nil?
        fail ArgumentError, "Missing the required parameter 'view_id' when calling MonitoringApi.delet_view"
      end
      # resource path
      local_var_path = '/ui-views/{view-id}'.sub('{' + 'view-id' + '}', view_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delet_view\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete all the packet capture sessions
    # Delete all the packet capture sessions. 
    # @param [Hash] opts the optional parameters
    # @return [PktCaptureSessionList]
    def delete_all_pkt_capture_sessions(opts = {})
      data, _status_code, _headers = delete_all_pkt_capture_sessions_with_http_info(opts)
      data
    end

    # Delete all the packet capture sessions
    # Delete all the packet capture sessions. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PktCaptureSessionList, Fixnum, Hash)>] PktCaptureSessionList data, response status code and response headers
    def delete_all_pkt_capture_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_all_pkt_capture_sessions ...'
      end
      # resource path
      local_var_path = '/infra/pktcap/sessions'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PktCaptureSessionList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_all_pkt_capture_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Antrea traceflow config
    # Delete Antrea traceflow config with id traceflow-id
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_antrea_traceflow_config(traceflow_id, opts = {})
      delete_antrea_traceflow_config_with_http_info(traceflow_id, opts)
      nil
    end

    # Delete Antrea traceflow config
    # Delete Antrea traceflow config with id traceflow-id
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_antrea_traceflow_config_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_antrea_traceflow_config ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.delete_antrea_traceflow_config"
      end
      # resource path
      local_var_path = '/infra/antrea/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_antrea_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete container cluster status
    # Delete container cluster status
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param cluster_id ID of container cluster
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_container_cluster_status(site_id, enforcement_point_id, cluster_id, opts = {})
      delete_container_cluster_status_with_http_info(site_id, enforcement_point_id, cluster_id, opts)
      nil
    end

    # Delete container cluster status
    # Delete container cluster status
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param cluster_id ID of container cluster
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_container_cluster_status_with_http_info(site_id, enforcement_point_id, cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_container_cluster_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.delete_container_cluster_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.delete_container_cluster_status"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling MonitoringApi.delete_container_cluster_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/container-cluster/{cluster-id}/ncpstatus'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_container_cluster_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPFIX dfw Collector profile
    # API deletes IPFIX dfw collector profile. Flow forwarding to collector will be stopped. 
    # @param ipfix_dfw_collector_profile_id IPFIX dfw collector Profile id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_ipfixdfw_collector_profile(ipfix_dfw_collector_profile_id, opts = {})
      delete_ipfixdfw_collector_profile_with_http_info(ipfix_dfw_collector_profile_id, opts)
      nil
    end

    # Delete IPFIX dfw Collector profile
    # API deletes IPFIX dfw collector profile. Flow forwarding to collector will be stopped. 
    # @param ipfix_dfw_collector_profile_id IPFIX dfw collector Profile id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ipfixdfw_collector_profile_with_http_info(ipfix_dfw_collector_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_ipfixdfw_collector_profile ...'
      end
      # verify the required parameter 'ipfix_dfw_collector_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_dfw_collector_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_dfw_collector_profile_id' when calling MonitoringApi.delete_ipfixdfw_collector_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-dfw-collector-profiles/{ipfix-dfw-collector-profile-id}'.sub('{' + 'ipfix-dfw-collector-profile-id' + '}', ipfix_dfw_collector_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_ipfixdfw_collector_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPFIX DFW Profile
    # API deletes IPFIX DFW Profile. Selected IPFIX Collectors will stop receiving flows. 
    # @param ipfix_dfw_profile_id IPFIX DFW Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_ipfixdfw_profile(ipfix_dfw_profile_id, opts = {})
      delete_ipfixdfw_profile_with_http_info(ipfix_dfw_profile_id, opts)
      nil
    end

    # Delete IPFIX DFW Profile
    # API deletes IPFIX DFW Profile. Selected IPFIX Collectors will stop receiving flows. 
    # @param ipfix_dfw_profile_id IPFIX DFW Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ipfixdfw_profile_with_http_info(ipfix_dfw_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_ipfixdfw_profile ...'
      end
      # verify the required parameter 'ipfix_dfw_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_dfw_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_dfw_profile_id' when calling MonitoringApi.delete_ipfixdfw_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-dfw-profiles/{ipfix-dfw-profile-id}'.sub('{' + 'ipfix-dfw-profile-id' + '}', ipfix_dfw_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_ipfixdfw_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPFIX Collector profile
    # API deletes IPFIX collector profile. Flow forwarding to collector will be stopped. 
    # @param ipfix_l2_collector_profile_id IPFIX collector Profile id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_ipfixl2_collector_profile(ipfix_l2_collector_profile_id, opts = {})
      delete_ipfixl2_collector_profile_with_http_info(ipfix_l2_collector_profile_id, opts)
      nil
    end

    # Delete IPFIX Collector profile
    # API deletes IPFIX collector profile. Flow forwarding to collector will be stopped. 
    # @param ipfix_l2_collector_profile_id IPFIX collector Profile id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ipfixl2_collector_profile_with_http_info(ipfix_l2_collector_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_ipfixl2_collector_profile ...'
      end
      # verify the required parameter 'ipfix_l2_collector_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_l2_collector_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_l2_collector_profile_id' when calling MonitoringApi.delete_ipfixl2_collector_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-l2-collector-profiles/{ipfix-l2-collector-profile-id}'.sub('{' + 'ipfix-l2-collector-profile-id' + '}', ipfix_l2_collector_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_ipfixl2_collector_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete IPFIX L2 Profile
    # API deletes IPFIX L2 Profile. Flow forwarding to selected collector will be stopped. 
    # @param ipfix_l2_profile_id IPFIX L2 Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_ipfixl2_profile(ipfix_l2_profile_id, opts = {})
      delete_ipfixl2_profile_with_http_info(ipfix_l2_profile_id, opts)
      nil
    end

    # Delete IPFIX L2 Profile
    # API deletes IPFIX L2 Profile. Flow forwarding to selected collector will be stopped. 
    # @param ipfix_l2_profile_id IPFIX L2 Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ipfixl2_profile_with_http_info(ipfix_l2_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_ipfixl2_profile ...'
      end
      # verify the required parameter 'ipfix_l2_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_l2_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_l2_profile_id' when calling MonitoringApi.delete_ipfixl2_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-l2-profiles/{ipfix-l2-profile-id}'.sub('{' + 'ipfix-l2-profile-id' + '}', ipfix_l2_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_ipfixl2_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a livetrace config
    # Delete livetrace config with the specified identifier. 
    # @param livetrace_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_live_trace_config(livetrace_id, opts = {})
      delete_live_trace_config_with_http_info(livetrace_id, opts)
      nil
    end

    # Delete a livetrace config
    # Delete livetrace config with the specified identifier. 
    # @param livetrace_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_live_trace_config_with_http_info(livetrace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_live_trace_config ...'
      end
      # verify the required parameter 'livetrace_id' is set
      if @api_client.config.client_side_validation && livetrace_id.nil?
        fail ArgumentError, "Missing the required parameter 'livetrace_id' when calling MonitoringApi.delete_live_trace_config"
      end
      # resource path
      local_var_path = '/infra/livetraces/{livetrace-id}'.sub('{' + 'livetrace-id' + '}', livetrace_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_live_trace_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an existing manual health check
    # Delete an existing manual health check by ID.
    # @param manual_health_check_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_manual_health_check_config(manual_health_check_id, opts = {})
      delete_manual_health_check_config_with_http_info(manual_health_check_id, opts)
      nil
    end

    # Delete an existing manual health check
    # Delete an existing manual health check by ID.
    # @param manual_health_check_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_manual_health_check_config_with_http_info(manual_health_check_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_manual_health_check_config ...'
      end
      # verify the required parameter 'manual_health_check_id' is set
      if @api_client.config.client_side_validation && manual_health_check_id.nil?
        fail ArgumentError, "Missing the required parameter 'manual_health_check_id' when calling MonitoringApi.delete_manual_health_check_config"
      end
      # resource path
      local_var_path = '/infra/manual-health-checks/{manual-health-check-id}'.sub('{' + 'manual-health-check-id' + '}', manual_health_check_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_manual_health_check_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the Dynamic Runbook Instance
    # Delete the Dynamic Runbook Instance
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ods_dynamic_runbook_instance(instance_id, opts = {})
      delete_ods_dynamic_runbook_instance_with_http_info(instance_id, opts)
      nil
    end

    # Delete the Dynamic Runbook Instance
    # Delete the Dynamic Runbook Instance
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ods_dynamic_runbook_instance_with_http_info(instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_ods_dynamic_runbook_instance ...'
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling MonitoringApi.delete_ods_dynamic_runbook_instance"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-runbook-instances/{instance-id}'.sub('{' + 'instance-id' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_ods_dynamic_runbook_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a runbook invocation artifact batch request
    # Delete an Online Diagnostic System Runbook invocation batch request. 
    # @param request_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ods_invocation_artifact_in_batch_status(request_id, opts = {})
      delete_ods_invocation_artifact_in_batch_status_with_http_info(request_id, opts)
      nil
    end

    # Delete a runbook invocation artifact batch request
    # Delete an Online Diagnostic System Runbook invocation batch request. 
    # @param request_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ods_invocation_artifact_in_batch_status_with_http_info(request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_ods_invocation_artifact_in_batch_status ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling MonitoringApi.delete_ods_invocation_artifact_in_batch_status"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-artifacts/{request-id}'.sub('{' + 'request-id' + '}', request_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_ods_invocation_artifact_in_batch_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a runbook invocation
    # Delete an Online Diagnostic System Runbook invocation with the specified identifier. 
    # @param invocation_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ods_runbook_invocation(invocation_id, opts = {})
      delete_ods_runbook_invocation_with_http_info(invocation_id, opts)
      nil
    end

    # Delete a runbook invocation
    # Delete an Online Diagnostic System Runbook invocation with the specified identifier. 
    # @param invocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ods_runbook_invocation_with_http_info(invocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_ods_runbook_invocation ...'
      end
      # verify the required parameter 'invocation_id' is set
      if @api_client.config.client_side_validation && invocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invocation_id' when calling MonitoringApi.delete_ods_runbook_invocation"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-invocations/{invocation-id}'.sub('{' + 'invocation-id' + '}', invocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_ods_runbook_invocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a runbook setting
    # Delete an Online Diagnostic System Runbook setting with the specified identifier. 
    # @param runbook_setting_id Identifier of a runbook setting
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ods_runbook_setting(runbook_setting_id, opts = {})
      delete_ods_runbook_setting_with_http_info(runbook_setting_id, opts)
      nil
    end

    # Delete a runbook setting
    # Delete an Online Diagnostic System Runbook setting with the specified identifier. 
    # @param runbook_setting_id Identifier of a runbook setting
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ods_runbook_setting_with_http_info(runbook_setting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_ods_runbook_setting ...'
      end
      # verify the required parameter 'runbook_setting_id' is set
      if @api_client.config.client_side_validation && runbook_setting_id.nil?
        fail ArgumentError, "Missing the required parameter 'runbook_setting_id' when calling MonitoringApi.delete_ods_runbook_setting"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-settings/{runbook-setting-id}'.sub('{' + 'runbook-setting-id' + '}', runbook_setting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_ods_runbook_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the packet capture session by session id.
    # Before calling this method, terminate any running capture session. 
    # @param session_id Packet capture session id
    # @param [Hash] opts the optional parameters
    # @return [PktCaptureSession]
    def delete_pkt_capture_session(session_id, opts = {})
      data, _status_code, _headers = delete_pkt_capture_session_with_http_info(session_id, opts)
      data
    end

    # Delete the packet capture session by session id.
    # Before calling this method, terminate any running capture session. 
    # @param session_id Packet capture session id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PktCaptureSession, Fixnum, Hash)>] PktCaptureSession data, response status code and response headers
    def delete_pkt_capture_session_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_pkt_capture_session ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling MonitoringApi.delete_pkt_capture_session"
      end
      # resource path
      local_var_path = '/infra/pktcap/session/{session-id}'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PktCaptureSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_pkt_capture_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete latency profile
    # Delete an existing latency profile
    # @param profile_id Latency profile id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_latency_stat_profile(profile_id, opts = {})
      delete_policy_latency_stat_profile_with_http_info(profile_id, opts)
      nil
    end

    # Delete latency profile
    # Delete an existing latency profile
    # @param profile_id Latency profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_latency_stat_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_policy_latency_stat_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling MonitoringApi.delete_policy_latency_stat_profile"
      end
      # resource path
      local_var_path = '/infra/latency-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_policy_latency_stat_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Port Mirroring Instance
    # API will delete port mirroring instance. Mirroring from source to destination ports will be stopped. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_port_mirroring_instance(domain_id, group_id, port_mirroring_instance_id, opts = {})
      delete_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, opts)
      nil
    end

    # Delete Port Mirroring Instance
    # API will delete port mirroring instance. Mirroring from source to destination ports will be stopped. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_port_mirroring_instance ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling MonitoringApi.delete_port_mirroring_instance"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling MonitoringApi.delete_port_mirroring_instance"
      end
      # verify the required parameter 'port_mirroring_instance_id' is set
      if @api_client.config.client_side_validation && port_mirroring_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance_id' when calling MonitoringApi.delete_port_mirroring_instance"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'port-mirroring-instance-id' + '}', port_mirroring_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_port_mirroring_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Port Mirroring Profile
    # API will delete port mirroring profile. Mirroring from source to destination ports will be stopped. 
    # @param port_mirroring_profile_id Port Mirroring Profile Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def delete_port_mirroring_profile(port_mirroring_profile_id, opts = {})
      delete_port_mirroring_profile_with_http_info(port_mirroring_profile_id, opts)
      nil
    end

    # Delete Port Mirroring Profile
    # API will delete port mirroring profile. Mirroring from source to destination ports will be stopped. 
    # @param port_mirroring_profile_id Port Mirroring Profile Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_port_mirroring_profile_with_http_info(port_mirroring_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_port_mirroring_profile ...'
      end
      # verify the required parameter 'port_mirroring_profile_id' is set
      if @api_client.config.client_side_validation && port_mirroring_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_profile_id' when calling MonitoringApi.delete_port_mirroring_profile"
      end
      # resource path
      local_var_path = '/infra/port-mirroring-profiles/{port-mirroring-profile-id}'.sub('{' + 'port-mirroring-profile-id' + '}', port_mirroring_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_port_mirroring_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Sha dynamic plugin
    # Delete Sha dynamic plugin. 
    # @param plugin_id Plugin filename
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_sha_dynamic_plugin(plugin_id, opts = {})
      delete_sha_dynamic_plugin_with_http_info(plugin_id, opts)
      nil
    end

    # Delete Sha dynamic plugin
    # Delete Sha dynamic plugin. 
    # @param plugin_id Plugin filename
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_sha_dynamic_plugin_with_http_info(plugin_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_sha_dynamic_plugin ...'
      end
      # verify the required parameter 'plugin_id' is set
      if @api_client.config.client_side_validation && plugin_id.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_id' when calling MonitoringApi.delete_sha_dynamic_plugin"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-plugins/{plugin-id}'.sub('{' + 'plugin-id' + '}', plugin_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_sha_dynamic_plugin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a SHA monitor profile
    # Delete a SHA monitor profile. 
    # @param monitor_id 
    # @param monitor_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_sha_monitor_profile(monitor_id, monitor_profile_id, opts = {})
      delete_sha_monitor_profile_with_http_info(monitor_id, monitor_profile_id, opts)
      nil
    end

    # Delete a SHA monitor profile
    # Delete a SHA monitor profile. 
    # @param monitor_id 
    # @param monitor_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_sha_monitor_profile_with_http_info(monitor_id, monitor_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_sha_monitor_profile ...'
      end
      # verify the required parameter 'monitor_id' is set
      if @api_client.config.client_side_validation && monitor_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_id' when calling MonitoringApi.delete_sha_monitor_profile"
      end
      # verify the required parameter 'monitor_profile_id' is set
      if @api_client.config.client_side_validation && monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_profile_id' when calling MonitoringApi.delete_sha_monitor_profile"
      end
      # resource path
      local_var_path = '/infra/sha/monitors/{monitor-id}/profiles/{monitor-profile-id}'.sub('{' + 'monitor-id' + '}', monitor_id.to_s).sub('{' + 'monitor-profile-id' + '}', monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_sha_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete SHA profile
    # Delete Sha profile. 
    # @param sha_profile_id Sha profile id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_sha_plugin_profile(sha_profile_id, opts = {})
      delete_sha_plugin_profile_with_http_info(sha_profile_id, opts)
      nil
    end

    # Delete SHA profile
    # Delete Sha profile. 
    # @param sha_profile_id Sha profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_sha_plugin_profile_with_http_info(sha_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_sha_plugin_profile ...'
      end
      # verify the required parameter 'sha_profile_id' is set
      if @api_client.config.client_side_validation && sha_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'sha_profile_id' when calling MonitoringApi.delete_sha_plugin_profile"
      end
      # resource path
      local_var_path = '/infra/sha/plugin-profiles/{sha-profile-id}'.sub('{' + 'sha-profile-id' + '}', sha_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_sha_plugin_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete traceflow config
    # Delete traceflow config with id traceflow-id
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_traceflow_config(traceflow_id, opts = {})
      delete_traceflow_config_with_http_info(traceflow_id, opts)
      nil
    end

    # Delete traceflow config
    # Delete traceflow config with id traceflow-id
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_traceflow_config_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_traceflow_config ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.delete_traceflow_config"
      end
      # resource path
      local_var_path = '/infra/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Widget Configuration
    # Detaches widget from a given view. If the widget is no longer part of any view, then it will be purged.  <br> This API is deprecated and will be unavailable in later releases.
    # @param view_id 
    # @param widgetconfiguration_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_widget_configuration(view_id, widgetconfiguration_id, opts = {})
      delete_widget_configuration_with_http_info(view_id, widgetconfiguration_id, opts)
      nil
    end

    # Delete Widget Configuration
    # Detaches widget from a given view. If the widget is no longer part of any view, then it will be purged.  &lt;br&gt; This API is deprecated and will be unavailable in later releases.
    # @param view_id 
    # @param widgetconfiguration_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_widget_configuration_with_http_info(view_id, widgetconfiguration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.delete_widget_configuration ...'
      end
      # verify the required parameter 'view_id' is set
      if @api_client.config.client_side_validation && view_id.nil?
        fail ArgumentError, "Missing the required parameter 'view_id' when calling MonitoringApi.delete_widget_configuration"
      end
      # verify the required parameter 'widgetconfiguration_id' is set
      if @api_client.config.client_side_validation && widgetconfiguration_id.nil?
        fail ArgumentError, "Missing the required parameter 'widgetconfiguration_id' when calling MonitoringApi.delete_widget_configuration"
      end
      # resource path
      local_var_path = '/ui-views/{view-id}/widgetconfigurations/{widgetconfiguration-id}'.sub('{' + 'view-id' + '}', view_id.to_s).sub('{' + 'widgetconfiguration-id' + '}', widgetconfiguration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#delete_widget_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the details of latency status for all appliances 
    # Get the details of latency status for all appliances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ApplianceLatencyListResult]
    def get_all_appliance_latency_data(opts = {})
      data, _status_code, _headers = get_all_appliance_latency_data_with_http_info(opts)
      data
    end

    # Get the details of latency status for all appliances 
    # Get the details of latency status for all appliances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ApplianceLatencyListResult, Fixnum, Hash)>] ApplianceLatencyListResult data, response status code and response headers
    def get_all_appliance_latency_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_all_appliance_latency_data ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.get_all_appliance_latency_data, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.get_all_appliance_latency_data, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/appliances/latency/status'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplianceLatencyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_all_appliance_latency_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get high-level summary of all transport nodes. The service layer does not support source = realtime or cached. 
    # Get high-level summary of all transport nodes. The service layer does not support source = realtime or cached. 
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_type Transport node type
    # @return [HeatMapTransportZoneStatus]
    def get_all_tns_status(site_id, enforcement_point_id, opts = {})
      data, _status_code, _headers = get_all_tns_status_with_http_info(site_id, enforcement_point_id, opts)
      data
    end

    # Get high-level summary of all transport nodes. The service layer does not support source &#x3D; realtime or cached. 
    # Get high-level summary of all transport nodes. The service layer does not support source &#x3D; realtime or cached. 
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_type Transport node type
    # @return [Array<(HeatMapTransportZoneStatus, Fixnum, Hash)>] HeatMapTransportZoneStatus data, response status code and response headers
    def get_all_tns_status_with_http_info(site_id, enforcement_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_all_tns_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.get_all_tns_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.get_all_tns_status"
      end
      if @api_client.config.client_side_validation && opts[:'node_type'] && !['HOST', 'EDGE'].include?(opts[:'node_type'])
        fail ArgumentError, 'invalid value for "node_type", must be one of HOST, EDGE'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/host-transport-nodes-aggstatus'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'node_type'] = opts[:'node_type'] if !opts[:'node_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HeatMapTransportZoneStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_all_tns_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get high-level summary of all transport zone status. The service layer does not support source = realtime or cached. 
    # Get high-level summary of all transport zone status. The service layer does not support source = realtime or cached. 
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @return [HeatMapTransportNodesAggregateStatus]
    def get_all_tz_status(site_id, enforcement_point_id, opts = {})
      data, _status_code, _headers = get_all_tz_status_with_http_info(site_id, enforcement_point_id, opts)
      data
    end

    # Get high-level summary of all transport zone status. The service layer does not support source &#x3D; realtime or cached. 
    # Get high-level summary of all transport zone status. The service layer does not support source &#x3D; realtime or cached. 
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(HeatMapTransportNodesAggregateStatus, Fixnum, Hash)>] HeatMapTransportNodesAggregateStatus data, response status code and response headers
    def get_all_tz_status_with_http_info(site_id, enforcement_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_all_tz_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.get_all_tz_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.get_all_tz_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/transport-zones-aggstatus'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HeatMapTransportNodesAggregateStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_all_tz_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the details of latency status in given appliance. 
    # Get the details of latency status in given appliance. 
    # @param appliance_id ID of appliance node
    # @param [Hash] opts the optional parameters
    # @return [ApplianceLatencyData]
    def get_appliance_latency_data(appliance_id, opts = {})
      data, _status_code, _headers = get_appliance_latency_data_with_http_info(appliance_id, opts)
      data
    end

    # Get the details of latency status in given appliance. 
    # Get the details of latency status in given appliance. 
    # @param appliance_id ID of appliance node
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceLatencyData, Fixnum, Hash)>] ApplianceLatencyData data, response status code and response headers
    def get_appliance_latency_data_with_http_info(appliance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_appliance_latency_data ...'
      end
      # verify the required parameter 'appliance_id' is set
      if @api_client.config.client_side_validation && appliance_id.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_id' when calling MonitoringApi.get_appliance_latency_data"
      end
      # resource path
      local_var_path = '/infra/sha/appliances/{appliance-id}/latency/status'.sub('{' + 'appliance-id' + '}', appliance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplianceLatencyData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_appliance_latency_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get automatic health check toggle
    # Get detailed info for automatic health check toggle.
    # @param [Hash] opts the optional parameters
    # @return [AutomaticHealthCheckToggle]
    def get_auto_health_check_toggle(opts = {})
      data, _status_code, _headers = get_auto_health_check_toggle_with_http_info(opts)
      data
    end

    # Get automatic health check toggle
    # Get detailed info for automatic health check toggle.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AutomaticHealthCheckToggle, Fixnum, Hash)>] AutomaticHealthCheckToggle data, response status code and response headers
    def get_auto_health_check_toggle_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_auto_health_check_toggle ...'
      end
      # resource path
      local_var_path = '/infra/auto-health-check-toggle'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AutomaticHealthCheckToggle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_auto_health_check_toggle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get automatic health checks
    # Get health check performed by system automatically for all transport zones or a specific transport zone. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :transport_zone_path Policy path of the transport zone.
    # @return [PolicyAutomaticHealthCheckListResult]
    def get_auto_health_checks(opts = {})
      data, _status_code, _headers = get_auto_health_checks_with_http_info(opts)
      data
    end

    # Get automatic health checks
    # Get health check performed by system automatically for all transport zones or a specific transport zone. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :transport_zone_path Policy path of the transport zone.
    # @return [Array<(PolicyAutomaticHealthCheckListResult, Fixnum, Hash)>] PolicyAutomaticHealthCheckListResult data, response status code and response headers
    def get_auto_health_checks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_auto_health_checks ...'
      end
      # resource path
      local_var_path = '/infra/auto-health-checks'

      # query parameters
      query_params = {}
      query_params[:'transport_zone_path'] = opts[:'transport_zone_path'] if !opts[:'transport_zone_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyAutomaticHealthCheckListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_auto_health_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get packet capture file
    # You must provide the request header \"Accept:application/octet-stream\" when calling this API. The capture file can only be found in MP which receives the capture request. 
    # @param session_id Packet capture session id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_captured_file(session_id, opts = {})
      get_captured_file_with_http_info(session_id, opts)
      nil
    end

    # Get packet capture file
    # You must provide the request header \&quot;Accept:application/octet-stream\&quot; when calling this API. The capture file can only be found in MP which receives the capture request. 
    # @param session_id Packet capture session id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_captured_file_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_captured_file ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling MonitoringApi.get_captured_file"
      end
      # resource path
      local_var_path = '/infra/pktcap/session/{session-id}/CapturedFile'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_captured_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the container cluster status by given id
    # Get the container cluster status by given id
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param cluster_id ID of container cluster
    # @param [Hash] opts the optional parameters
    # @return [ContainerClusterSummary]
    def get_container_cluster_status(site_id, enforcement_point_id, cluster_id, opts = {})
      data, _status_code, _headers = get_container_cluster_status_with_http_info(site_id, enforcement_point_id, cluster_id, opts)
      data
    end

    # Get the container cluster status by given id
    # Get the container cluster status by given id
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param cluster_id ID of container cluster
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContainerClusterSummary, Fixnum, Hash)>] ContainerClusterSummary data, response status code and response headers
    def get_container_cluster_status_with_http_info(site_id, enforcement_point_id, cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_container_cluster_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.get_container_cluster_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.get_container_cluster_status"
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling MonitoringApi.get_container_cluster_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/container-cluster/{cluster-id}/ncpstatus'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'cluster-id' + '}', cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerClusterSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_container_cluster_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all the container cluster status
    # Get all the container cluster status
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :status Container status type
    # @return [ContainerClusterStatusList]
    def get_container_cluster_status_list(site_id, enforcement_point_id, opts = {})
      data, _status_code, _headers = get_container_cluster_status_list_with_http_info(site_id, enforcement_point_id, opts)
      data
    end

    # Get all the container cluster status
    # Get all the container cluster status
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :status Container status type
    # @return [Array<(ContainerClusterStatusList, Fixnum, Hash)>] ContainerClusterStatusList data, response status code and response headers
    def get_container_cluster_status_list_with_http_info(site_id, enforcement_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_container_cluster_status_list ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.get_container_cluster_status_list"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.get_container_cluster_status_list"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.get_container_cluster_status_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.get_container_cluster_status_list, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'status'] && !['UNKNOWN', 'HEALTHY', 'DOWN', 'DEGRADED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UNKNOWN, HEALTHY, DOWN, DEGRADED'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/container-cluster-ncpstatus'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContainerClusterStatusList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_container_cluster_status_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetches metadata about the given error_id
    # Returns some metadata about the given error_id. This includes information of whether there is a resolver present for the given error_id and its associated user input data 
    # @param error_id 
    # @param [Hash] opts the optional parameters
    # @return [ErrorResolverInfo]
    def get_error_resolver_info(error_id, opts = {})
      data, _status_code, _headers = get_error_resolver_info_with_http_info(error_id, opts)
      data
    end

    # Fetches metadata about the given error_id
    # Returns some metadata about the given error_id. This includes information of whether there is a resolver present for the given error_id and its associated user input data 
    # @param error_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ErrorResolverInfo, Fixnum, Hash)>] ErrorResolverInfo data, response status code and response headers
    def get_error_resolver_info_with_http_info(error_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_error_resolver_info ...'
      end
      # verify the required parameter 'error_id' is set
      if @api_client.config.client_side_validation && error_id.nil?
        fail ArgumentError, "Missing the required parameter 'error_id' when calling MonitoringApi.get_error_resolver_info"
      end
      # resource path
      local_var_path = '/error-resolver/{error_id}'.sub('{' + 'error_id' + '}', error_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ErrorResolverInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_error_resolver_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get high-level summary of a transport zone
    # Get high-level summary of a transport zone
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [HeatMapTransportZoneStatus]
    def get_heatmap_tz_status(site_id, enforcement_point_id, zone_id, opts = {})
      data, _status_code, _headers = get_heatmap_tz_status_with_http_info(site_id, enforcement_point_id, zone_id, opts)
      data
    end

    # Get high-level summary of a transport zone
    # Get high-level summary of a transport zone
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(HeatMapTransportZoneStatus, Fixnum, Hash)>] HeatMapTransportZoneStatus data, response status code and response headers
    def get_heatmap_tz_status_with_http_info(site_id, enforcement_point_id, zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_heatmap_tz_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.get_heatmap_tz_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.get_heatmap_tz_status"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling MonitoringApi.get_heatmap_tz_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/transport-zones/{zone-id}/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'zone-id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HeatMapTransportZoneStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_heatmap_tz_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read status of a transport node
    # Read status of a transport node
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [TransportNodeStatus]
    def get_host_tn_status(site_id, enforcement_point_id, node_id, opts = {})
      data, _status_code, _headers = get_host_tn_status_with_http_info(site_id, enforcement_point_id, node_id, opts)
      data
    end

    # Read status of a transport node
    # Read status of a transport node
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(TransportNodeStatus, Fixnum, Hash)>] TransportNodeStatus data, response status code and response headers
    def get_host_tn_status_with_http_info(site_id, enforcement_point_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_host_tn_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.get_host_tn_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.get_host_tn_status"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling MonitoringApi.get_host_tn_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/host-transport-nodes/{node-id}/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_host_tn_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get forward packet capture file for the specified livetrace session
    # You must provide the request header \"Accept:application/octet-stream\" when calling this API. The capture file can only be found in MP which receives the capture request. 
    # @param livetrace_id Livetrace session ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_live_trace_forward_pkt_cap_file(livetrace_id, opts = {})
      get_live_trace_forward_pkt_cap_file_with_http_info(livetrace_id, opts)
      nil
    end

    # Get forward packet capture file for the specified livetrace session
    # You must provide the request header \&quot;Accept:application/octet-stream\&quot; when calling this API. The capture file can only be found in MP which receives the capture request. 
    # @param livetrace_id Livetrace session ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_live_trace_forward_pkt_cap_file_with_http_info(livetrace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_live_trace_forward_pkt_cap_file ...'
      end
      # verify the required parameter 'livetrace_id' is set
      if @api_client.config.client_side_validation && livetrace_id.nil?
        fail ArgumentError, "Missing the required parameter 'livetrace_id' when calling MonitoringApi.get_live_trace_forward_pkt_cap_file"
      end
      # resource path
      local_var_path = '/infra/livetraces/{livetrace-id}/forward/capturefile'.sub('{' + 'livetrace-id' + '}', livetrace_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_live_trace_forward_pkt_cap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get reverse packet capture file for the specified livetrace session
    # You must provide the request header \"Accept:application/octet-stream\" when calling this API. The capture file can only be found in MP which receives the capture request. 
    # @param livetrace_id Livetrace session ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_live_trace_reverse_pkt_cap_file(livetrace_id, opts = {})
      get_live_trace_reverse_pkt_cap_file_with_http_info(livetrace_id, opts)
      nil
    end

    # Get reverse packet capture file for the specified livetrace session
    # You must provide the request header \&quot;Accept:application/octet-stream\&quot; when calling this API. The capture file can only be found in MP which receives the capture request. 
    # @param livetrace_id Livetrace session ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_live_trace_reverse_pkt_cap_file_with_http_info(livetrace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_live_trace_reverse_pkt_cap_file ...'
      end
      # verify the required parameter 'livetrace_id' is set
      if @api_client.config.client_side_validation && livetrace_id.nil?
        fail ArgumentError, "Missing the required parameter 'livetrace_id' when calling MonitoringApi.get_live_trace_reverse_pkt_cap_file"
      end
      # resource path
      local_var_path = '/infra/livetraces/{livetrace-id}/reverse/capturefile'.sub('{' + 'livetrace-id' + '}', livetrace_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_live_trace_reverse_pkt_cap_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a manual health check config
    # Get manual health check config with the specified identifier. 
    # @param manual_health_check_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyManualHealthCheck]
    def get_manual_health_check_config(manual_health_check_id, opts = {})
      data, _status_code, _headers = get_manual_health_check_config_with_http_info(manual_health_check_id, opts)
      data
    end

    # Get a manual health check config
    # Get manual health check config with the specified identifier. 
    # @param manual_health_check_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyManualHealthCheck, Fixnum, Hash)>] PolicyManualHealthCheck data, response status code and response headers
    def get_manual_health_check_config_with_http_info(manual_health_check_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_manual_health_check_config ...'
      end
      # verify the required parameter 'manual_health_check_id' is set
      if @api_client.config.client_side_validation && manual_health_check_id.nil?
        fail ArgumentError, "Missing the required parameter 'manual_health_check_id' when calling MonitoringApi.get_manual_health_check_config"
      end
      # resource path
      local_var_path = '/infra/manual-health-checks/{manual-health-check-id}'.sub('{' + 'manual-health-check-id' + '}', manual_health_check_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyManualHealthCheck')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_manual_health_check_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get result for the specified manual health check ID
    # Get the manual health check result with the specified ID.
    # @param manual_health_check_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyManualHealthCheckResult]
    def get_manual_health_check_result(manual_health_check_id, opts = {})
      data, _status_code, _headers = get_manual_health_check_result_with_http_info(manual_health_check_id, opts)
      data
    end

    # Get result for the specified manual health check ID
    # Get the manual health check result with the specified ID.
    # @param manual_health_check_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyManualHealthCheckResult, Fixnum, Hash)>] PolicyManualHealthCheckResult data, response status code and response headers
    def get_manual_health_check_result_with_http_info(manual_health_check_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_manual_health_check_result ...'
      end
      # verify the required parameter 'manual_health_check_id' is set
      if @api_client.config.client_side_validation && manual_health_check_id.nil?
        fail ArgumentError, "Missing the required parameter 'manual_health_check_id' when calling MonitoringApi.get_manual_health_check_result"
      end
      # resource path
      local_var_path = '/infra/manual-health-checks/{manual-health-check-id}/result'.sub('{' + 'manual-health-check-id' + '}', manual_health_check_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyManualHealthCheckResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_manual_health_check_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get high-level summary of a transport node
    # Get high-level summary of a transport node
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status pNic/bond status
    # @return [PnicBondStatusListResult]
    def get_pnic_statuses_for_tn(site_id, enforcement_point_id, node_id, opts = {})
      data, _status_code, _headers = get_pnic_statuses_for_tn_with_http_info(site_id, enforcement_point_id, node_id, opts)
      data
    end

    # Get high-level summary of a transport node
    # Get high-level summary of a transport node
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status pNic/bond status
    # @return [Array<(PnicBondStatusListResult, Fixnum, Hash)>] PnicBondStatusListResult data, response status code and response headers
    def get_pnic_statuses_for_tn_with_http_info(site_id, enforcement_point_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_pnic_statuses_for_tn ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.get_pnic_statuses_for_tn"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.get_pnic_statuses_for_tn"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling MonitoringApi.get_pnic_statuses_for_tn"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UNKNOWN', 'UP', 'DOWN', 'DEGRADED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UNKNOWN, UP, DOWN, DEGRADED'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/host-transport-nodes/{node-id}/pnic-bond-status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PnicBondStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_pnic_statuses_for_tn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns capacity usage data for NSX objects
    # Returns capacity usage data for NSX objects
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category 
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :force  (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [CapacityUsageResponse]
    def get_policy_capacity_dashboard_usage(opts = {})
      data, _status_code, _headers = get_policy_capacity_dashboard_usage_with_http_info(opts)
      data
    end

    # Returns capacity usage data for NSX objects
    # Returns capacity usage data for NSX objects
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category 
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :force 
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(CapacityUsageResponse, Fixnum, Hash)>] CapacityUsageResponse data, response status code and response headers
    def get_policy_capacity_dashboard_usage_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_policy_capacity_dashboard_usage ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.get_policy_capacity_dashboard_usage, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.get_policy_capacity_dashboard_usage, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/capacity/dashboard/usage'

      # query parameters
      query_params = {}
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CapacityUsageResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_policy_capacity_dashboard_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns warning threshold(s) set for NSX Objects.
    # Returns warning threshold(s) set for NSX Objects.
    # @param [Hash] opts the optional parameters
    # @return [CapacityThresholdList]
    def get_policy_capacity_thresholds(opts = {})
      data, _status_code, _headers = get_policy_capacity_thresholds_with_http_info(opts)
      data
    end

    # Returns warning threshold(s) set for NSX Objects.
    # Returns warning threshold(s) set for NSX Objects.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CapacityThresholdList, Fixnum, Hash)>] CapacityThresholdList data, response status code and response headers
    def get_policy_capacity_thresholds_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_policy_capacity_thresholds ...'
      end
      # resource path
      local_var_path = '/infra/capacity/threshold'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CapacityThresholdList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_policy_capacity_thresholds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns capacity usage data for NSX objects
    # Returns capacity usage data for NSX objects <br> <br> This API is no longer been used by UI, please use below policy api instead. <br> GET https://&lt;nsx-mgr&gt;/policy/api/v1/infra/capacity/dashboard/usage <br>
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category 
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyCapacityUsageResponse]
    def get_policy_capacity_usage(opts = {})
      data, _status_code, _headers = get_policy_capacity_usage_with_http_info(opts)
      data
    end

    # Returns capacity usage data for NSX objects
    # Returns capacity usage data for NSX objects &lt;br&gt; &lt;br&gt; This API is no longer been used by UI, please use below policy api instead. &lt;br&gt; GET https://&amp;lt;nsx-mgr&amp;gt;/policy/api/v1/infra/capacity/dashboard/usage &lt;br&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category 
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyCapacityUsageResponse, Fixnum, Hash)>] PolicyCapacityUsageResponse data, response status code and response headers
    def get_policy_capacity_usage_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_policy_capacity_usage ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.get_policy_capacity_usage, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.get_policy_capacity_usage, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/capacity/usage'

      # query parameters
      query_params = {}
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyCapacityUsageResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_policy_capacity_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the compliance status
    # Returns the compliance status and details of non compliant configuration
    # @param [Hash] opts the optional parameters
    # @return [PolicyComplianceStatus]
    def get_policy_compliance_status(opts = {})
      data, _status_code, _headers = get_policy_compliance_status_with_http_info(opts)
      data
    end

    # Returns the compliance status
    # Returns the compliance status and details of non compliant configuration
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyComplianceStatus, Fixnum, Hash)>] PolicyComplianceStatus data, response status code and response headers
    def get_policy_compliance_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_policy_compliance_status ...'
      end
      # resource path
      local_var_path = '/compliance/status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyComplianceStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_policy_compliance_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of process status for all appliances.
    # Get the list of process status for all appliances.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ApplianceProcessListResult]
    def get_process_data_for_all_appliance(opts = {})
      data, _status_code, _headers = get_process_data_for_all_appliance_with_http_info(opts)
      data
    end

    # Get the list of process status for all appliances.
    # Get the list of process status for all appliances.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ApplianceProcessListResult, Fixnum, Hash)>] ApplianceProcessListResult data, response status code and response headers
    def get_process_data_for_all_appliance_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_process_data_for_all_appliance ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.get_process_data_for_all_appliance, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.get_process_data_for_all_appliance, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/appliances/process/status'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplianceProcessListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_process_data_for_all_appliance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the details of process status in given appliance.
    # Get the details of process status in given appliance.
    # @param appliance_id ID of appliance node
    # @param [Hash] opts the optional parameters
    # @return [ApplianceProcessData]
    def get_process_data_for_appliance(appliance_id, opts = {})
      data, _status_code, _headers = get_process_data_for_appliance_with_http_info(appliance_id, opts)
      data
    end

    # Get the details of process status in given appliance.
    # Get the details of process status in given appliance.
    # @param appliance_id ID of appliance node
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceProcessData, Fixnum, Hash)>] ApplianceProcessData data, response status code and response headers
    def get_process_data_for_appliance_with_http_info(appliance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_process_data_for_appliance ...'
      end
      # verify the required parameter 'appliance_id' is set
      if @api_client.config.client_side_validation && appliance_id.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_id' when calling MonitoringApi.get_process_data_for_appliance"
      end
      # resource path
      local_var_path = '/infra/sha/appliances/{appliance-id}/process/status'.sub('{' + 'appliance-id' + '}', appliance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplianceProcessData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_process_data_for_appliance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the container status on given node
    # Get the container status on given node
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TnNodeAgentStatusListResult]
    def get_tn_container_agent_status(site_id, enforcement_point_id, node_id, opts = {})
      data, _status_code, _headers = get_tn_container_agent_status_with_http_info(site_id, enforcement_point_id, node_id, opts)
      data
    end

    # Get the container status on given node
    # Get the container status on given node
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TnNodeAgentStatusListResult, Fixnum, Hash)>] TnNodeAgentStatusListResult data, response status code and response headers
    def get_tn_container_agent_status_with_http_info(site_id, enforcement_point_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_tn_container_agent_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.get_tn_container_agent_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.get_tn_container_agent_status"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling MonitoringApi.get_tn_container_agent_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.get_tn_container_agent_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.get_tn_container_agent_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/host-transport-nodes/{node-id}/node-agent-status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TnNodeAgentStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_tn_container_agent_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the container hyperbus status on given node
    # Get the container hyperbus status on given node
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @return [TnHyperbusStatus]
    def get_tn_hyperbus_status(site_id, enforcement_point_id, node_id, opts = {})
      data, _status_code, _headers = get_tn_hyperbus_status_with_http_info(site_id, enforcement_point_id, node_id, opts)
      data
    end

    # Get the container hyperbus status on given node
    # Get the container hyperbus status on given node
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @return [Array<(TnHyperbusStatus, Fixnum, Hash)>] TnHyperbusStatus data, response status code and response headers
    def get_tn_hyperbus_status_with_http_info(site_id, enforcement_point_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_tn_hyperbus_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.get_tn_hyperbus_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.get_tn_hyperbus_status"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling MonitoringApi.get_tn_hyperbus_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/host-transport-nodes/{node-id}/hyperbus-status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TnHyperbusStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_tn_hyperbus_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a status json report of transport nodes of all the transport zones
    # Creates a status json report of transport nodes of all the transport zones
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [TransportNodeStatusReportListResult]
    def get_tn_json_report(site_id, enforcement_point_id, opts = {})
      data, _status_code, _headers = get_tn_json_report_with_http_info(site_id, enforcement_point_id, opts)
      data
    end

    # Creates a status json report of transport nodes of all the transport zones
    # Creates a status json report of transport nodes of all the transport zones
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [Array<(TransportNodeStatusReportListResult, Fixnum, Hash)>] TransportNodeStatusReportListResult data, response status code and response headers
    def get_tn_json_report_with_http_info(site_id, enforcement_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_tn_json_report ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.get_tn_json_report"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.get_tn_json_report"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN', 'DEGRADED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN, DEGRADED'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/transport-node-status-report-json'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatusReportListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_tn_json_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a status json report of transport nodes in a transport zone
    # Creates a status json report of transport nodes in a transport zone
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [TransportNodeStatusReportListResult]
    def get_tn_json_report_for_atz(site_id, enforcement_point_id, zone_id, opts = {})
      data, _status_code, _headers = get_tn_json_report_for_atz_with_http_info(site_id, enforcement_point_id, zone_id, opts)
      data
    end

    # Creates a status json report of transport nodes in a transport zone
    # Creates a status json report of transport nodes in a transport zone
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [Array<(TransportNodeStatusReportListResult, Fixnum, Hash)>] TransportNodeStatusReportListResult data, response status code and response headers
    def get_tn_json_report_for_atz_with_http_info(site_id, enforcement_point_id, zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_tn_json_report_for_atz ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.get_tn_json_report_for_atz"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.get_tn_json_report_for_atz"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling MonitoringApi.get_tn_json_report_for_atz"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN', 'DEGRADED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN, DEGRADED'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/transport-zones/{zone-id}/transport-node-status-report-json'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'zone-id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatusReportListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_tn_json_report_for_atz\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a status report of transport nodes of all the transport zones
    # You must provide the request header \"Accept:application/octet-stream\" when calling this API.
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [nil]
    def get_tn_report(site_id, enforcement_point_id, opts = {})
      get_tn_report_with_http_info(site_id, enforcement_point_id, opts)
      nil
    end

    # Creates a status report of transport nodes of all the transport zones
    # You must provide the request header \&quot;Accept:application/octet-stream\&quot; when calling this API.
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_tn_report_with_http_info(site_id, enforcement_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_tn_report ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.get_tn_report"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.get_tn_report"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN', 'DEGRADED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN, DEGRADED'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/transport-node-status-report'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_tn_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a status report of transport nodes in a transport zone
    # You must provide the request header \"Accept:application/octet-stream\" when calling this API.
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [nil]
    def get_tn_report_for_atz(site_id, enforcement_point_id, zone_id, opts = {})
      get_tn_report_for_atz_with_http_info(site_id, enforcement_point_id, zone_id, opts)
      nil
    end

    # Creates a status report of transport nodes in a transport zone
    # You must provide the request header \&quot;Accept:application/octet-stream\&quot; when calling this API.
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_tn_report_for_atz_with_http_info(site_id, enforcement_point_id, zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_tn_report_for_atz ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.get_tn_report_for_atz"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.get_tn_report_for_atz"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling MonitoringApi.get_tn_report_for_atz"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN', 'DEGRADED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN, DEGRADED'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/transport-zones/{zone-id}/transport-node-status-report'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'zone-id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_tn_report_for_atz\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tunnel properties
    # Tunnel properties
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param tunnel_name Tunnel name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [TunnelProperties]
    def get_tunnel_by_name(site_id, enforcement_point_id, node_id, tunnel_name, opts = {})
      data, _status_code, _headers = get_tunnel_by_name_with_http_info(site_id, enforcement_point_id, node_id, tunnel_name, opts)
      data
    end

    # Tunnel properties
    # Tunnel properties
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param tunnel_name Tunnel name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source Data source type.
    # @return [Array<(TunnelProperties, Fixnum, Hash)>] TunnelProperties data, response status code and response headers
    def get_tunnel_by_name_with_http_info(site_id, enforcement_point_id, node_id, tunnel_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_tunnel_by_name ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.get_tunnel_by_name"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.get_tunnel_by_name"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling MonitoringApi.get_tunnel_by_name"
      end
      # verify the required parameter 'tunnel_name' is set
      if @api_client.config.client_side_validation && tunnel_name.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel_name' when calling MonitoringApi.get_tunnel_by_name"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/host-transport-nodes/{node-id}/tunnels/{tunnel-name}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'node-id' + '}', node_id.to_s).sub('{' + 'tunnel-name' + '}', tunnel_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TunnelProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_tunnel_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of tunnels
    # List of tunnels
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bfd_diagnostic_code BFD diagnostic code of Tunnel as defined in RFC 5880
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :encap Tunnel encapsulation type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :remote_node_id 
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Tunnel status
    # @return [TunnelList]
    def get_tunnels(site_id, enforcement_point_id, node_id, opts = {})
      data, _status_code, _headers = get_tunnels_with_http_info(site_id, enforcement_point_id, node_id, opts)
      data
    end

    # List of tunnels
    # List of tunnels
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bfd_diagnostic_code BFD diagnostic code of Tunnel as defined in RFC 5880
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :encap Tunnel encapsulation type
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :remote_node_id 
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Tunnel status
    # @return [Array<(TunnelList, Fixnum, Hash)>] TunnelList data, response status code and response headers
    def get_tunnels_with_http_info(site_id, enforcement_point_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_tunnels ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.get_tunnels"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.get_tunnels"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling MonitoringApi.get_tunnels"
      end
      if @api_client.config.client_side_validation && opts[:'bfd_diagnostic_code'] && !['0', 'NO_DIAGNOSTIC', '1', 'CONTROL_DETECTION_TIME_EXPIRED', '2', 'ECHO_FUNCTION_FAILED', '3', 'NEIGHBOR_SIGNALED_SESSION_DOWN', '4', 'FORWARDING_PLANE_RESET', '5', 'PATH_DOWN', '6', 'CONCATENATED_PATH_DOWN', '7', 'ADMINISTRATIVELY_DOWN', '8', 'REVERSE_CONCATENATED_PATH_DOWN'].include?(opts[:'bfd_diagnostic_code'])
        fail ArgumentError, 'invalid value for "bfd_diagnostic_code", must be one of 0, NO_DIAGNOSTIC, 1, CONTROL_DETECTION_TIME_EXPIRED, 2, ECHO_FUNCTION_FAILED, 3, NEIGHBOR_SIGNALED_SESSION_DOWN, 4, FORWARDING_PLANE_RESET, 5, PATH_DOWN, 6, CONCATENATED_PATH_DOWN, 7, ADMINISTRATIVELY_DOWN, 8, REVERSE_CONCATENATED_PATH_DOWN'
      end
      if @api_client.config.client_side_validation && opts[:'encap'] && !['UNKNOWN_ENCAP', 'GENEVE', 'VXLAN'].include?(opts[:'encap'])
        fail ArgumentError, 'invalid value for "encap", must be one of UNKNOWN_ENCAP, GENEVE, VXLAN'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.get_tunnels, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.get_tunnels, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/host-transport-nodes/{node-id}/tunnels'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bfd_diagnostic_code'] = opts[:'bfd_diagnostic_code'] if !opts[:'bfd_diagnostic_code'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'encap'] = opts[:'encap'] if !opts[:'encap'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'remote_node_id'] = opts[:'remote_node_id'] if !opts[:'remote_node_id'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TunnelList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_tunnels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns View Information
    # Returns Information about a specific View.  <br> This API is deprecated and will be unavailable in later releases.
    # @param view_id 
    # @param [Hash] opts the optional parameters
    # @return [View]
    def get_view(view_id, opts = {})
      data, _status_code, _headers = get_view_with_http_info(view_id, opts)
      data
    end

    # Returns View Information
    # Returns Information about a specific View.  &lt;br&gt; This API is deprecated and will be unavailable in later releases.
    # @param view_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(View, Fixnum, Hash)>] View data, response status code and response headers
    def get_view_with_http_info(view_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_view ...'
      end
      # verify the required parameter 'view_id' is set
      if @api_client.config.client_side_validation && view_id.nil?
        fail ArgumentError, "Missing the required parameter 'view_id' when calling MonitoringApi.get_view"
      end
      # resource path
      local_var_path = '/ui-views/{view-id}'.sub('{' + 'view-id' + '}', view_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'View')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_view\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns Widget Configuration Information
    # Returns Information about a specific Widget Configuration.  <br> This API is deprecated and will be unavailable in later releases.
    # @param view_id 
    # @param widgetconfiguration_id 
    # @param [Hash] opts the optional parameters
    # @return [WidgetConfiguration]
    def get_widget_configuration(view_id, widgetconfiguration_id, opts = {})
      data, _status_code, _headers = get_widget_configuration_with_http_info(view_id, widgetconfiguration_id, opts)
      data
    end

    # Returns Widget Configuration Information
    # Returns Information about a specific Widget Configuration.  &lt;br&gt; This API is deprecated and will be unavailable in later releases.
    # @param view_id 
    # @param widgetconfiguration_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WidgetConfiguration, Fixnum, Hash)>] WidgetConfiguration data, response status code and response headers
    def get_widget_configuration_with_http_info(view_id, widgetconfiguration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.get_widget_configuration ...'
      end
      # verify the required parameter 'view_id' is set
      if @api_client.config.client_side_validation && view_id.nil?
        fail ArgumentError, "Missing the required parameter 'view_id' when calling MonitoringApi.get_widget_configuration"
      end
      # verify the required parameter 'widgetconfiguration_id' is set
      if @api_client.config.client_side_validation && widgetconfiguration_id.nil?
        fail ArgumentError, "Missing the required parameter 'widgetconfiguration_id' when calling MonitoringApi.get_widget_configuration"
      end
      # resource path
      local_var_path = '/ui-views/{view-id}/widgetconfigurations/{widgetconfiguration-id}'.sub('{' + 'view-id' + '}', view_id.to_s).sub('{' + 'widgetconfiguration-id' + '}', widgetconfiguration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WidgetConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#get_widget_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete traceflow config
    # Delete traceflow config with id traceflow-id
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_delete_traceflow_config(traceflow_id, opts = {})
      global_infra_delete_traceflow_config_with_http_info(traceflow_id, opts)
      nil
    end

    # Delete traceflow config
    # Delete traceflow config with id traceflow-id
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_traceflow_config_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.global_infra_delete_traceflow_config ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.global_infra_delete_traceflow_config"
      end
      # resource path
      local_var_path = '/global-infra/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#global_infra_delete_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # API will provide list of Sha Dynamic plugins.
    # API will provide list of Sha Dynamic plugins. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ShaDynamicPluginListResult]
    def global_infra_list_sha_dynamic_plugins(opts = {})
      data, _status_code, _headers = global_infra_list_sha_dynamic_plugins_with_http_info(opts)
      data
    end

    # API will provide list of Sha Dynamic plugins.
    # API will provide list of Sha Dynamic plugins. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ShaDynamicPluginListResult, Fixnum, Hash)>] ShaDynamicPluginListResult data, response status code and response headers
    def global_infra_list_sha_dynamic_plugins_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.global_infra_list_sha_dynamic_plugins ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.global_infra_list_sha_dynamic_plugins, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.global_infra_list_sha_dynamic_plugins, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/sha/dynamic-plugins'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaDynamicPluginListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#global_infra_list_sha_dynamic_plugins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # API will provide list of SHA profiles.
    # API will provide list of SHA profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :applied_to_group_path The path of the Policy group object
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :plugin_path String path of the Sha plugin
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ShaPluginProfileListResult]
    def global_infra_list_sha_plugin_profiles(opts = {})
      data, _status_code, _headers = global_infra_list_sha_plugin_profiles_with_http_info(opts)
      data
    end

    # API will provide list of SHA profiles.
    # API will provide list of SHA profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :applied_to_group_path The path of the Policy group object
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :plugin_path String path of the Sha plugin
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ShaPluginProfileListResult, Fixnum, Hash)>] ShaPluginProfileListResult data, response status code and response headers
    def global_infra_list_sha_plugin_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.global_infra_list_sha_plugin_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.global_infra_list_sha_plugin_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.global_infra_list_sha_plugin_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/sha/plugin-profiles'

      # query parameters
      query_params = {}
      query_params[:'applied_to_group_path'] = opts[:'applied_to_group_path'] if !opts[:'applied_to_group_path'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'plugin_path'] = opts[:'plugin_path'] if !opts[:'plugin_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaPluginProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#global_infra_list_sha_plugin_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # API will provide list of Sha pre-defined list.
    # API will provide list of Sha pre-defined plugins. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ShaPreDefinedPluginListResult]
    def global_infra_list_sha_predefined_plugins(opts = {})
      data, _status_code, _headers = global_infra_list_sha_predefined_plugins_with_http_info(opts)
      data
    end

    # API will provide list of Sha pre-defined list.
    # API will provide list of Sha pre-defined plugins. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ShaPreDefinedPluginListResult, Fixnum, Hash)>] ShaPreDefinedPluginListResult data, response status code and response headers
    def global_infra_list_sha_predefined_plugins_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.global_infra_list_sha_predefined_plugins ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.global_infra_list_sha_predefined_plugins, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.global_infra_list_sha_predefined_plugins, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/sha/pre-defined-plugins'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaPreDefinedPluginListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#global_infra_list_sha_predefined_plugins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List TraceflowConfig for infra
    # Paginated list of all TraceflowConfig for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TraceflowConfigListResult]
    def global_infra_list_traceflow_config(opts = {})
      data, _status_code, _headers = global_infra_list_traceflow_config_with_http_info(opts)
      data
    end

    # List TraceflowConfig for infra
    # Paginated list of all TraceflowConfig for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TraceflowConfigListResult, Fixnum, Hash)>] TraceflowConfigListResult data, response status code and response headers
    def global_infra_list_traceflow_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.global_infra_list_traceflow_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.global_infra_list_traceflow_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.global_infra_list_traceflow_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/traceflows'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#global_infra_list_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Sha dynamic plugin
    # Read Sha dynamic plugin. 
    # @param plugin_id Plugin filename
    # @param [Hash] opts the optional parameters
    # @return [ShaDynamicPlugin]
    def global_infra_read_sha_dynamic_plugin(plugin_id, opts = {})
      data, _status_code, _headers = global_infra_read_sha_dynamic_plugin_with_http_info(plugin_id, opts)
      data
    end

    # Read Sha dynamic plugin
    # Read Sha dynamic plugin. 
    # @param plugin_id Plugin filename
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaDynamicPlugin, Fixnum, Hash)>] ShaDynamicPlugin data, response status code and response headers
    def global_infra_read_sha_dynamic_plugin_with_http_info(plugin_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.global_infra_read_sha_dynamic_plugin ...'
      end
      # verify the required parameter 'plugin_id' is set
      if @api_client.config.client_side_validation && plugin_id.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_id' when calling MonitoringApi.global_infra_read_sha_dynamic_plugin"
      end
      # resource path
      local_var_path = '/global-infra/sha/dynamic-plugins/{plugin-id}'.sub('{' + 'plugin-id' + '}', plugin_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaDynamicPlugin')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#global_infra_read_sha_dynamic_plugin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # API will return Sha profile
    # API will return Sha profile. 
    # @param sha_profile_id Sha profile id
    # @param [Hash] opts the optional parameters
    # @return [ShaPluginProfile]
    def global_infra_read_sha_plugin_profile(sha_profile_id, opts = {})
      data, _status_code, _headers = global_infra_read_sha_plugin_profile_with_http_info(sha_profile_id, opts)
      data
    end

    # API will return Sha profile
    # API will return Sha profile. 
    # @param sha_profile_id Sha profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaPluginProfile, Fixnum, Hash)>] ShaPluginProfile data, response status code and response headers
    def global_infra_read_sha_plugin_profile_with_http_info(sha_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.global_infra_read_sha_plugin_profile ...'
      end
      # verify the required parameter 'sha_profile_id' is set
      if @api_client.config.client_side_validation && sha_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'sha_profile_id' when calling MonitoringApi.global_infra_read_sha_plugin_profile"
      end
      # resource path
      local_var_path = '/global-infra/sha/plugin-profiles/{sha-profile-id}'.sub('{' + 'sha-profile-id' + '}', sha_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaPluginProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#global_infra_read_sha_plugin_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Sha pre-defined plugin
    # Read SHA pre-defined plugin. 
    # @param plugin_id Sha pre-defined plugin
    # @param [Hash] opts the optional parameters
    # @return [ShaPredefinedPlugin]
    def global_infra_read_sha_predefined_plugin(plugin_id, opts = {})
      data, _status_code, _headers = global_infra_read_sha_predefined_plugin_with_http_info(plugin_id, opts)
      data
    end

    # Read Sha pre-defined plugin
    # Read SHA pre-defined plugin. 
    # @param plugin_id Sha pre-defined plugin
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaPredefinedPlugin, Fixnum, Hash)>] ShaPredefinedPlugin data, response status code and response headers
    def global_infra_read_sha_predefined_plugin_with_http_info(plugin_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.global_infra_read_sha_predefined_plugin ...'
      end
      # verify the required parameter 'plugin_id' is set
      if @api_client.config.client_side_validation && plugin_id.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_id' when calling MonitoringApi.global_infra_read_sha_predefined_plugin"
      end
      # resource path
      local_var_path = '/global-infra/sha/pre-defined-plugins/{plugin-id}'.sub('{' + 'plugin-id' + '}', plugin_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaPredefinedPlugin')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#global_infra_read_sha_predefined_plugin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read traceflow config
    # Read traceflow config with id traceflow-id. This configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [TraceflowConfig]
    def global_infra_read_traceflow_config(traceflow_id, opts = {})
      data, _status_code, _headers = global_infra_read_traceflow_config_with_http_info(traceflow_id, opts)
      data
    end

    # Read traceflow config
    # Read traceflow config with id traceflow-id. This configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TraceflowConfig, Fixnum, Hash)>] TraceflowConfig data, response status code and response headers
    def global_infra_read_traceflow_config_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.global_infra_read_traceflow_config ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.global_infra_read_traceflow_config"
      end
      # resource path
      local_var_path = '/global-infra/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#global_infra_read_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Show the plugins status on given node.
    # Show all the installed system health plugins on given node 
    # @param node_id The TN node id. 
    # @param [Hash] opts the optional parameters
    # @return [PerNodeShaPluginStatusListResult]
    def global_infra_show_plugin_status_on_node(node_id, opts = {})
      data, _status_code, _headers = global_infra_show_plugin_status_on_node_with_http_info(node_id, opts)
      data
    end

    # Show the plugins status on given node.
    # Show all the installed system health plugins on given node 
    # @param node_id The TN node id. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PerNodeShaPluginStatusListResult, Fixnum, Hash)>] PerNodeShaPluginStatusListResult data, response status code and response headers
    def global_infra_show_plugin_status_on_node_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.global_infra_show_plugin_status_on_node ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling MonitoringApi.global_infra_show_plugin_status_on_node"
      end
      # resource path
      local_var_path = '/global-infra/sha/plugin-status/{node-id}'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PerNodeShaPluginStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#global_infra_show_plugin_status_on_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Install the Dynamic Runbook package. Please specify the header \"Content-Type: application/octet-stream\" in the http request. 
    # Install the Dynamic Runbook package. Please specify the header \"Content-Type: application/octet-stream\" in the http request. 
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @return [OdsDynamicRunbookInstanceState]
    def install_ods_dynamic_runbook(instance_id, opts = {})
      data, _status_code, _headers = install_ods_dynamic_runbook_with_http_info(instance_id, opts)
      data
    end

    # Install the Dynamic Runbook package. Please specify the header \&quot;Content-Type: application/octet-stream\&quot; in the http request. 
    # Install the Dynamic Runbook package. Please specify the header \&quot;Content-Type: application/octet-stream\&quot; in the http request. 
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsDynamicRunbookInstanceState, Fixnum, Hash)>] OdsDynamicRunbookInstanceState data, response status code and response headers
    def install_ods_dynamic_runbook_with_http_info(instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.install_ods_dynamic_runbook ...'
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling MonitoringApi.install_ods_dynamic_runbook"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-runbook-instances/{instance-id}/file'.sub('{' + 'instance-id' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsDynamicRunbookInstanceState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#install_ods_dynamic_runbook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LLDP Neighbor Properties of given Node
    # List LLDP Neighbor Properties of given Node
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @return [InterfaceNeighborPropertyListResult]
    def list_all_lldp_neighbor_interfaces(site_id, enforcement_point_id, node_id, opts = {})
      data, _status_code, _headers = list_all_lldp_neighbor_interfaces_with_http_info(site_id, enforcement_point_id, node_id, opts)
      data
    end

    # List LLDP Neighbor Properties of given Node
    # List LLDP Neighbor Properties of given Node
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @return [Array<(InterfaceNeighborPropertyListResult, Fixnum, Hash)>] InterfaceNeighborPropertyListResult data, response status code and response headers
    def list_all_lldp_neighbor_interfaces_with_http_info(site_id, enforcement_point_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_all_lldp_neighbor_interfaces ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.list_all_lldp_neighbor_interfaces"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.list_all_lldp_neighbor_interfaces"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling MonitoringApi.list_all_lldp_neighbor_interfaces"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/host-transport-nodes/{node-id}/lldp/interfaces'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InterfaceNeighborPropertyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_all_lldp_neighbor_interfaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Antrea cluster heartbeat config list
    # Paginated list of all Antrea cluster heartbeat config
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [AntreaHeartbeatConfigListResult]
    def list_antrea_heartbeat_config(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_antrea_heartbeat_config_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # Read Antrea cluster heartbeat config list
    # Paginated list of all Antrea cluster heartbeat config
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(AntreaHeartbeatConfigListResult, Fixnum, Hash)>] AntreaHeartbeatConfigListResult data, response status code and response headers
    def list_antrea_heartbeat_config_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_antrea_heartbeat_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.list_antrea_heartbeat_config"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling MonitoringApi.list_antrea_heartbeat_config"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_antrea_heartbeat_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_antrea_heartbeat_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/cluster-control-planes-heartbeat-config'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AntreaHeartbeatConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_antrea_heartbeat_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Antrea cluster status list
    # Paginated list of all Antrea cluster status
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [AntreaClusterListResult]
    def list_antrea_status(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_antrea_status_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # Read Antrea cluster status list
    # Paginated list of all Antrea cluster status
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(AntreaClusterListResult, Fixnum, Hash)>] AntreaClusterListResult data, response status code and response headers
    def list_antrea_status_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_antrea_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.list_antrea_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling MonitoringApi.list_antrea_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_antrea_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_antrea_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/cluster-control-planes-status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AntreaClusterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_antrea_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List AntreaTraceflowConfig for infra
    # Paginated list of all AntreaTraceflowConfig for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [AntreaTraceflowConfigListResult]
    def list_antrea_traceflow_config(opts = {})
      data, _status_code, _headers = list_antrea_traceflow_config_with_http_info(opts)
      data
    end

    # List AntreaTraceflowConfig for infra
    # Paginated list of all AntreaTraceflowConfig for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(AntreaTraceflowConfigListResult, Fixnum, Hash)>] AntreaTraceflowConfigListResult data, response status code and response headers
    def list_antrea_traceflow_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_antrea_traceflow_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_antrea_traceflow_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_antrea_traceflow_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/antrea/traceflows'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AntreaTraceflowConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_antrea_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Antrea traceflow observations
    # Read Antrea traceflow observations for id traceflow-id
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [AntreaTraceflowObservationListResult]
    def list_antrea_traceflow_observations(traceflow_id, opts = {})
      data, _status_code, _headers = list_antrea_traceflow_observations_with_http_info(traceflow_id, opts)
      data
    end

    # Read Antrea traceflow observations
    # Read Antrea traceflow observations for id traceflow-id
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(AntreaTraceflowObservationListResult, Fixnum, Hash)>] AntreaTraceflowObservationListResult data, response status code and response headers
    def list_antrea_traceflow_observations_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_antrea_traceflow_observations ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.list_antrea_traceflow_observations"
      end
      # resource path
      local_var_path = '/infra/antrea/traceflows/{traceflow-id}/observations'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AntreaTraceflowObservationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_antrea_traceflow_observations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read BMC cluster status list
    # Paginated list of all BMC cluster status
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [BMCClusterListResult]
    def list_bmc_status(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_bmc_status_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # Read BMC cluster status list
    # Paginated list of all BMC cluster status
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(BMCClusterListResult, Fixnum, Hash)>] BMCClusterListResult data, response status code and response headers
    def list_bmc_status_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_bmc_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.list_bmc_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling MonitoringApi.list_bmc_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_bmc_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_bmc_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/bm-ccpn-status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BMCClusterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_bmc_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetches a list of metadata for all the registered error resolvers
    # Returns a list of metadata for all the error resolvers registered. 
    # @param [Hash] opts the optional parameters
    # @return [ErrorResolverInfoList]
    def list_error_resolver_info(opts = {})
      data, _status_code, _headers = list_error_resolver_info_with_http_info(opts)
      data
    end

    # Fetches a list of metadata for all the registered error resolvers
    # Returns a list of metadata for all the error resolvers registered. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ErrorResolverInfoList, Fixnum, Hash)>] ErrorResolverInfoList data, response status code and response headers
    def list_error_resolver_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_error_resolver_info ...'
      end
      # resource path
      local_var_path = '/error-resolver'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ErrorResolverInfoList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_error_resolver_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read status of all the transport nodes
    # Read status of all the transport nodes
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_dfw_heap_stats Include DFW Heap stats information (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [TransportNodeStatusListResult]
    def list_host_tn_status(site_id, enforcement_point_id, opts = {})
      data, _status_code, _headers = list_host_tn_status_with_http_info(site_id, enforcement_point_id, opts)
      data
    end

    # Read status of all the transport nodes
    # Read status of all the transport nodes
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_dfw_heap_stats Include DFW Heap stats information
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [Array<(TransportNodeStatusListResult, Fixnum, Hash)>] TransportNodeStatusListResult data, response status code and response headers
    def list_host_tn_status_with_http_info(site_id, enforcement_point_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_host_tn_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.list_host_tn_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.list_host_tn_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_host_tn_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_host_tn_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN', 'DEGRADED', 'UNKNOWN'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN, DEGRADED, UNKNOWN'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/host-transport-nodes-status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_dfw_heap_stats'] = opts[:'include_dfw_heap_stats'] if !opts[:'include_dfw_heap_stats'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_host_tn_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IPFIX Collector profiles.
    # API will provide list of all IPFIX dfw collector profiles and their details. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPFIXDFWCollectorProfileListResult]
    def list_ipfixdfw_collector_profiles(opts = {})
      data, _status_code, _headers = list_ipfixdfw_collector_profiles_with_http_info(opts)
      data
    end

    # List IPFIX Collector profiles.
    # API will provide list of all IPFIX dfw collector profiles and their details. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPFIXDFWCollectorProfileListResult, Fixnum, Hash)>] IPFIXDFWCollectorProfileListResult data, response status code and response headers
    def list_ipfixdfw_collector_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_ipfixdfw_collector_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_ipfixdfw_collector_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_ipfixdfw_collector_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/ipfix-dfw-collector-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXDFWCollectorProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_ipfixdfw_collector_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IPFIX DFW Profile
    # API provides list IPFIX DFW profiles available on selected logical DFW. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPFIXDFWProfileListResult]
    def list_ipfixdfw_profiles(opts = {})
      data, _status_code, _headers = list_ipfixdfw_profiles_with_http_info(opts)
      data
    end

    # List IPFIX DFW Profile
    # API provides list IPFIX DFW profiles available on selected logical DFW. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPFIXDFWProfileListResult, Fixnum, Hash)>] IPFIXDFWProfileListResult data, response status code and response headers
    def list_ipfixdfw_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_ipfixdfw_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_ipfixdfw_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_ipfixdfw_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/ipfix-dfw-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXDFWProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_ipfixdfw_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IPFIX Collector profiles.
    # API will provide list of all IPFIX collector profiles and their details. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPFIXL2CollectorProfileListResult]
    def list_ipfixl2_collector_profiles(opts = {})
      data, _status_code, _headers = list_ipfixl2_collector_profiles_with_http_info(opts)
      data
    end

    # List IPFIX Collector profiles.
    # API will provide list of all IPFIX collector profiles and their details. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPFIXL2CollectorProfileListResult, Fixnum, Hash)>] IPFIXL2CollectorProfileListResult data, response status code and response headers
    def list_ipfixl2_collector_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_ipfixl2_collector_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_ipfixl2_collector_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_ipfixl2_collector_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/ipfix-l2-collector-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXL2CollectorProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_ipfixl2_collector_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List IPFIX L2 Profiles
    # API provides list IPFIX L2 Profiles available on selected logical l2. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [IPFIXL2ProfileListResult]
    def list_ipfixl2_profiles(opts = {})
      data, _status_code, _headers = list_ipfixl2_profiles_with_http_info(opts)
      data
    end

    # List IPFIX L2 Profiles
    # API provides list IPFIX L2 Profiles available on selected logical l2. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(IPFIXL2ProfileListResult, Fixnum, Hash)>] IPFIXL2ProfileListResult data, response status code and response headers
    def list_ipfixl2_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_ipfixl2_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_ipfixl2_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_ipfixl2_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/ipfix-l2-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXL2ProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_ipfixl2_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List livetrace config entities
    # Get a paginated list of all livetrace config entities. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LiveTraceConfigListResult]
    def list_live_trace_config(opts = {})
      data, _status_code, _headers = list_live_trace_config_with_http_info(opts)
      data
    end

    # List livetrace config entities
    # Get a paginated list of all livetrace config entities. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LiveTraceConfigListResult, Fixnum, Hash)>] LiveTraceConfigListResult data, response status code and response headers
    def list_live_trace_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_live_trace_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_live_trace_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_live_trace_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/livetraces'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LiveTraceConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_live_trace_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List livetrace status entities
    # Get a list of all livetrace status entities.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [LiveTraceListResult]
    def list_live_trace_status(opts = {})
      data, _status_code, _headers = list_live_trace_status_with_http_info(opts)
      data
    end

    # List livetrace status entities
    # Get a list of all livetrace status entities.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(LiveTraceListResult, Fixnum, Hash)>] LiveTraceListResult data, response status code and response headers
    def list_live_trace_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_live_trace_status ...'
      end
      # resource path
      local_var_path = '/infra/livetraces/statuses'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LiveTraceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_live_trace_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all the manual health check config entities
    # Get a list of all the manual health check entities. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyManualHealthCheckList]
    def list_manual_health_check_config(opts = {})
      data, _status_code, _headers = list_manual_health_check_config_with_http_info(opts)
      data
    end

    # List all the manual health check config entities
    # Get a list of all the manual health check entities. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyManualHealthCheckList, Fixnum, Hash)>] PolicyManualHealthCheckList data, response status code and response headers
    def list_manual_health_check_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_manual_health_check_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_manual_health_check_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_manual_health_check_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/manual-health-checks'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyManualHealthCheckList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_manual_health_check_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Dynamic Runbooks
    # List Online Diagnostic System Dynamic Runbooks. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [OdsDynamicRunbookListResult]
    def list_ods_dynamic_runbook(opts = {})
      data, _status_code, _headers = list_ods_dynamic_runbook_with_http_info(opts)
      data
    end

    # List Dynamic Runbooks
    # List Online Diagnostic System Dynamic Runbooks. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(OdsDynamicRunbookListResult, Fixnum, Hash)>] OdsDynamicRunbookListResult data, response status code and response headers
    def list_ods_dynamic_runbook_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_ods_dynamic_runbook ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_ods_dynamic_runbook, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_ods_dynamic_runbook, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/dynamic-runbooks'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsDynamicRunbookListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_ods_dynamic_runbook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Dynamic Runbook Instances
    # List Online Diagnostic System Dynamic Runbooks Instances. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [OdsDynamicdRunbookInstanceListResult]
    def list_ods_dynamic_runbook_instance(opts = {})
      data, _status_code, _headers = list_ods_dynamic_runbook_instance_with_http_info(opts)
      data
    end

    # List Dynamic Runbook Instances
    # List Online Diagnostic System Dynamic Runbooks Instances. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(OdsDynamicdRunbookInstanceListResult, Fixnum, Hash)>] OdsDynamicdRunbookInstanceListResult data, response status code and response headers
    def list_ods_dynamic_runbook_instance_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_ods_dynamic_runbook_instance ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_ods_dynamic_runbook_instance, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_ods_dynamic_runbook_instance, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/dynamic-runbook-instances'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsDynamicdRunbookInstanceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_ods_dynamic_runbook_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Predefined Runbooks
    # List Online Diagnostic System Predefined Runbooks. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [OdsPredefinedRunbookListResult]
    def list_ods_predefined_runbooks(opts = {})
      data, _status_code, _headers = list_ods_predefined_runbooks_with_http_info(opts)
      data
    end

    # List Predefined Runbooks
    # List Online Diagnostic System Predefined Runbooks. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(OdsPredefinedRunbookListResult, Fixnum, Hash)>] OdsPredefinedRunbookListResult data, response status code and response headers
    def list_ods_predefined_runbooks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_ods_predefined_runbooks ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_ods_predefined_runbooks, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_ods_predefined_runbooks, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/pre-defined-runbooks'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsPredefinedRunbookListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_ods_predefined_runbooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List runbook invocation artifacts
    # Get a paginated list of Online Diagnostic System Runbook invocation artifacts. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [OdsRunbookInvocationArtifactListResult]
    def list_ods_runbook_invocation_artifacts(opts = {})
      data, _status_code, _headers = list_ods_runbook_invocation_artifacts_with_http_info(opts)
      data
    end

    # List runbook invocation artifacts
    # Get a paginated list of Online Diagnostic System Runbook invocation artifacts. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(OdsRunbookInvocationArtifactListResult, Fixnum, Hash)>] OdsRunbookInvocationArtifactListResult data, response status code and response headers
    def list_ods_runbook_invocation_artifacts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_ods_runbook_invocation_artifacts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_ods_runbook_invocation_artifacts, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_ods_runbook_invocation_artifacts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/runbook-artifacts'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookInvocationArtifactListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_ods_runbook_invocation_artifacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List runbook invocations
    # Get a paginated list of Online Diagnostic System Runbook invocation entities. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [OdsRunbookInvocationListResult]
    def list_ods_runbook_invocations(opts = {})
      data, _status_code, _headers = list_ods_runbook_invocations_with_http_info(opts)
      data
    end

    # List runbook invocations
    # Get a paginated list of Online Diagnostic System Runbook invocation entities. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(OdsRunbookInvocationListResult, Fixnum, Hash)>] OdsRunbookInvocationListResult data, response status code and response headers
    def list_ods_runbook_invocations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_ods_runbook_invocations ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_ods_runbook_invocations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_ods_runbook_invocations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/runbook-invocations'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookInvocationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_ods_runbook_invocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List runbook settings
    # Get a paginated list of Online Diagnostic System Runbook setting entities. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [OdsRunbookSettingListResult]
    def list_ods_runbook_settings(opts = {})
      data, _status_code, _headers = list_ods_runbook_settings_with_http_info(opts)
      data
    end

    # List runbook settings
    # Get a paginated list of Online Diagnostic System Runbook setting entities. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(OdsRunbookSettingListResult, Fixnum, Hash)>] OdsRunbookSettingListResult data, response status code and response headers
    def list_ods_runbook_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_ods_runbook_settings ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_ods_runbook_settings, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_ods_runbook_settings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/runbook-settings'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookSettingListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_ods_runbook_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the information of all packet capture sessions
    # Get the information of all packet capture sessions. 
    # @param [Hash] opts the optional parameters
    # @return [PktCaptureSessionList]
    def list_pkt_capture_sessions(opts = {})
      data, _status_code, _headers = list_pkt_capture_sessions_with_http_info(opts)
      data
    end

    # Get the information of all packet capture sessions
    # Get the information of all packet capture sessions. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PktCaptureSessionList, Fixnum, Hash)>] PktCaptureSessionList data, response status code and response headers
    def list_pkt_capture_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_pkt_capture_sessions ...'
      end
      # resource path
      local_var_path = '/infra/pktcap/sessions'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PktCaptureSessionList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_pkt_capture_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List latency profiles
    # List latency profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyLatencyStatProfileListResult]
    def list_policy_latency_profiles(opts = {})
      data, _status_code, _headers = list_policy_latency_profiles_with_http_info(opts)
      data
    end

    # List latency profiles
    # List latency profiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyLatencyStatProfileListResult, Fixnum, Hash)>] PolicyLatencyStatProfileListResult data, response status code and response headers
    def list_policy_latency_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_policy_latency_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_policy_latency_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_policy_latency_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/latency-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyLatencyStatProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_policy_latency_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Port Mirroring Instances
    # API will list all port mirroring instances active on current group. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PortMirroringInstanceListResult]
    def list_port_mirroring_instances(domain_id, group_id, opts = {})
      data, _status_code, _headers = list_port_mirroring_instances_with_http_info(domain_id, group_id, opts)
      data
    end

    # List Port Mirroring Instances
    # API will list all port mirroring instances active on current group. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PortMirroringInstanceListResult, Fixnum, Hash)>] PortMirroringInstanceListResult data, response status code and response headers
    def list_port_mirroring_instances_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_port_mirroring_instances ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling MonitoringApi.list_port_mirroring_instances"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling MonitoringApi.list_port_mirroring_instances"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_port_mirroring_instances, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_port_mirroring_instances, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringInstanceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_port_mirroring_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Port Mirroring Profiles
    # API will list all port mirroring profiles group. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PortMirroringProfileListResult]
    def list_port_mirroring_profiles(opts = {})
      data, _status_code, _headers = list_port_mirroring_profiles_with_http_info(opts)
      data
    end

    # List Port Mirroring Profiles
    # API will list all port mirroring profiles group. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PortMirroringProfileListResult, Fixnum, Hash)>] PortMirroringProfileListResult data, response status code and response headers
    def list_port_mirroring_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_port_mirroring_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_port_mirroring_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_port_mirroring_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/port-mirroring-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_port_mirroring_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read status of all transport nodes with tunnel connections to transport node 
    # Read status of all transport nodes with tunnel connections to transport node 
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bfd_diagnostic_code BFD diagnostic code of Tunnel
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_dfw_heap_stats Include DFW Heap stats information (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :tunnel_status Tunnel Status
    # @return [TransportNodeStatusListResult]
    def list_remote_tn_status(site_id, enforcement_point_id, node_id, opts = {})
      data, _status_code, _headers = list_remote_tn_status_with_http_info(site_id, enforcement_point_id, node_id, opts)
      data
    end

    # Read status of all transport nodes with tunnel connections to transport node 
    # Read status of all transport nodes with tunnel connections to transport node 
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bfd_diagnostic_code BFD diagnostic code of Tunnel
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_dfw_heap_stats Include DFW Heap stats information
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :tunnel_status Tunnel Status
    # @return [Array<(TransportNodeStatusListResult, Fixnum, Hash)>] TransportNodeStatusListResult data, response status code and response headers
    def list_remote_tn_status_with_http_info(site_id, enforcement_point_id, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_remote_tn_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.list_remote_tn_status"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.list_remote_tn_status"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling MonitoringApi.list_remote_tn_status"
      end
      if @api_client.config.client_side_validation && opts[:'bfd_diagnostic_code'] && !['0', 'NO_DIAGNOSTIC', '1', 'CONTROL_DETECTION_TIME_EXPIRED', '2', 'ECHO_FUNCTION_FAILED', '3', 'NEIGHBOR_SIGNALED_SESSION_DOWN', '4', 'FORWARDING_PLANE_RESET', '5', 'PATH_DOWN', '6', 'CONCATENATED_PATH_DOWN', '7', 'ADMINISTRATIVELY_DOWN', '8', 'REVERSE_CONCATENATED_PATH_DOWN'].include?(opts[:'bfd_diagnostic_code'])
        fail ArgumentError, 'invalid value for "bfd_diagnostic_code", must be one of 0, NO_DIAGNOSTIC, 1, CONTROL_DETECTION_TIME_EXPIRED, 2, ECHO_FUNCTION_FAILED, 3, NEIGHBOR_SIGNALED_SESSION_DOWN, 4, FORWARDING_PLANE_RESET, 5, PATH_DOWN, 6, CONCATENATED_PATH_DOWN, 7, ADMINISTRATIVELY_DOWN, 8, REVERSE_CONCATENATED_PATH_DOWN'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_remote_tn_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_remote_tn_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'tunnel_status'] && !['UP', 'DOWN'].include?(opts[:'tunnel_status'])
        fail ArgumentError, 'invalid value for "tunnel_status", must be one of UP, DOWN'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/host-transport-nodes/{node-id}/remote-transport-node-status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bfd_diagnostic_code'] = opts[:'bfd_diagnostic_code'] if !opts[:'bfd_diagnostic_code'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_dfw_heap_stats'] = opts[:'include_dfw_heap_stats'] if !opts[:'include_dfw_heap_stats'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'tunnel_status'] = opts[:'tunnel_status'] if !opts[:'tunnel_status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_remote_tn_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # For each type of entity what are the attributes owned by policy.
    # This API provides field names of attributes in NSX types that are owned by Policy, as opposed to those owned by the enforcement point. For any type on NSX, some of the attributes of that type may be owned and set by Policy when realizing the intent, while some others may be owned and set by the enforcement point itself. This information can be used to deactivate updates to Policy owned attributes by the advanced networking UI, while allowing tweaking to the attributes owned by the management plane. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type query
    # @return [ResourceInfoListResult]
    def list_resource_info(opts = {})
      data, _status_code, _headers = list_resource_info_with_http_info(opts)
      data
    end

    # For each type of entity what are the attributes owned by policy.
    # This API provides field names of attributes in NSX types that are owned by Policy, as opposed to those owned by the enforcement point. For any type on NSX, some of the attributes of that type may be owned and set by Policy when realizing the intent, while some others may be owned and set by the enforcement point itself. This information can be used to deactivate updates to Policy owned attributes by the advanced networking UI, while allowing tweaking to the attributes owned by the management plane. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type Type query
    # @return [Array<(ResourceInfoListResult, Fixnum, Hash)>] ResourceInfoListResult data, response status code and response headers
    def list_resource_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_resource_info ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_resource_info, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_resource_info, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/fine-tuning/resources'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceInfoListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_resource_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # API will provide list of Sha Dynamic plugins.
    # API will provide list of Sha Dynamic plugins. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ShaDynamicPluginListResult]
    def list_sha_dynamic_plugins(opts = {})
      data, _status_code, _headers = list_sha_dynamic_plugins_with_http_info(opts)
      data
    end

    # API will provide list of Sha Dynamic plugins.
    # API will provide list of Sha Dynamic plugins. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ShaDynamicPluginListResult, Fixnum, Hash)>] ShaDynamicPluginListResult data, response status code and response headers
    def list_sha_dynamic_plugins_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_sha_dynamic_plugins ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_sha_dynamic_plugins, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_sha_dynamic_plugins, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/dynamic-plugins'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaDynamicPluginListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_sha_dynamic_plugins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List SHA monitor profile
    # List SHA monitor profile. 
    # @param monitor_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ShaMonitorProfileListResult]
    def list_sha_monitor_profile(monitor_id, opts = {})
      data, _status_code, _headers = list_sha_monitor_profile_with_http_info(monitor_id, opts)
      data
    end

    # List SHA monitor profile
    # List SHA monitor profile. 
    # @param monitor_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ShaMonitorProfileListResult, Fixnum, Hash)>] ShaMonitorProfileListResult data, response status code and response headers
    def list_sha_monitor_profile_with_http_info(monitor_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_sha_monitor_profile ...'
      end
      # verify the required parameter 'monitor_id' is set
      if @api_client.config.client_side_validation && monitor_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_id' when calling MonitoringApi.list_sha_monitor_profile"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_sha_monitor_profile, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_sha_monitor_profile, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/monitors/{monitor-id}/profiles'.sub('{' + 'monitor-id' + '}', monitor_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaMonitorProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_sha_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List the status of SHA monitors
    # List the status of SHA monitors on certain transport node. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :transport_node_id 
    # @option opts [String] :ua_node_id 
    # @return [ShaMonitorStatusListResult]
    def list_sha_monitor_status(opts = {})
      data, _status_code, _headers = list_sha_monitor_status_with_http_info(opts)
      data
    end

    # List the status of SHA monitors
    # List the status of SHA monitors on certain transport node. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :transport_node_id 
    # @option opts [String] :ua_node_id 
    # @return [Array<(ShaMonitorStatusListResult, Fixnum, Hash)>] ShaMonitorStatusListResult data, response status code and response headers
    def list_sha_monitor_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_sha_monitor_status ...'
      end
      # resource path
      local_var_path = '/infra/sha/monitors-status'

      # query parameters
      query_params = {}
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?
      query_params[:'ua_node_id'] = opts[:'ua_node_id'] if !opts[:'ua_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaMonitorStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_sha_monitor_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read SHA existing monitor list.
    # Read SHA existing monitor list. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ShaMonitorListResult]
    def list_sha_monitors(opts = {})
      data, _status_code, _headers = list_sha_monitors_with_http_info(opts)
      data
    end

    # Read SHA existing monitor list.
    # Read SHA existing monitor list. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ShaMonitorListResult, Fixnum, Hash)>] ShaMonitorListResult data, response status code and response headers
    def list_sha_monitors_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_sha_monitors ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_sha_monitors, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_sha_monitors, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/monitors'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaMonitorListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_sha_monitors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # API will provide list of SHA profiles.
    # API will provide list of SHA profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :applied_to_group_path The path of the Policy group object
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :plugin_path String path of the Sha plugin
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ShaPluginProfileListResult]
    def list_sha_plugin_profiles(opts = {})
      data, _status_code, _headers = list_sha_plugin_profiles_with_http_info(opts)
      data
    end

    # API will provide list of SHA profiles.
    # API will provide list of SHA profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :applied_to_group_path The path of the Policy group object
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :plugin_path String path of the Sha plugin
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ShaPluginProfileListResult, Fixnum, Hash)>] ShaPluginProfileListResult data, response status code and response headers
    def list_sha_plugin_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_sha_plugin_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_sha_plugin_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_sha_plugin_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/plugin-profiles'

      # query parameters
      query_params = {}
      query_params[:'applied_to_group_path'] = opts[:'applied_to_group_path'] if !opts[:'applied_to_group_path'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'plugin_path'] = opts[:'plugin_path'] if !opts[:'plugin_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaPluginProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_sha_plugin_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # API will provide list of Sha pre-defined list.
    # API will provide list of Sha pre-defined plugins. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ShaPreDefinedPluginListResult]
    def list_sha_predefined_plugins(opts = {})
      data, _status_code, _headers = list_sha_predefined_plugins_with_http_info(opts)
      data
    end

    # API will provide list of Sha pre-defined list.
    # API will provide list of Sha pre-defined plugins. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ShaPreDefinedPluginListResult, Fixnum, Hash)>] ShaPreDefinedPluginListResult data, response status code and response headers
    def list_sha_predefined_plugins_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_sha_predefined_plugins ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_sha_predefined_plugins, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_sha_predefined_plugins, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sha/pre-defined-plugins'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaPreDefinedPluginListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_sha_predefined_plugins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read status of transport nodes in a transport zone
    # Read status of transport nodes in a transport zone
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_dfw_heap_stats Include DFW Heap stats information (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [TransportNodeStatusListResult]
    def list_tn_status_for_tz(site_id, enforcement_point_id, zone_id, opts = {})
      data, _status_code, _headers = list_tn_status_for_tz_with_http_info(site_id, enforcement_point_id, zone_id, opts)
      data
    end

    # Read status of transport nodes in a transport zone
    # Read status of transport nodes in a transport zone
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param zone_id ID of transport zone
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_dfw_heap_stats Include DFW Heap stats information
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :status Transport node
    # @return [Array<(TransportNodeStatusListResult, Fixnum, Hash)>] TransportNodeStatusListResult data, response status code and response headers
    def list_tn_status_for_tz_with_http_info(site_id, enforcement_point_id, zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_tn_status_for_tz ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.list_tn_status_for_tz"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.list_tn_status_for_tz"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling MonitoringApi.list_tn_status_for_tz"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_tn_status_for_tz, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_tn_status_for_tz, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['UP', 'DOWN', 'DEGRADED', 'UNKNOWN'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of UP, DOWN, DEGRADED, UNKNOWN'
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/transport-zones/{zone-id}/transport-node-status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'zone-id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_dfw_heap_stats'] = opts[:'include_dfw_heap_stats'] if !opts[:'include_dfw_heap_stats'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_tn_status_for_tz\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List TraceflowConfig for infra
    # Paginated list of all TraceflowConfig for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TraceflowConfigListResult]
    def list_traceflow_config(opts = {})
      data, _status_code, _headers = list_traceflow_config_with_http_info(opts)
      data
    end

    # List TraceflowConfig for infra
    # Paginated list of all TraceflowConfig for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TraceflowConfigListResult, Fixnum, Hash)>] TraceflowConfigListResult data, response status code and response headers
    def list_traceflow_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_traceflow_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_traceflow_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.list_traceflow_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/traceflows'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read traceflow observations
    # Read traceflow observations for id traceflow-id. Traceflow configuration will be cleaned up by the system after two hours of inactivity. Enforcement Path is optional parameter.
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [TraceflowObservationListResult]
    def list_traceflow_observations(traceflow_id, opts = {})
      data, _status_code, _headers = list_traceflow_observations_with_http_info(traceflow_id, opts)
      data
    end

    # Read traceflow observations
    # Read traceflow observations for id traceflow-id. Traceflow configuration will be cleaned up by the system after two hours of inactivity. Enforcement Path is optional parameter.
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(TraceflowObservationListResult, Fixnum, Hash)>] TraceflowObservationListResult data, response status code and response headers
    def list_traceflow_observations_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_traceflow_observations ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.list_traceflow_observations"
      end
      # resource path
      local_var_path = '/infra/traceflows/{traceflow-id}/observations'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowObservationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_traceflow_observations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the Views based on query criteria defined in ViewQueryParameters.
    # If no query params are specified then all the views entitled for the user are returned. The views to which a user is entitled to include the views created by the user and the shared views.  <br> This API is deprecated and will be unavailable in later releases.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag The tag for which associated views to be queried.
    # @option opts [String] :view_ids Ids of the Views
    # @option opts [String] :widget_id Id of widget configuration
    # @return [ViewList]
    def list_views(opts = {})
      data, _status_code, _headers = list_views_with_http_info(opts)
      data
    end

    # Returns the Views based on query criteria defined in ViewQueryParameters.
    # If no query params are specified then all the views entitled for the user are returned. The views to which a user is entitled to include the views created by the user and the shared views.  &lt;br&gt; This API is deprecated and will be unavailable in later releases.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag The tag for which associated views to be queried.
    # @option opts [String] :view_ids Ids of the Views
    # @option opts [String] :widget_id Id of widget configuration
    # @return [Array<(ViewList, Fixnum, Hash)>] ViewList data, response status code and response headers
    def list_views_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_views ...'
      end
      if @api_client.config.client_side_validation && !opts[:'view_ids'].nil? && opts[:'view_ids'].to_s.length > 8192
        fail ArgumentError, 'invalid value for "opts[:"view_ids"]" when calling MonitoringApi.list_views, the character length must be smaller than or equal to 8192.'
      end

      if @api_client.config.client_side_validation && !opts[:'widget_id'].nil? && opts[:'widget_id'].to_s.length > 255
        fail ArgumentError, 'invalid value for "opts[:"widget_id"]" when calling MonitoringApi.list_views, the character length must be smaller than or equal to 255.'
      end

      # resource path
      local_var_path = '/ui-views'

      # query parameters
      query_params = {}
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?
      query_params[:'view_ids'] = opts[:'view_ids'] if !opts[:'view_ids'].nil?
      query_params[:'widget_id'] = opts[:'widget_id'] if !opts[:'widget_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ViewList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_views\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the Widget Configurations based on query criteria defined in WidgetQueryParameters.
    # If no query params are specified then all the Widget Configurations of the specified view are returned.  <br> This API is deprecated and will be unavailable in later releases.
    # @param view_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container Id of the container
    # @option opts [String] :widget_ids Ids of the WidgetConfigurations
    # @return [WidgetConfigurationList]
    def list_widget_configurations(view_id, opts = {})
      data, _status_code, _headers = list_widget_configurations_with_http_info(view_id, opts)
      data
    end

    # Returns the Widget Configurations based on query criteria defined in WidgetQueryParameters.
    # If no query params are specified then all the Widget Configurations of the specified view are returned.  &lt;br&gt; This API is deprecated and will be unavailable in later releases.
    # @param view_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container Id of the container
    # @option opts [String] :widget_ids Ids of the WidgetConfigurations
    # @return [Array<(WidgetConfigurationList, Fixnum, Hash)>] WidgetConfigurationList data, response status code and response headers
    def list_widget_configurations_with_http_info(view_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.list_widget_configurations ...'
      end
      # verify the required parameter 'view_id' is set
      if @api_client.config.client_side_validation && view_id.nil?
        fail ArgumentError, "Missing the required parameter 'view_id' when calling MonitoringApi.list_widget_configurations"
      end
      if @api_client.config.client_side_validation && !opts[:'container'].nil? && opts[:'container'].to_s.length > 255
        fail ArgumentError, 'invalid value for "opts[:"container"]" when calling MonitoringApi.list_widget_configurations, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && !opts[:'widget_ids'].nil? && opts[:'widget_ids'].to_s.length > 8192
        fail ArgumentError, 'invalid value for "opts[:"widget_ids"]" when calling MonitoringApi.list_widget_configurations, the character length must be smaller than or equal to 8192.'
      end

      # resource path
      local_var_path = '/ui-views/{view-id}/widgetconfigurations'.sub('{' + 'view-id' + '}', view_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container'] = opts[:'container'] if !opts[:'container'].nil?
      query_params[:'widget_ids'] = opts[:'widget_ids'] if !opts[:'widget_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WidgetConfigurationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#list_widget_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read help information of a Dynamic Runbook
    # Read help information of an Online Diagnostic System Dynamic Runbook. 
    # @param runbook_id Identifier of a Dynamic Runbook
    # @param [Hash] opts the optional parameters
    # @return [OdsRunbookHelpInfo]
    def load_ods_dynamic_runbook_help_info(runbook_id, opts = {})
      data, _status_code, _headers = load_ods_dynamic_runbook_help_info_with_http_info(runbook_id, opts)
      data
    end

    # Read help information of a Dynamic Runbook
    # Read help information of an Online Diagnostic System Dynamic Runbook. 
    # @param runbook_id Identifier of a Dynamic Runbook
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsRunbookHelpInfo, Fixnum, Hash)>] OdsRunbookHelpInfo data, response status code and response headers
    def load_ods_dynamic_runbook_help_info_with_http_info(runbook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.load_ods_dynamic_runbook_help_info ...'
      end
      # verify the required parameter 'runbook_id' is set
      if @api_client.config.client_side_validation && runbook_id.nil?
        fail ArgumentError, "Missing the required parameter 'runbook_id' when calling MonitoringApi.load_ods_dynamic_runbook_help_info"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-runbooks/{runbook-id}/help'.sub('{' + 'runbook-id' + '}', runbook_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookHelpInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#load_ods_dynamic_runbook_help_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download the collection of artifacts generated by an Online Diagnostic System runbook invocations
    # Download the collection of artifacts generated by an Online Diagnostic System runbook invocations. Please add the below header in the http request, if it is not present Accept    application/octet-stream 
    # @param request_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def load_ods_invocation_artifact_in_batch(request_id, opts = {})
      load_ods_invocation_artifact_in_batch_with_http_info(request_id, opts)
      nil
    end

    # Download the collection of artifacts generated by an Online Diagnostic System runbook invocations
    # Download the collection of artifacts generated by an Online Diagnostic System runbook invocations. Please add the below header in the http request, if it is not present Accept    application/octet-stream 
    # @param request_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def load_ods_invocation_artifact_in_batch_with_http_info(request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.load_ods_invocation_artifact_in_batch ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling MonitoringApi.load_ods_invocation_artifact_in_batch"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-artifacts/{request-id}/artifact'.sub('{' + 'request-id' + '}', request_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#load_ods_invocation_artifact_in_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read help information of a Predefined Runbook
    # Read help information of an Online Diagnostic System Predefined runbook. 
    # @param runbook_id Identifier of a Predefined Runbook
    # @param [Hash] opts the optional parameters
    # @return [OdsRunbookHelpInfo]
    def load_ods_predefined_runbook_help_info(runbook_id, opts = {})
      data, _status_code, _headers = load_ods_predefined_runbook_help_info_with_http_info(runbook_id, opts)
      data
    end

    # Read help information of a Predefined Runbook
    # Read help information of an Online Diagnostic System Predefined runbook. 
    # @param runbook_id Identifier of a Predefined Runbook
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsRunbookHelpInfo, Fixnum, Hash)>] OdsRunbookHelpInfo data, response status code and response headers
    def load_ods_predefined_runbook_help_info_with_http_info(runbook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.load_ods_predefined_runbook_help_info ...'
      end
      # verify the required parameter 'runbook_id' is set
      if @api_client.config.client_side_validation && runbook_id.nil?
        fail ArgumentError, "Missing the required parameter 'runbook_id' when calling MonitoringApi.load_ods_predefined_runbook_help_info"
      end
      # resource path
      local_var_path = '/infra/sha/pre-defined-runbooks/{runbook-id}/help'.sub('{' + 'runbook-id' + '}', runbook_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookHelpInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#load_ods_predefined_runbook_help_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download the artifacts generated by an Online Diagnostic System Runbook invocation
    # Download the artifacts generated by an Online Diagnostic System Runbook invocation. Please add the below header in the http request, if it is not present \"Accept: application/octet-stream\" 
    # @param invocation_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def load_ods_runbook_invocation_artifact(invocation_id, opts = {})
      load_ods_runbook_invocation_artifact_with_http_info(invocation_id, opts)
      nil
    end

    # Download the artifacts generated by an Online Diagnostic System Runbook invocation
    # Download the artifacts generated by an Online Diagnostic System Runbook invocation. Please add the below header in the http request, if it is not present \&quot;Accept: application/octet-stream\&quot; 
    # @param invocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def load_ods_runbook_invocation_artifact_with_http_info(invocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.load_ods_runbook_invocation_artifact ...'
      end
      # verify the required parameter 'invocation_id' is set
      if @api_client.config.client_side_validation && invocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invocation_id' when calling MonitoringApi.load_ods_runbook_invocation_artifact"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-invocations/{invocation-id}/artifact'.sub('{' + 'invocation-id' + '}', invocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#load_ods_runbook_invocation_artifact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get health stats for policy and the dependent services.
    # Get health stats for policy and the dependent services. 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def management_plane_health(opts = {})
      data, _status_code, _headers = management_plane_health_with_http_info(opts)
      data
    end

    # Get health stats for policy and the dependent services.
    # Get health stats for policy and the dependent services. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def management_plane_health_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.management_plane_health ...'
      end
      # resource path
      local_var_path = '/management-plane-health'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#management_plane_health\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete traceflow config
    # Delete traceflow config with id traceflow-id
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_traceflow_config(org_id, project_id, traceflow_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_traceflow_config_with_http_info(org_id, project_id, traceflow_id, opts)
      nil
    end

    # Delete traceflow config
    # Delete traceflow config with id traceflow-id
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_traceflow_config_with_http_info(org_id, project_id, traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.orgs_org_id_projects_project_id_infra_delete_traceflow_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_delete_traceflow_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_delete_traceflow_config"
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_delete_traceflow_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/traceflows/{traceflow-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#orgs_org_id_projects_project_id_infra_delete_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List TraceflowConfig for infra
    # Paginated list of all TraceflowConfig for infra. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TraceflowConfigListResult]
    def orgs_org_id_projects_project_id_infra_list_traceflow_config(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_traceflow_config_with_http_info(org_id, project_id, opts)
      data
    end

    # List TraceflowConfig for infra
    # Paginated list of all TraceflowConfig for infra. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TraceflowConfigListResult, Fixnum, Hash)>] TraceflowConfigListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_traceflow_config_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.orgs_org_id_projects_project_id_infra_list_traceflow_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_list_traceflow_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_list_traceflow_config"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.orgs_org_id_projects_project_id_infra_list_traceflow_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MonitoringApi.orgs_org_id_projects_project_id_infra_list_traceflow_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/traceflows'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#orgs_org_id_projects_project_id_infra_list_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read traceflow observations
    # Read traceflow observations for id traceflow-id. Traceflow configuration will be cleaned up by the system after two hours of inactivity. Enforcement Path is optional parameter.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [TraceflowObservationListResult]
    def orgs_org_id_projects_project_id_infra_list_traceflow_observations(org_id, project_id, traceflow_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_traceflow_observations_with_http_info(org_id, project_id, traceflow_id, opts)
      data
    end

    # Read traceflow observations
    # Read traceflow observations for id traceflow-id. Traceflow configuration will be cleaned up by the system after two hours of inactivity. Enforcement Path is optional parameter.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(TraceflowObservationListResult, Fixnum, Hash)>] TraceflowObservationListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_traceflow_observations_with_http_info(org_id, project_id, traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.orgs_org_id_projects_project_id_infra_list_traceflow_observations ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_list_traceflow_observations"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_list_traceflow_observations"
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_list_traceflow_observations"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/traceflows/{traceflow-id}/observations'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowObservationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#orgs_org_id_projects_project_id_infra_list_traceflow_observations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a traceflow config
    # If a traceflow config with the traceflow-id is not already present, create a new traceflow config. If it already exists, update the traceflow config. This is a full replace. This configuration will be cleaned up by the system after two hours of inactivity. To start traceflow on a DHCP port in a custom project, enforcement point path is required.  <br> Please use PUT API to start new Traceflow sessions. By default, traceflow observations will be cleanup every two hours,  please use is_transient flag to avoid the cleanup. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param traceflow_id 
    # @param traceflow_config 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_traceflow_config(org_id, project_id, traceflow_id, traceflow_config, opts = {})
      orgs_org_id_projects_project_id_infra_patch_traceflow_config_with_http_info(org_id, project_id, traceflow_id, traceflow_config, opts)
      nil
    end

    # Create or update a traceflow config
    # If a traceflow config with the traceflow-id is not already present, create a new traceflow config. If it already exists, update the traceflow config. This is a full replace. This configuration will be cleaned up by the system after two hours of inactivity. To start traceflow on a DHCP port in a custom project, enforcement point path is required.  &lt;br&gt; Please use PUT API to start new Traceflow sessions. By default, traceflow observations will be cleanup every two hours,  please use is_transient flag to avoid the cleanup. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param traceflow_id 
    # @param traceflow_config 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_traceflow_config_with_http_info(org_id, project_id, traceflow_id, traceflow_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.orgs_org_id_projects_project_id_infra_patch_traceflow_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_patch_traceflow_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_patch_traceflow_config"
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_patch_traceflow_config"
      end
      # verify the required parameter 'traceflow_config' is set
      if @api_client.config.client_side_validation && traceflow_config.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_config' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_patch_traceflow_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/traceflows/{traceflow-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(traceflow_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#orgs_org_id_projects_project_id_infra_patch_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read traceflow config
    # Read traceflow config with id traceflow-id. This configuration will be cleaned up by the system after two hours of inactivity. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [TraceflowConfig]
    def orgs_org_id_projects_project_id_infra_read_traceflow_config(org_id, project_id, traceflow_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_traceflow_config_with_http_info(org_id, project_id, traceflow_id, opts)
      data
    end

    # Read traceflow config
    # Read traceflow config with id traceflow-id. This configuration will be cleaned up by the system after two hours of inactivity. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TraceflowConfig, Fixnum, Hash)>] TraceflowConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_traceflow_config_with_http_info(org_id, project_id, traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.orgs_org_id_projects_project_id_infra_read_traceflow_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_read_traceflow_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_read_traceflow_config"
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_read_traceflow_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/traceflows/{traceflow-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#orgs_org_id_projects_project_id_infra_read_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read traceflow status
    # Read traceflow status with id traceflow-id. Traceflow configuration will be cleaned up by the system after two hours of inactivity. Enforcement Path is optional parameter. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Traceflow]
    def orgs_org_id_projects_project_id_infra_read_traceflow_status(org_id, project_id, traceflow_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_traceflow_status_with_http_info(org_id, project_id, traceflow_id, opts)
      data
    end

    # Read traceflow status
    # Read traceflow status with id traceflow-id. Traceflow configuration will be cleaned up by the system after two hours of inactivity. Enforcement Path is optional parameter. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(Traceflow, Fixnum, Hash)>] Traceflow data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_traceflow_status_with_http_info(org_id, project_id, traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.orgs_org_id_projects_project_id_infra_read_traceflow_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_read_traceflow_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_read_traceflow_status"
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_read_traceflow_status"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/traceflows/{traceflow-id}/status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Traceflow')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#orgs_org_id_projects_project_id_infra_read_traceflow_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Restart traceflow with same set of parameters used during create/update traceflow
    # This will retrace even if current traceflow has observations. Current observations will be lost. Traceflow configuration will be cleaned up by the system after two hours of inactivity.  <br> Please use PUT API to start new Traceflow sessions. By default, traceflow observations will be cleanup every two hours,  please use is_transient flag to avoid the cleanup. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action to be performed
    # @return [TraceflowConfig]
    def orgs_org_id_projects_project_id_infra_restart_traceflow(org_id, project_id, traceflow_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_restart_traceflow_with_http_info(org_id, project_id, traceflow_id, opts)
      data
    end

    # Restart traceflow with same set of parameters used during create/update traceflow
    # This will retrace even if current traceflow has observations. Current observations will be lost. Traceflow configuration will be cleaned up by the system after two hours of inactivity.  &lt;br&gt; Please use PUT API to start new Traceflow sessions. By default, traceflow observations will be cleanup every two hours,  please use is_transient flag to avoid the cleanup. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action to be performed
    # @return [Array<(TraceflowConfig, Fixnum, Hash)>] TraceflowConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_restart_traceflow_with_http_info(org_id, project_id, traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.orgs_org_id_projects_project_id_infra_restart_traceflow ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_restart_traceflow"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_restart_traceflow"
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_restart_traceflow"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/traceflows/{traceflow-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#orgs_org_id_projects_project_id_infra_restart_traceflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a traceflow config
    # If a traceflow config with the traceflow-id is not already present, create a new traceflow config. If it already exists, update the traceflow config. This is a full replace. This configuration will be cleaned up by the system after two hours of inactivity. To start traceflow on a DHCP port in a custom project, enforcement point path is required. User needs to update the in-band network telemetry (INT) configuration to specify the DSCP bit/value for traceflow crafted packet, if the source port of traceflow is on VLAN logical network. The INT configuration is under global operations configuration so please refer NSX-T API document Policy > Networking > Networking Profiles > Global Gateway Configuration to check how to set the DSCP bit/value via global operations configuration related API. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param traceflow_id 
    # @param traceflow_config 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [TraceflowConfig]
    def orgs_org_id_projects_project_id_infra_update_traceflow_config(org_id, project_id, traceflow_id, traceflow_config, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_traceflow_config_with_http_info(org_id, project_id, traceflow_id, traceflow_config, opts)
      data
    end

    # Create or update a traceflow config
    # If a traceflow config with the traceflow-id is not already present, create a new traceflow config. If it already exists, update the traceflow config. This is a full replace. This configuration will be cleaned up by the system after two hours of inactivity. To start traceflow on a DHCP port in a custom project, enforcement point path is required. User needs to update the in-band network telemetry (INT) configuration to specify the DSCP bit/value for traceflow crafted packet, if the source port of traceflow is on VLAN logical network. The INT configuration is under global operations configuration so please refer NSX-T API document Policy &gt; Networking &gt; Networking Profiles &gt; Global Gateway Configuration to check how to set the DSCP bit/value via global operations configuration related API. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param traceflow_id 
    # @param traceflow_config 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(TraceflowConfig, Fixnum, Hash)>] TraceflowConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_traceflow_config_with_http_info(org_id, project_id, traceflow_id, traceflow_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.orgs_org_id_projects_project_id_infra_update_traceflow_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_update_traceflow_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_update_traceflow_config"
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_update_traceflow_config"
      end
      # verify the required parameter 'traceflow_config' is set
      if @api_client.config.client_side_validation && traceflow_config.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_config' when calling MonitoringApi.orgs_org_id_projects_project_id_infra_update_traceflow_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/traceflows/{traceflow-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(traceflow_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#orgs_org_id_projects_project_id_infra_update_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch the Antrea heartbeat configuration
    # Patch the Antrea heartbeat configuration
    # @param site_id 
    # @param enforcementpoint_id 
    # @param cluster_control_plane_id 
    # @param antrea_heartbeat_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_antrea_heartbeat_config(site_id, enforcementpoint_id, cluster_control_plane_id, antrea_heartbeat_config, opts = {})
      patch_antrea_heartbeat_config_with_http_info(site_id, enforcementpoint_id, cluster_control_plane_id, antrea_heartbeat_config, opts)
      nil
    end

    # Patch the Antrea heartbeat configuration
    # Patch the Antrea heartbeat configuration
    # @param site_id 
    # @param enforcementpoint_id 
    # @param cluster_control_plane_id 
    # @param antrea_heartbeat_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_antrea_heartbeat_config_with_http_info(site_id, enforcementpoint_id, cluster_control_plane_id, antrea_heartbeat_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.patch_antrea_heartbeat_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.patch_antrea_heartbeat_config"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling MonitoringApi.patch_antrea_heartbeat_config"
      end
      # verify the required parameter 'cluster_control_plane_id' is set
      if @api_client.config.client_side_validation && cluster_control_plane_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_control_plane_id' when calling MonitoringApi.patch_antrea_heartbeat_config"
      end
      # verify the required parameter 'antrea_heartbeat_config' is set
      if @api_client.config.client_side_validation && antrea_heartbeat_config.nil?
        fail ArgumentError, "Missing the required parameter 'antrea_heartbeat_config' when calling MonitoringApi.patch_antrea_heartbeat_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/cluster-control-planes/{cluster-control-plane-id}/heartbeat-config'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'cluster-control-plane-id' + '}', cluster_control_plane_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(antrea_heartbeat_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#patch_antrea_heartbeat_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an Antrea traceflow config
    # If an Antrea traceflow config with the traceflow-id is not already present, create a new traceflow config. 
    # @param traceflow_id 
    # @param antrea_traceflow_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_antrea_traceflow_config(traceflow_id, antrea_traceflow_config, opts = {})
      patch_antrea_traceflow_config_with_http_info(traceflow_id, antrea_traceflow_config, opts)
      nil
    end

    # Create an Antrea traceflow config
    # If an Antrea traceflow config with the traceflow-id is not already present, create a new traceflow config. 
    # @param traceflow_id 
    # @param antrea_traceflow_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_antrea_traceflow_config_with_http_info(traceflow_id, antrea_traceflow_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.patch_antrea_traceflow_config ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.patch_antrea_traceflow_config"
      end
      # verify the required parameter 'antrea_traceflow_config' is set
      if @api_client.config.client_side_validation && antrea_traceflow_config.nil?
        fail ArgumentError, "Missing the required parameter 'antrea_traceflow_config' when calling MonitoringApi.patch_antrea_traceflow_config"
      end
      # resource path
      local_var_path = '/infra/antrea/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(antrea_traceflow_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#patch_antrea_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # IPFIX dfw collector profile id
    # Create a new IPFIX dfw collector profile if the IPFIX dfw collector profile with given id does not already exist. If the IPFIX dfw collector profile with the given id already exists, patch with the existing IPFIX dfw collector profile. 
    # @param ipfix_dfw_collector_profile_id 
    # @param ipfixdfw_collector_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_ipfixdfw_collector_profile(ipfix_dfw_collector_profile_id, ipfixdfw_collector_profile, opts = {})
      patch_ipfixdfw_collector_profile_with_http_info(ipfix_dfw_collector_profile_id, ipfixdfw_collector_profile, opts)
      nil
    end

    # IPFIX dfw collector profile id
    # Create a new IPFIX dfw collector profile if the IPFIX dfw collector profile with given id does not already exist. If the IPFIX dfw collector profile with the given id already exists, patch with the existing IPFIX dfw collector profile. 
    # @param ipfix_dfw_collector_profile_id 
    # @param ipfixdfw_collector_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ipfixdfw_collector_profile_with_http_info(ipfix_dfw_collector_profile_id, ipfixdfw_collector_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.patch_ipfixdfw_collector_profile ...'
      end
      # verify the required parameter 'ipfix_dfw_collector_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_dfw_collector_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_dfw_collector_profile_id' when calling MonitoringApi.patch_ipfixdfw_collector_profile"
      end
      # verify the required parameter 'ipfixdfw_collector_profile' is set
      if @api_client.config.client_side_validation && ipfixdfw_collector_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipfixdfw_collector_profile' when calling MonitoringApi.patch_ipfixdfw_collector_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-dfw-collector-profiles/{ipfix-dfw-collector-profile-id}'.sub('{' + 'ipfix-dfw-collector-profile-id' + '}', ipfix_dfw_collector_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfixdfw_collector_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#patch_ipfixdfw_collector_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IPFIX DFW profile
    # Create a new IPFIX DFW profile if the IPFIX DFW profile with given id does not already exist. If the IPFIX DFW profile with the given id already exists, patch with the existing IPFIX DFW profile. 
    # @param ipfix_dfw_profile_id IPFIX DFW Profile ID
    # @param ipfixdfw_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_ipfixdfw_profile(ipfix_dfw_profile_id, ipfixdfw_profile, opts = {})
      patch_ipfixdfw_profile_with_http_info(ipfix_dfw_profile_id, ipfixdfw_profile, opts)
      nil
    end

    # Patch IPFIX DFW profile
    # Create a new IPFIX DFW profile if the IPFIX DFW profile with given id does not already exist. If the IPFIX DFW profile with the given id already exists, patch with the existing IPFIX DFW profile. 
    # @param ipfix_dfw_profile_id IPFIX DFW Profile ID
    # @param ipfixdfw_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ipfixdfw_profile_with_http_info(ipfix_dfw_profile_id, ipfixdfw_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.patch_ipfixdfw_profile ...'
      end
      # verify the required parameter 'ipfix_dfw_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_dfw_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_dfw_profile_id' when calling MonitoringApi.patch_ipfixdfw_profile"
      end
      # verify the required parameter 'ipfixdfw_profile' is set
      if @api_client.config.client_side_validation && ipfixdfw_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipfixdfw_profile' when calling MonitoringApi.patch_ipfixdfw_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-dfw-profiles/{ipfix-dfw-profile-id}'.sub('{' + 'ipfix-dfw-profile-id' + '}', ipfix_dfw_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfixdfw_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#patch_ipfixdfw_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IPFIX collector profile
    # Create a new IPFIX collector profile if the IPFIX collector profile with given id does not already exist. If the IPFIX collector profile with the given id already exists, patch with the existing IPFIX collector profile. 
    # @param ipfix_l2_collector_profile_id IPFIX collector profile id
    # @param ipfixl2_collector_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_ipfixl2_collector_profile(ipfix_l2_collector_profile_id, ipfixl2_collector_profile, opts = {})
      patch_ipfixl2_collector_profile_with_http_info(ipfix_l2_collector_profile_id, ipfixl2_collector_profile, opts)
      nil
    end

    # Patch IPFIX collector profile
    # Create a new IPFIX collector profile if the IPFIX collector profile with given id does not already exist. If the IPFIX collector profile with the given id already exists, patch with the existing IPFIX collector profile. 
    # @param ipfix_l2_collector_profile_id IPFIX collector profile id
    # @param ipfixl2_collector_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ipfixl2_collector_profile_with_http_info(ipfix_l2_collector_profile_id, ipfixl2_collector_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.patch_ipfixl2_collector_profile ...'
      end
      # verify the required parameter 'ipfix_l2_collector_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_l2_collector_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_l2_collector_profile_id' when calling MonitoringApi.patch_ipfixl2_collector_profile"
      end
      # verify the required parameter 'ipfixl2_collector_profile' is set
      if @api_client.config.client_side_validation && ipfixl2_collector_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipfixl2_collector_profile' when calling MonitoringApi.patch_ipfixl2_collector_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-l2-collector-profiles/{ipfix-l2-collector-profile-id}'.sub('{' + 'ipfix-l2-collector-profile-id' + '}', ipfix_l2_collector_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfixl2_collector_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#patch_ipfixl2_collector_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IPFIX L2profile
    # Create a new IPFIX L2 profile if the IPFIX L2 profile with given id does not already exist. If the IPFIX L2 profile with the given id already exists, patch with the existing IPFIX L2 profile. 
    # @param ipfix_l2_profile_id IPFIX L2 Profile ID
    # @param ipfixl2_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_ipfixl2_profile(ipfix_l2_profile_id, ipfixl2_profile, opts = {})
      patch_ipfixl2_profile_with_http_info(ipfix_l2_profile_id, ipfixl2_profile, opts)
      nil
    end

    # Patch IPFIX L2profile
    # Create a new IPFIX L2 profile if the IPFIX L2 profile with given id does not already exist. If the IPFIX L2 profile with the given id already exists, patch with the existing IPFIX L2 profile. 
    # @param ipfix_l2_profile_id IPFIX L2 Profile ID
    # @param ipfixl2_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ipfixl2_profile_with_http_info(ipfix_l2_profile_id, ipfixl2_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.patch_ipfixl2_profile ...'
      end
      # verify the required parameter 'ipfix_l2_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_l2_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_l2_profile_id' when calling MonitoringApi.patch_ipfixl2_profile"
      end
      # verify the required parameter 'ipfixl2_profile' is set
      if @api_client.config.client_side_validation && ipfixl2_profile.nil?
        fail ArgumentError, "Missing the required parameter 'ipfixl2_profile' when calling MonitoringApi.patch_ipfixl2_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-l2-profiles/{ipfix-l2-profile-id}'.sub('{' + 'ipfix-l2-profile-id' + '}', ipfix_l2_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ipfixl2_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#patch_ipfixl2_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a livetrace config
    # If a livetrace config with the specified identifier is not present, then create a new livetrace config. If it already exists, update the livetrace config with a full replacement. 
    # @param livetrace_id 
    # @param live_trace_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_live_trace_config(livetrace_id, live_trace_config, opts = {})
      patch_live_trace_config_with_http_info(livetrace_id, live_trace_config, opts)
      nil
    end

    # Create or update a livetrace config
    # If a livetrace config with the specified identifier is not present, then create a new livetrace config. If it already exists, update the livetrace config with a full replacement. 
    # @param livetrace_id 
    # @param live_trace_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_live_trace_config_with_http_info(livetrace_id, live_trace_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.patch_live_trace_config ...'
      end
      # verify the required parameter 'livetrace_id' is set
      if @api_client.config.client_side_validation && livetrace_id.nil?
        fail ArgumentError, "Missing the required parameter 'livetrace_id' when calling MonitoringApi.patch_live_trace_config"
      end
      # verify the required parameter 'live_trace_config' is set
      if @api_client.config.client_side_validation && live_trace_config.nil?
        fail ArgumentError, "Missing the required parameter 'live_trace_config' when calling MonitoringApi.patch_live_trace_config"
      end
      # resource path
      local_var_path = '/infra/livetraces/{livetrace-id}'.sub('{' + 'livetrace-id' + '}', livetrace_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(live_trace_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#patch_live_trace_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Dynamic Runbook Instance
    # Create an Online Diagnostic System Dynamic Runbook Instance with the specified identifier if not existed, or update an existing Online Diagnostic System Dynamic Runbook Instance otherwise. 
    # @param instance_id Identifier of a Dynamic Runbook Instance
    # @param ods_dynamic_runbook_instance 
    # @param [Hash] opts the optional parameters
    # @return [OdsDynamicRunbookInstance]
    def patch_ods_dynamic_runbook_instance(instance_id, ods_dynamic_runbook_instance, opts = {})
      data, _status_code, _headers = patch_ods_dynamic_runbook_instance_with_http_info(instance_id, ods_dynamic_runbook_instance, opts)
      data
    end

    # Create or update a Dynamic Runbook Instance
    # Create an Online Diagnostic System Dynamic Runbook Instance with the specified identifier if not existed, or update an existing Online Diagnostic System Dynamic Runbook Instance otherwise. 
    # @param instance_id Identifier of a Dynamic Runbook Instance
    # @param ods_dynamic_runbook_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsDynamicRunbookInstance, Fixnum, Hash)>] OdsDynamicRunbookInstance data, response status code and response headers
    def patch_ods_dynamic_runbook_instance_with_http_info(instance_id, ods_dynamic_runbook_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.patch_ods_dynamic_runbook_instance ...'
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling MonitoringApi.patch_ods_dynamic_runbook_instance"
      end
      # verify the required parameter 'ods_dynamic_runbook_instance' is set
      if @api_client.config.client_side_validation && ods_dynamic_runbook_instance.nil?
        fail ArgumentError, "Missing the required parameter 'ods_dynamic_runbook_instance' when calling MonitoringApi.patch_ods_dynamic_runbook_instance"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-runbook-instances/{instance-id}'.sub('{' + 'instance-id' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ods_dynamic_runbook_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsDynamicRunbookInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#patch_ods_dynamic_runbook_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create request to collect artifacts generated by an Online Diagnostic System runbook invocations
    # Create request to collect the artifacts generated by Online Diagnostic System runbook invocations in a batch. 
    # @param request_id 
    # @param ods_runbook_invocation_artifact_batch_request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ods_invocation_artifact_in_batch_request(request_id, ods_runbook_invocation_artifact_batch_request, opts = {})
      patch_ods_invocation_artifact_in_batch_request_with_http_info(request_id, ods_runbook_invocation_artifact_batch_request, opts)
      nil
    end

    # Create request to collect artifacts generated by an Online Diagnostic System runbook invocations
    # Create request to collect the artifacts generated by Online Diagnostic System runbook invocations in a batch. 
    # @param request_id 
    # @param ods_runbook_invocation_artifact_batch_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ods_invocation_artifact_in_batch_request_with_http_info(request_id, ods_runbook_invocation_artifact_batch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.patch_ods_invocation_artifact_in_batch_request ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling MonitoringApi.patch_ods_invocation_artifact_in_batch_request"
      end
      # verify the required parameter 'ods_runbook_invocation_artifact_batch_request' is set
      if @api_client.config.client_side_validation && ods_runbook_invocation_artifact_batch_request.nil?
        fail ArgumentError, "Missing the required parameter 'ods_runbook_invocation_artifact_batch_request' when calling MonitoringApi.patch_ods_invocation_artifact_in_batch_request"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-artifacts/{request-id}'.sub('{' + 'request-id' + '}', request_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ods_runbook_invocation_artifact_batch_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#patch_ods_invocation_artifact_in_batch_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a runbook setting
    # Create an Online Diagnostic System Runbook setting with the specified identifier if not existed, update an existing Online Diagnostic System runbook profile otherwise. 
    # @param runbook_setting_id Identifier of a runbook setting
    # @param ods_runbook_setting 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ods_runbook_setting(runbook_setting_id, ods_runbook_setting, opts = {})
      patch_ods_runbook_setting_with_http_info(runbook_setting_id, ods_runbook_setting, opts)
      nil
    end

    # Create or update a runbook setting
    # Create an Online Diagnostic System Runbook setting with the specified identifier if not existed, update an existing Online Diagnostic System runbook profile otherwise. 
    # @param runbook_setting_id Identifier of a runbook setting
    # @param ods_runbook_setting 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ods_runbook_setting_with_http_info(runbook_setting_id, ods_runbook_setting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.patch_ods_runbook_setting ...'
      end
      # verify the required parameter 'runbook_setting_id' is set
      if @api_client.config.client_side_validation && runbook_setting_id.nil?
        fail ArgumentError, "Missing the required parameter 'runbook_setting_id' when calling MonitoringApi.patch_ods_runbook_setting"
      end
      # verify the required parameter 'ods_runbook_setting' is set
      if @api_client.config.client_side_validation && ods_runbook_setting.nil?
        fail ArgumentError, "Missing the required parameter 'ods_runbook_setting' when calling MonitoringApi.patch_ods_runbook_setting"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-settings/{runbook-setting-id}'.sub('{' + 'runbook-setting-id' + '}', runbook_setting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ods_runbook_setting)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#patch_ods_runbook_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates the thresholds for specified NSX Objects.
    # Updates the warning threshold(s) for NSX Objects specified, does not modify thresholds for any other objects. Threshold type NUMBER_OF_GATEWAY_POLICY is deprecated instead use NUMBER_OF_GATEWAY_FIREWALL_RULES. 
    # @param capacity_threshold 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_policy_capacity_thresholds(capacity_threshold, opts = {})
      patch_policy_capacity_thresholds_with_http_info(capacity_threshold, opts)
      nil
    end

    # Updates the thresholds for specified NSX Objects.
    # Updates the warning threshold(s) for NSX Objects specified, does not modify thresholds for any other objects. Threshold type NUMBER_OF_GATEWAY_POLICY is deprecated instead use NUMBER_OF_GATEWAY_FIREWALL_RULES. 
    # @param capacity_threshold 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_policy_capacity_thresholds_with_http_info(capacity_threshold, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.patch_policy_capacity_thresholds ...'
      end
      # verify the required parameter 'capacity_threshold' is set
      if @api_client.config.client_side_validation && capacity_threshold.nil?
        fail ArgumentError, "Missing the required parameter 'capacity_threshold' when calling MonitoringApi.patch_policy_capacity_thresholds"
      end
      # resource path
      local_var_path = '/infra/capacity/threshold'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(capacity_threshold)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#patch_policy_capacity_thresholds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch latency profile
    # Patch latency profile. 
    # @param profile_id Latency profile id
    # @param policy_latency_stat_profile 
    # @param [Hash] opts the optional parameters
    # @return [PolicyLatencyStatProfile]
    def patch_policy_latency_stat_profile(profile_id, policy_latency_stat_profile, opts = {})
      data, _status_code, _headers = patch_policy_latency_stat_profile_with_http_info(profile_id, policy_latency_stat_profile, opts)
      data
    end

    # Patch latency profile
    # Patch latency profile. 
    # @param profile_id Latency profile id
    # @param policy_latency_stat_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyLatencyStatProfile, Fixnum, Hash)>] PolicyLatencyStatProfile data, response status code and response headers
    def patch_policy_latency_stat_profile_with_http_info(profile_id, policy_latency_stat_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.patch_policy_latency_stat_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling MonitoringApi.patch_policy_latency_stat_profile"
      end
      # verify the required parameter 'policy_latency_stat_profile' is set
      if @api_client.config.client_side_validation && policy_latency_stat_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_latency_stat_profile' when calling MonitoringApi.patch_policy_latency_stat_profile"
      end
      # resource path
      local_var_path = '/infra/latency-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_latency_stat_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyLatencyStatProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#patch_policy_latency_stat_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Port Mirroring Instance.
    # Create a new Port Mirroring Instance if the Port Mirroring Instance with given id does not already exist. If the Port Mirroring Instance with the given id already exists, patch with the existing Port Mirroring Instance. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param port_mirroring_instance 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_port_mirroring_instance(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts = {})
      patch_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts)
      nil
    end

    # Patch Port Mirroring Instance.
    # Create a new Port Mirroring Instance if the Port Mirroring Instance with given id does not already exist. If the Port Mirroring Instance with the given id already exists, patch with the existing Port Mirroring Instance. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param port_mirroring_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, port_mirroring_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.patch_port_mirroring_instance ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling MonitoringApi.patch_port_mirroring_instance"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling MonitoringApi.patch_port_mirroring_instance"
      end
      # verify the required parameter 'port_mirroring_instance_id' is set
      if @api_client.config.client_side_validation && port_mirroring_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance_id' when calling MonitoringApi.patch_port_mirroring_instance"
      end
      # verify the required parameter 'port_mirroring_instance' is set
      if @api_client.config.client_side_validation && port_mirroring_instance.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance' when calling MonitoringApi.patch_port_mirroring_instance"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'port-mirroring-instance-id' + '}', port_mirroring_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_mirroring_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#patch_port_mirroring_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Port Mirroring Profile.
    # Create a new Port Mirroring Profile if the Port Mirroring Profile with given id does not already exist. If the Port Mirroring Profile with the given id already exists, patch with the existing Port Mirroring Profile. Realized entities of this API can be found using the path of monitoring profile binding map that is used to apply this profile. 
    # @param port_mirroring_profile_id Port Mirroring Profile Id
    # @param port_mirroring_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object (default to false)
    # @return [nil]
    def patch_port_mirroring_profile(port_mirroring_profile_id, port_mirroring_profile, opts = {})
      patch_port_mirroring_profile_with_http_info(port_mirroring_profile_id, port_mirroring_profile, opts)
      nil
    end

    # Patch Port Mirroring Profile.
    # Create a new Port Mirroring Profile if the Port Mirroring Profile with given id does not already exist. If the Port Mirroring Profile with the given id already exists, patch with the existing Port Mirroring Profile. Realized entities of this API can be found using the path of monitoring profile binding map that is used to apply this profile. 
    # @param port_mirroring_profile_id Port Mirroring Profile Id
    # @param port_mirroring_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override Locally override the global object
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_port_mirroring_profile_with_http_info(port_mirroring_profile_id, port_mirroring_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.patch_port_mirroring_profile ...'
      end
      # verify the required parameter 'port_mirroring_profile_id' is set
      if @api_client.config.client_side_validation && port_mirroring_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_profile_id' when calling MonitoringApi.patch_port_mirroring_profile"
      end
      # verify the required parameter 'port_mirroring_profile' is set
      if @api_client.config.client_side_validation && port_mirroring_profile.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_profile' when calling MonitoringApi.patch_port_mirroring_profile"
      end
      # resource path
      local_var_path = '/infra/port-mirroring-profiles/{port-mirroring-profile-id}'.sub('{' + 'port-mirroring-profile-id' + '}', port_mirroring_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'override'] = opts[:'override'] if !opts[:'override'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(port_mirroring_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#patch_port_mirroring_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace Sha dynamic plugin
    # Create or Replace Sha dynamic plugin. 
    # @param plugin_id Sha plugin id
    # @param sha_dynamic_plugin 
    # @param [Hash] opts the optional parameters
    # @return [ShaDynamicPlugin]
    def patch_sha_dynamic_plugin(plugin_id, sha_dynamic_plugin, opts = {})
      data, _status_code, _headers = patch_sha_dynamic_plugin_with_http_info(plugin_id, sha_dynamic_plugin, opts)
      data
    end

    # Create or Replace Sha dynamic plugin
    # Create or Replace Sha dynamic plugin. 
    # @param plugin_id Sha plugin id
    # @param sha_dynamic_plugin 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaDynamicPlugin, Fixnum, Hash)>] ShaDynamicPlugin data, response status code and response headers
    def patch_sha_dynamic_plugin_with_http_info(plugin_id, sha_dynamic_plugin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.patch_sha_dynamic_plugin ...'
      end
      # verify the required parameter 'plugin_id' is set
      if @api_client.config.client_side_validation && plugin_id.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_id' when calling MonitoringApi.patch_sha_dynamic_plugin"
      end
      # verify the required parameter 'sha_dynamic_plugin' is set
      if @api_client.config.client_side_validation && sha_dynamic_plugin.nil?
        fail ArgumentError, "Missing the required parameter 'sha_dynamic_plugin' when calling MonitoringApi.patch_sha_dynamic_plugin"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-plugins/{plugin-id}'.sub('{' + 'plugin-id' + '}', plugin_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sha_dynamic_plugin)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaDynamicPlugin')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#patch_sha_dynamic_plugin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a SHA monitor profile
    # Create or update a SHA monitor profile. 
    # @param monitor_id 
    # @param monitor_profile_id 
    # @param sha_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force 
    # @return [ShaMonitorProfile]
    def patch_sha_monitor_profile(monitor_id, monitor_profile_id, sha_monitor_profile, opts = {})
      data, _status_code, _headers = patch_sha_monitor_profile_with_http_info(monitor_id, monitor_profile_id, sha_monitor_profile, opts)
      data
    end

    # Create or update a SHA monitor profile
    # Create or update a SHA monitor profile. 
    # @param monitor_id 
    # @param monitor_profile_id 
    # @param sha_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force 
    # @return [Array<(ShaMonitorProfile, Fixnum, Hash)>] ShaMonitorProfile data, response status code and response headers
    def patch_sha_monitor_profile_with_http_info(monitor_id, monitor_profile_id, sha_monitor_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.patch_sha_monitor_profile ...'
      end
      # verify the required parameter 'monitor_id' is set
      if @api_client.config.client_side_validation && monitor_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_id' when calling MonitoringApi.patch_sha_monitor_profile"
      end
      # verify the required parameter 'monitor_profile_id' is set
      if @api_client.config.client_side_validation && monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_profile_id' when calling MonitoringApi.patch_sha_monitor_profile"
      end
      # verify the required parameter 'sha_monitor_profile' is set
      if @api_client.config.client_side_validation && sha_monitor_profile.nil?
        fail ArgumentError, "Missing the required parameter 'sha_monitor_profile' when calling MonitoringApi.patch_sha_monitor_profile"
      end
      # resource path
      local_var_path = '/infra/sha/monitors/{monitor-id}/profiles/{monitor-profile-id}'.sub('{' + 'monitor-id' + '}', monitor_id.to_s).sub('{' + 'monitor-profile-id' + '}', monitor_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sha_monitor_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaMonitorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#patch_sha_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Replace SHA profile
    # Create or Replace Sha profile. 
    # @param sha_profile_id Sha profile id
    # @param sha_plugin_profile 
    # @param [Hash] opts the optional parameters
    # @return [ShaPluginProfile]
    def patch_sha_plugin_profile(sha_profile_id, sha_plugin_profile, opts = {})
      data, _status_code, _headers = patch_sha_plugin_profile_with_http_info(sha_profile_id, sha_plugin_profile, opts)
      data
    end

    # Create or Replace SHA profile
    # Create or Replace Sha profile. 
    # @param sha_profile_id Sha profile id
    # @param sha_plugin_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaPluginProfile, Fixnum, Hash)>] ShaPluginProfile data, response status code and response headers
    def patch_sha_plugin_profile_with_http_info(sha_profile_id, sha_plugin_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.patch_sha_plugin_profile ...'
      end
      # verify the required parameter 'sha_profile_id' is set
      if @api_client.config.client_side_validation && sha_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'sha_profile_id' when calling MonitoringApi.patch_sha_plugin_profile"
      end
      # verify the required parameter 'sha_plugin_profile' is set
      if @api_client.config.client_side_validation && sha_plugin_profile.nil?
        fail ArgumentError, "Missing the required parameter 'sha_plugin_profile' when calling MonitoringApi.patch_sha_plugin_profile"
      end
      # resource path
      local_var_path = '/infra/sha/plugin-profiles/{sha-profile-id}'.sub('{' + 'sha-profile-id' + '}', sha_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sha_plugin_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaPluginProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#patch_sha_plugin_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a traceflow config
    # If a traceflow config with the traceflow-id is not already present, create a new traceflow config. If it already exists, update the traceflow config. This is a full replace. This configuration will be cleaned up by the system after two hours of inactivity. To start traceflow on a DHCP port in a custom project, enforcement point path is required.  <br> Please use PUT API to start new Traceflow sessions. By default, traceflow observations will be cleanup every two hours,  please use is_transient flag to avoid the cleanup. 
    # @param traceflow_id 
    # @param traceflow_config 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [nil]
    def patch_traceflow_config(traceflow_id, traceflow_config, opts = {})
      patch_traceflow_config_with_http_info(traceflow_id, traceflow_config, opts)
      nil
    end

    # Create or update a traceflow config
    # If a traceflow config with the traceflow-id is not already present, create a new traceflow config. If it already exists, update the traceflow config. This is a full replace. This configuration will be cleaned up by the system after two hours of inactivity. To start traceflow on a DHCP port in a custom project, enforcement point path is required.  &lt;br&gt; Please use PUT API to start new Traceflow sessions. By default, traceflow observations will be cleanup every two hours,  please use is_transient flag to avoid the cleanup. 
    # @param traceflow_id 
    # @param traceflow_config 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_traceflow_config_with_http_info(traceflow_id, traceflow_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.patch_traceflow_config ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.patch_traceflow_config"
      end
      # verify the required parameter 'traceflow_config' is set
      if @api_client.config.client_side_validation && traceflow_config.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_config' when calling MonitoringApi.patch_traceflow_config"
      end
      # resource path
      local_var_path = '/infra/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(traceflow_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#patch_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Antrea heartbeat configuration
    # Read Antrea heartbeat configuration
    # @param site_id 
    # @param enforcementpoint_id 
    # @param cluster_control_plane_id 
    # @param [Hash] opts the optional parameters
    # @return [AntreaHeartbeatConfig]
    def read_antrea_heartbeat_config(site_id, enforcementpoint_id, cluster_control_plane_id, opts = {})
      data, _status_code, _headers = read_antrea_heartbeat_config_with_http_info(site_id, enforcementpoint_id, cluster_control_plane_id, opts)
      data
    end

    # Read Antrea heartbeat configuration
    # Read Antrea heartbeat configuration
    # @param site_id 
    # @param enforcementpoint_id 
    # @param cluster_control_plane_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AntreaHeartbeatConfig, Fixnum, Hash)>] AntreaHeartbeatConfig data, response status code and response headers
    def read_antrea_heartbeat_config_with_http_info(site_id, enforcementpoint_id, cluster_control_plane_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_antrea_heartbeat_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.read_antrea_heartbeat_config"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling MonitoringApi.read_antrea_heartbeat_config"
      end
      # verify the required parameter 'cluster_control_plane_id' is set
      if @api_client.config.client_side_validation && cluster_control_plane_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_control_plane_id' when calling MonitoringApi.read_antrea_heartbeat_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/cluster-control-planes/{cluster-control-plane-id}/heartbeat-config'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'cluster-control-plane-id' + '}', cluster_control_plane_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AntreaHeartbeatConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_antrea_heartbeat_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Antrea cluster status
    # Read Antrea cluster status for a given Antrea cluster identifier.
    # @param site_id 
    # @param enforcementpoint_id 
    # @param cluster_control_plane_id 
    # @param [Hash] opts the optional parameters
    # @return [AntreaClusterInfo]
    def read_antrea_status(site_id, enforcementpoint_id, cluster_control_plane_id, opts = {})
      data, _status_code, _headers = read_antrea_status_with_http_info(site_id, enforcementpoint_id, cluster_control_plane_id, opts)
      data
    end

    # Read Antrea cluster status
    # Read Antrea cluster status for a given Antrea cluster identifier.
    # @param site_id 
    # @param enforcementpoint_id 
    # @param cluster_control_plane_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AntreaClusterInfo, Fixnum, Hash)>] AntreaClusterInfo data, response status code and response headers
    def read_antrea_status_with_http_info(site_id, enforcementpoint_id, cluster_control_plane_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_antrea_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.read_antrea_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling MonitoringApi.read_antrea_status"
      end
      # verify the required parameter 'cluster_control_plane_id' is set
      if @api_client.config.client_side_validation && cluster_control_plane_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_control_plane_id' when calling MonitoringApi.read_antrea_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/cluster-control-planes/{cluster-control-plane-id}/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'cluster-control-plane-id' + '}', cluster_control_plane_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AntreaClusterInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_antrea_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Antrea traceflow config
    # Read Antrea traceflow config with id traceflow-id
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [AntreaTraceflowConfig]
    def read_antrea_traceflow_config(traceflow_id, opts = {})
      data, _status_code, _headers = read_antrea_traceflow_config_with_http_info(traceflow_id, opts)
      data
    end

    # Read Antrea traceflow config
    # Read Antrea traceflow config with id traceflow-id
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AntreaTraceflowConfig, Fixnum, Hash)>] AntreaTraceflowConfig data, response status code and response headers
    def read_antrea_traceflow_config_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_antrea_traceflow_config ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.read_antrea_traceflow_config"
      end
      # resource path
      local_var_path = '/infra/antrea/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AntreaTraceflowConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_antrea_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Antrea traceflow status
    # Read Antrea traceflow status with id traceflow-id
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [AntreaTraceflowStatus]
    def read_antrea_traceflow_status(traceflow_id, opts = {})
      data, _status_code, _headers = read_antrea_traceflow_status_with_http_info(traceflow_id, opts)
      data
    end

    # Read Antrea traceflow status
    # Read Antrea traceflow status with id traceflow-id
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(AntreaTraceflowStatus, Fixnum, Hash)>] AntreaTraceflowStatus data, response status code and response headers
    def read_antrea_traceflow_status_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_antrea_traceflow_status ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.read_antrea_traceflow_status"
      end
      # resource path
      local_var_path = '/infra/antrea/traceflows/{traceflow-id}/status'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AntreaTraceflowStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_antrea_traceflow_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read BMC cluster status
    # Read BMC cluster status for a given BMC cluster identifier.
    # @param site_id 
    # @param enforcementpoint_id 
    # @param cluster_control_plane_id 
    # @param [Hash] opts the optional parameters
    # @return [BMCClusterInfo]
    def read_bmc_status(site_id, enforcementpoint_id, cluster_control_plane_id, opts = {})
      data, _status_code, _headers = read_bmc_status_with_http_info(site_id, enforcementpoint_id, cluster_control_plane_id, opts)
      data
    end

    # Read BMC cluster status
    # Read BMC cluster status for a given BMC cluster identifier.
    # @param site_id 
    # @param enforcementpoint_id 
    # @param cluster_control_plane_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BMCClusterInfo, Fixnum, Hash)>] BMCClusterInfo data, response status code and response headers
    def read_bmc_status_with_http_info(site_id, enforcementpoint_id, cluster_control_plane_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_bmc_status ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.read_bmc_status"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling MonitoringApi.read_bmc_status"
      end
      # verify the required parameter 'cluster_control_plane_id' is set
      if @api_client.config.client_side_validation && cluster_control_plane_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_control_plane_id' when calling MonitoringApi.read_bmc_status"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/bm-ccpn/{cluster-control-plane-id}/status'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'cluster-control-plane-id' + '}', cluster_control_plane_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BMCClusterInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_bmc_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPFIX dfw Collector profile
    # API will return details of IPFIX dfw collector profile. If profile does not exist, it will return 404. 
    # @param ipfix_dfw_collector_profile_id IPFIX dfw collector profile id
    # @param [Hash] opts the optional parameters
    # @return [IPFIXDFWCollectorProfile]
    def read_ipfixdfw_collector_profile(ipfix_dfw_collector_profile_id, opts = {})
      data, _status_code, _headers = read_ipfixdfw_collector_profile_with_http_info(ipfix_dfw_collector_profile_id, opts)
      data
    end

    # Get IPFIX dfw Collector profile
    # API will return details of IPFIX dfw collector profile. If profile does not exist, it will return 404. 
    # @param ipfix_dfw_collector_profile_id IPFIX dfw collector profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPFIXDFWCollectorProfile, Fixnum, Hash)>] IPFIXDFWCollectorProfile data, response status code and response headers
    def read_ipfixdfw_collector_profile_with_http_info(ipfix_dfw_collector_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_ipfixdfw_collector_profile ...'
      end
      # verify the required parameter 'ipfix_dfw_collector_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_dfw_collector_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_dfw_collector_profile_id' when calling MonitoringApi.read_ipfixdfw_collector_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-dfw-collector-profiles/{ipfix-dfw-collector-profile-id}'.sub('{' + 'ipfix-dfw-collector-profile-id' + '}', ipfix_dfw_collector_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXDFWCollectorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_ipfixdfw_collector_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPFIX DFW Profile
    # API will return details of IPFIX DFW profile. 
    # @param ipfix_dfw_profile_id IPFIX DFW collection id
    # @param [Hash] opts the optional parameters
    # @return [IPFIXDFWProfile]
    def read_ipfixdfw_profile(ipfix_dfw_profile_id, opts = {})
      data, _status_code, _headers = read_ipfixdfw_profile_with_http_info(ipfix_dfw_profile_id, opts)
      data
    end

    # Get IPFIX DFW Profile
    # API will return details of IPFIX DFW profile. 
    # @param ipfix_dfw_profile_id IPFIX DFW collection id
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPFIXDFWProfile, Fixnum, Hash)>] IPFIXDFWProfile data, response status code and response headers
    def read_ipfixdfw_profile_with_http_info(ipfix_dfw_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_ipfixdfw_profile ...'
      end
      # verify the required parameter 'ipfix_dfw_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_dfw_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_dfw_profile_id' when calling MonitoringApi.read_ipfixdfw_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-dfw-profiles/{ipfix-dfw-profile-id}'.sub('{' + 'ipfix-dfw-profile-id' + '}', ipfix_dfw_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXDFWProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_ipfixdfw_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPFIX Collector profile
    # API will return details of IPFIX collector profile. 
    # @param ipfix_l2_collector_profile_id IPFIX collector profile id
    # @param [Hash] opts the optional parameters
    # @return [IPFIXL2CollectorProfile]
    def read_ipfixl2_collector_profile(ipfix_l2_collector_profile_id, opts = {})
      data, _status_code, _headers = read_ipfixl2_collector_profile_with_http_info(ipfix_l2_collector_profile_id, opts)
      data
    end

    # Get IPFIX Collector profile
    # API will return details of IPFIX collector profile. 
    # @param ipfix_l2_collector_profile_id IPFIX collector profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPFIXL2CollectorProfile, Fixnum, Hash)>] IPFIXL2CollectorProfile data, response status code and response headers
    def read_ipfixl2_collector_profile_with_http_info(ipfix_l2_collector_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_ipfixl2_collector_profile ...'
      end
      # verify the required parameter 'ipfix_l2_collector_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_l2_collector_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_l2_collector_profile_id' when calling MonitoringApi.read_ipfixl2_collector_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-l2-collector-profiles/{ipfix-l2-collector-profile-id}'.sub('{' + 'ipfix-l2-collector-profile-id' + '}', ipfix_l2_collector_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXL2CollectorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_ipfixl2_collector_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IPFIX L2 Profile
    # API will return details of IPFIX L2 profile. 
    # @param ipfix_l2_profile_id IPFIX L2 profile id
    # @param [Hash] opts the optional parameters
    # @return [IPFIXL2Profile]
    def read_ipfixl2_profile(ipfix_l2_profile_id, opts = {})
      data, _status_code, _headers = read_ipfixl2_profile_with_http_info(ipfix_l2_profile_id, opts)
      data
    end

    # Get IPFIX L2 Profile
    # API will return details of IPFIX L2 profile. 
    # @param ipfix_l2_profile_id IPFIX L2 profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPFIXL2Profile, Fixnum, Hash)>] IPFIXL2Profile data, response status code and response headers
    def read_ipfixl2_profile_with_http_info(ipfix_l2_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_ipfixl2_profile ...'
      end
      # verify the required parameter 'ipfix_l2_profile_id' is set
      if @api_client.config.client_side_validation && ipfix_l2_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipfix_l2_profile_id' when calling MonitoringApi.read_ipfixl2_profile"
      end
      # resource path
      local_var_path = '/infra/ipfix-l2-profiles/{ipfix-l2-profile-id}'.sub('{' + 'ipfix-l2-profile-id' + '}', ipfix_l2_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IPFIXL2Profile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_ipfixl2_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a livetrace config
    # Read livetrace config with the specified identifier. 
    # @param livetrace_id 
    # @param [Hash] opts the optional parameters
    # @return [LiveTraceConfig]
    def read_live_trace_config(livetrace_id, opts = {})
      data, _status_code, _headers = read_live_trace_config_with_http_info(livetrace_id, opts)
      data
    end

    # Read a livetrace config
    # Read livetrace config with the specified identifier. 
    # @param livetrace_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LiveTraceConfig, Fixnum, Hash)>] LiveTraceConfig data, response status code and response headers
    def read_live_trace_config_with_http_info(livetrace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_live_trace_config ...'
      end
      # verify the required parameter 'livetrace_id' is set
      if @api_client.config.client_side_validation && livetrace_id.nil?
        fail ArgumentError, "Missing the required parameter 'livetrace_id' when calling MonitoringApi.read_live_trace_config"
      end
      # resource path
      local_var_path = '/infra/livetraces/{livetrace-id}'.sub('{' + 'livetrace-id' + '}', livetrace_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LiveTraceConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_live_trace_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read livetrace result
    # Read result for a livetrace config with the specified identifier. 
    # @param livetrace_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [LiveTraceResult]
    def read_live_trace_result(livetrace_id, opts = {})
      data, _status_code, _headers = read_live_trace_result_with_http_info(livetrace_id, opts)
      data
    end

    # Read livetrace result
    # Read result for a livetrace config with the specified identifier. 
    # @param livetrace_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(LiveTraceResult, Fixnum, Hash)>] LiveTraceResult data, response status code and response headers
    def read_live_trace_result_with_http_info(livetrace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_live_trace_result ...'
      end
      # verify the required parameter 'livetrace_id' is set
      if @api_client.config.client_side_validation && livetrace_id.nil?
        fail ArgumentError, "Missing the required parameter 'livetrace_id' when calling MonitoringApi.read_live_trace_result"
      end
      # resource path
      local_var_path = '/infra/livetraces/{livetrace-id}/result'.sub('{' + 'livetrace-id' + '}', livetrace_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LiveTraceResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_live_trace_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read livetrace status
    # Read status for a livetrace config with the specified identifier. 
    # @param livetrace_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [LiveTraceStatus]
    def read_live_trace_status(livetrace_id, opts = {})
      data, _status_code, _headers = read_live_trace_status_with_http_info(livetrace_id, opts)
      data
    end

    # Read livetrace status
    # Read status for a livetrace config with the specified identifier. 
    # @param livetrace_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(LiveTraceStatus, Fixnum, Hash)>] LiveTraceStatus data, response status code and response headers
    def read_live_trace_status_with_http_info(livetrace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_live_trace_status ...'
      end
      # verify the required parameter 'livetrace_id' is set
      if @api_client.config.client_side_validation && livetrace_id.nil?
        fail ArgumentError, "Missing the required parameter 'livetrace_id' when calling MonitoringApi.read_live_trace_status"
      end
      # resource path
      local_var_path = '/infra/livetraces/{livetrace-id}/status'.sub('{' + 'livetrace-id' + '}', livetrace_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LiveTraceStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_live_trace_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a Dynamic Runbook
    # Read Online Diagnostic System Dynamic Runbook. 
    # @param runbook_id Identifier of a Dynamic Runbook
    # @param [Hash] opts the optional parameters
    # @return [OdsDynamicRunbook]
    def read_ods_dynamic_runbook(runbook_id, opts = {})
      data, _status_code, _headers = read_ods_dynamic_runbook_with_http_info(runbook_id, opts)
      data
    end

    # Read a Dynamic Runbook
    # Read Online Diagnostic System Dynamic Runbook. 
    # @param runbook_id Identifier of a Dynamic Runbook
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsDynamicRunbook, Fixnum, Hash)>] OdsDynamicRunbook data, response status code and response headers
    def read_ods_dynamic_runbook_with_http_info(runbook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_ods_dynamic_runbook ...'
      end
      # verify the required parameter 'runbook_id' is set
      if @api_client.config.client_side_validation && runbook_id.nil?
        fail ArgumentError, "Missing the required parameter 'runbook_id' when calling MonitoringApi.read_ods_dynamic_runbook"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-runbooks/{runbook-id}'.sub('{' + 'runbook-id' + '}', runbook_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsDynamicRunbook')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_ods_dynamic_runbook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a Dynamic Runbook Instance
    # Read Online Diagnostic System Dynamic Runbook Instance. 
    # @param instance_id Identifier of a Dynamic Runbook Instance
    # @param [Hash] opts the optional parameters
    # @return [OdsDynamicRunbookInstance]
    def read_ods_dynamic_runbook_instance(instance_id, opts = {})
      data, _status_code, _headers = read_ods_dynamic_runbook_instance_with_http_info(instance_id, opts)
      data
    end

    # Read a Dynamic Runbook Instance
    # Read Online Diagnostic System Dynamic Runbook Instance. 
    # @param instance_id Identifier of a Dynamic Runbook Instance
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsDynamicRunbookInstance, Fixnum, Hash)>] OdsDynamicRunbookInstance data, response status code and response headers
    def read_ods_dynamic_runbook_instance_with_http_info(instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_ods_dynamic_runbook_instance ...'
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling MonitoringApi.read_ods_dynamic_runbook_instance"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-runbook-instances/{instance-id}'.sub('{' + 'instance-id' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsDynamicRunbookInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_ods_dynamic_runbook_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a Dynamic Runbook Instance state
    # Read Online Diagnostic System Dynamic Runbook Instance state 
    # @param instance_id Identifier of a Dynamic Runbook Instance state
    # @param [Hash] opts the optional parameters
    # @return [OdsDynamicRunbookInstanceState]
    def read_ods_dynamic_runbook_instance_state(instance_id, opts = {})
      data, _status_code, _headers = read_ods_dynamic_runbook_instance_state_with_http_info(instance_id, opts)
      data
    end

    # Read a Dynamic Runbook Instance state
    # Read Online Diagnostic System Dynamic Runbook Instance state 
    # @param instance_id Identifier of a Dynamic Runbook Instance state
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsDynamicRunbookInstanceState, Fixnum, Hash)>] OdsDynamicRunbookInstanceState data, response status code and response headers
    def read_ods_dynamic_runbook_instance_state_with_http_info(instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_ods_dynamic_runbook_instance_state ...'
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling MonitoringApi.read_ods_dynamic_runbook_instance_state"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-runbook-instances/{instance-id}/state'.sub('{' + 'instance-id' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsDynamicRunbookInstanceState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_ods_dynamic_runbook_instance_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the status of a runbook invocation batch request
    # Read the status of a runbook invocation batch request. 
    # @param request_id 
    # @param [Hash] opts the optional parameters
    # @return [OdsRunbookInvocationArtifactBatchResult]
    def read_ods_invocation_artifact_in_batch_status(request_id, opts = {})
      data, _status_code, _headers = read_ods_invocation_artifact_in_batch_status_with_http_info(request_id, opts)
      data
    end

    # Read the status of a runbook invocation batch request
    # Read the status of a runbook invocation batch request. 
    # @param request_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsRunbookInvocationArtifactBatchResult, Fixnum, Hash)>] OdsRunbookInvocationArtifactBatchResult data, response status code and response headers
    def read_ods_invocation_artifact_in_batch_status_with_http_info(request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_ods_invocation_artifact_in_batch_status ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling MonitoringApi.read_ods_invocation_artifact_in_batch_status"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-artifacts/{request-id}'.sub('{' + 'request-id' + '}', request_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookInvocationArtifactBatchResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_ods_invocation_artifact_in_batch_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a Predefined Runbook
    # Read Online Diagnostic System Predefined Runbook. 
    # @param runbook_id Identifier of a Predefined Runbook
    # @param [Hash] opts the optional parameters
    # @return [OdsPredefinedRunbook]
    def read_ods_predefined_runbook(runbook_id, opts = {})
      data, _status_code, _headers = read_ods_predefined_runbook_with_http_info(runbook_id, opts)
      data
    end

    # Read a Predefined Runbook
    # Read Online Diagnostic System Predefined Runbook. 
    # @param runbook_id Identifier of a Predefined Runbook
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsPredefinedRunbook, Fixnum, Hash)>] OdsPredefinedRunbook data, response status code and response headers
    def read_ods_predefined_runbook_with_http_info(runbook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_ods_predefined_runbook ...'
      end
      # verify the required parameter 'runbook_id' is set
      if @api_client.config.client_side_validation && runbook_id.nil?
        fail ArgumentError, "Missing the required parameter 'runbook_id' when calling MonitoringApi.read_ods_predefined_runbook"
      end
      # resource path
      local_var_path = '/infra/sha/pre-defined-runbooks/{runbook-id}'.sub('{' + 'runbook-id' + '}', runbook_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsPredefinedRunbook')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_ods_predefined_runbook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a runbook invocation
    # Read an Online Diagnostic System Runbook invocation with the specified identifier. 
    # @param invocation_id 
    # @param [Hash] opts the optional parameters
    # @return [OdsRunbookInvocation]
    def read_ods_runbook_invocation(invocation_id, opts = {})
      data, _status_code, _headers = read_ods_runbook_invocation_with_http_info(invocation_id, opts)
      data
    end

    # Read a runbook invocation
    # Read an Online Diagnostic System Runbook invocation with the specified identifier. 
    # @param invocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsRunbookInvocation, Fixnum, Hash)>] OdsRunbookInvocation data, response status code and response headers
    def read_ods_runbook_invocation_with_http_info(invocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_ods_runbook_invocation ...'
      end
      # verify the required parameter 'invocation_id' is set
      if @api_client.config.client_side_validation && invocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invocation_id' when calling MonitoringApi.read_ods_runbook_invocation"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-invocations/{invocation-id}'.sub('{' + 'invocation-id' + '}', invocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookInvocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_ods_runbook_invocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the report of a runbook invocation
    # Read the report of an Online Diagnostic System Runbook invocation. 
    # @param invocation_id 
    # @param [Hash] opts the optional parameters
    # @return [OdsRunbookInvocationReport]
    def read_ods_runbook_invocation_report(invocation_id, opts = {})
      data, _status_code, _headers = read_ods_runbook_invocation_report_with_http_info(invocation_id, opts)
      data
    end

    # Read the report of a runbook invocation
    # Read the report of an Online Diagnostic System Runbook invocation. 
    # @param invocation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsRunbookInvocationReport, Fixnum, Hash)>] OdsRunbookInvocationReport data, response status code and response headers
    def read_ods_runbook_invocation_report_with_http_info(invocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_ods_runbook_invocation_report ...'
      end
      # verify the required parameter 'invocation_id' is set
      if @api_client.config.client_side_validation && invocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invocation_id' when calling MonitoringApi.read_ods_runbook_invocation_report"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-invocations/{invocation-id}/report'.sub('{' + 'invocation-id' + '}', invocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookInvocationReport')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_ods_runbook_invocation_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a runbook setting
    # Read an Online Diagnostic System Runbook setting with the specified identifier. 
    # @param runbook_setting_id Identifier of a runbook setting
    # @param [Hash] opts the optional parameters
    # @return [OdsRunbookSetting]
    def read_ods_runbook_setting(runbook_setting_id, opts = {})
      data, _status_code, _headers = read_ods_runbook_setting_with_http_info(runbook_setting_id, opts)
      data
    end

    # Read a runbook setting
    # Read an Online Diagnostic System Runbook setting with the specified identifier. 
    # @param runbook_setting_id Identifier of a runbook setting
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsRunbookSetting, Fixnum, Hash)>] OdsRunbookSetting data, response status code and response headers
    def read_ods_runbook_setting_with_http_info(runbook_setting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_ods_runbook_setting ...'
      end
      # verify the required parameter 'runbook_setting_id' is set
      if @api_client.config.client_side_validation && runbook_setting_id.nil?
        fail ArgumentError, "Missing the required parameter 'runbook_setting_id' when calling MonitoringApi.read_ods_runbook_setting"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-settings/{runbook-setting-id}'.sub('{' + 'runbook-setting-id' + '}', runbook_setting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookSetting')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_ods_runbook_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the status of packet capture session
    # Get the packet capture status information by session id. 
    # @param session_id Packet capture session id
    # @param [Hash] opts the optional parameters
    # @return [PktCaptureSession]
    def read_pkt_capture_session(session_id, opts = {})
      data, _status_code, _headers = read_pkt_capture_session_with_http_info(session_id, opts)
      data
    end

    # Get the status of packet capture session
    # Get the packet capture status information by session id. 
    # @param session_id Packet capture session id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PktCaptureSession, Fixnum, Hash)>] PktCaptureSession data, response status code and response headers
    def read_pkt_capture_session_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_pkt_capture_session ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling MonitoringApi.read_pkt_capture_session"
      end
      # resource path
      local_var_path = '/infra/pktcap/session/{session-id}'.sub('{' + 'session-id' + '}', session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PktCaptureSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_pkt_capture_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read latency profile
    # Read latency profile. 
    # @param profile_id Latency profile id
    # @param [Hash] opts the optional parameters
    # @return [PolicyLatencyStatProfile]
    def read_policy_latency_stat_profile(profile_id, opts = {})
      data, _status_code, _headers = read_policy_latency_stat_profile_with_http_info(profile_id, opts)
      data
    end

    # Read latency profile
    # Read latency profile. 
    # @param profile_id Latency profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyLatencyStatProfile, Fixnum, Hash)>] PolicyLatencyStatProfile data, response status code and response headers
    def read_policy_latency_stat_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_policy_latency_stat_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling MonitoringApi.read_policy_latency_stat_profile"
      end
      # resource path
      local_var_path = '/infra/latency-profiles/{profile-id}'.sub('{' + 'profile-id' + '}', profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyLatencyStatProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_policy_latency_stat_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Details of Port Mirroring Instance 
    # API will return details of port mirroring instance. If instance does not exist, it will return 404. This API is deprecated. Please use the following API: https://&lt;policy-mgr&gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param [Hash] opts the optional parameters
    # @return [PortMirroringInstance]
    def read_port_mirroring_instance(domain_id, group_id, port_mirroring_instance_id, opts = {})
      data, _status_code, _headers = read_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, opts)
      data
    end

    # Details of Port Mirroring Instance 
    # API will return details of port mirroring instance. If instance does not exist, it will return 404. This API is deprecated. Please use the following API: https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/port-mirroring-profiles 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param port_mirroring_instance_id Port Mirroring Instance Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortMirroringInstance, Fixnum, Hash)>] PortMirroringInstance data, response status code and response headers
    def read_port_mirroring_instance_with_http_info(domain_id, group_id, port_mirroring_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_port_mirroring_instance ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling MonitoringApi.read_port_mirroring_instance"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling MonitoringApi.read_port_mirroring_instance"
      end
      # verify the required parameter 'port_mirroring_instance_id' is set
      if @api_client.config.client_side_validation && port_mirroring_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_instance_id' when calling MonitoringApi.read_port_mirroring_instance"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s).sub('{' + 'port-mirroring-instance-id' + '}', port_mirroring_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_port_mirroring_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Details of Port Mirroring Profile 
    # API will return details of port mirroring profile. 
    # @param port_mirroring_profile_id Port Mirroring Profile Id
    # @param [Hash] opts the optional parameters
    # @return [PortMirroringProfile]
    def read_port_mirroring_profile(port_mirroring_profile_id, opts = {})
      data, _status_code, _headers = read_port_mirroring_profile_with_http_info(port_mirroring_profile_id, opts)
      data
    end

    # Details of Port Mirroring Profile 
    # API will return details of port mirroring profile. 
    # @param port_mirroring_profile_id Port Mirroring Profile Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortMirroringProfile, Fixnum, Hash)>] PortMirroringProfile data, response status code and response headers
    def read_port_mirroring_profile_with_http_info(port_mirroring_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_port_mirroring_profile ...'
      end
      # verify the required parameter 'port_mirroring_profile_id' is set
      if @api_client.config.client_side_validation && port_mirroring_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_mirroring_profile_id' when calling MonitoringApi.read_port_mirroring_profile"
      end
      # resource path
      local_var_path = '/infra/port-mirroring-profiles/{port-mirroring-profile-id}'.sub('{' + 'port-mirroring-profile-id' + '}', port_mirroring_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortMirroringProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_port_mirroring_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Sha dynamic plugin
    # Read Sha dynamic plugin. 
    # @param plugin_id Plugin filename
    # @param [Hash] opts the optional parameters
    # @return [ShaDynamicPlugin]
    def read_sha_dynamic_plugin(plugin_id, opts = {})
      data, _status_code, _headers = read_sha_dynamic_plugin_with_http_info(plugin_id, opts)
      data
    end

    # Read Sha dynamic plugin
    # Read Sha dynamic plugin. 
    # @param plugin_id Plugin filename
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaDynamicPlugin, Fixnum, Hash)>] ShaDynamicPlugin data, response status code and response headers
    def read_sha_dynamic_plugin_with_http_info(plugin_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_sha_dynamic_plugin ...'
      end
      # verify the required parameter 'plugin_id' is set
      if @api_client.config.client_side_validation && plugin_id.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_id' when calling MonitoringApi.read_sha_dynamic_plugin"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-plugins/{plugin-id}'.sub('{' + 'plugin-id' + '}', plugin_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaDynamicPlugin')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_sha_dynamic_plugin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read certain SHA monitor.
    # Read certain SHA monitor. 
    # @param monitor_id SHA monitor name
    # @param [Hash] opts the optional parameters
    # @return [ShaMonitor]
    def read_sha_monitor(monitor_id, opts = {})
      data, _status_code, _headers = read_sha_monitor_with_http_info(monitor_id, opts)
      data
    end

    # Read certain SHA monitor.
    # Read certain SHA monitor. 
    # @param monitor_id SHA monitor name
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaMonitor, Fixnum, Hash)>] ShaMonitor data, response status code and response headers
    def read_sha_monitor_with_http_info(monitor_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_sha_monitor ...'
      end
      # verify the required parameter 'monitor_id' is set
      if @api_client.config.client_side_validation && monitor_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_id' when calling MonitoringApi.read_sha_monitor"
      end
      # resource path
      local_var_path = '/infra/sha/monitors/{monitor-id}'.sub('{' + 'monitor-id' + '}', monitor_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaMonitor')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_sha_monitor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a SHA monitor profile
    # Read a SHA monitor profile. 
    # @param monitor_id 
    # @param monitor_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [ShaMonitorProfile]
    def read_sha_monitor_profile(monitor_id, monitor_profile_id, opts = {})
      data, _status_code, _headers = read_sha_monitor_profile_with_http_info(monitor_id, monitor_profile_id, opts)
      data
    end

    # Read a SHA monitor profile
    # Read a SHA monitor profile. 
    # @param monitor_id 
    # @param monitor_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaMonitorProfile, Fixnum, Hash)>] ShaMonitorProfile data, response status code and response headers
    def read_sha_monitor_profile_with_http_info(monitor_id, monitor_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_sha_monitor_profile ...'
      end
      # verify the required parameter 'monitor_id' is set
      if @api_client.config.client_side_validation && monitor_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_id' when calling MonitoringApi.read_sha_monitor_profile"
      end
      # verify the required parameter 'monitor_profile_id' is set
      if @api_client.config.client_side_validation && monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_profile_id' when calling MonitoringApi.read_sha_monitor_profile"
      end
      # resource path
      local_var_path = '/infra/sha/monitors/{monitor-id}/profiles/{monitor-profile-id}'.sub('{' + 'monitor-id' + '}', monitor_id.to_s).sub('{' + 'monitor-profile-id' + '}', monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaMonitorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_sha_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the SHA monitor status
    # Read the SHA monitor status on certain transport node. 
    # @param monitor_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :transport_node_id 
    # @option opts [String] :ua_node_id 
    # @return [ShaMonitorStatus]
    def read_sha_monitor_status_on_node(monitor_id, opts = {})
      data, _status_code, _headers = read_sha_monitor_status_on_node_with_http_info(monitor_id, opts)
      data
    end

    # Read the SHA monitor status
    # Read the SHA monitor status on certain transport node. 
    # @param monitor_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :transport_node_id 
    # @option opts [String] :ua_node_id 
    # @return [Array<(ShaMonitorStatus, Fixnum, Hash)>] ShaMonitorStatus data, response status code and response headers
    def read_sha_monitor_status_on_node_with_http_info(monitor_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_sha_monitor_status_on_node ...'
      end
      # verify the required parameter 'monitor_id' is set
      if @api_client.config.client_side_validation && monitor_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_id' when calling MonitoringApi.read_sha_monitor_status_on_node"
      end
      # resource path
      local_var_path = '/infra/sha/monitors/{monitor-id}/status'.sub('{' + 'monitor-id' + '}', monitor_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?
      query_params[:'ua_node_id'] = opts[:'ua_node_id'] if !opts[:'ua_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaMonitorStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_sha_monitor_status_on_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # API will return Sha profile
    # API will return Sha profile. 
    # @param sha_profile_id Sha profile id
    # @param [Hash] opts the optional parameters
    # @return [ShaPluginProfile]
    def read_sha_plugin_profile(sha_profile_id, opts = {})
      data, _status_code, _headers = read_sha_plugin_profile_with_http_info(sha_profile_id, opts)
      data
    end

    # API will return Sha profile
    # API will return Sha profile. 
    # @param sha_profile_id Sha profile id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaPluginProfile, Fixnum, Hash)>] ShaPluginProfile data, response status code and response headers
    def read_sha_plugin_profile_with_http_info(sha_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_sha_plugin_profile ...'
      end
      # verify the required parameter 'sha_profile_id' is set
      if @api_client.config.client_side_validation && sha_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'sha_profile_id' when calling MonitoringApi.read_sha_plugin_profile"
      end
      # resource path
      local_var_path = '/infra/sha/plugin-profiles/{sha-profile-id}'.sub('{' + 'sha-profile-id' + '}', sha_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaPluginProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_sha_plugin_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Sha pre-defined plugin
    # Read SHA pre-defined plugin. 
    # @param plugin_id Sha pre-defined plugin
    # @param [Hash] opts the optional parameters
    # @return [ShaPredefinedPlugin]
    def read_sha_predefined_plugin(plugin_id, opts = {})
      data, _status_code, _headers = read_sha_predefined_plugin_with_http_info(plugin_id, opts)
      data
    end

    # Read Sha pre-defined plugin
    # Read SHA pre-defined plugin. 
    # @param plugin_id Sha pre-defined plugin
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShaPredefinedPlugin, Fixnum, Hash)>] ShaPredefinedPlugin data, response status code and response headers
    def read_sha_predefined_plugin_with_http_info(plugin_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_sha_predefined_plugin ...'
      end
      # verify the required parameter 'plugin_id' is set
      if @api_client.config.client_side_validation && plugin_id.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_id' when calling MonitoringApi.read_sha_predefined_plugin"
      end
      # resource path
      local_var_path = '/infra/sha/pre-defined-plugins/{plugin-id}'.sub('{' + 'plugin-id' + '}', plugin_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaPredefinedPlugin')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_sha_predefined_plugin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read traceflow config
    # Read traceflow config with id traceflow-id. This configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [TraceflowConfig]
    def read_traceflow_config(traceflow_id, opts = {})
      data, _status_code, _headers = read_traceflow_config_with_http_info(traceflow_id, opts)
      data
    end

    # Read traceflow config
    # Read traceflow config with id traceflow-id. This configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TraceflowConfig, Fixnum, Hash)>] TraceflowConfig data, response status code and response headers
    def read_traceflow_config_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_traceflow_config ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.read_traceflow_config"
      end
      # resource path
      local_var_path = '/infra/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read traceflow status
    # Read traceflow status with id traceflow-id. Traceflow configuration will be cleaned up by the system after two hours of inactivity. Enforcement Path is optional parameter. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Traceflow]
    def read_traceflow_status(traceflow_id, opts = {})
      data, _status_code, _headers = read_traceflow_status_with_http_info(traceflow_id, opts)
      data
    end

    # Read traceflow status
    # Read traceflow status with id traceflow-id. Traceflow configuration will be cleaned up by the system after two hours of inactivity. Enforcement Path is optional parameter. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(Traceflow, Fixnum, Hash)>] Traceflow data, response status code and response headers
    def read_traceflow_status_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.read_traceflow_status ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.read_traceflow_status"
      end
      # resource path
      local_var_path = '/infra/traceflows/{traceflow-id}/status'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Traceflow')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#read_traceflow_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remedy the Dynamic Runbook installation
    # Remedy the Dynamic Runbook installation
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remedy_ods_dynamic_runbook(instance_id, opts = {})
      remedy_ods_dynamic_runbook_with_http_info(instance_id, opts)
      nil
    end

    # Remedy the Dynamic Runbook installation
    # Remedy the Dynamic Runbook installation
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remedy_ods_dynamic_runbook_with_http_info(instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.remedy_ods_dynamic_runbook ...'
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling MonitoringApi.remedy_ods_dynamic_runbook"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-runbook-instances/{instance-id}/file/action/remedy'.sub('{' + 'instance-id' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#remedy_ods_dynamic_runbook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resolves the error
    # Invokes the corresponding error resolver for the given error(s) present in the payload 
    # @param error_resolver_metadata_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def resolve_error(error_resolver_metadata_list, opts = {})
      resolve_error_with_http_info(error_resolver_metadata_list, opts)
      nil
    end

    # Resolves the error
    # Invokes the corresponding error resolver for the given error(s) present in the payload 
    # @param error_resolver_metadata_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def resolve_error_with_http_info(error_resolver_metadata_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.resolve_error ...'
      end
      # verify the required parameter 'error_resolver_metadata_list' is set
      if @api_client.config.client_side_validation && error_resolver_metadata_list.nil?
        fail ArgumentError, "Missing the required parameter 'error_resolver_metadata_list' when calling MonitoringApi.resolve_error"
      end
      # resource path
      local_var_path = '/error-resolver?action=resolve_error'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(error_resolver_metadata_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#resolve_error\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Restart Antrea traceflow with same set of parameters used during create traceflow
    # This will retrace even if current traceflow has observations. Current observations will be lost. Traceflow configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action to be performed
    # @return [AntreaTraceflowConfig]
    def restart_antrea_traceflow(traceflow_id, opts = {})
      data, _status_code, _headers = restart_antrea_traceflow_with_http_info(traceflow_id, opts)
      data
    end

    # Restart Antrea traceflow with same set of parameters used during create traceflow
    # This will retrace even if current traceflow has observations. Current observations will be lost. Traceflow configuration will be cleaned up by the system after two hours of inactivity. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action to be performed
    # @return [Array<(AntreaTraceflowConfig, Fixnum, Hash)>] AntreaTraceflowConfig data, response status code and response headers
    def restart_antrea_traceflow_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.restart_antrea_traceflow ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.restart_antrea_traceflow"
      end
      # resource path
      local_var_path = '/infra/antrea/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AntreaTraceflowConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#restart_antrea_traceflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Restart a livetrace session
    # Restart a livetrace session with the same set of parameters used in creating or updating of a livetrace config. 
    # @param livetrace_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action to be performed
    # @return [LiveTraceConfig]
    def restart_livetrace(livetrace_id, opts = {})
      data, _status_code, _headers = restart_livetrace_with_http_info(livetrace_id, opts)
      data
    end

    # Restart a livetrace session
    # Restart a livetrace session with the same set of parameters used in creating or updating of a livetrace config. 
    # @param livetrace_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action to be performed
    # @return [Array<(LiveTraceConfig, Fixnum, Hash)>] LiveTraceConfig data, response status code and response headers
    def restart_livetrace_with_http_info(livetrace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.restart_livetrace ...'
      end
      # verify the required parameter 'livetrace_id' is set
      if @api_client.config.client_side_validation && livetrace_id.nil?
        fail ArgumentError, "Missing the required parameter 'livetrace_id' when calling MonitoringApi.restart_livetrace"
      end
      # resource path
      local_var_path = '/infra/livetraces/{livetrace-id}'.sub('{' + 'livetrace-id' + '}', livetrace_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LiveTraceConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#restart_livetrace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Restart traceflow with same set of parameters used during create/update traceflow
    # This will retrace even if current traceflow has observations. Current observations will be lost. Traceflow configuration will be cleaned up by the system after two hours of inactivity.  <br> Please use PUT API to start new Traceflow sessions. By default, traceflow observations will be cleanup every two hours,  please use is_transient flag to avoid the cleanup. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action to be performed
    # @return [TraceflowConfig]
    def restart_traceflow(traceflow_id, opts = {})
      data, _status_code, _headers = restart_traceflow_with_http_info(traceflow_id, opts)
      data
    end

    # Restart traceflow with same set of parameters used during create/update traceflow
    # This will retrace even if current traceflow has observations. Current observations will be lost. Traceflow configuration will be cleaned up by the system after two hours of inactivity.  &lt;br&gt; Please use PUT API to start new Traceflow sessions. By default, traceflow observations will be cleanup every two hours,  please use is_transient flag to avoid the cleanup. 
    # @param traceflow_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Action to be performed
    # @return [Array<(TraceflowConfig, Fixnum, Hash)>] TraceflowConfig data, response status code and response headers
    def restart_traceflow_with_http_info(traceflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.restart_traceflow ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.restart_traceflow"
      end
      # resource path
      local_var_path = '/infra/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#restart_traceflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LLDP Neighbor Properties of transport node by Interface Name 
    # Read LLDP Neighbor Properties of transport node by Interface Name 
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param interface_name Interface name to read
    # @param [Hash] opts the optional parameters
    # @return [InterfaceNeighborProperties]
    def show_lldp_neighbor_interfaces(site_id, enforcement_point_id, node_id, interface_name, opts = {})
      data, _status_code, _headers = show_lldp_neighbor_interfaces_with_http_info(site_id, enforcement_point_id, node_id, interface_name, opts)
      data
    end

    # Read LLDP Neighbor Properties of transport node by Interface Name 
    # Read LLDP Neighbor Properties of transport node by Interface Name 
    # @param site_id site ID
    # @param enforcement_point_id enforcement point ID
    # @param node_id ID of transport node
    # @param interface_name Interface name to read
    # @param [Hash] opts the optional parameters
    # @return [Array<(InterfaceNeighborProperties, Fixnum, Hash)>] InterfaceNeighborProperties data, response status code and response headers
    def show_lldp_neighbor_interfaces_with_http_info(site_id, enforcement_point_id, node_id, interface_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.show_lldp_neighbor_interfaces ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.show_lldp_neighbor_interfaces"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling MonitoringApi.show_lldp_neighbor_interfaces"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling MonitoringApi.show_lldp_neighbor_interfaces"
      end
      # verify the required parameter 'interface_name' is set
      if @api_client.config.client_side_validation && interface_name.nil?
        fail ArgumentError, "Missing the required parameter 'interface_name' when calling MonitoringApi.show_lldp_neighbor_interfaces"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/host-transport-nodes/{node-id}/lldp/interfaces/{interface-name}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'node-id' + '}', node_id.to_s).sub('{' + 'interface-name' + '}', interface_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InterfaceNeighborProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#show_lldp_neighbor_interfaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Show the plugins status on given node.
    # Show all the installed system health plugins on given node 
    # @param node_id The TN node id. 
    # @param [Hash] opts the optional parameters
    # @return [PerNodeShaPluginStatusListResult]
    def show_plugin_status_on_node(node_id, opts = {})
      data, _status_code, _headers = show_plugin_status_on_node_with_http_info(node_id, opts)
      data
    end

    # Show the plugins status on given node.
    # Show all the installed system health plugins on given node 
    # @param node_id The TN node id. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PerNodeShaPluginStatusListResult, Fixnum, Hash)>] PerNodeShaPluginStatusListResult data, response status code and response headers
    def show_plugin_status_on_node_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.show_plugin_status_on_node ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling MonitoringApi.show_plugin_status_on_node"
      end
      # resource path
      local_var_path = '/infra/sha/plugin-status/{node-id}'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PerNodeShaPluginStatusListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#show_plugin_status_on_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Uninstall the Dynamic Runbook package from the instance
    # Uninstall the Dynamic Runbook package from the instance
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def uninstall_ods_dynamic_runbook(instance_id, opts = {})
      uninstall_ods_dynamic_runbook_with_http_info(instance_id, opts)
      nil
    end

    # Uninstall the Dynamic Runbook package from the instance
    # Uninstall the Dynamic Runbook package from the instance
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def uninstall_ods_dynamic_runbook_with_http_info(instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.uninstall_ods_dynamic_runbook ...'
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling MonitoringApi.uninstall_ods_dynamic_runbook"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-runbook-instances/{instance-id}/file'.sub('{' + 'instance-id' + '}', instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#uninstall_ods_dynamic_runbook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the Antrea heartbeat configuration
    # Update the Antrea heartbeat configuration
    # @param site_id 
    # @param enforcementpoint_id 
    # @param cluster_control_plane_id 
    # @param antrea_heartbeat_config 
    # @param [Hash] opts the optional parameters
    # @return [AntreaHeartbeatConfig]
    def update_antrea_heartbeat_config(site_id, enforcementpoint_id, cluster_control_plane_id, antrea_heartbeat_config, opts = {})
      data, _status_code, _headers = update_antrea_heartbeat_config_with_http_info(site_id, enforcementpoint_id, cluster_control_plane_id, antrea_heartbeat_config, opts)
      data
    end

    # Update the Antrea heartbeat configuration
    # Update the Antrea heartbeat configuration
    # @param site_id 
    # @param enforcementpoint_id 
    # @param cluster_control_plane_id 
    # @param antrea_heartbeat_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AntreaHeartbeatConfig, Fixnum, Hash)>] AntreaHeartbeatConfig data, response status code and response headers
    def update_antrea_heartbeat_config_with_http_info(site_id, enforcementpoint_id, cluster_control_plane_id, antrea_heartbeat_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.update_antrea_heartbeat_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling MonitoringApi.update_antrea_heartbeat_config"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling MonitoringApi.update_antrea_heartbeat_config"
      end
      # verify the required parameter 'cluster_control_plane_id' is set
      if @api_client.config.client_side_validation && cluster_control_plane_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_control_plane_id' when calling MonitoringApi.update_antrea_heartbeat_config"
      end
      # verify the required parameter 'antrea_heartbeat_config' is set
      if @api_client.config.client_side_validation && antrea_heartbeat_config.nil?
        fail ArgumentError, "Missing the required parameter 'antrea_heartbeat_config' when calling MonitoringApi.update_antrea_heartbeat_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/cluster-control-planes/{cluster-control-plane-id}/heartbeat-config'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'cluster-control-plane-id' + '}', cluster_control_plane_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(antrea_heartbeat_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AntreaHeartbeatConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#update_antrea_heartbeat_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an Antrea traceflow config
    # If an Antrea traceflow config with the traceflow-id is not already present, create a new traceflow config. 
    # @param traceflow_id 
    # @param antrea_traceflow_config 
    # @param [Hash] opts the optional parameters
    # @return [AntreaTraceflowConfig]
    def update_antrea_traceflow_config(traceflow_id, antrea_traceflow_config, opts = {})
      data, _status_code, _headers = update_antrea_traceflow_config_with_http_info(traceflow_id, antrea_traceflow_config, opts)
      data
    end

    # Create an Antrea traceflow config
    # If an Antrea traceflow config with the traceflow-id is not already present, create a new traceflow config. 
    # @param traceflow_id 
    # @param antrea_traceflow_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AntreaTraceflowConfig, Fixnum, Hash)>] AntreaTraceflowConfig data, response status code and response headers
    def update_antrea_traceflow_config_with_http_info(traceflow_id, antrea_traceflow_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.update_antrea_traceflow_config ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.update_antrea_traceflow_config"
      end
      # verify the required parameter 'antrea_traceflow_config' is set
      if @api_client.config.client_side_validation && antrea_traceflow_config.nil?
        fail ArgumentError, "Missing the required parameter 'antrea_traceflow_config' when calling MonitoringApi.update_antrea_traceflow_config"
      end
      # resource path
      local_var_path = '/infra/antrea/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(antrea_traceflow_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AntreaTraceflowConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#update_antrea_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update automatic health check toggle
    # Change status of automatic health check toggle to enabled/disabled.
    # @param automatic_health_check_toggle 
    # @param [Hash] opts the optional parameters
    # @return [AutomaticHealthCheckToggle]
    def update_auto_health_check_toggle(automatic_health_check_toggle, opts = {})
      data, _status_code, _headers = update_auto_health_check_toggle_with_http_info(automatic_health_check_toggle, opts)
      data
    end

    # Update automatic health check toggle
    # Change status of automatic health check toggle to enabled/disabled.
    # @param automatic_health_check_toggle 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AutomaticHealthCheckToggle, Fixnum, Hash)>] AutomaticHealthCheckToggle data, response status code and response headers
    def update_auto_health_check_toggle_with_http_info(automatic_health_check_toggle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.update_auto_health_check_toggle ...'
      end
      # verify the required parameter 'automatic_health_check_toggle' is set
      if @api_client.config.client_side_validation && automatic_health_check_toggle.nil?
        fail ArgumentError, "Missing the required parameter 'automatic_health_check_toggle' when calling MonitoringApi.update_auto_health_check_toggle"
      end
      # resource path
      local_var_path = '/infra/auto-health-check-toggle'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(automatic_health_check_toggle)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AutomaticHealthCheckToggle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#update_auto_health_check_toggle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a livetrace config
    # If a livetrace config with the specified identifier is not present, then create a new livetrace config. If it already exists, update the livetrace config with a full replacement. 
    # @param livetrace_id 
    # @param live_trace_config 
    # @param [Hash] opts the optional parameters
    # @return [LiveTraceConfig]
    def update_live_trace_config(livetrace_id, live_trace_config, opts = {})
      data, _status_code, _headers = update_live_trace_config_with_http_info(livetrace_id, live_trace_config, opts)
      data
    end

    # Create or update a livetrace config
    # If a livetrace config with the specified identifier is not present, then create a new livetrace config. If it already exists, update the livetrace config with a full replacement. 
    # @param livetrace_id 
    # @param live_trace_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LiveTraceConfig, Fixnum, Hash)>] LiveTraceConfig data, response status code and response headers
    def update_live_trace_config_with_http_info(livetrace_id, live_trace_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.update_live_trace_config ...'
      end
      # verify the required parameter 'livetrace_id' is set
      if @api_client.config.client_side_validation && livetrace_id.nil?
        fail ArgumentError, "Missing the required parameter 'livetrace_id' when calling MonitoringApi.update_live_trace_config"
      end
      # verify the required parameter 'live_trace_config' is set
      if @api_client.config.client_side_validation && live_trace_config.nil?
        fail ArgumentError, "Missing the required parameter 'live_trace_config' when calling MonitoringApi.update_live_trace_config"
      end
      # resource path
      local_var_path = '/infra/livetraces/{livetrace-id}'.sub('{' + 'livetrace-id' + '}', livetrace_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(live_trace_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LiveTraceConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#update_live_trace_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Dynamic Runbook Instance
    # Create an Online Diagnostic System Dynamic Runbook Instance with the specified identifier 
    # @param instance_id Identifier of a Dynamic Runbook Instance
    # @param ods_dynamic_runbook_instance 
    # @param [Hash] opts the optional parameters
    # @return [OdsDynamicRunbookInstance]
    def update_ods_dynamic_runbook_instance(instance_id, ods_dynamic_runbook_instance, opts = {})
      data, _status_code, _headers = update_ods_dynamic_runbook_instance_with_http_info(instance_id, ods_dynamic_runbook_instance, opts)
      data
    end

    # Create a Dynamic Runbook Instance
    # Create an Online Diagnostic System Dynamic Runbook Instance with the specified identifier 
    # @param instance_id Identifier of a Dynamic Runbook Instance
    # @param ods_dynamic_runbook_instance 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsDynamicRunbookInstance, Fixnum, Hash)>] OdsDynamicRunbookInstance data, response status code and response headers
    def update_ods_dynamic_runbook_instance_with_http_info(instance_id, ods_dynamic_runbook_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.update_ods_dynamic_runbook_instance ...'
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling MonitoringApi.update_ods_dynamic_runbook_instance"
      end
      # verify the required parameter 'ods_dynamic_runbook_instance' is set
      if @api_client.config.client_side_validation && ods_dynamic_runbook_instance.nil?
        fail ArgumentError, "Missing the required parameter 'ods_dynamic_runbook_instance' when calling MonitoringApi.update_ods_dynamic_runbook_instance"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-runbook-instances/{instance-id}'.sub('{' + 'instance-id' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ods_dynamic_runbook_instance)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsDynamicRunbookInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#update_ods_dynamic_runbook_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a runbook setting
    # Create an Online Diagnostic System Runbook setting with the specified identifier 
    # @param runbook_setting_id Identifier of a runbook setting
    # @param ods_runbook_setting 
    # @param [Hash] opts the optional parameters
    # @return [OdsRunbookSetting]
    def update_ods_runbook_setting(runbook_setting_id, ods_runbook_setting, opts = {})
      data, _status_code, _headers = update_ods_runbook_setting_with_http_info(runbook_setting_id, ods_runbook_setting, opts)
      data
    end

    # Create a runbook setting
    # Create an Online Diagnostic System Runbook setting with the specified identifier 
    # @param runbook_setting_id Identifier of a runbook setting
    # @param ods_runbook_setting 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OdsRunbookSetting, Fixnum, Hash)>] OdsRunbookSetting data, response status code and response headers
    def update_ods_runbook_setting_with_http_info(runbook_setting_id, ods_runbook_setting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.update_ods_runbook_setting ...'
      end
      # verify the required parameter 'runbook_setting_id' is set
      if @api_client.config.client_side_validation && runbook_setting_id.nil?
        fail ArgumentError, "Missing the required parameter 'runbook_setting_id' when calling MonitoringApi.update_ods_runbook_setting"
      end
      # verify the required parameter 'ods_runbook_setting' is set
      if @api_client.config.client_side_validation && ods_runbook_setting.nil?
        fail ArgumentError, "Missing the required parameter 'ods_runbook_setting' when calling MonitoringApi.update_ods_runbook_setting"
      end
      # resource path
      local_var_path = '/infra/sha/runbook-settings/{runbook-setting-id}'.sub('{' + 'runbook-setting-id' + '}', runbook_setting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ods_runbook_setting)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OdsRunbookSetting')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#update_ods_runbook_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates the warning threshold(s) for NSX Objects.
    # Updates the warning threshold(s) for NSX Objects specified, and returns new threshold(s). Threshold list in the request must contain value for GLOBAL_DEFAULT threshold_type which represents global thresholds. Threshold type NUMBER_OF_GATEWAY_POLICY is deprecated instead use NUMBER_OF_GATEWAY_FIREWALL_RULES. 
    # @param capacity_threshold_list 
    # @param [Hash] opts the optional parameters
    # @return [CapacityThresholdList]
    def update_policy_capacity_thresholds(capacity_threshold_list, opts = {})
      data, _status_code, _headers = update_policy_capacity_thresholds_with_http_info(capacity_threshold_list, opts)
      data
    end

    # Updates the warning threshold(s) for NSX Objects.
    # Updates the warning threshold(s) for NSX Objects specified, and returns new threshold(s). Threshold list in the request must contain value for GLOBAL_DEFAULT threshold_type which represents global thresholds. Threshold type NUMBER_OF_GATEWAY_POLICY is deprecated instead use NUMBER_OF_GATEWAY_FIREWALL_RULES. 
    # @param capacity_threshold_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CapacityThresholdList, Fixnum, Hash)>] CapacityThresholdList data, response status code and response headers
    def update_policy_capacity_thresholds_with_http_info(capacity_threshold_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.update_policy_capacity_thresholds ...'
      end
      # verify the required parameter 'capacity_threshold_list' is set
      if @api_client.config.client_side_validation && capacity_threshold_list.nil?
        fail ArgumentError, "Missing the required parameter 'capacity_threshold_list' when calling MonitoringApi.update_policy_capacity_thresholds"
      end
      # resource path
      local_var_path = '/infra/capacity/threshold'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(capacity_threshold_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CapacityThresholdList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#update_policy_capacity_thresholds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a SHA monitor profile
    # Create or update a SHA monitor profile. 
    # @param monitor_id 
    # @param monitor_profile_id 
    # @param sha_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force 
    # @return [ShaMonitorProfile]
    def update_sha_monitor_profile(monitor_id, monitor_profile_id, sha_monitor_profile, opts = {})
      data, _status_code, _headers = update_sha_monitor_profile_with_http_info(monitor_id, monitor_profile_id, sha_monitor_profile, opts)
      data
    end

    # Create or update a SHA monitor profile
    # Create or update a SHA monitor profile. 
    # @param monitor_id 
    # @param monitor_profile_id 
    # @param sha_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force 
    # @return [Array<(ShaMonitorProfile, Fixnum, Hash)>] ShaMonitorProfile data, response status code and response headers
    def update_sha_monitor_profile_with_http_info(monitor_id, monitor_profile_id, sha_monitor_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.update_sha_monitor_profile ...'
      end
      # verify the required parameter 'monitor_id' is set
      if @api_client.config.client_side_validation && monitor_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_id' when calling MonitoringApi.update_sha_monitor_profile"
      end
      # verify the required parameter 'monitor_profile_id' is set
      if @api_client.config.client_side_validation && monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'monitor_profile_id' when calling MonitoringApi.update_sha_monitor_profile"
      end
      # verify the required parameter 'sha_monitor_profile' is set
      if @api_client.config.client_side_validation && sha_monitor_profile.nil?
        fail ArgumentError, "Missing the required parameter 'sha_monitor_profile' when calling MonitoringApi.update_sha_monitor_profile"
      end
      # resource path
      local_var_path = '/infra/sha/monitors/{monitor-id}/profiles/{monitor-profile-id}'.sub('{' + 'monitor-id' + '}', monitor_id.to_s).sub('{' + 'monitor-profile-id' + '}', monitor_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sha_monitor_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShaMonitorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#update_sha_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a traceflow config
    # If a traceflow config with the traceflow-id is not already present, create a new traceflow config. If it already exists, update the traceflow config. This is a full replace. This configuration will be cleaned up by the system after two hours of inactivity. To start traceflow on a DHCP port in a custom project, enforcement point path is required. User needs to update the in-band network telemetry (INT) configuration to specify the DSCP bit/value for traceflow crafted packet, if the source port of traceflow is on VLAN logical network. The INT configuration is under global operations configuration so please refer NSX-T API document Policy > Networking > Networking Profiles > Global Gateway Configuration to check how to set the DSCP bit/value via global operations configuration related API. 
    # @param traceflow_id 
    # @param traceflow_config 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [TraceflowConfig]
    def update_traceflow_config(traceflow_id, traceflow_config, opts = {})
      data, _status_code, _headers = update_traceflow_config_with_http_info(traceflow_id, traceflow_config, opts)
      data
    end

    # Create or update a traceflow config
    # If a traceflow config with the traceflow-id is not already present, create a new traceflow config. If it already exists, update the traceflow config. This is a full replace. This configuration will be cleaned up by the system after two hours of inactivity. To start traceflow on a DHCP port in a custom project, enforcement point path is required. User needs to update the in-band network telemetry (INT) configuration to specify the DSCP bit/value for traceflow crafted packet, if the source port of traceflow is on VLAN logical network. The INT configuration is under global operations configuration so please refer NSX-T API document Policy &gt; Networking &gt; Networking Profiles &gt; Global Gateway Configuration to check how to set the DSCP bit/value via global operations configuration related API. 
    # @param traceflow_id 
    # @param traceflow_config 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(TraceflowConfig, Fixnum, Hash)>] TraceflowConfig data, response status code and response headers
    def update_traceflow_config_with_http_info(traceflow_id, traceflow_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.update_traceflow_config ...'
      end
      # verify the required parameter 'traceflow_id' is set
      if @api_client.config.client_side_validation && traceflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_id' when calling MonitoringApi.update_traceflow_config"
      end
      # verify the required parameter 'traceflow_config' is set
      if @api_client.config.client_side_validation && traceflow_config.nil?
        fail ArgumentError, "Missing the required parameter 'traceflow_config' when calling MonitoringApi.update_traceflow_config"
      end
      # resource path
      local_var_path = '/infra/traceflows/{traceflow-id}'.sub('{' + 'traceflow-id' + '}', traceflow_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(traceflow_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TraceflowConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#update_traceflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update View
    # Update View <br> This API is deprecated and will be unavailable in later releases.
    # @param view_id 
    # @param view 
    # @param [Hash] opts the optional parameters
    # @return [View]
    def update_view(view_id, view, opts = {})
      data, _status_code, _headers = update_view_with_http_info(view_id, view, opts)
      data
    end

    # Update View
    # Update View &lt;br&gt; This API is deprecated and will be unavailable in later releases.
    # @param view_id 
    # @param view 
    # @param [Hash] opts the optional parameters
    # @return [Array<(View, Fixnum, Hash)>] View data, response status code and response headers
    def update_view_with_http_info(view_id, view, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.update_view ...'
      end
      # verify the required parameter 'view_id' is set
      if @api_client.config.client_side_validation && view_id.nil?
        fail ArgumentError, "Missing the required parameter 'view_id' when calling MonitoringApi.update_view"
      end
      # verify the required parameter 'view' is set
      if @api_client.config.client_side_validation && view.nil?
        fail ArgumentError, "Missing the required parameter 'view' when calling MonitoringApi.update_view"
      end
      # resource path
      local_var_path = '/ui-views/{view-id}'.sub('{' + 'view-id' + '}', view_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(view)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'View')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#update_view\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Widget Configuration
    # Updates the widget at the given view. If the widget is referenced by other views, then the widget will be updated in all the views that it is part of.  <br> This API is deprecated and will be unavailable in later releases.
    # @param view_id 
    # @param widgetconfiguration_id 
    # @param widget_configuration 
    # @param [Hash] opts the optional parameters
    # @return [WidgetConfiguration]
    def update_widget_configuration(view_id, widgetconfiguration_id, widget_configuration, opts = {})
      data, _status_code, _headers = update_widget_configuration_with_http_info(view_id, widgetconfiguration_id, widget_configuration, opts)
      data
    end

    # Update Widget Configuration
    # Updates the widget at the given view. If the widget is referenced by other views, then the widget will be updated in all the views that it is part of.  &lt;br&gt; This API is deprecated and will be unavailable in later releases.
    # @param view_id 
    # @param widgetconfiguration_id 
    # @param widget_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WidgetConfiguration, Fixnum, Hash)>] WidgetConfiguration data, response status code and response headers
    def update_widget_configuration_with_http_info(view_id, widgetconfiguration_id, widget_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.update_widget_configuration ...'
      end
      # verify the required parameter 'view_id' is set
      if @api_client.config.client_side_validation && view_id.nil?
        fail ArgumentError, "Missing the required parameter 'view_id' when calling MonitoringApi.update_widget_configuration"
      end
      # verify the required parameter 'widgetconfiguration_id' is set
      if @api_client.config.client_side_validation && widgetconfiguration_id.nil?
        fail ArgumentError, "Missing the required parameter 'widgetconfiguration_id' when calling MonitoringApi.update_widget_configuration"
      end
      # verify the required parameter 'widget_configuration' is set
      if @api_client.config.client_side_validation && widget_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'widget_configuration' when calling MonitoringApi.update_widget_configuration"
      end
      # resource path
      local_var_path = '/ui-views/{view-id}/widgetconfigurations/{widgetconfiguration-id}'.sub('{' + 'view-id' + '}', view_id.to_s).sub('{' + 'widgetconfiguration-id' + '}', widgetconfiguration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(widget_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WidgetConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#update_widget_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload Sha dynamic plugin
    # Upload Sha dynamic plugin content. 
    # @param plugin_id Sha plugin ID
    # @param file_name Plugin file name
    # @param [Hash] opts the optional parameters
    # @return [DynamicPluginFileProperties]
    def upload_sha_dynamic_plugin(plugin_id, file_name, opts = {})
      data, _status_code, _headers = upload_sha_dynamic_plugin_with_http_info(plugin_id, file_name, opts)
      data
    end

    # Upload Sha dynamic plugin
    # Upload Sha dynamic plugin content. 
    # @param plugin_id Sha plugin ID
    # @param file_name Plugin file name
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicPluginFileProperties, Fixnum, Hash)>] DynamicPluginFileProperties data, response status code and response headers
    def upload_sha_dynamic_plugin_with_http_info(plugin_id, file_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MonitoringApi.upload_sha_dynamic_plugin ...'
      end
      # verify the required parameter 'plugin_id' is set
      if @api_client.config.client_side_validation && plugin_id.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_id' when calling MonitoringApi.upload_sha_dynamic_plugin"
      end
      # verify the required parameter 'file_name' is set
      if @api_client.config.client_side_validation && file_name.nil?
        fail ArgumentError, "Missing the required parameter 'file_name' when calling MonitoringApi.upload_sha_dynamic_plugin"
      end
      # resource path
      local_var_path = '/infra/sha/dynamic-plugins/{plugin-id}/files/{file-name}'.sub('{' + 'plugin-id' + '}', plugin_id.to_s).sub('{' + 'file-name' + '}', file_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DynamicPluginFileProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MonitoringApi#upload_sha_dynamic_plugin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
