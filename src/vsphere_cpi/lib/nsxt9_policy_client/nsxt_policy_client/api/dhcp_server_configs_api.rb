=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class DHCPServerConfigsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, replace the DHCP server config instance with this object.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PUT API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpServerConfig]
    def create_or_replace_dhcp_server_config(dhcp_server_config_id, dhcp_server_config, opts = {})
      data, _status_code, _headers = create_or_replace_dhcp_server_config_with_http_info(dhcp_server_config_id, dhcp_server_config, opts)
      data
    end

    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, replace the DHCP server config instance with this object.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PUT API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpServerConfig, Fixnum, Hash)>] DhcpServerConfig data, response status code and response headers
    def create_or_replace_dhcp_server_config_with_http_info(dhcp_server_config_id, dhcp_server_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.create_or_replace_dhcp_server_config ...'
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling DHCPServerConfigsApi.create_or_replace_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config' is set
      if @api_client.config.client_side_validation && dhcp_server_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config' when calling DHCPServerConfigsApi.create_or_replace_dhcp_server_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_server_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#create_or_replace_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP server configuration
    # Delete DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dhcp_server_config(dhcp_server_config_id, opts = {})
      delete_dhcp_server_config_with_http_info(dhcp_server_config_id, opts)
      nil
    end

    # Delete DHCP server configuration
    # Delete DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dhcp_server_config_with_http_info(dhcp_server_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.delete_dhcp_server_config ...'
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling DHCPServerConfigsApi.delete_dhcp_server_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#delete_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List DHCP server config instances
    # Paginated list of all DHCP server config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerConfigListResult]
    def global_infra_list_dhcp_server_config(opts = {})
      data, _status_code, _headers = global_infra_list_dhcp_server_config_with_http_info(opts)
      data
    end

    # List DHCP server config instances
    # Paginated list of all DHCP server config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerConfigListResult, Fixnum, Hash)>] DhcpServerConfigListResult data, response status code and response headers
    def global_infra_list_dhcp_server_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.global_infra_list_dhcp_server_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.global_infra_list_dhcp_server_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.global_infra_list_dhcp_server_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dhcp-server-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#global_infra_list_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server configuration
    # Read DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [DhcpServerConfig]
    def global_infra_read_dhcp_server_config(dhcp_server_config_id, opts = {})
      data, _status_code, _headers = global_infra_read_dhcp_server_config_with_http_info(dhcp_server_config_id, opts)
      data
    end

    # Read DHCP server configuration
    # Read DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpServerConfig, Fixnum, Hash)>] DhcpServerConfig data, response status code and response headers
    def global_infra_read_dhcp_server_config_with_http_info(dhcp_server_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.global_infra_read_dhcp_server_config ...'
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling DHCPServerConfigsApi.global_infra_read_dhcp_server_config"
      end
      # resource path
      local_var_path = '/global-infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#global_infra_read_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server leases
    # Read DHCP server leases
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :segment_path Segment path to retrieve lease information
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [DhcpLeasesResult]
    def global_infra_read_dhcp_server_leases(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = global_infra_read_dhcp_server_leases_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server leases
    # Read DHCP server leases
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :segment_path Segment path to retrieve lease information
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [Array<(DhcpLeasesResult, Fixnum, Hash)>] DhcpLeasesResult data, response status code and response headers
    def global_infra_read_dhcp_server_leases_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.global_infra_read_dhcp_server_leases ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPServerConfigsApi.global_infra_read_dhcp_server_leases"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPServerConfigsApi.global_infra_read_dhcp_server_leases"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.global_infra_read_dhcp_server_leases, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.global_infra_read_dhcp_server_leases, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/global-infra/dhcp-server-configs/{config-id}/leases'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpLeasesResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#global_infra_read_dhcp_server_leases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server state
    # Read DHCP server state
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerState]
    def global_infra_read_dhcp_server_state(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = global_infra_read_dhcp_server_state_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server state
    # Read DHCP server state
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerState, Fixnum, Hash)>] DhcpServerState data, response status code and response headers
    def global_infra_read_dhcp_server_state_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.global_infra_read_dhcp_server_state ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPServerConfigsApi.global_infra_read_dhcp_server_state"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPServerConfigsApi.global_infra_read_dhcp_server_state"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.global_infra_read_dhcp_server_state, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.global_infra_read_dhcp_server_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dhcp-server-configs/{config-id}/state'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#global_infra_read_dhcp_server_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server statistics
    # Read DHCP server statistics
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatistics]
    def global_infra_read_dhcp_server_stats(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = global_infra_read_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server statistics
    # Read DHCP server statistics
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatistics, Fixnum, Hash)>] DhcpServerStatistics data, response status code and response headers
    def global_infra_read_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.global_infra_read_dhcp_server_stats ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPServerConfigsApi.global_infra_read_dhcp_server_stats"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPServerConfigsApi.global_infra_read_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.global_infra_read_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.global_infra_read_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dhcp-server-configs/{config-id}/stats'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#global_infra_read_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server status
    # Read DHCP server status
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatus]
    def global_infra_read_dhcp_server_status(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = global_infra_read_dhcp_server_status_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server status
    # Read DHCP server status
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatus, Fixnum, Hash)>] DhcpServerStatus data, response status code and response headers
    def global_infra_read_dhcp_server_status_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.global_infra_read_dhcp_server_status ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPServerConfigsApi.global_infra_read_dhcp_server_status"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPServerConfigsApi.global_infra_read_dhcp_server_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.global_infra_read_dhcp_server_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.global_infra_read_dhcp_server_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dhcp-server-configs/{config-id}/status'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#global_infra_read_dhcp_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset DHCP server statistics counters
    # Reset DHCP statistics counters of a DHCP server represented by the connectivity_path and the enforecement_point_path where the dhcp-server-config was applied to. The connectivity_path can be the Tier0 path, Tier1 path or a segment path. If the given Tier0/1 or Segment has DHCP server applied, the resetting will succeed and the DHCP statistics counters will be reset to 0. But if it has no DHCP server applied, the reseting will fail with proper error message. 
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [nil]
    def global_infra_reset_dhcp_server_stats(config_id, connectivity_path, opts = {})
      global_infra_reset_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts)
      nil
    end

    # Reset DHCP server statistics counters
    # Reset DHCP statistics counters of a DHCP server represented by the connectivity_path and the enforecement_point_path where the dhcp-server-config was applied to. The connectivity_path can be the Tier0 path, Tier1 path or a segment path. If the given Tier0/1 or Segment has DHCP server applied, the resetting will succeed and the DHCP statistics counters will be reset to 0. But if it has no DHCP server applied, the reseting will fail with proper error message. 
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_reset_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.global_infra_reset_dhcp_server_stats ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPServerConfigsApi.global_infra_reset_dhcp_server_stats"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPServerConfigsApi.global_infra_reset_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.global_infra_reset_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.global_infra_reset_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/dhcp-server-configs/{config-id}/stats?action=reset'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#global_infra_reset_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List DHCP server config instances
    # Paginated list of all DHCP server config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerConfigListResult]
    def list_dhcp_server_config(opts = {})
      data, _status_code, _headers = list_dhcp_server_config_with_http_info(opts)
      data
    end

    # List DHCP server config instances
    # Paginated list of all DHCP server config instances 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerConfigListResult, Fixnum, Hash)>] DhcpServerConfigListResult data, response status code and response headers
    def list_dhcp_server_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.list_dhcp_server_config ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.list_dhcp_server_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.list_dhcp_server_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dhcp-server-configs'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#list_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, replace the DHCP server config instance with this object.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PUT API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [DhcpServerConfig]
    def orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config(org_id, project_id, dhcp_server_config_id, dhcp_server_config, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, dhcp_server_config, opts)
      data
    end

    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, replace the DHCP server config instance with this object.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PUT API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpServerConfig, Fixnum, Hash)>] DhcpServerConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, dhcp_server_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config' is set
      if @api_client.config.client_side_validation && dhcp_server_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_server_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#orgs_org_id_projects_project_id_infra_create_or_replace_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP server configuration
    # Delete DHCP server configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_dhcp_server_config(org_id, project_id, dhcp_server_config_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, opts)
      nil
    end

    # Delete DHCP server configuration
    # Delete DHCP server configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_delete_dhcp_server_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_delete_dhcp_server_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_delete_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_delete_dhcp_server_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#orgs_org_id_projects_project_id_infra_delete_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List DHCP server config instances
    # Paginated list of all DHCP server config instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerConfigListResult]
    def orgs_org_id_projects_project_id_infra_list_dhcp_server_config(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_dhcp_server_config_with_http_info(org_id, project_id, opts)
      data
    end

    # List DHCP server config instances
    # Paginated list of all DHCP server config instances 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerConfigListResult, Fixnum, Hash)>] DhcpServerConfigListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_dhcp_server_config_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_list_dhcp_server_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_list_dhcp_server_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_list_dhcp_server_config"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_list_dhcp_server_config, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_list_dhcp_server_config, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfigListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#orgs_org_id_projects_project_id_infra_list_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, update the DHCP server config instance with specified attributes.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PATCH API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_dhcp_server_config(org_id, project_id, dhcp_server_config_id, dhcp_server_config, opts = {})
      orgs_org_id_projects_project_id_infra_patch_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, dhcp_server_config, opts)
      nil
    end

    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, update the DHCP server config instance with specified attributes.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PATCH API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, dhcp_server_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_patch_dhcp_server_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_patch_dhcp_server_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_patch_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_patch_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config' is set
      if @api_client.config.client_side_validation && dhcp_server_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_patch_dhcp_server_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_server_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#orgs_org_id_projects_project_id_infra_patch_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server configuration
    # Read DHCP server configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [DhcpServerConfig]
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_config(org_id, project_id, dhcp_server_config_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, opts)
      data
    end

    # Read DHCP server configuration
    # Read DHCP server configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpServerConfig, Fixnum, Hash)>] DhcpServerConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_config_with_http_info(org_id, project_id, dhcp_server_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#orgs_org_id_projects_project_id_infra_read_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server leases
    # Read DHCP server leases
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :segment_path Segment path to retrieve lease information
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [DhcpLeasesResult]
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_leases(org_id, project_id, config_id, connectivity_path, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_dhcp_server_leases_with_http_info(org_id, project_id, config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server leases
    # Read DHCP server leases
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :segment_path Segment path to retrieve lease information
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [Array<(DhcpLeasesResult, Fixnum, Hash)>] DhcpLeasesResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_leases_with_http_info(org_id, project_id, config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_leases, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{config-id}/leases'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpLeasesResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#orgs_org_id_projects_project_id_infra_read_dhcp_server_leases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server state
    # Read DHCP server state
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerState]
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_state(org_id, project_id, config_id, connectivity_path, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_dhcp_server_state_with_http_info(org_id, project_id, config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server state
    # Read DHCP server state
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerState, Fixnum, Hash)>] DhcpServerState data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_state_with_http_info(org_id, project_id, config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{config-id}/state'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#orgs_org_id_projects_project_id_infra_read_dhcp_server_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server statistics
    # Read DHCP server statistics
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatistics]
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_stats(org_id, project_id, config_id, connectivity_path, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_dhcp_server_stats_with_http_info(org_id, project_id, config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server statistics
    # Read DHCP server statistics
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatistics, Fixnum, Hash)>] DhcpServerStatistics data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_stats_with_http_info(org_id, project_id, config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{config-id}/stats'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#orgs_org_id_projects_project_id_infra_read_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server status
    # Read DHCP server status
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatus]
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_status(org_id, project_id, config_id, connectivity_path, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_dhcp_server_status_with_http_info(org_id, project_id, config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server status
    # Read DHCP server status
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatus, Fixnum, Hash)>] DhcpServerStatus data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_dhcp_server_status_with_http_info(org_id, project_id, config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_read_dhcp_server_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{config-id}/status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#orgs_org_id_projects_project_id_infra_read_dhcp_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset DHCP server statistics counters
    # Reset DHCP statistics counters of a DHCP server represented by the connectivity_path and the enforecement_point_path where the dhcp-server-config was applied to. The connectivity_path can be the Tier0 path, Tier1 path or a segment path. If the given Tier0/1 or Segment has DHCP server applied, the resetting will succeed and the DHCP statistics counters will be reset to 0. But if it has no DHCP server applied, the reseting will fail with proper error message. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats(org_id, project_id, config_id, connectivity_path, opts = {})
      orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats_with_http_info(org_id, project_id, config_id, connectivity_path, opts)
      nil
    end

    # Reset DHCP server statistics counters
    # Reset DHCP statistics counters of a DHCP server represented by the connectivity_path and the enforecement_point_path where the dhcp-server-config was applied to. The connectivity_path can be the Tier0 path, Tier1 path or a segment path. If the given Tier0/1 or Segment has DHCP server applied, the resetting will succeed and the DHCP statistics counters will be reset to 0. But if it has no DHCP server applied, the reseting will fail with proper error message. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats_with_http_info(org_id, project_id, config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats"
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/dhcp-server-configs/{config-id}/stats?action=reset'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#orgs_org_id_projects_project_id_infra_reset_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, update the DHCP server config instance with specified attributes.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PATCH API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_dhcp_server_config(dhcp_server_config_id, dhcp_server_config, opts = {})
      patch_dhcp_server_config_with_http_info(dhcp_server_config_id, dhcp_server_config, opts)
      nil
    end

    # Create or update DHCP server configuration
    # If DHCP server config with the dhcp-server-config-id is not already present, create a new DHCP server config instance. If it already exists, update the DHCP server config instance with specified attributes.  Realized entities of this API can be found using the path of Tier-0, Tier1, or Segment where this config is applied on.  Modification of edge_cluster_path in DhcpServerConfig will lose all existing DHCP leases.  If both the preferred_edge_paths in the DhcpServerConfig are changed in a same PATCH API, e.g. change from [a,b] to [x,y], the current DHCP server leases will be lost, which could cause network connectivity issues. It is recommended to change only one member index in an update call, e.g. from [a, b] to [a,y].  Clearing preferred_edge_paths will not reassign edge nodes from the edge cluster. Instead, the previously-allocated edge nodes will be retained to avoid loss of leases. 
    # @param dhcp_server_config_id DHCP server config ID
    # @param dhcp_server_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_dhcp_server_config_with_http_info(dhcp_server_config_id, dhcp_server_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.patch_dhcp_server_config ...'
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling DHCPServerConfigsApi.patch_dhcp_server_config"
      end
      # verify the required parameter 'dhcp_server_config' is set
      if @api_client.config.client_side_validation && dhcp_server_config.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config' when calling DHCPServerConfigsApi.patch_dhcp_server_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_server_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#patch_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server configuration
    # Read DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [DhcpServerConfig]
    def read_dhcp_server_config(dhcp_server_config_id, opts = {})
      data, _status_code, _headers = read_dhcp_server_config_with_http_info(dhcp_server_config_id, opts)
      data
    end

    # Read DHCP server configuration
    # Read DHCP server configuration
    # @param dhcp_server_config_id DHCP server config ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DhcpServerConfig, Fixnum, Hash)>] DhcpServerConfig data, response status code and response headers
    def read_dhcp_server_config_with_http_info(dhcp_server_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.read_dhcp_server_config ...'
      end
      # verify the required parameter 'dhcp_server_config_id' is set
      if @api_client.config.client_side_validation && dhcp_server_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_server_config_id' when calling DHCPServerConfigsApi.read_dhcp_server_config"
      end
      # resource path
      local_var_path = '/infra/dhcp-server-configs/{dhcp-server-config-id}'.sub('{' + 'dhcp-server-config-id' + '}', dhcp_server_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#read_dhcp_server_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server leases
    # Read DHCP server leases
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :segment_path Segment path to retrieve lease information
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [DhcpLeasesResult]
    def read_dhcp_server_leases(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = read_dhcp_server_leases_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server leases
    # Read DHCP server leases
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :address IP or MAC address
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :segment_path Segment path to retrieve lease information
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @return [Array<(DhcpLeasesResult, Fixnum, Hash)>] DhcpLeasesResult data, response status code and response headers
    def read_dhcp_server_leases_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.read_dhcp_server_leases ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPServerConfigsApi.read_dhcp_server_leases"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPServerConfigsApi.read_dhcp_server_leases"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.read_dhcp_server_leases, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.read_dhcp_server_leases, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/dhcp-server-configs/{config-id}/leases'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'segment_path'] = opts[:'segment_path'] if !opts[:'segment_path'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpLeasesResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#read_dhcp_server_leases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server state
    # Read DHCP server state
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerState]
    def read_dhcp_server_state(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = read_dhcp_server_state_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server state
    # Read DHCP server state
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerState, Fixnum, Hash)>] DhcpServerState data, response status code and response headers
    def read_dhcp_server_state_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.read_dhcp_server_state ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPServerConfigsApi.read_dhcp_server_state"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPServerConfigsApi.read_dhcp_server_state"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.read_dhcp_server_state, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.read_dhcp_server_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dhcp-server-configs/{config-id}/state'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#read_dhcp_server_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server statistics
    # Read DHCP server statistics
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatistics]
    def read_dhcp_server_stats(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = read_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server statistics
    # Read DHCP server statistics
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatistics, Fixnum, Hash)>] DhcpServerStatistics data, response status code and response headers
    def read_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.read_dhcp_server_stats ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPServerConfigsApi.read_dhcp_server_stats"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPServerConfigsApi.read_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.read_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.read_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dhcp-server-configs/{config-id}/stats'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#read_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read DHCP server status
    # Read DHCP server status
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DhcpServerStatus]
    def read_dhcp_server_status(config_id, connectivity_path, opts = {})
      data, _status_code, _headers = read_dhcp_server_status_with_http_info(config_id, connectivity_path, opts)
      data
    end

    # Read DHCP server status
    # Read DHCP server status
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DhcpServerStatus, Fixnum, Hash)>] DhcpServerStatus data, response status code and response headers
    def read_dhcp_server_status_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.read_dhcp_server_status ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPServerConfigsApi.read_dhcp_server_status"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPServerConfigsApi.read_dhcp_server_status"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.read_dhcp_server_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.read_dhcp_server_status, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dhcp-server-configs/{config-id}/status'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DhcpServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#read_dhcp_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset DHCP server statistics counters
    # Reset DHCP statistics counters of a DHCP server represented by the connectivity_path and the enforecement_point_path where the dhcp-server-config was applied to. The connectivity_path can be the Tier0 path, Tier1 path or a segment path. If the given Tier0/1 or Segment has DHCP server applied, the resetting will succeed and the DHCP statistics counters will be reset to 0. But if it has no DHCP server applied, the reseting will fail with proper error message. 
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [nil]
    def reset_dhcp_server_stats(config_id, connectivity_path, opts = {})
      reset_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts)
      nil
    end

    # Reset DHCP server statistics counters
    # Reset DHCP statistics counters of a DHCP server represented by the connectivity_path and the enforecement_point_path where the dhcp-server-config was applied to. The connectivity_path can be the Tier0 path, Tier1 path or a segment path. If the given Tier0/1 or Segment has DHCP server applied, the resetting will succeed and the DHCP statistics counters will be reset to 0. But if it has no DHCP server applied, the reseting will fail with proper error message. 
    # @param config_id 
    # @param connectivity_path String Path of Tier0, Tier1 or Segment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_dhcp_server_stats_with_http_info(config_id, connectivity_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPServerConfigsApi.reset_dhcp_server_stats ...'
      end
      # verify the required parameter 'config_id' is set
      if @api_client.config.client_side_validation && config_id.nil?
        fail ArgumentError, "Missing the required parameter 'config_id' when calling DHCPServerConfigsApi.reset_dhcp_server_stats"
      end
      # verify the required parameter 'connectivity_path' is set
      if @api_client.config.client_side_validation && connectivity_path.nil?
        fail ArgumentError, "Missing the required parameter 'connectivity_path' when calling DHCPServerConfigsApi.reset_dhcp_server_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.reset_dhcp_server_stats, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DHCPServerConfigsApi.reset_dhcp_server_stats, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/dhcp-server-configs/{config-id}/stats?action=reset'.sub('{' + 'config-id' + '}', config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'connectivity_path'] = connectivity_path
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPServerConfigsApi#reset_dhcp_server_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
