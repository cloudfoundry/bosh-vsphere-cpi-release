=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class DHCPLeasesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-0 or Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [nil]
    def delete_dhcp_lease(segment_id, dhcp_delete_leases, opts = {})
      delete_dhcp_lease_with_http_info(segment_id, dhcp_delete_leases, opts)
      nil
    end

    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-0 or Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dhcp_lease_with_http_info(segment_id, dhcp_delete_leases, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPLeasesApi.delete_dhcp_lease ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPLeasesApi.delete_dhcp_lease"
      end
      # verify the required parameter 'dhcp_delete_leases' is set
      if @api_client.config.client_side_validation && dhcp_delete_leases.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_delete_leases' when calling DHCPLeasesApi.delete_dhcp_lease"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}?action=delete_dhcp_leases'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_delete_leases)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPLeasesApi#delete_dhcp_lease\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC under a Tier-1.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param tier1_id 
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [nil]
    def delete_dhcp_lease_under_tier1(tier1_id, segment_id, dhcp_delete_leases, opts = {})
      delete_dhcp_lease_under_tier1_with_http_info(tier1_id, segment_id, dhcp_delete_leases, opts)
      nil
    end

    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC under a Tier-1.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param tier1_id 
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dhcp_lease_under_tier1_with_http_info(tier1_id, segment_id, dhcp_delete_leases, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPLeasesApi.delete_dhcp_lease_under_tier1 ...'
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling DHCPLeasesApi.delete_dhcp_lease_under_tier1"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPLeasesApi.delete_dhcp_lease_under_tier1"
      end
      # verify the required parameter 'dhcp_delete_leases' is set
      if @api_client.config.client_side_validation && dhcp_delete_leases.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_delete_leases' when calling DHCPLeasesApi.delete_dhcp_lease_under_tier1"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier1-id}/segments/{segment-id}?action=delete_dhcp_leases'.sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_delete_leases)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPLeasesApi#delete_dhcp_lease_under_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-0 or Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_dhcp_lease(org_id, project_id, segment_id, dhcp_delete_leases, opts = {})
      orgs_org_id_projects_project_id_infra_delete_dhcp_lease_with_http_info(org_id, project_id, segment_id, dhcp_delete_leases, opts)
      nil
    end

    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-0 or Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_dhcp_lease_with_http_info(org_id, project_id, segment_id, dhcp_delete_leases, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPLeasesApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPLeasesApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPLeasesApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPLeasesApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease"
      end
      # verify the required parameter 'dhcp_delete_leases' is set
      if @api_client.config.client_side_validation && dhcp_delete_leases.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_delete_leases' when calling DHCPLeasesApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}?action=delete_dhcp_leases'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_delete_leases)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPLeasesApi#orgs_org_id_projects_project_id_infra_delete_dhcp_lease\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC under a Tier-1.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1(org_id, project_id, tier1_id, segment_id, dhcp_delete_leases, opts = {})
      orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1_with_http_info(org_id, project_id, tier1_id, segment_id, dhcp_delete_leases, opts)
      nil
    end

    # Delete DHCP lease(s) specified by IP and MAC
    # Delete one or multiple DHCP lease(s) specified by IP and MAC under a Tier-1.  If there is a DHCP server running upon the given segment, or this segment is using a DHCP server running in its connected Tier-1, the DHCP lease(s) which match exactly the IP address and the MAC address will be deleted. If no such lease matches, the deletion for this lease will be ignored.  The DHCP lease to be deleted will be removed by the system from both active and standby node. The system will report error if the DHCP lease could not be removed from both nodes. If the DHCP lease could not be removed on either node, please check the DHCP server status. Once the DHCP server status is UP, please invoke the deletion API again to ensure the lease gets deleted from both nodes. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier1_id 
    # @param segment_id 
    # @param dhcp_delete_leases 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1_with_http_info(org_id, project_id, tier1_id, segment_id, dhcp_delete_leases, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DHCPLeasesApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DHCPLeasesApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DHCPLeasesApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1"
      end
      # verify the required parameter 'tier1_id' is set
      if @api_client.config.client_side_validation && tier1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier1_id' when calling DHCPLeasesApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling DHCPLeasesApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1"
      end
      # verify the required parameter 'dhcp_delete_leases' is set
      if @api_client.config.client_side_validation && dhcp_delete_leases.nil?
        fail ArgumentError, "Missing the required parameter 'dhcp_delete_leases' when calling DHCPLeasesApi.orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier1-id}/segments/{segment-id}?action=delete_dhcp_leases'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier1-id' + '}', tier1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dhcp_delete_leases)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DHCPLeasesApi#orgs_org_id_projects_project_id_infra_delete_dhcp_lease_under_tier1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
