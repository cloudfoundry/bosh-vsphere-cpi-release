=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class BaremetalServersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Apply tags on bare metal server
    # Allows an admin to apply multiple tags to a bare metal server. This operation does not store the intent on the policy side. This operation will replace the existing tags on the bare metal server with the ones that have been passed. If the application of tag fails, then an error is reported. The admin will have to retry the operation again. Policy framework does not perform a retry. Failure could occur due to multiple reasons. For e.g constraints like max tags limit exceeded, etc. 
    # @param bare_metal_server_tag_list 
    # @param [Hash] opts the optional parameters
    # @return [BareMetalServerTagList]
    def apply_tag_on_bare_metal_server(bare_metal_server_tag_list, opts = {})
      data, _status_code, _headers = apply_tag_on_bare_metal_server_with_http_info(bare_metal_server_tag_list, opts)
      data
    end

    # Apply tags on bare metal server
    # Allows an admin to apply multiple tags to a bare metal server. This operation does not store the intent on the policy side. This operation will replace the existing tags on the bare metal server with the ones that have been passed. If the application of tag fails, then an error is reported. The admin will have to retry the operation again. Policy framework does not perform a retry. Failure could occur due to multiple reasons. For e.g constraints like max tags limit exceeded, etc. 
    # @param bare_metal_server_tag_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BareMetalServerTagList, Fixnum, Hash)>] BareMetalServerTagList data, response status code and response headers
    def apply_tag_on_bare_metal_server_with_http_info(bare_metal_server_tag_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BaremetalServersApi.apply_tag_on_bare_metal_server ...'
      end
      # verify the required parameter 'bare_metal_server_tag_list' is set
      if @api_client.config.client_side_validation && bare_metal_server_tag_list.nil?
        fail ArgumentError, "Missing the required parameter 'bare_metal_server_tag_list' when calling BaremetalServersApi.apply_tag_on_bare_metal_server"
      end
      # resource path
      local_var_path = '/infra/baremetal-servers/tags'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bare_metal_server_tag_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BareMetalServerTagList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BaremetalServersApi#apply_tag_on_bare_metal_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Apply tags on bare metal server
    # Allows an admin to apply multiple tags to a bare metal server. This operation does not store the intent on the policy side. This operation will replace the existing tags on the bare metal server with the ones that have been passed. If the application of tag fails, then an error is reported. The admin will have to retry the operation again. Policy framework does not perform a retry. Failure could occur due to multiple reasons. For e.g constraints like max tags limit exceeded, etc. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param bare_metal_server_tag_list 
    # @param [Hash] opts the optional parameters
    # @return [BareMetalServerTagList]
    def orgs_org_id_projects_project_id_infra_apply_tag_on_bare_metal_server(org_id, project_id, bare_metal_server_tag_list, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_apply_tag_on_bare_metal_server_with_http_info(org_id, project_id, bare_metal_server_tag_list, opts)
      data
    end

    # Apply tags on bare metal server
    # Allows an admin to apply multiple tags to a bare metal server. This operation does not store the intent on the policy side. This operation will replace the existing tags on the bare metal server with the ones that have been passed. If the application of tag fails, then an error is reported. The admin will have to retry the operation again. Policy framework does not perform a retry. Failure could occur due to multiple reasons. For e.g constraints like max tags limit exceeded, etc. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param bare_metal_server_tag_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BareMetalServerTagList, Fixnum, Hash)>] BareMetalServerTagList data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_apply_tag_on_bare_metal_server_with_http_info(org_id, project_id, bare_metal_server_tag_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BaremetalServersApi.orgs_org_id_projects_project_id_infra_apply_tag_on_bare_metal_server ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling BaremetalServersApi.orgs_org_id_projects_project_id_infra_apply_tag_on_bare_metal_server"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling BaremetalServersApi.orgs_org_id_projects_project_id_infra_apply_tag_on_bare_metal_server"
      end
      # verify the required parameter 'bare_metal_server_tag_list' is set
      if @api_client.config.client_side_validation && bare_metal_server_tag_list.nil?
        fail ArgumentError, "Missing the required parameter 'bare_metal_server_tag_list' when calling BaremetalServersApi.orgs_org_id_projects_project_id_infra_apply_tag_on_bare_metal_server"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/baremetal-servers/tags'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bare_metal_server_tag_list)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BareMetalServerTagList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BaremetalServersApi#orgs_org_id_projects_project_id_infra_apply_tag_on_bare_metal_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
