=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class AviLoadBalancerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Set the cluster configuration for the Avi Load Balancer Controller node. The VIP can be set once. Attempting to change the VIP once set will return an error in case Avi Controllers are deployed.
    # Set the cluster configuration for Avi Load Balancer Controller cluster. 
    # @param alb_controller_node_vm_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [ALBControllerNodeVMClusterConfig]
    def add_alb_controller_node_cluster_config(alb_controller_node_vm_cluster_config, opts = {})
      data, _status_code, _headers = add_alb_controller_node_cluster_config_with_http_info(alb_controller_node_vm_cluster_config, opts)
      data
    end

    # Set the cluster configuration for the Avi Load Balancer Controller node. The VIP can be set once. Attempting to change the VIP once set will return an error in case Avi Controllers are deployed.
    # Set the cluster configuration for Avi Load Balancer Controller cluster. 
    # @param alb_controller_node_vm_cluster_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ALBControllerNodeVMClusterConfig, Fixnum, Hash)>] ALBControllerNodeVMClusterConfig data, response status code and response headers
    def add_alb_controller_node_cluster_config_with_http_info(alb_controller_node_vm_cluster_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.add_alb_controller_node_cluster_config ...'
      end
      # verify the required parameter 'alb_controller_node_vm_cluster_config' is set
      if @api_client.config.client_side_validation && alb_controller_node_vm_cluster_config.nil?
        fail ArgumentError, "Missing the required parameter 'alb_controller_node_vm_cluster_config' when calling AviLoadBalancerApi.add_alb_controller_node_cluster_config"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/clusterconfig'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(alb_controller_node_vm_cluster_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerNodeVMClusterConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#add_alb_controller_node_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deploy and register a Avi Load Balancer Controller node
    # Deploys a Avi Load Balancer Controller node as specified by the deployment config. 
    # @param add_alb_controller_node_vm_info 
    # @param [Hash] opts the optional parameters
    # @return [ALBControllerNodeVMDeploymentRequestList]
    def add_alb_controller_node_vm(add_alb_controller_node_vm_info, opts = {})
      data, _status_code, _headers = add_alb_controller_node_vm_with_http_info(add_alb_controller_node_vm_info, opts)
      data
    end

    # Deploy and register a Avi Load Balancer Controller node
    # Deploys a Avi Load Balancer Controller node as specified by the deployment config. 
    # @param add_alb_controller_node_vm_info 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ALBControllerNodeVMDeploymentRequestList, Fixnum, Hash)>] ALBControllerNodeVMDeploymentRequestList data, response status code and response headers
    def add_alb_controller_node_vm_with_http_info(add_alb_controller_node_vm_info, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.add_alb_controller_node_vm ...'
      end
      # verify the required parameter 'add_alb_controller_node_vm_info' is set
      if @api_client.config.client_side_validation && add_alb_controller_node_vm_info.nil?
        fail ArgumentError, "Missing the required parameter 'add_alb_controller_node_vm_info' when calling AviLoadBalancerApi.add_alb_controller_node_vm"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/deployments'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(add_alb_controller_node_vm_info)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerNodeVMDeploymentRequestList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#add_alb_controller_node_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate admin password for Avi Load Balancer Controller.
    # Use this API to validate admin password in Avi Load Balancer Controller. This API is for VCF deployments only. 
    # @param alb_controller_admin_credential 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def admin_check_password(alb_controller_admin_credential, opts = {})
      admin_check_password_with_http_info(alb_controller_admin_credential, opts)
      nil
    end

    # Validate admin password for Avi Load Balancer Controller.
    # Use this API to validate admin password in Avi Load Balancer Controller. This API is for VCF deployments only. 
    # @param alb_controller_admin_credential 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def admin_check_password_with_http_info(alb_controller_admin_credential, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.admin_check_password ...'
      end
      # verify the required parameter 'alb_controller_admin_credential' is set
      if @api_client.config.client_side_validation && alb_controller_admin_credential.nil?
        fail ArgumentError, "Missing the required parameter 'alb_controller_admin_credential' when calling AviLoadBalancerApi.admin_check_password"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/check-password'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(alb_controller_admin_credential)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#admin_check_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create portal certificate CSR for Avi Load Balancer Controller.
    # Use this API to create portal certificate CSR for Avi Load Balancer Controller. 
    # @param alb_controller_certificate_csr 
    # @param [Hash] opts the optional parameters
    # @return [ALBControllerCertificate]
    def create_alb_portal_certificate_csr(alb_controller_certificate_csr, opts = {})
      data, _status_code, _headers = create_alb_portal_certificate_csr_with_http_info(alb_controller_certificate_csr, opts)
      data
    end

    # Create portal certificate CSR for Avi Load Balancer Controller.
    # Use this API to create portal certificate CSR for Avi Load Balancer Controller. 
    # @param alb_controller_certificate_csr 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ALBControllerCertificate, Fixnum, Hash)>] ALBControllerCertificate data, response status code and response headers
    def create_alb_portal_certificate_csr_with_http_info(alb_controller_certificate_csr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.create_alb_portal_certificate_csr ...'
      end
      # verify the required parameter 'alb_controller_certificate_csr' is set
      if @api_client.config.client_side_validation && alb_controller_certificate_csr.nil?
        fail ArgumentError, "Missing the required parameter 'alb_controller_certificate_csr' when calling AviLoadBalancerApi.create_alb_portal_certificate_csr"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/certificate/csr'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(alb_controller_certificate_csr)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#create_alb_portal_certificate_csr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create service user object credential in Avi Load Balancer Controller cluster.
    # Use this API to create service user object credential in Avi Load Balancer Controller cluster. This API is for VCF deployments only. 
    # @param alb_controller_user_credential 
    # @param [Hash] opts the optional parameters
    # @return [ALBControllerUserCredentialResponse]
    def create_alb_user_credential_object(alb_controller_user_credential, opts = {})
      data, _status_code, _headers = create_alb_user_credential_object_with_http_info(alb_controller_user_credential, opts)
      data
    end

    # Create service user object credential in Avi Load Balancer Controller cluster.
    # Use this API to create service user object credential in Avi Load Balancer Controller cluster. This API is for VCF deployments only. 
    # @param alb_controller_user_credential 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ALBControllerUserCredentialResponse, Fixnum, Hash)>] ALBControllerUserCredentialResponse data, response status code and response headers
    def create_alb_user_credential_object_with_http_info(alb_controller_user_credential, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.create_alb_user_credential_object ...'
      end
      # verify the required parameter 'alb_controller_user_credential' is set
      if @api_client.config.client_side_validation && alb_controller_user_credential.nil?
        fail ArgumentError, "Missing the required parameter 'alb_controller_user_credential' when calling AviLoadBalancerApi.create_alb_user_credential_object"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/user-credential'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(alb_controller_user_credential)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerUserCredentialResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#create_alb_user_credential_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the cluster configuration for the Avi Load Balancer Controller cluster configuration. If Avi Load Balancer Controllers are present delete will fail.
    # Delete the cluster configuration for Avi Load Balancer Controller cluster. This API is for VCF deployments only. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @return [nil]
    def delete_alb_controller_node_cluster_config(opts = {})
      delete_alb_controller_node_cluster_config_with_http_info(opts)
      nil
    end

    # Delete the cluster configuration for the Avi Load Balancer Controller cluster configuration. If Avi Load Balancer Controllers are present delete will fail.
    # Delete the cluster configuration for Avi Load Balancer Controller cluster. This API is for VCF deployments only. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_alb_controller_node_cluster_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.delete_alb_controller_node_cluster_config ...'
      end
      # resource path
      local_var_path = '/alb/controller-nodes/clusterconfig'

      # query parameters
      query_params = {}
      query_params[:'clustering_id'] = opts[:'clustering_id'] if !opts[:'clustering_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#delete_alb_controller_node_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Avi EnforcementPoint and the Infra Admin credentials contained by this workflow.
    # Delete Avi EnforcementPoint along with Infra Admin credentials. 
    # @param managed_by On Boarding flow managed by LCM/VCF.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_alb_on_boarding_workflow(managed_by, opts = {})
      delete_alb_on_boarding_workflow_with_http_info(managed_by, opts)
      nil
    end

    # Delete Avi EnforcementPoint and the Infra Admin credentials contained by this workflow.
    # Delete Avi EnforcementPoint along with Infra Admin credentials. 
    # @param managed_by On Boarding flow managed by LCM/VCF.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_alb_on_boarding_workflow_with_http_info(managed_by, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.delete_alb_on_boarding_workflow ...'
      end
      # verify the required parameter 'managed_by' is set
      if @api_client.config.client_side_validation && managed_by.nil?
        fail ArgumentError, "Missing the required parameter 'managed_by' when calling AviLoadBalancerApi.delete_alb_on_boarding_workflow"
      end
      # resource path
      local_var_path = '/infra/alb-onboarding-workflow/{managed-by}'.sub('{' + 'managed-by' + '}', managed_by.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#delete_alb_on_boarding_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete user credential from Avi Load Balancer Controller cluster.
    # Use this API to delete user credentials in Avi Load Balancer Controller cluster. This API is for VCF deployments only. 
    # @param username Credentials to be deleted.
    # @param user_credential_type Type of user credential
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @return [nil]
    def delete_alb_user_credential_object(username, user_credential_type, opts = {})
      delete_alb_user_credential_object_with_http_info(username, user_credential_type, opts)
      nil
    end

    # Delete user credential from Avi Load Balancer Controller cluster.
    # Use this API to delete user credentials in Avi Load Balancer Controller cluster. This API is for VCF deployments only. 
    # @param username Credentials to be deleted.
    # @param user_credential_type Type of user credential
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_alb_user_credential_object_with_http_info(username, user_credential_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.delete_alb_user_credential_object ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling AviLoadBalancerApi.delete_alb_user_credential_object"
      end
      # verify the required parameter 'user_credential_type' is set
      if @api_client.config.client_side_validation && user_credential_type.nil?
        fail ArgumentError, "Missing the required parameter 'user_credential_type' when calling AviLoadBalancerApi.delete_alb_user_credential_object"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['VCENTER_SERVICE_USER_CREDENTIAL', 'NSX_SERVICE_USER_CREDENTIAL'].include?(user_credential_type)
        fail ArgumentError, "invalid value for 'user_credential_type', must be one of VCENTER_SERVICE_USER_CREDENTIAL, NSX_SERVICE_USER_CREDENTIAL"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/user-credential/{username}'.sub('{' + 'username' + '}', username.to_s)

      # query parameters
      query_params = {}
      query_params[:'user_credential_type'] = user_credential_type
      query_params[:'clustering_id'] = opts[:'clustering_id'] if !opts[:'clustering_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#delete_alb_user_credential_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Attempt to delete an auto-deployed Avi Load Balancer Controller node
    # Attempts to unregister and undeploy a specified auto-deployed cluster node. If it is a member of a cluster, then the node will be automatically detached from the cluster before being unregistered and undeployed. Alternatively, if the original deployment attempt failed or the node is not found, cleans up the deployment information associated with the deployment attempt. Note: If a node has been successfully auto-deployed, then the associated deployment information will not be deleted unless and until the node is successfully deleted. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force_delete Delete by force
    # @option opts [String] :inaccessible Delete when controller is inaccessible
    # @return [nil]
    def delete_auto_deployed_alb_controller_node_vm(node_id, opts = {})
      delete_auto_deployed_alb_controller_node_vm_with_http_info(node_id, opts)
      nil
    end

    # Attempt to delete an auto-deployed Avi Load Balancer Controller node
    # Attempts to unregister and undeploy a specified auto-deployed cluster node. If it is a member of a cluster, then the node will be automatically detached from the cluster before being unregistered and undeployed. Alternatively, if the original deployment attempt failed or the node is not found, cleans up the deployment information associated with the deployment attempt. Note: If a node has been successfully auto-deployed, then the associated deployment information will not be deleted unless and until the node is successfully deleted. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force_delete Delete by force
    # @option opts [String] :inaccessible Delete when controller is inaccessible
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_auto_deployed_alb_controller_node_vm_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.delete_auto_deployed_alb_controller_node_vm ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling AviLoadBalancerApi.delete_auto_deployed_alb_controller_node_vm"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/deployments/{node-id}?action=delete'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force_delete'] = opts[:'force_delete'] if !opts[:'force_delete'].nil?
      query_params[:'inaccessible'] = opts[:'inaccessible'] if !opts[:'inaccessible'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#delete_auto_deployed_alb_controller_node_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Auth Token API call to Avi Controller.
    # Passthorugh API calls to Avi controller using the Auth of policy API request send to this API will be passthrough to Avi controller and Avi controller response will be embedded for this API. 
    # @param alb_auth_token 
    # @param [Hash] opts the optional parameters
    # @return [ALBAuthToken]
    def get_alb_auth_token(alb_auth_token, opts = {})
      data, _status_code, _headers = get_alb_auth_token_with_http_info(alb_auth_token, opts)
      data
    end

    # Auth Token API call to Avi Controller.
    # Passthorugh API calls to Avi controller using the Auth of policy API request send to this API will be passthrough to Avi controller and Avi controller response will be embedded for this API. 
    # @param alb_auth_token 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ALBAuthToken, Fixnum, Hash)>] ALBAuthToken data, response status code and response headers
    def get_alb_auth_token_with_http_info(alb_auth_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.get_alb_auth_token ...'
      end
      # verify the required parameter 'alb_auth_token' is set
      if @api_client.config.client_side_validation && alb_auth_token.nil?
        fail ArgumentError, "Missing the required parameter 'alb_auth_token' when calling AviLoadBalancerApi.get_alb_auth_token"
      end
      # resource path
      local_var_path = '/infra/alb-auth-token'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(alb_auth_token)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBAuthToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#get_alb_auth_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This is Post Avi Controller Deployment Workflow. It will create role if not exist Create Service User Set System Configuration Create Enforcement Point Save Infra-Admin Creds to DB.
    # Set the post deployment cluster configuration for Avi Load Balancer Controller cluster. 
    # @param alb_controller_configuration 
    # @param [Hash] opts the optional parameters
    # @return [EnforcementPoint]
    def initiate_alb_on_boarding_workflow(alb_controller_configuration, opts = {})
      data, _status_code, _headers = initiate_alb_on_boarding_workflow_with_http_info(alb_controller_configuration, opts)
      data
    end

    # This is Post Avi Controller Deployment Workflow. It will create role if not exist Create Service User Set System Configuration Create Enforcement Point Save Infra-Admin Creds to DB.
    # Set the post deployment cluster configuration for Avi Load Balancer Controller cluster. 
    # @param alb_controller_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnforcementPoint, Fixnum, Hash)>] EnforcementPoint data, response status code and response headers
    def initiate_alb_on_boarding_workflow_with_http_info(alb_controller_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.initiate_alb_on_boarding_workflow ...'
      end
      # verify the required parameter 'alb_controller_configuration' is set
      if @api_client.config.client_side_validation && alb_controller_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'alb_controller_configuration' when calling AviLoadBalancerApi.initiate_alb_on_boarding_workflow"
      end
      # resource path
      local_var_path = '/infra/alb-onboarding-workflow'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(alb_controller_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#initiate_alb_on_boarding_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Install and update portal certificate in Avi Load Balancer Controller.
    # Use this API to install and update portal certificate in Avi Load Balancer Controller. 
    # @param alb_controller_certificate 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ca_only Add given CA certificate to NSX Truststore
    # @return [ALBControllerCertificate]
    def install_alb_portal_certificate(alb_controller_certificate, opts = {})
      data, _status_code, _headers = install_alb_portal_certificate_with_http_info(alb_controller_certificate, opts)
      data
    end

    # Install and update portal certificate in Avi Load Balancer Controller.
    # Use this API to install and update portal certificate in Avi Load Balancer Controller. 
    # @param alb_controller_certificate 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ca_only Add given CA certificate to NSX Truststore
    # @return [Array<(ALBControllerCertificate, Fixnum, Hash)>] ALBControllerCertificate data, response status code and response headers
    def install_alb_portal_certificate_with_http_info(alb_controller_certificate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.install_alb_portal_certificate ...'
      end
      # verify the required parameter 'alb_controller_certificate' is set
      if @api_client.config.client_side_validation && alb_controller_certificate.nil?
        fail ArgumentError, "Missing the required parameter 'alb_controller_certificate' when calling AviLoadBalancerApi.install_alb_portal_certificate"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/certificate/install'

      # query parameters
      query_params = {}
      query_params[:'ca_only'] = opts[:'ca_only'] if !opts[:'ca_only'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(alb_controller_certificate)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#install_alb_portal_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns information for Avi Load Balancer Controller cluster.
    # Returns information about Avi Load Balancer Controller cluster status 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @return [ALBControllerClusterInfo]
    def list_alb_controller_cluster_info(opts = {})
      data, _status_code, _headers = list_alb_controller_cluster_info_with_http_info(opts)
      data
    end

    # Returns information for Avi Load Balancer Controller cluster.
    # Returns information about Avi Load Balancer Controller cluster status 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @return [Array<(ALBControllerClusterInfo, Fixnum, Hash)>] ALBControllerClusterInfo data, response status code and response headers
    def list_alb_controller_cluster_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.list_alb_controller_cluster_info ...'
      end
      # resource path
      local_var_path = '/alb/controller-nodes/cluster'

      # query parameters
      query_params = {}
      query_params[:'clustering_id'] = opts[:'clustering_id'] if !opts[:'clustering_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerClusterInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#list_alb_controller_cluster_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List available Avi Load Balancer Controller form factors
    # Returns information about all form factors available for Avi Load Balancer Controller nodes. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :alb_major_version Major release version of Avi Load Balancer Controller for which form factor details will be returned.
    # @return [ALBControllerNodeFormFactors]
    def list_alb_controller_form_factors(opts = {})
      data, _status_code, _headers = list_alb_controller_form_factors_with_http_info(opts)
      data
    end

    # List available Avi Load Balancer Controller form factors
    # Returns information about all form factors available for Avi Load Balancer Controller nodes. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :alb_major_version Major release version of Avi Load Balancer Controller for which form factor details will be returned.
    # @return [Array<(ALBControllerNodeFormFactors, Fixnum, Hash)>] ALBControllerNodeFormFactors data, response status code and response headers
    def list_alb_controller_form_factors_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.list_alb_controller_form_factors ...'
      end
      # resource path
      local_var_path = '/alb/controller-nodes/form-factors'

      # query parameters
      query_params = {}
      query_params[:'alb_major_version'] = opts[:'alb_major_version'] if !opts[:'alb_major_version'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerNodeFormFactors')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#list_alb_controller_form_factors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns info for all Avi Load Balancer cluster node auto-deployment attempts
    # Returns request information for every attempted deployment of a Avi Load Balancer cluster node. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @option opts [String] :state The current state of the Avi Load Balancer Controller node deployment
    # @return [ALBControllerNodeVMDeploymentRequestList]
    def list_alb_controller_node_vm_deployment_requests(opts = {})
      data, _status_code, _headers = list_alb_controller_node_vm_deployment_requests_with_http_info(opts)
      data
    end

    # Returns info for all Avi Load Balancer cluster node auto-deployment attempts
    # Returns request information for every attempted deployment of a Avi Load Balancer cluster node. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @option opts [String] :state The current state of the Avi Load Balancer Controller node deployment
    # @return [Array<(ALBControllerNodeVMDeploymentRequestList, Fixnum, Hash)>] ALBControllerNodeVMDeploymentRequestList data, response status code and response headers
    def list_alb_controller_node_vm_deployment_requests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.list_alb_controller_node_vm_deployment_requests ...'
      end
      if @api_client.config.client_side_validation && opts[:'state'] && !['DEPLOYED', 'PENDING'].include?(opts[:'state'])
        fail ArgumentError, 'invalid value for "state", must be one of DEPLOYED, PENDING'
      end
      # resource path
      local_var_path = '/alb/controller-nodes/deployments'

      # query parameters
      query_params = {}
      query_params[:'clustering_id'] = opts[:'clustering_id'] if !opts[:'clustering_id'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerNodeVMDeploymentRequestList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#list_alb_controller_node_vm_deployment_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns info for of the cluster configuration for the Avi Load Balancer Controller cluster
    # Returns cluster configuration for the Avi Load Balancer Controller cluster. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @return [ALBControllerNodeVMClusterConfig]
    def read_alb_controller_node_cluster_config(opts = {})
      data, _status_code, _headers = read_alb_controller_node_cluster_config_with_http_info(opts)
      data
    end

    # Returns info for of the cluster configuration for the Avi Load Balancer Controller cluster
    # Returns cluster configuration for the Avi Load Balancer Controller cluster. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @return [Array<(ALBControllerNodeVMClusterConfig, Fixnum, Hash)>] ALBControllerNodeVMClusterConfig data, response status code and response headers
    def read_alb_controller_node_cluster_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.read_alb_controller_node_cluster_config ...'
      end
      # resource path
      local_var_path = '/alb/controller-nodes/clusterconfig'

      # query parameters
      query_params = {}
      query_params[:'clustering_id'] = opts[:'clustering_id'] if !opts[:'clustering_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerNodeVMClusterConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#read_alb_controller_node_cluster_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns info for a Avi Load Balancer Controller deployment attempt
    # Returns deployment request information for a specific attempted deployment of a cluster node. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [ALBControllerNodeVMDeploymentRequest]
    def read_alb_controller_node_vm_deployment_request(node_id, opts = {})
      data, _status_code, _headers = read_alb_controller_node_vm_deployment_request_with_http_info(node_id, opts)
      data
    end

    # Returns info for a Avi Load Balancer Controller deployment attempt
    # Returns deployment request information for a specific attempted deployment of a cluster node. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ALBControllerNodeVMDeploymentRequest, Fixnum, Hash)>] ALBControllerNodeVMDeploymentRequest data, response status code and response headers
    def read_alb_controller_node_vm_deployment_request_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.read_alb_controller_node_vm_deployment_request ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling AviLoadBalancerApi.read_alb_controller_node_vm_deployment_request"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/deployments/{node-id}'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerNodeVMDeploymentRequest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#read_alb_controller_node_vm_deployment_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the status of the node creation/deletion
    # Returns the current deployment or undeployment status for a node along with any other relevant current information, such as error messages. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [ALBControllerNodeVMDeploymentStatusReport]
    def read_alb_controller_node_vm_deployment_status(node_id, opts = {})
      data, _status_code, _headers = read_alb_controller_node_vm_deployment_status_with_http_info(node_id, opts)
      data
    end

    # Returns the status of the node creation/deletion
    # Returns the current deployment or undeployment status for a node along with any other relevant current information, such as error messages. 
    # @param node_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ALBControllerNodeVMDeploymentStatusReport, Fixnum, Hash)>] ALBControllerNodeVMDeploymentStatusReport data, response status code and response headers
    def read_alb_controller_node_vm_deployment_status_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.read_alb_controller_node_vm_deployment_status ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling AviLoadBalancerApi.read_alb_controller_node_vm_deployment_status"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/deployments/{node-id}/status'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerNodeVMDeploymentStatusReport')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#read_alb_controller_node_vm_deployment_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Re-trigger clustering for Avi Load Balancer Controller Nodes.
    # Re-trigger clustering for Avi Load Balancer Controller Nodes. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @return [ALBControllerClusterTrigger]
    def retrigger_clustering(opts = {})
      data, _status_code, _headers = retrigger_clustering_with_http_info(opts)
      data
    end

    # Re-trigger clustering for Avi Load Balancer Controller Nodes.
    # Re-trigger clustering for Avi Load Balancer Controller Nodes. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clustering_id Unique Id for Avi Load Balancer Controller Cluster used in VCF managed NSX
    # @return [Array<(ALBControllerClusterTrigger, Fixnum, Hash)>] ALBControllerClusterTrigger data, response status code and response headers
    def retrigger_clustering_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.retrigger_clustering ...'
      end
      # resource path
      local_var_path = '/alb/controller-nodes/cluster'

      # query parameters
      query_params = {}
      query_params[:'clustering_id'] = opts[:'clustering_id'] if !opts[:'clustering_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerClusterTrigger')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#retrigger_clustering\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Avi Load Balancer Controller cluster node. Only updating password, ntp and dns servers are supported. If controller is in a cluster then all nodes in the cluster are updated with the provided values
    # Update Avi Load Balancer Controller node details 
    # @param node_id 
    # @param alb_controller_node_vm_deployment_request 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :running_config Update Avi Load Balancer Controller runtime config as well
    # @return [ALBControllerNodeVMDeploymentRequest]
    def update_alb_controller_node_vm_deployment_request(node_id, alb_controller_node_vm_deployment_request, opts = {})
      data, _status_code, _headers = update_alb_controller_node_vm_deployment_request_with_http_info(node_id, alb_controller_node_vm_deployment_request, opts)
      data
    end

    # Update a Avi Load Balancer Controller cluster node. Only updating password, ntp and dns servers are supported. If controller is in a cluster then all nodes in the cluster are updated with the provided values
    # Update Avi Load Balancer Controller node details 
    # @param node_id 
    # @param alb_controller_node_vm_deployment_request 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :running_config Update Avi Load Balancer Controller runtime config as well
    # @return [Array<(ALBControllerNodeVMDeploymentRequest, Fixnum, Hash)>] ALBControllerNodeVMDeploymentRequest data, response status code and response headers
    def update_alb_controller_node_vm_deployment_request_with_http_info(node_id, alb_controller_node_vm_deployment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.update_alb_controller_node_vm_deployment_request ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling AviLoadBalancerApi.update_alb_controller_node_vm_deployment_request"
      end
      # verify the required parameter 'alb_controller_node_vm_deployment_request' is set
      if @api_client.config.client_side_validation && alb_controller_node_vm_deployment_request.nil?
        fail ArgumentError, "Missing the required parameter 'alb_controller_node_vm_deployment_request' when calling AviLoadBalancerApi.update_alb_controller_node_vm_deployment_request"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/deployments/{node-id}'.sub('{' + 'node-id' + '}', node_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'running_config'] = opts[:'running_config'] if !opts[:'running_config'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(alb_controller_node_vm_deployment_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerNodeVMDeploymentRequest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#update_alb_controller_node_vm_deployment_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update DNS, NTP and Backup server config in Avi Load Balancer Controller.
    # Use this API to update DNS, NTP and Backup server config in Avi Load Balancer Controller. This API is for VCF deployments only. 
    # @param alb_controller_system_configuration 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :running_config Update Avi Load Balancer Controller runtime config as well
    # @return [ALBControllerSystemConfigurationResponse]
    def update_alb_system_configuration(alb_controller_system_configuration, opts = {})
      data, _status_code, _headers = update_alb_system_configuration_with_http_info(alb_controller_system_configuration, opts)
      data
    end

    # Update DNS, NTP and Backup server config in Avi Load Balancer Controller.
    # Use this API to update DNS, NTP and Backup server config in Avi Load Balancer Controller. This API is for VCF deployments only. 
    # @param alb_controller_system_configuration 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :running_config Update Avi Load Balancer Controller runtime config as well
    # @return [Array<(ALBControllerSystemConfigurationResponse, Fixnum, Hash)>] ALBControllerSystemConfigurationResponse data, response status code and response headers
    def update_alb_system_configuration_with_http_info(alb_controller_system_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.update_alb_system_configuration ...'
      end
      # verify the required parameter 'alb_controller_system_configuration' is set
      if @api_client.config.client_side_validation && alb_controller_system_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'alb_controller_system_configuration' when calling AviLoadBalancerApi.update_alb_system_configuration"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/system-configuration'

      # query parameters
      query_params = {}
      query_params[:'running_config'] = opts[:'running_config'] if !opts[:'running_config'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(alb_controller_system_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerSystemConfigurationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#update_alb_system_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update admin user or service user object password in Avi Load Balancer Controller.
    # Use this API to update admin user password or service user object password in Avi Load Balancer Controller. This API is for VCF deployments only. 
    # @param alb_controller_user_credential 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :running_config Update Avi Load Balancer Controller runtime config as well
    # @return [ALBControllerUserCredentialResponse]
    def update_alb_user_credential_object(alb_controller_user_credential, opts = {})
      data, _status_code, _headers = update_alb_user_credential_object_with_http_info(alb_controller_user_credential, opts)
      data
    end

    # Update admin user or service user object password in Avi Load Balancer Controller.
    # Use this API to update admin user password or service user object password in Avi Load Balancer Controller. This API is for VCF deployments only. 
    # @param alb_controller_user_credential 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :running_config Update Avi Load Balancer Controller runtime config as well
    # @return [Array<(ALBControllerUserCredentialResponse, Fixnum, Hash)>] ALBControllerUserCredentialResponse data, response status code and response headers
    def update_alb_user_credential_object_with_http_info(alb_controller_user_credential, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AviLoadBalancerApi.update_alb_user_credential_object ...'
      end
      # verify the required parameter 'alb_controller_user_credential' is set
      if @api_client.config.client_side_validation && alb_controller_user_credential.nil?
        fail ArgumentError, "Missing the required parameter 'alb_controller_user_credential' when calling AviLoadBalancerApi.update_alb_user_credential_object"
      end
      # resource path
      local_var_path = '/alb/controller-nodes/user-credential'

      # query parameters
      query_params = {}
      query_params[:'running_config'] = opts[:'running_config'] if !opts[:'running_config'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(alb_controller_user_credential)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ALBControllerUserCredentialResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AviLoadBalancerApi#update_alb_user_credential_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
