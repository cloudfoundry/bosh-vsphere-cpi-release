=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class DistributedFirewallSettingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get dfw firewall configuration
    # Get the current dfw firewall configurations.
    # @param [Hash] opts the optional parameters
    # @return [DfwFirewallConfiguration]
    def get_dfw_firewall_configuration(opts = {})
      data, _status_code, _headers = get_dfw_firewall_configuration_with_http_info(opts)
      data
    end

    # Get dfw firewall configuration
    # Get the current dfw firewall configurations.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfwFirewallConfiguration, Fixnum, Hash)>] DfwFirewallConfiguration data, response status code and response headers
    def get_dfw_firewall_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributedFirewallSettingsApi.get_dfw_firewall_configuration ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DfwFirewallConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributedFirewallSettingsApi#get_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get global distributed firewall configuration for the specified site
    # Get global distributed firewall configuration for the specified site.
    # @param site_id Site ID
    # @param [Hash] opts the optional parameters
    # @return [GlobalDfwConfiguration]
    def get_global_dfw_configuration_for_site(site_id, opts = {})
      data, _status_code, _headers = get_global_dfw_configuration_for_site_with_http_info(site_id, opts)
      data
    end

    # Get global distributed firewall configuration for the specified site
    # Get global distributed firewall configuration for the specified site.
    # @param site_id Site ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalDfwConfiguration, Fixnum, Hash)>] GlobalDfwConfiguration data, response status code and response headers
    def get_global_dfw_configuration_for_site_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributedFirewallSettingsApi.get_global_dfw_configuration_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling DistributedFirewallSettingsApi.get_global_dfw_configuration_for_site"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/settings/firewall/security'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalDfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributedFirewallSettingsApi#get_global_dfw_configuration_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get global distributed firewall configuration for the specified site
    # Get global distributed firewall configuration for the specified site.
    # @param site_id Site ID
    # @param [Hash] opts the optional parameters
    # @return [GlobalDfwConfiguration]
    def global_infra_get_global_dfw_configuration_for_site(site_id, opts = {})
      data, _status_code, _headers = global_infra_get_global_dfw_configuration_for_site_with_http_info(site_id, opts)
      data
    end

    # Get global distributed firewall configuration for the specified site
    # Get global distributed firewall configuration for the specified site.
    # @param site_id Site ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalDfwConfiguration, Fixnum, Hash)>] GlobalDfwConfiguration data, response status code and response headers
    def global_infra_get_global_dfw_configuration_for_site_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributedFirewallSettingsApi.global_infra_get_global_dfw_configuration_for_site ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling DistributedFirewallSettingsApi.global_infra_get_global_dfw_configuration_for_site"
      end
      # resource path
      local_var_path = '/global-infra/sites/{site-id}/settings/firewall/security'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalDfwConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributedFirewallSettingsApi#global_infra_get_global_dfw_configuration_for_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get global distributed firewall configurations for all the sites
    # Get global distributed firewall configurations for all the sites.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalDfwConfigurationListResult]
    def global_infra_list_all_global_dfw_configurations(opts = {})
      data, _status_code, _headers = global_infra_list_all_global_dfw_configurations_with_http_info(opts)
      data
    end

    # Get global distributed firewall configurations for all the sites
    # Get global distributed firewall configurations for all the sites.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalDfwConfigurationListResult, Fixnum, Hash)>] GlobalDfwConfigurationListResult data, response status code and response headers
    def global_infra_list_all_global_dfw_configurations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributedFirewallSettingsApi.global_infra_list_all_global_dfw_configurations ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DistributedFirewallSettingsApi.global_infra_list_all_global_dfw_configurations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DistributedFirewallSettingsApi.global_infra_list_all_global_dfw_configurations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/sites/settings/firewall/security'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalDfwConfigurationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributedFirewallSettingsApi#global_infra_list_all_global_dfw_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get global distributed firewall configurations for all the sites
    # Get global distributed firewall configurations for all the sites.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GlobalDfwConfigurationListResult]
    def list_all_global_dfw_configurations(opts = {})
      data, _status_code, _headers = list_all_global_dfw_configurations_with_http_info(opts)
      data
    end

    # Get global distributed firewall configurations for all the sites
    # Get global distributed firewall configurations for all the sites.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GlobalDfwConfigurationListResult, Fixnum, Hash)>] GlobalDfwConfigurationListResult data, response status code and response headers
    def list_all_global_dfw_configurations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributedFirewallSettingsApi.list_all_global_dfw_configurations ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DistributedFirewallSettingsApi.list_all_global_dfw_configurations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DistributedFirewallSettingsApi.list_all_global_dfw_configurations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/settings/firewall/security'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalDfwConfigurationListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributedFirewallSettingsApi#list_all_global_dfw_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get dfw firewall configuration
    # Get the current dfw firewall configurations.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [DfwFirewallConfiguration]
    def orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration_with_http_info(org_id, project_id, opts)
      data
    end

    # Get dfw firewall configuration
    # Get the current dfw firewall configurations.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfwFirewallConfiguration, Fixnum, Hash)>] DfwFirewallConfiguration data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributedFirewallSettingsApi.orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DistributedFirewallSettingsApi.orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DistributedFirewallSettingsApi.orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DfwFirewallConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributedFirewallSettingsApi#orgs_org_id_projects_project_id_infra_get_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\"enable_firewall\": false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration(org_id, project_id, dfw_firewall_configuration, opts = {})
      orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration_with_http_info(org_id, project_id, dfw_firewall_configuration, opts)
      nil
    end

    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\&quot;enable_firewall\&quot;: false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration_with_http_info(org_id, project_id, dfw_firewall_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributedFirewallSettingsApi.orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DistributedFirewallSettingsApi.orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DistributedFirewallSettingsApi.orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration"
      end
      # verify the required parameter 'dfw_firewall_configuration' is set
      if @api_client.config.client_side_validation && dfw_firewall_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'dfw_firewall_configuration' when calling DistributedFirewallSettingsApi.orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dfw_firewall_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributedFirewallSettingsApi#orgs_org_id_projects_project_id_infra_patch_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\"enable_firewall\": false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [DfwFirewallConfiguration]
    def orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration(org_id, project_id, dfw_firewall_configuration, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration_with_http_info(org_id, project_id, dfw_firewall_configuration, opts)
      data
    end

    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\&quot;enable_firewall\&quot;: false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfwFirewallConfiguration, Fixnum, Hash)>] DfwFirewallConfiguration data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration_with_http_info(org_id, project_id, dfw_firewall_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributedFirewallSettingsApi.orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DistributedFirewallSettingsApi.orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DistributedFirewallSettingsApi.orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration"
      end
      # verify the required parameter 'dfw_firewall_configuration' is set
      if @api_client.config.client_side_validation && dfw_firewall_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'dfw_firewall_configuration' when calling DistributedFirewallSettingsApi.orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dfw_firewall_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DfwFirewallConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributedFirewallSettingsApi#orgs_org_id_projects_project_id_infra_put_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\"enable_firewall\": false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_dfw_firewall_configuration(dfw_firewall_configuration, opts = {})
      patch_dfw_firewall_configuration_with_http_info(dfw_firewall_configuration, opts)
      nil
    end

    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\&quot;enable_firewall\&quot;: false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_dfw_firewall_configuration_with_http_info(dfw_firewall_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributedFirewallSettingsApi.patch_dfw_firewall_configuration ...'
      end
      # verify the required parameter 'dfw_firewall_configuration' is set
      if @api_client.config.client_side_validation && dfw_firewall_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'dfw_firewall_configuration' when calling DistributedFirewallSettingsApi.patch_dfw_firewall_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dfw_firewall_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributedFirewallSettingsApi#patch_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\"enable_firewall\": false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [DfwFirewallConfiguration]
    def put_dfw_firewall_configuration(dfw_firewall_configuration, opts = {})
      data, _status_code, _headers = put_dfw_firewall_configuration_with_http_info(dfw_firewall_configuration, opts)
      data
    end

    # Update dfw firewall configuration
    # Update dfw firewall related configurations. Turning off distributed services (\&quot;enable_firewall\&quot;: false) will turn off Distributed Firewall, Identity Firewall, Distributed Intrusion Detection and Prevention Service, Distributed Load Balancer. 
    # @param dfw_firewall_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfwFirewallConfiguration, Fixnum, Hash)>] DfwFirewallConfiguration data, response status code and response headers
    def put_dfw_firewall_configuration_with_http_info(dfw_firewall_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributedFirewallSettingsApi.put_dfw_firewall_configuration ...'
      end
      # verify the required parameter 'dfw_firewall_configuration' is set
      if @api_client.config.client_side_validation && dfw_firewall_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'dfw_firewall_configuration' when calling DistributedFirewallSettingsApi.put_dfw_firewall_configuration"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dfw_firewall_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DfwFirewallConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributedFirewallSettingsApi#put_dfw_firewall_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
