=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class DashboardApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the list of gateways where an intrusion event was detected
    # Get the list of gateways where an intrusion event matching a signature was detected. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsIpList]
    def get_policy_affected_ips(policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = get_policy_affected_ips_with_http_info(policy_ids_event_data_request, opts)
      data
    end

    # Get the list of gateways where an intrusion event was detected
    # Get the list of gateways where an intrusion event matching a signature was detected. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsIpList, Fixnum, Hash)>] PolicyIdsIpList data, response status code and response headers
    def get_policy_affected_ips_with_http_info(policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardApi.get_policy_affected_ips ...'
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling DashboardApi.get_policy_affected_ips"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardApi.get_policy_affected_ips, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardApi.get_policy_affected_ips, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/affected-ips'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsIpList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardApi#get_policy_affected_ips\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of the users affected for that signature
    # Get the list of the users affected pertaining to a specific signature. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsUserList]
    def get_policy_affected_users(policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = get_policy_affected_users_with_http_info(policy_ids_event_data_request, opts)
      data
    end

    # Get the list of the users affected for that signature
    # Get the list of the users affected pertaining to a specific signature. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsUserList, Fixnum, Hash)>] PolicyIdsUserList data, response status code and response headers
    def get_policy_affected_users_with_http_info(policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardApi.get_policy_affected_users ...'
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling DashboardApi.get_policy_affected_users"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardApi.get_policy_affected_users, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardApi.get_policy_affected_users, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/affected-users'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsUserList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardApi#get_policy_affected_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of the VMs affected for that signature
    # Get the list of the VMs affected pertaining to a specific signature. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsVmList]
    def get_policy_affected_vms(policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = get_policy_affected_vms_with_http_info(policy_ids_event_data_request, opts)
      data
    end

    # Get the list of the VMs affected for that signature
    # Get the list of the VMs affected pertaining to a specific signature. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsVmList, Fixnum, Hash)>] PolicyIdsVmList data, response status code and response headers
    def get_policy_affected_vms_with_http_info(policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardApi.get_policy_affected_vms ...'
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling DashboardApi.get_policy_affected_vms"
      end
      if @api_client.config.client_side_validation && opts[:'context'] && !['ALL_PROJECTS'].include?(opts[:'context'])
        fail ArgumentError, 'invalid value for "context", must be one of ALL_PROJECTS'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardApi.get_policy_affected_vms, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardApi.get_policy_affected_vms, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/affected-vms'

      # query parameters
      query_params = {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsVmList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardApi#get_policy_affected_vms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of the IDS events that are detected, grouped by signature id.
    # Get the list of the IDS events that are detected with the total number of intrusions detected, their severity and the time they occurred, grouped by signature id. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyIdsEventsBySignatureResult]
    def get_policy_all_ids_events(policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = get_policy_all_ids_events_with_http_info(policy_ids_event_data_request, opts)
      data
    end

    # Get the list of the IDS events that are detected, grouped by signature id.
    # Get the list of the IDS events that are detected with the total number of intrusions detected, their severity and the time they occurred, grouped by signature id. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyIdsEventsBySignatureResult, Fixnum, Hash)>] PolicyIdsEventsBySignatureResult data, response status code and response headers
    def get_policy_all_ids_events_with_http_info(policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardApi.get_policy_all_ids_events ...'
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling DashboardApi.get_policy_all_ids_events"
      end
      if @api_client.config.client_side_validation && opts[:'context'] && !['ALL_PROJECTS'].include?(opts[:'context'])
        fail ArgumentError, 'invalid value for "context", must be one of ALL_PROJECTS'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/ids-events'

      # query parameters
      query_params = {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsEventsBySignatureResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardApi#get_policy_all_ids_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the summary of the intrusions that were detected.
    # Get the summary of all the intrusions that are detected grouped by signature with details including signature name, id, severity, attack type, protocol, first and recent occurence, and affected users and VMs. The following filter criteria are supported: attack target, attack type, gateway name, IP address, product affected, signature ID and VM name. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsSummaryListResult]
    def get_policy_ids_dashboard_summary(policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = get_policy_ids_dashboard_summary_with_http_info(policy_ids_event_data_request, opts)
      data
    end

    # Get the summary of the intrusions that were detected.
    # Get the summary of all the intrusions that are detected grouped by signature with details including signature name, id, severity, attack type, protocol, first and recent occurence, and affected users and VMs. The following filter criteria are supported: attack target, attack type, gateway name, IP address, product affected, signature ID and VM name. 
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsSummaryListResult, Fixnum, Hash)>] PolicyIdsSummaryListResult data, response status code and response headers
    def get_policy_ids_dashboard_summary_with_http_info(policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardApi.get_policy_ids_dashboard_summary ...'
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling DashboardApi.get_policy_ids_dashboard_summary"
      end
      if @api_client.config.client_side_validation && opts[:'context'] && !['ALL_PROJECTS'].include?(opts[:'context'])
        fail ArgumentError, 'invalid value for "context", must be one of ALL_PROJECTS'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardApi.get_policy_ids_dashboard_summary, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardApi.get_policy_ids_dashboard_summary, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/ids-summary'

      # query parameters
      query_params = {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsSummaryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardApi#get_policy_ids_dashboard_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of gateways where an intrusion event was detected
    # Get the list of gateways where an intrusion event matching a signature was detected. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsIpList]
    def orgs_org_id_projects_project_id_infra_get_policy_affected_ips(org_id, project_id, policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_affected_ips_with_http_info(org_id, project_id, policy_ids_event_data_request, opts)
      data
    end

    # Get the list of gateways where an intrusion event was detected
    # Get the list of gateways where an intrusion event matching a signature was detected. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsIpList, Fixnum, Hash)>] PolicyIdsIpList data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_affected_ips_with_http_info(org_id, project_id, policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_affected_ips ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_affected_ips"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_affected_ips"
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_affected_ips"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_affected_ips, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_affected_ips, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/affected-ips'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsIpList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardApi#orgs_org_id_projects_project_id_infra_get_policy_affected_ips\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of the users affected for that signature
    # Get the list of the users affected pertaining to a specific signature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsUserList]
    def orgs_org_id_projects_project_id_infra_get_policy_affected_users(org_id, project_id, policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_affected_users_with_http_info(org_id, project_id, policy_ids_event_data_request, opts)
      data
    end

    # Get the list of the users affected for that signature
    # Get the list of the users affected pertaining to a specific signature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsUserList, Fixnum, Hash)>] PolicyIdsUserList data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_affected_users_with_http_info(org_id, project_id, policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_affected_users ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_affected_users"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_affected_users"
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_affected_users"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_affected_users, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_affected_users, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/affected-users'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsUserList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardApi#orgs_org_id_projects_project_id_infra_get_policy_affected_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of the VMs affected for that signature
    # Get the list of the VMs affected pertaining to a specific signature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsVmList]
    def orgs_org_id_projects_project_id_infra_get_policy_affected_vms(org_id, project_id, policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_affected_vms_with_http_info(org_id, project_id, policy_ids_event_data_request, opts)
      data
    end

    # Get the list of the VMs affected for that signature
    # Get the list of the VMs affected pertaining to a specific signature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsVmList, Fixnum, Hash)>] PolicyIdsVmList data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_affected_vms_with_http_info(org_id, project_id, policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_affected_vms ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_affected_vms"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_affected_vms"
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_affected_vms"
      end
      if @api_client.config.client_side_validation && opts[:'context'] && !['ALL_PROJECTS'].include?(opts[:'context'])
        fail ArgumentError, 'invalid value for "context", must be one of ALL_PROJECTS'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_affected_vms, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_affected_vms, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/affected-vms'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsVmList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardApi#orgs_org_id_projects_project_id_infra_get_policy_affected_vms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of the IDS events that are detected, grouped by signature id.
    # Get the list of the IDS events that are detected with the total number of intrusions detected, their severity and the time they occurred, grouped by signature id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [PolicyIdsEventsBySignatureResult]
    def orgs_org_id_projects_project_id_infra_get_policy_all_ids_events(org_id, project_id, policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_all_ids_events_with_http_info(org_id, project_id, policy_ids_event_data_request, opts)
      data
    end

    # Get the list of the IDS events that are detected, grouped by signature id.
    # Get the list of the IDS events that are detected with the total number of intrusions detected, their severity and the time they occurred, grouped by signature id. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(PolicyIdsEventsBySignatureResult, Fixnum, Hash)>] PolicyIdsEventsBySignatureResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_all_ids_events_with_http_info(org_id, project_id, policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_all_ids_events ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_all_ids_events"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_all_ids_events"
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_all_ids_events"
      end
      if @api_client.config.client_side_validation && opts[:'context'] && !['ALL_PROJECTS'].include?(opts[:'context'])
        fail ArgumentError, 'invalid value for "context", must be one of ALL_PROJECTS'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/ids-events'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsEventsBySignatureResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardApi#orgs_org_id_projects_project_id_infra_get_policy_all_ids_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the summary of the intrusions that were detected.
    # Get the summary of all the intrusions that are detected grouped by signature with details including signature name, id, severity, attack type, protocol, first and recent occurence, and affected users and VMs. The following filter criteria are supported: attack target, attack type, gateway name, IP address, product affected, signature ID and VM name. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyIdsSummaryListResult]
    def orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary(org_id, project_id, policy_ids_event_data_request, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary_with_http_info(org_id, project_id, policy_ids_event_data_request, opts)
      data
    end

    # Get the summary of the intrusions that were detected.
    # Get the summary of all the intrusions that are detected grouped by signature with details including signature name, id, severity, attack type, protocol, first and recent occurence, and affected users and VMs. The following filter criteria are supported: attack target, attack type, gateway name, IP address, product affected, signature ID and VM name. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param policy_ids_event_data_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context Tenancy Context of the API request
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyIdsSummaryListResult, Fixnum, Hash)>] PolicyIdsSummaryListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary_with_http_info(org_id, project_id, policy_ids_event_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary"
      end
      # verify the required parameter 'policy_ids_event_data_request' is set
      if @api_client.config.client_side_validation && policy_ids_event_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'policy_ids_event_data_request' when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary"
      end
      if @api_client.config.client_side_validation && opts[:'context'] && !['ALL_PROJECTS'].include?(opts[:'context'])
        fail ArgumentError, 'invalid value for "context", must be one of ALL_PROJECTS'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardApi.orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/settings/firewall/security/intrusion-services/ids-summary'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_ids_event_data_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyIdsSummaryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardApi#orgs_org_id_projects_project_id_infra_get_policy_ids_dashboard_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
