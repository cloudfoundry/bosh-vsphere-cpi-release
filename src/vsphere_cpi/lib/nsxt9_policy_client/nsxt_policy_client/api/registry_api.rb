=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class RegistryApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get helm repo and docker registry url
    # Get helm repo and docker registry url for chart deployment.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [DeploymentRegistry]
    def get_deployment_registry(site_id, opts = {})
      data, _status_code, _headers = get_deployment_registry_with_http_info(site_id, opts)
      data
    end

    # Get helm repo and docker registry url
    # Get helm repo and docker registry url for chart deployment.
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentRegistry, Fixnum, Hash)>] DeploymentRegistry data, response status code and response headers
    def get_deployment_registry_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistryApi.get_deployment_registry ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling RegistryApi.get_deployment_registry"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/registry'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentRegistry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistryApi#get_deployment_registry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset helm and docker url to default one
    # Reset helm and docker url to default one
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [DeploymentRegistry]
    def reset_deployment_registry(site_id, opts = {})
      data, _status_code, _headers = reset_deployment_registry_with_http_info(site_id, opts)
      data
    end

    # Reset helm and docker url to default one
    # Reset helm and docker url to default one
    # @param site_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentRegistry, Fixnum, Hash)>] DeploymentRegistry data, response status code and response headers
    def reset_deployment_registry_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistryApi.reset_deployment_registry ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling RegistryApi.reset_deployment_registry"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/registry/reset'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentRegistry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistryApi#reset_deployment_registry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Docker registry and helm repository url.
    # In case of helm chart present in private repository and containers are hosted in private hub. You can change docker and helm url to use these private URL instead of default public one. 
    # @param site_id 
    # @param deployment_registry 
    # @param [Hash] opts the optional parameters
    # @return [DeploymentRegistry]
    def update_deployment_registry(site_id, deployment_registry, opts = {})
      data, _status_code, _headers = update_deployment_registry_with_http_info(site_id, deployment_registry, opts)
      data
    end

    # Update Docker registry and helm repository url.
    # In case of helm chart present in private repository and containers are hosted in private hub. You can change docker and helm url to use these private URL instead of default public one. 
    # @param site_id 
    # @param deployment_registry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentRegistry, Fixnum, Hash)>] DeploymentRegistry data, response status code and response headers
    def update_deployment_registry_with_http_info(site_id, deployment_registry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistryApi.update_deployment_registry ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling RegistryApi.update_deployment_registry"
      end
      # verify the required parameter 'deployment_registry' is set
      if @api_client.config.client_side_validation && deployment_registry.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_registry' when calling RegistryApi.update_deployment_registry"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/napp/deployment/registry'.sub('{' + 'site-id' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(deployment_registry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentRegistry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistryApi#update_deployment_registry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
