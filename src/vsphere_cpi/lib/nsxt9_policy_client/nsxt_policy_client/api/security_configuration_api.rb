=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class SecurityConfigurationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or Update security configuration for Segment
    # Create a Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityFeatures]
    def create_or_update_infra_segment_security_feature(segment_id, segment_security_features, opts = {})
      data, _status_code, _headers = create_or_update_infra_segment_security_feature_with_http_info(segment_id, segment_security_features, opts)
      data
    end

    # Create or Update security configuration for Segment
    # Create a Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def create_or_update_infra_segment_security_feature_with_http_info(segment_id, segment_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityConfigurationApi.create_or_update_infra_segment_security_feature ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SecurityConfigurationApi.create_or_update_infra_segment_security_feature"
      end
      # verify the required parameter 'segment_security_features' is set
      if @api_client.config.client_side_validation && segment_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_features' when calling SecurityConfigurationApi.create_or_update_infra_segment_security_feature"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/security-config'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityConfigurationApi#create_or_update_infra_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create or update security configuration. 
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [SecurityFeatures]
    def create_or_update_security_feature(tier_1_id, security_features, opts = {})
      data, _status_code, _headers = create_or_update_security_feature_with_http_info(tier_1_id, security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create or update security configuration. 
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def create_or_update_security_feature_with_http_info(tier_1_id, security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityConfigurationApi.create_or_update_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityConfigurationApi.create_or_update_security_feature"
      end
      # verify the required parameter 'security_features' is set
      if @api_client.config.client_side_validation && security_features.nil?
        fail ArgumentError, "Missing the required parameter 'security_features' when calling SecurityConfigurationApi.create_or_update_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityConfigurationApi#create_or_update_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create or update security configuration. 
    # @param tier_0_id tier0 id
    # @param tier0_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Tier0SecurityFeatures]
    def create_or_update_tier0_security_feature(tier_0_id, tier0_security_features, opts = {})
      data, _status_code, _headers = create_or_update_tier0_security_feature_with_http_info(tier_0_id, tier0_security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create or update security configuration. 
    # @param tier_0_id tier0 id
    # @param tier0_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tier0SecurityFeatures, Fixnum, Hash)>] Tier0SecurityFeatures data, response status code and response headers
    def create_or_update_tier0_security_feature_with_http_info(tier_0_id, tier0_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityConfigurationApi.create_or_update_tier0_security_feature ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityConfigurationApi.create_or_update_tier0_security_feature"
      end
      # verify the required parameter 'tier0_security_features' is set
      if @api_client.config.client_side_validation && tier0_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_security_features' when calling SecurityConfigurationApi.create_or_update_tier0_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/security-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tier0_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tier0SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityConfigurationApi#create_or_update_tier0_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration for Tier1 Segment
    # Create a Tier1 Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityFeatures]
    def create_or_update_tier1_segment_security_feature(tier_1_id, segment_id, segment_security_features, opts = {})
      data, _status_code, _headers = create_or_update_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, segment_security_features, opts)
      data
    end

    # Create or Update security configuration for Tier1 Segment
    # Create a Tier1 Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def create_or_update_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, segment_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityConfigurationApi.create_or_update_tier1_segment_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityConfigurationApi.create_or_update_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SecurityConfigurationApi.create_or_update_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_security_features' is set
      if @api_client.config.client_side_validation && segment_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_features' when calling SecurityConfigurationApi.create_or_update_tier1_segment_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityConfigurationApi#create_or_update_tier1_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete security config
    # API has been deprecated as the delete of Tier0SecurityConfig is linked with the deletion of T0. To remove a particular feature from T0SecurityConfig please use PUT/PATCH.  <br> Use the following API PUT/PATCH  /infra/tier-0s/<tier-0-id>/security-config 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [nil]
    def delete_tier0_security_feature(tier_0_id, opts = {})
      delete_tier0_security_feature_with_http_info(tier_0_id, opts)
      nil
    end

    # Delete security config
    # API has been deprecated as the delete of Tier0SecurityConfig is linked with the deletion of T0. To remove a particular feature from T0SecurityConfig please use PUT/PATCH.  &lt;br&gt; Use the following API PUT/PATCH  /infra/tier-0s/&lt;tier-0-id&gt;/security-config 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_security_feature_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityConfigurationApi.delete_tier0_security_feature ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityConfigurationApi.delete_tier0_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['IDFW', 'IDPS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of IDFW, IDPS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityConfigurationApi.delete_tier0_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityConfigurationApi.delete_tier0_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/security-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityConfigurationApi#delete_tier0_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Security Feature
    # Read Security Feature. 
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityFeatures]
    def global_infra_read_security_feature(tier_1_id, opts = {})
      data, _status_code, _headers = global_infra_read_security_feature_with_http_info(tier_1_id, opts)
      data
    end

    # Read Security Feature
    # Read Security Feature. 
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def global_infra_read_security_feature_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityConfigurationApi.global_infra_read_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityConfigurationApi.global_infra_read_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['MALWAREPREVENTION', 'IDFW', 'IDPS', 'TLS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of MALWAREPREVENTION, IDFW, IDPS, TLS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityConfigurationApi.global_infra_read_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityConfigurationApi.global_infra_read_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityConfigurationApi#global_infra_read_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Security Feature
    # Read Security Feature. 
    # @param tier_0_id tier0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Tier0SecurityFeatures]
    def global_infra_read_tier0_security_feature(tier_0_id, opts = {})
      data, _status_code, _headers = global_infra_read_tier0_security_feature_with_http_info(tier_0_id, opts)
      data
    end

    # Read Security Feature
    # Read Security Feature. 
    # @param tier_0_id tier0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(Tier0SecurityFeatures, Fixnum, Hash)>] Tier0SecurityFeatures data, response status code and response headers
    def global_infra_read_tier0_security_feature_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityConfigurationApi.global_infra_read_tier0_security_feature ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityConfigurationApi.global_infra_read_tier0_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['IDFW', 'IDPS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of IDFW, IDPS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityConfigurationApi.global_infra_read_tier0_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityConfigurationApi.global_infra_read_tier0_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/security-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tier0SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityConfigurationApi#global_infra_read_tier0_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create or update security configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [SecurityFeatures]
    def orgs_org_id_projects_project_id_infra_create_or_update_security_feature(org_id, project_id, tier_1_id, security_features, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_security_feature_with_http_info(org_id, project_id, tier_1_id, security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create or update security configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_security_feature_with_http_info(org_id, project_id, tier_1_id, security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityConfigurationApi.orgs_org_id_projects_project_id_infra_create_or_update_security_feature ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityConfigurationApi.orgs_org_id_projects_project_id_infra_create_or_update_security_feature"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityConfigurationApi.orgs_org_id_projects_project_id_infra_create_or_update_security_feature"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityConfigurationApi.orgs_org_id_projects_project_id_infra_create_or_update_security_feature"
      end
      # verify the required parameter 'security_features' is set
      if @api_client.config.client_side_validation && security_features.nil?
        fail ArgumentError, "Missing the required parameter 'security_features' when calling SecurityConfigurationApi.orgs_org_id_projects_project_id_infra_create_or_update_security_feature"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityConfigurationApi#orgs_org_id_projects_project_id_infra_create_or_update_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create a security configuration if it is not already present, otherwise update the security configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [SecurityFeatures]
    def orgs_org_id_projects_project_id_infra_patch_security_feature(org_id, project_id, tier_1_id, security_features, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_patch_security_feature_with_http_info(org_id, project_id, tier_1_id, security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create a security configuration if it is not already present, otherwise update the security configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_security_feature_with_http_info(org_id, project_id, tier_1_id, security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityConfigurationApi.orgs_org_id_projects_project_id_infra_patch_security_feature ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityConfigurationApi.orgs_org_id_projects_project_id_infra_patch_security_feature"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityConfigurationApi.orgs_org_id_projects_project_id_infra_patch_security_feature"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityConfigurationApi.orgs_org_id_projects_project_id_infra_patch_security_feature"
      end
      # verify the required parameter 'security_features' is set
      if @api_client.config.client_side_validation && security_features.nil?
        fail ArgumentError, "Missing the required parameter 'security_features' when calling SecurityConfigurationApi.orgs_org_id_projects_project_id_infra_patch_security_feature"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityConfigurationApi#orgs_org_id_projects_project_id_infra_patch_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Security Feature
    # Read Security Feature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityFeatures]
    def orgs_org_id_projects_project_id_infra_read_security_feature(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_security_feature_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # Read Security Feature
    # Read Security Feature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_security_feature_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityConfigurationApi.orgs_org_id_projects_project_id_infra_read_security_feature ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling SecurityConfigurationApi.orgs_org_id_projects_project_id_infra_read_security_feature"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SecurityConfigurationApi.orgs_org_id_projects_project_id_infra_read_security_feature"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityConfigurationApi.orgs_org_id_projects_project_id_infra_read_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['MALWAREPREVENTION', 'IDFW', 'IDPS', 'TLS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of MALWAREPREVENTION, IDFW, IDPS, TLS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityConfigurationApi.orgs_org_id_projects_project_id_infra_read_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityConfigurationApi.orgs_org_id_projects_project_id_infra_read_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityConfigurationApi#orgs_org_id_projects_project_id_infra_read_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration for Segment
    # Create a Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityFeatures]
    def patch_infra_segment_security_feature(segment_id, segment_security_features, opts = {})
      data, _status_code, _headers = patch_infra_segment_security_feature_with_http_info(segment_id, segment_security_features, opts)
      data
    end

    # Create or Update security configuration for Segment
    # Create a Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def patch_infra_segment_security_feature_with_http_info(segment_id, segment_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityConfigurationApi.patch_infra_segment_security_feature ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SecurityConfigurationApi.patch_infra_segment_security_feature"
      end
      # verify the required parameter 'segment_security_features' is set
      if @api_client.config.client_side_validation && segment_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_features' when calling SecurityConfigurationApi.patch_infra_segment_security_feature"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/security-config'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityConfigurationApi#patch_infra_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create a security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [SecurityFeatures]
    def patch_security_feature(tier_1_id, security_features, opts = {})
      data, _status_code, _headers = patch_security_feature_with_http_info(tier_1_id, security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create a security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def patch_security_feature_with_http_info(tier_1_id, security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityConfigurationApi.patch_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityConfigurationApi.patch_security_feature"
      end
      # verify the required parameter 'security_features' is set
      if @api_client.config.client_side_validation && security_features.nil?
        fail ArgumentError, "Missing the required parameter 'security_features' when calling SecurityConfigurationApi.patch_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityConfigurationApi#patch_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create a T0 security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_0_id tier0 id
    # @param tier0_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Tier0SecurityFeatures]
    def patch_tier0_security_feature(tier_0_id, tier0_security_features, opts = {})
      data, _status_code, _headers = patch_tier0_security_feature_with_http_info(tier_0_id, tier0_security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create a T0 security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_0_id tier0 id
    # @param tier0_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tier0SecurityFeatures, Fixnum, Hash)>] Tier0SecurityFeatures data, response status code and response headers
    def patch_tier0_security_feature_with_http_info(tier_0_id, tier0_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityConfigurationApi.patch_tier0_security_feature ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityConfigurationApi.patch_tier0_security_feature"
      end
      # verify the required parameter 'tier0_security_features' is set
      if @api_client.config.client_side_validation && tier0_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_security_features' when calling SecurityConfigurationApi.patch_tier0_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/security-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tier0_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tier0SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityConfigurationApi#patch_tier0_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration for Tier1 Segment
    # Create a Tier1 Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityFeatures]
    def patch_tier1_segment_security_feature(tier_1_id, segment_id, segment_security_features, opts = {})
      data, _status_code, _headers = patch_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, segment_security_features, opts)
      data
    end

    # Create or Update security configuration for Tier1 Segment
    # Create a Tier1 Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def patch_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, segment_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityConfigurationApi.patch_tier1_segment_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityConfigurationApi.patch_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SecurityConfigurationApi.patch_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_security_features' is set
      if @api_client.config.client_side_validation && segment_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_features' when calling SecurityConfigurationApi.patch_tier1_segment_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityConfigurationApi#patch_tier1_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security configuration for Segment
    # Read security configuration for Segment. 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of Segment supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentSecurityFeatures]
    def read_infra_segment_security_feature(segment_id, opts = {})
      data, _status_code, _headers = read_infra_segment_security_feature_with_http_info(segment_id, opts)
      data
    end

    # Read security configuration for Segment
    # Read security configuration for Segment. 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of Segment supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def read_infra_segment_security_feature_with_http_info(segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityConfigurationApi.read_infra_segment_security_feature ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SecurityConfigurationApi.read_infra_segment_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['BRIDGE_FIREWALL'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of BRIDGE_FIREWALL'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityConfigurationApi.read_infra_segment_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityConfigurationApi.read_infra_segment_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{segment-id}/security-config'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityConfigurationApi#read_infra_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Security Feature
    # Read Security Feature. 
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityFeatures]
    def read_security_feature(tier_1_id, opts = {})
      data, _status_code, _headers = read_security_feature_with_http_info(tier_1_id, opts)
      data
    end

    # Read Security Feature
    # Read Security Feature. 
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def read_security_feature_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityConfigurationApi.read_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityConfigurationApi.read_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['MALWAREPREVENTION', 'IDFW', 'IDPS', 'TLS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of MALWAREPREVENTION, IDFW, IDPS, TLS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityConfigurationApi.read_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityConfigurationApi.read_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityConfigurationApi#read_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Security Feature
    # Read Security Feature. 
    # @param tier_0_id tier0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Tier0SecurityFeatures]
    def read_tier0_security_feature(tier_0_id, opts = {})
      data, _status_code, _headers = read_tier0_security_feature_with_http_info(tier_0_id, opts)
      data
    end

    # Read Security Feature
    # Read Security Feature. 
    # @param tier_0_id tier0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(Tier0SecurityFeatures, Fixnum, Hash)>] Tier0SecurityFeatures data, response status code and response headers
    def read_tier0_security_feature_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityConfigurationApi.read_tier0_security_feature ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling SecurityConfigurationApi.read_tier0_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['IDFW', 'IDPS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of IDFW, IDPS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityConfigurationApi.read_tier0_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityConfigurationApi.read_tier0_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/security-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tier0SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityConfigurationApi#read_tier0_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security configuration for Segment
    # Read security configuration for Segment. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of Segment supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentSecurityFeatures]
    def read_tier1_segment_security_feature(tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = read_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, opts)
      data
    end

    # Read security configuration for Segment
    # Read security configuration for Segment. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of Segment supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def read_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityConfigurationApi.read_tier1_segment_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling SecurityConfigurationApi.read_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SecurityConfigurationApi.read_tier1_segment_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['BRIDGE_FIREWALL'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of BRIDGE_FIREWALL'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityConfigurationApi.read_tier1_segment_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SecurityConfigurationApi.read_tier1_segment_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityConfigurationApi#read_tier1_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
