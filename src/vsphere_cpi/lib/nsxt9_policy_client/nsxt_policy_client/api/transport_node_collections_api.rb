=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class TransportNodeCollectionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Configure the cluster for security
    # This API configures a compute collection for security. In the request body, specify a Transport Node Collection with only the ID of the target compute collection meant for security. Specifically, a Transport Node Profile ID should not be specified. This API will define a system-generated security Transport Node Profile and apply it on the compute collection to create the Transport Node Collection.
    # @param site_id 
    # @param enforcementpoint_id 
    # @param transport_node_collection_id 
    # @param host_transport_node_collection 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def configure_transport_node_collection_for_security(site_id, enforcementpoint_id, transport_node_collection_id, host_transport_node_collection, opts = {})
      configure_transport_node_collection_for_security_with_http_info(site_id, enforcementpoint_id, transport_node_collection_id, host_transport_node_collection, opts)
      nil
    end

    # Configure the cluster for security
    # This API configures a compute collection for security. In the request body, specify a Transport Node Collection with only the ID of the target compute collection meant for security. Specifically, a Transport Node Profile ID should not be specified. This API will define a system-generated security Transport Node Profile and apply it on the compute collection to create the Transport Node Collection.
    # @param site_id 
    # @param enforcementpoint_id 
    # @param transport_node_collection_id 
    # @param host_transport_node_collection 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def configure_transport_node_collection_for_security_with_http_info(site_id, enforcementpoint_id, transport_node_collection_id, host_transport_node_collection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodeCollectionsApi.configure_transport_node_collection_for_security ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodeCollectionsApi.configure_transport_node_collection_for_security"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodeCollectionsApi.configure_transport_node_collection_for_security"
      end
      # verify the required parameter 'transport_node_collection_id' is set
      if @api_client.config.client_side_validation && transport_node_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_collection_id' when calling TransportNodeCollectionsApi.configure_transport_node_collection_for_security"
      end
      # verify the required parameter 'host_transport_node_collection' is set
      if @api_client.config.client_side_validation && host_transport_node_collection.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node_collection' when calling TransportNodeCollectionsApi.configure_transport_node_collection_for_security"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/transport-node-collections/{transport-node-collection-id}?action=install_for_microseg'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'transport-node-collection-id' + '}', transport_node_collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(host_transport_node_collection)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodeCollectionsApi#configure_transport_node_collection_for_security\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create transport node collection by attaching Transport Node Profile to cluster.
    # When transport node collection is created the hosts which are part of compute collection will be prepared automatically i.e. NSX Manager attempts to install the NSX components on hosts. Transport nodes for these hosts are created using the configuration specified in transport node profile. Pass apply_profile to false, if you do not want to apply transport node profile on the existing transport node with overridden host flag set and ignore overridden hosts flag is set to true on the transport node profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param transport_node_collections_id 
    # @param host_transport_node_collection 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_profile Indicates if the Transport Node Profile (TNP) configuration should be applied during creation (default to true)
    # @option opts [BOOLEAN] :override_nsx_ownership Override NSX Ownership (default to false)
    # @return [HostTransportNodeCollection]
    def create_or_update_host_transport_node_collection(site_id, enforcementpoint_id, transport_node_collections_id, host_transport_node_collection, opts = {})
      data, _status_code, _headers = create_or_update_host_transport_node_collection_with_http_info(site_id, enforcementpoint_id, transport_node_collections_id, host_transport_node_collection, opts)
      data
    end

    # Create transport node collection by attaching Transport Node Profile to cluster.
    # When transport node collection is created the hosts which are part of compute collection will be prepared automatically i.e. NSX Manager attempts to install the NSX components on hosts. Transport nodes for these hosts are created using the configuration specified in transport node profile. Pass apply_profile to false, if you do not want to apply transport node profile on the existing transport node with overridden host flag set and ignore overridden hosts flag is set to true on the transport node profile. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param transport_node_collections_id 
    # @param host_transport_node_collection 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_profile Indicates if the Transport Node Profile (TNP) configuration should be applied during creation
    # @option opts [BOOLEAN] :override_nsx_ownership Override NSX Ownership
    # @return [Array<(HostTransportNodeCollection, Fixnum, Hash)>] HostTransportNodeCollection data, response status code and response headers
    def create_or_update_host_transport_node_collection_with_http_info(site_id, enforcementpoint_id, transport_node_collections_id, host_transport_node_collection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodeCollectionsApi.create_or_update_host_transport_node_collection ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodeCollectionsApi.create_or_update_host_transport_node_collection"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodeCollectionsApi.create_or_update_host_transport_node_collection"
      end
      # verify the required parameter 'transport_node_collections_id' is set
      if @api_client.config.client_side_validation && transport_node_collections_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_collections_id' when calling TransportNodeCollectionsApi.create_or_update_host_transport_node_collection"
      end
      # verify the required parameter 'host_transport_node_collection' is set
      if @api_client.config.client_side_validation && host_transport_node_collection.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node_collection' when calling TransportNodeCollectionsApi.create_or_update_host_transport_node_collection"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/transport-node-collections/{transport-node-collections-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'transport-node-collections-id' + '}', transport_node_collections_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apply_profile'] = opts[:'apply_profile'] if !opts[:'apply_profile'].nil?
      query_params[:'override_nsx_ownership'] = opts[:'override_nsx_ownership'] if !opts[:'override_nsx_ownership'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(host_transport_node_collection)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HostTransportNodeCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodeCollectionsApi#create_or_update_host_transport_node_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update a sub-cluster
    # Create or update a sub-cluster under a compute collection. Maximum number of sub-clusters that can be created under a compute collection is 16. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param subcluster_id 
    # @param sub_cluster 
    # @param [Hash] opts the optional parameters
    # @return [SubCluster]
    def create_or_update_sub_cluster(site_id, enforcementpoint_id, subcluster_id, sub_cluster, opts = {})
      data, _status_code, _headers = create_or_update_sub_cluster_with_http_info(site_id, enforcementpoint_id, subcluster_id, sub_cluster, opts)
      data
    end

    # Create or Update a sub-cluster
    # Create or update a sub-cluster under a compute collection. Maximum number of sub-clusters that can be created under a compute collection is 16. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param subcluster_id 
    # @param sub_cluster 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubCluster, Fixnum, Hash)>] SubCluster data, response status code and response headers
    def create_or_update_sub_cluster_with_http_info(site_id, enforcementpoint_id, subcluster_id, sub_cluster, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodeCollectionsApi.create_or_update_sub_cluster ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodeCollectionsApi.create_or_update_sub_cluster"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodeCollectionsApi.create_or_update_sub_cluster"
      end
      # verify the required parameter 'subcluster_id' is set
      if @api_client.config.client_side_validation && subcluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'subcluster_id' when calling TransportNodeCollectionsApi.create_or_update_sub_cluster"
      end
      # verify the required parameter 'sub_cluster' is set
      if @api_client.config.client_side_validation && sub_cluster.nil?
        fail ArgumentError, "Missing the required parameter 'sub_cluster' when calling TransportNodeCollectionsApi.create_or_update_sub_cluster"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/sub-clusters/{subcluster-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'subcluster-id' + '}', subcluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sub_cluster)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodeCollectionsApi#create_or_update_sub_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Detach transport node profile from compute collection.
    # By deleting transport node collection, we are detaching the transport node profile(TNP) from the compute collection. It has no effect on existing transport nodes. However, new hosts added to the compute collection will no longer be automatically converted to NSX transport node. Detaching TNP from compute collection does not delete TNP. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param transport_node_collection_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_host_transport_node_collection(site_id, enforcementpoint_id, transport_node_collection_id, opts = {})
      delete_host_transport_node_collection_with_http_info(site_id, enforcementpoint_id, transport_node_collection_id, opts)
      nil
    end

    # Detach transport node profile from compute collection.
    # By deleting transport node collection, we are detaching the transport node profile(TNP) from the compute collection. It has no effect on existing transport nodes. However, new hosts added to the compute collection will no longer be automatically converted to NSX transport node. Detaching TNP from compute collection does not delete TNP. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param transport_node_collection_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_host_transport_node_collection_with_http_info(site_id, enforcementpoint_id, transport_node_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodeCollectionsApi.delete_host_transport_node_collection ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodeCollectionsApi.delete_host_transport_node_collection"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodeCollectionsApi.delete_host_transport_node_collection"
      end
      # verify the required parameter 'transport_node_collection_id' is set
      if @api_client.config.client_side_validation && transport_node_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_collection_id' when calling TransportNodeCollectionsApi.delete_host_transport_node_collection"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/transport-node-collections/{transport-node-collection-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'transport-node-collection-id' + '}', transport_node_collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodeCollectionsApi#delete_host_transport_node_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Sub-Cluster
    # Delete a Sub-Cluster. Deletion will not be allowed if sub-cluster contains discovered nodes. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param subcluster_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_sub_cluster(site_id, enforcementpoint_id, subcluster_id, opts = {})
      delete_sub_cluster_with_http_info(site_id, enforcementpoint_id, subcluster_id, opts)
      nil
    end

    # Delete a Sub-Cluster
    # Delete a Sub-Cluster. Deletion will not be allowed if sub-cluster contains discovered nodes. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param subcluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_sub_cluster_with_http_info(site_id, enforcementpoint_id, subcluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodeCollectionsApi.delete_sub_cluster ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodeCollectionsApi.delete_sub_cluster"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodeCollectionsApi.delete_sub_cluster"
      end
      # verify the required parameter 'subcluster_id' is set
      if @api_client.config.client_side_validation && subcluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'subcluster_id' when calling TransportNodeCollectionsApi.delete_sub_cluster"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/sub-clusters/{subcluster-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'subcluster-id' + '}', subcluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodeCollectionsApi#delete_sub_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Transport Node collection by id
    # Returns transport node collection by id
    # @param site_id 
    # @param enforcementpoint_id 
    # @param transport_node_collection_id 
    # @param [Hash] opts the optional parameters
    # @return [HostTransportNodeCollection]
    def get_host_transport_node_collection(site_id, enforcementpoint_id, transport_node_collection_id, opts = {})
      data, _status_code, _headers = get_host_transport_node_collection_with_http_info(site_id, enforcementpoint_id, transport_node_collection_id, opts)
      data
    end

    # Get Transport Node collection by id
    # Returns transport node collection by id
    # @param site_id 
    # @param enforcementpoint_id 
    # @param transport_node_collection_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(HostTransportNodeCollection, Fixnum, Hash)>] HostTransportNodeCollection data, response status code and response headers
    def get_host_transport_node_collection_with_http_info(site_id, enforcementpoint_id, transport_node_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodeCollectionsApi.get_host_transport_node_collection ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodeCollectionsApi.get_host_transport_node_collection"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodeCollectionsApi.get_host_transport_node_collection"
      end
      # verify the required parameter 'transport_node_collection_id' is set
      if @api_client.config.client_side_validation && transport_node_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_collection_id' when calling TransportNodeCollectionsApi.get_host_transport_node_collection"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/transport-node-collections/{transport-node-collection-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'transport-node-collection-id' + '}', transport_node_collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HostTransportNodeCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodeCollectionsApi#get_host_transport_node_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Transport Node collection application state
    # Returns the state of transport node collection based on the states of transport nodes of the hosts which are part of compute collection. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param transport_node_collection_id 
    # @param [Hash] opts the optional parameters
    # @return [TransportNodeCollectionState]
    def get_host_transport_node_collection_state(site_id, enforcementpoint_id, transport_node_collection_id, opts = {})
      data, _status_code, _headers = get_host_transport_node_collection_state_with_http_info(site_id, enforcementpoint_id, transport_node_collection_id, opts)
      data
    end

    # Get Transport Node collection application state
    # Returns the state of transport node collection based on the states of transport nodes of the hosts which are part of compute collection. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param transport_node_collection_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportNodeCollectionState, Fixnum, Hash)>] TransportNodeCollectionState data, response status code and response headers
    def get_host_transport_node_collection_state_with_http_info(site_id, enforcementpoint_id, transport_node_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodeCollectionsApi.get_host_transport_node_collection_state ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodeCollectionsApi.get_host_transport_node_collection_state"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodeCollectionsApi.get_host_transport_node_collection_state"
      end
      # verify the required parameter 'transport_node_collection_id' is set
      if @api_client.config.client_side_validation && transport_node_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_collection_id' when calling TransportNodeCollectionsApi.get_host_transport_node_collection_state"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/transport-node-collections/{transport-node-collection-id}/state'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'transport-node-collection-id' + '}', transport_node_collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransportNodeCollectionState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodeCollectionsApi#get_host_transport_node_collection_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Transport Node collections
    # Returns all Transport Node collections
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cluster_moid Managed object ID of cluster in VC
    # @option opts [String] :compute_collection_id Compute collection id
    # @option opts [String] :vc_instance_uuid UUID for VC deployment
    # @return [HostTransportNodeCollectionListResult]
    def list_host_transport_node_collections(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_host_transport_node_collections_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # List Transport Node collections
    # Returns all Transport Node collections
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cluster_moid Managed object ID of cluster in VC
    # @option opts [String] :compute_collection_id Compute collection id
    # @option opts [String] :vc_instance_uuid UUID for VC deployment
    # @return [Array<(HostTransportNodeCollectionListResult, Fixnum, Hash)>] HostTransportNodeCollectionListResult data, response status code and response headers
    def list_host_transport_node_collections_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodeCollectionsApi.list_host_transport_node_collections ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodeCollectionsApi.list_host_transport_node_collections"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodeCollectionsApi.list_host_transport_node_collections"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/transport-node-collections'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cluster_moid'] = opts[:'cluster_moid'] if !opts[:'cluster_moid'].nil?
      query_params[:'compute_collection_id'] = opts[:'compute_collection_id'] if !opts[:'compute_collection_id'].nil?
      query_params[:'vc_instance_uuid'] = opts[:'vc_instance_uuid'] if !opts[:'vc_instance_uuid'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HostTransportNodeCollectionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodeCollectionsApi#list_host_transport_node_collections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List sub-clusters
    # Paginated list of all sub-clusters. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SubClusterListResult]
    def list_sub_clusters(site_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = list_sub_clusters_with_http_info(site_id, enforcementpoint_id, opts)
      data
    end

    # List sub-clusters
    # Paginated list of all sub-clusters. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SubClusterListResult, Fixnum, Hash)>] SubClusterListResult data, response status code and response headers
    def list_sub_clusters_with_http_info(site_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodeCollectionsApi.list_sub_clusters ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodeCollectionsApi.list_sub_clusters"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodeCollectionsApi.list_sub_clusters"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransportNodeCollectionsApi.list_sub_clusters, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TransportNodeCollectionsApi.list_sub_clusters, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/sub-clusters'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubClusterListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodeCollectionsApi#list_sub_clusters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Move host from one sub-cluster to another sub-cluster. When a node is moved from one sub-cluster to another sub-cluster, based on the TransportNodeCollection configuration appropriate sub-configuration will be applied to the node. If TransportNodeCollection does not have sub-configurations for the sub-cluster, then global configuration will be applied. 
    # Move host from one sub-cluster to another sub-cluster. When a node is moved from one sub-cluster to another sub-cluster, based on the TransportNodeCollection configuration appropriate sub-configuration will be applied to the node. If TransportNodeCollection does not have sub-configurations for the sub-cluster, then global configuration will be applied. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_movement_spec 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def move_hosts(site_id, enforcementpoint_id, host_movement_spec, opts = {})
      move_hosts_with_http_info(site_id, enforcementpoint_id, host_movement_spec, opts)
      nil
    end

    # Move host from one sub-cluster to another sub-cluster. When a node is moved from one sub-cluster to another sub-cluster, based on the TransportNodeCollection configuration appropriate sub-configuration will be applied to the node. If TransportNodeCollection does not have sub-configurations for the sub-cluster, then global configuration will be applied. 
    # Move host from one sub-cluster to another sub-cluster. When a node is moved from one sub-cluster to another sub-cluster, based on the TransportNodeCollection configuration appropriate sub-configuration will be applied to the node. If TransportNodeCollection does not have sub-configurations for the sub-cluster, then global configuration will be applied. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param host_movement_spec 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def move_hosts_with_http_info(site_id, enforcementpoint_id, host_movement_spec, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodeCollectionsApi.move_hosts ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodeCollectionsApi.move_hosts"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodeCollectionsApi.move_hosts"
      end
      # verify the required parameter 'host_movement_spec' is set
      if @api_client.config.client_side_validation && host_movement_spec.nil?
        fail ArgumentError, "Missing the required parameter 'host_movement_spec' when calling TransportNodeCollectionsApi.move_hosts"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/sub-clusters?action=move'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(host_movement_spec)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodeCollectionsApi#move_hosts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Transport Node collection
    # Attach different transport node profile to compute collection by updating transport node collection. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param transport_node_collection_id 
    # @param host_transport_node_collection 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_host_transport_node_collection(site_id, enforcementpoint_id, transport_node_collection_id, host_transport_node_collection, opts = {})
      patch_host_transport_node_collection_with_http_info(site_id, enforcementpoint_id, transport_node_collection_id, host_transport_node_collection, opts)
      nil
    end

    # Patch Transport Node collection
    # Attach different transport node profile to compute collection by updating transport node collection. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param transport_node_collection_id 
    # @param host_transport_node_collection 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_host_transport_node_collection_with_http_info(site_id, enforcementpoint_id, transport_node_collection_id, host_transport_node_collection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodeCollectionsApi.patch_host_transport_node_collection ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodeCollectionsApi.patch_host_transport_node_collection"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodeCollectionsApi.patch_host_transport_node_collection"
      end
      # verify the required parameter 'transport_node_collection_id' is set
      if @api_client.config.client_side_validation && transport_node_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_collection_id' when calling TransportNodeCollectionsApi.patch_host_transport_node_collection"
      end
      # verify the required parameter 'host_transport_node_collection' is set
      if @api_client.config.client_side_validation && host_transport_node_collection.nil?
        fail ArgumentError, "Missing the required parameter 'host_transport_node_collection' when calling TransportNodeCollectionsApi.patch_host_transport_node_collection"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/transport-node-collections/{transport-node-collection-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'transport-node-collection-id' + '}', transport_node_collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(host_transport_node_collection)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodeCollectionsApi#patch_host_transport_node_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Sub-Cluster
    # Patch a sub-cluster under compute collection. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param subcluster_id 
    # @param sub_cluster 
    # @param [Hash] opts the optional parameters
    # @return [SubCluster]
    def patch_sub_cluster(site_id, enforcementpoint_id, subcluster_id, sub_cluster, opts = {})
      data, _status_code, _headers = patch_sub_cluster_with_http_info(site_id, enforcementpoint_id, subcluster_id, sub_cluster, opts)
      data
    end

    # Patch Sub-Cluster
    # Patch a sub-cluster under compute collection. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param subcluster_id 
    # @param sub_cluster 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubCluster, Fixnum, Hash)>] SubCluster data, response status code and response headers
    def patch_sub_cluster_with_http_info(site_id, enforcementpoint_id, subcluster_id, sub_cluster, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodeCollectionsApi.patch_sub_cluster ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodeCollectionsApi.patch_sub_cluster"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodeCollectionsApi.patch_sub_cluster"
      end
      # verify the required parameter 'subcluster_id' is set
      if @api_client.config.client_side_validation && subcluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'subcluster_id' when calling TransportNodeCollectionsApi.patch_sub_cluster"
      end
      # verify the required parameter 'sub_cluster' is set
      if @api_client.config.client_side_validation && sub_cluster.nil?
        fail ArgumentError, "Missing the required parameter 'sub_cluster' when calling TransportNodeCollectionsApi.patch_sub_cluster"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/sub-clusters/{subcluster-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'subcluster-id' + '}', subcluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sub_cluster)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodeCollectionsApi#patch_sub_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a Sub-cluster configuration
    # Read a Sub-cluster configuration. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param subcluster_id 
    # @param [Hash] opts the optional parameters
    # @return [SubCluster]
    def read_sub_cluster(site_id, enforcementpoint_id, subcluster_id, opts = {})
      data, _status_code, _headers = read_sub_cluster_with_http_info(site_id, enforcementpoint_id, subcluster_id, opts)
      data
    end

    # Read a Sub-cluster configuration
    # Read a Sub-cluster configuration. 
    # @param site_id 
    # @param enforcementpoint_id 
    # @param subcluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubCluster, Fixnum, Hash)>] SubCluster data, response status code and response headers
    def read_sub_cluster_with_http_info(site_id, enforcementpoint_id, subcluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodeCollectionsApi.read_sub_cluster ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodeCollectionsApi.read_sub_cluster"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodeCollectionsApi.read_sub_cluster"
      end
      # verify the required parameter 'subcluster_id' is set
      if @api_client.config.client_side_validation && subcluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'subcluster_id' when calling TransportNodeCollectionsApi.read_sub_cluster"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/sub-clusters/{subcluster-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'subcluster-id' + '}', subcluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubCluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodeCollectionsApi#read_sub_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Uninstall NSX from the specified Transport Node Collection
    # This API uninstalls NSX applied to the Transport Node Collection with the ID corresponding to the one specified in the request.
    # @param site_id 
    # @param enforcementpoint_id 
    # @param transport_node_collection_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_nsxon_transport_node_collection(site_id, enforcementpoint_id, transport_node_collection_id, opts = {})
      remove_nsxon_transport_node_collection_with_http_info(site_id, enforcementpoint_id, transport_node_collection_id, opts)
      nil
    end

    # Uninstall NSX from the specified Transport Node Collection
    # This API uninstalls NSX applied to the Transport Node Collection with the ID corresponding to the one specified in the request.
    # @param site_id 
    # @param enforcementpoint_id 
    # @param transport_node_collection_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_nsxon_transport_node_collection_with_http_info(site_id, enforcementpoint_id, transport_node_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodeCollectionsApi.remove_nsxon_transport_node_collection ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodeCollectionsApi.remove_nsxon_transport_node_collection"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodeCollectionsApi.remove_nsxon_transport_node_collection"
      end
      # verify the required parameter 'transport_node_collection_id' is set
      if @api_client.config.client_side_validation && transport_node_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_collection_id' when calling TransportNodeCollectionsApi.remove_nsxon_transport_node_collection"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/transport-node-collections/{transport-node-collection-id}?action=remove_nsx'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'transport-node-collection-id' + '}', transport_node_collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodeCollectionsApi#remove_nsxon_transport_node_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retry the process on applying transport node profile
    # This API is relevant for compute collection on which vLCM is enabled. This API should be invoked to retry the realization of transport node profile on the compute collection. This is useful when profile realization had failed because of error in vLCM. This API has no effect if vLCM is not enabled on the computer collection.
    # @param site_id 
    # @param enforcementpoint_id 
    # @param transport_node_collection_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def retry_host_transport_node_collection_realization(site_id, enforcementpoint_id, transport_node_collection_id, opts = {})
      retry_host_transport_node_collection_realization_with_http_info(site_id, enforcementpoint_id, transport_node_collection_id, opts)
      nil
    end

    # Retry the process on applying transport node profile
    # This API is relevant for compute collection on which vLCM is enabled. This API should be invoked to retry the realization of transport node profile on the compute collection. This is useful when profile realization had failed because of error in vLCM. This API has no effect if vLCM is not enabled on the computer collection.
    # @param site_id 
    # @param enforcementpoint_id 
    # @param transport_node_collection_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def retry_host_transport_node_collection_realization_with_http_info(site_id, enforcementpoint_id, transport_node_collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransportNodeCollectionsApi.retry_host_transport_node_collection_realization ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TransportNodeCollectionsApi.retry_host_transport_node_collection_realization"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling TransportNodeCollectionsApi.retry_host_transport_node_collection_realization"
      end
      # verify the required parameter 'transport_node_collection_id' is set
      if @api_client.config.client_side_validation && transport_node_collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'transport_node_collection_id' when calling TransportNodeCollectionsApi.retry_host_transport_node_collection_realization"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcementpoint-id}/transport-node-collections/{transport-node-collection-id}?action=retry_profile_realization'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s).sub('{' + 'transport-node-collection-id' + '}', transport_node_collection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransportNodeCollectionsApi#retry_host_transport_node_collection_realization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
