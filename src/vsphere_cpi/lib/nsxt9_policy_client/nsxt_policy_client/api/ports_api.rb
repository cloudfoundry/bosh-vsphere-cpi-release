=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class PortsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update an infra segment port
    # Create an infra segment port if it does not exist based on the IDs, or update existing port information by replacing the port object already exists. 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [SegmentPort]
    def create_or_replace_infra_segment_port(segment_id, port_id, segment_port, opts = {})
      data, _status_code, _headers = create_or_replace_infra_segment_port_with_http_info(segment_id, port_id, segment_port, opts)
      data
    end

    # Create or update an infra segment port
    # Create an infra segment port if it does not exist based on the IDs, or update existing port information by replacing the port object already exists. 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentPort, Fixnum, Hash)>] SegmentPort data, response status code and response headers
    def create_or_replace_infra_segment_port_with_http_info(segment_id, port_id, segment_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.create_or_replace_infra_segment_port ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.create_or_replace_infra_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.create_or_replace_infra_segment_port"
      end
      # verify the required parameter 'segment_port' is set
      if @api_client.config.client_side_validation && segment_port.nil?
        fail ArgumentError, "Missing the required parameter 'segment_port' when calling PortsApi.create_or_replace_infra_segment_port"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#create_or_replace_infra_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Tier-1 segment port
    # Create a Tier-1 segment port if it does not exist based on the IDs, or update existing port information by replacing the port object already exists. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [SegmentPort]
    def create_or_replace_tier1_segment_port(tier_1_id, segment_id, port_id, segment_port, opts = {})
      data, _status_code, _headers = create_or_replace_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, segment_port, opts)
      data
    end

    # Create or update a Tier-1 segment port
    # Create a Tier-1 segment port if it does not exist based on the IDs, or update existing port information by replacing the port object already exists. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentPort, Fixnum, Hash)>] SegmentPort data, response status code and response headers
    def create_or_replace_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, segment_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.create_or_replace_tier1_segment_port ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.create_or_replace_tier1_segment_port"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.create_or_replace_tier1_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.create_or_replace_tier1_segment_port"
      end
      # verify the required parameter 'segment_port' is set
      if @api_client.config.client_side_validation && segment_port.nil?
        fail ArgumentError, "Missing the required parameter 'segment_port' when calling PortsApi.create_or_replace_tier1_segment_port"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#create_or_replace_tier1_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an infra segment port
    # Delete an infra segment port by giving ID. Please note that this operation will not delete the segment port from vCenter Server if the port was connected to a Virtual Machine. Please connect Virtual Machine to another network for the segment port to be deleted from vCenter Server. Do not provide any parameters to this call unless it is during VIF restore workflow by NSX container plugin(NCP). 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_infra_segment_port(segment_id, port_id, opts = {})
      delete_infra_segment_port_with_http_info(segment_id, port_id, opts)
      nil
    end

    # Delete an infra segment port
    # Delete an infra segment port by giving ID. Please note that this operation will not delete the segment port from vCenter Server if the port was connected to a Virtual Machine. Please connect Virtual Machine to another network for the segment port to be deleted from vCenter Server. Do not provide any parameters to this call unless it is during VIF restore workflow by NSX container plugin(NCP). 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_infra_segment_port_with_http_info(segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.delete_infra_segment_port ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.delete_infra_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.delete_infra_segment_port"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#delete_infra_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Tier-1 segment port. Please note that this operation will not delete the segment port from vCenter Server if the port was connected to a Virtual Machine. Please connect Virtual Machine to another network for the segment port to be deleted from vCenter Server. 
    # Delete a Tier-1 segment port by giving ID. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tier1_segment_port(tier_1_id, segment_id, port_id, opts = {})
      delete_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, opts)
      nil
    end

    # Delete a Tier-1 segment port. Please note that this operation will not delete the segment port from vCenter Server if the port was connected to a Virtual Machine. Please connect Virtual Machine to another network for the segment port to be deleted from vCenter Server. 
    # Delete a Tier-1 segment port by giving ID. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.delete_tier1_segment_port ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.delete_tier1_segment_port"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.delete_tier1_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.delete_tier1_segment_port"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#delete_tier1_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment port by ID
    # Get detail information on an infra segment port by giving ID. 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [SegmentPort]
    def get_infra_segment_port(segment_id, port_id, opts = {})
      data, _status_code, _headers = get_infra_segment_port_with_http_info(segment_id, port_id, opts)
      data
    end

    # Get infra segment port by ID
    # Get detail information on an infra segment port by giving ID. 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentPort, Fixnum, Hash)>] SegmentPort data, response status code and response headers
    def get_infra_segment_port_with_http_info(segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.get_infra_segment_port ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.get_infra_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.get_infra_segment_port"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#get_infra_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get MAC table for infra segment port
    # Returns MAC table for a segment port 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [SegmentPortMacAddressListResult]
    def get_infra_segment_port_mac_table(segment_id, port_id, opts = {})
      data, _status_code, _headers = get_infra_segment_port_mac_table_with_http_info(segment_id, port_id, opts)
      data
    end

    # Get MAC table for infra segment port
    # Returns MAC table for a segment port 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(SegmentPortMacAddressListResult, Fixnum, Hash)>] SegmentPortMacAddressListResult data, response status code and response headers
    def get_infra_segment_port_mac_table_with_http_info(segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.get_infra_segment_port_mac_table ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.get_infra_segment_port_mac_table"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.get_infra_segment_port_mac_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.get_infra_segment_port_mac_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.get_infra_segment_port_mac_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}/mac-table'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortMacAddressListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#get_infra_segment_port_mac_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment port MAC table in CSV
    # Returns MAC table for a segment port 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [SegmentPortMacAddressCsvListResult]
    def get_infra_segment_port_mac_table_in_csv(segment_id, port_id, opts = {})
      data, _status_code, _headers = get_infra_segment_port_mac_table_in_csv_with_http_info(segment_id, port_id, opts)
      data
    end

    # Get infra segment port MAC table in CSV
    # Returns MAC table for a segment port 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(SegmentPortMacAddressCsvListResult, Fixnum, Hash)>] SegmentPortMacAddressCsvListResult data, response status code and response headers
    def get_infra_segment_port_mac_table_in_csv_with_http_info(segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.get_infra_segment_port_mac_table_in_csv ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.get_infra_segment_port_mac_table_in_csv"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.get_infra_segment_port_mac_table_in_csv"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}/mac-table?format=csv'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortMacAddressCsvListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#get_infra_segment_port_mac_table_in_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment port state
    # Returns infra segment port state on enforcement point 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [SegmentPortState]
    def get_infra_segment_port_state(segment_id, port_id, opts = {})
      data, _status_code, _headers = get_infra_segment_port_state_with_http_info(segment_id, port_id, opts)
      data
    end

    # Get infra segment port state
    # Returns infra segment port state on enforcement point 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(SegmentPortState, Fixnum, Hash)>] SegmentPortState data, response status code and response headers
    def get_infra_segment_port_state_with_http_info(segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.get_infra_segment_port_state ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.get_infra_segment_port_state"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.get_infra_segment_port_state"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}/state'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#get_infra_segment_port_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment port statistics information
    # Get infra segment port statistics information. 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [SegmentPortStatistics]
    def get_infra_segment_port_statistics(segments_id, port_id, opts = {})
      data, _status_code, _headers = get_infra_segment_port_statistics_with_http_info(segments_id, port_id, opts)
      data
    end

    # Get infra segment port statistics information
    # Get infra segment port statistics information. 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [Array<(SegmentPortStatistics, Fixnum, Hash)>] SegmentPortStatistics data, response status code and response headers
    def get_infra_segment_port_statistics_with_http_info(segments_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.get_infra_segment_port_statistics ...'
      end
      # verify the required parameter 'segments_id' is set
      if @api_client.config.client_side_validation && segments_id.nil?
        fail ArgumentError, "Missing the required parameter 'segments_id' when calling PortsApi.get_infra_segment_port_statistics"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.get_infra_segment_port_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'bgp_neighbor_type'] && !['INTER_SR', 'USER'].include?(opts[:'bgp_neighbor_type'])
        fail ArgumentError, 'invalid value for "bgp_neighbor_type", must be one of INTER_SR, USER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.get_infra_segment_port_statistics, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.get_infra_segment_port_statistics, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'stats_type'] && !['DATAPATH_STATS'].include?(opts[:'stats_type'])
        fail ArgumentError, 'invalid value for "stats_type", must be one of DATAPATH_STATS'
      end
      # resource path
      local_var_path = '/infra/segments/{segments-id}/ports/{port-id}/statistics'.sub('{' + 'segments-id' + '}', segments_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bgp_neighbor_type'] = opts[:'bgp_neighbor_type'] if !opts[:'bgp_neighbor_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'stats_type'] = opts[:'stats_type'] if !opts[:'stats_type'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#get_infra_segment_port_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment port status information
    # Get infra segment port status information. 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [SegmentPortStatus]
    def get_infra_segment_port_status(segments_id, port_id, opts = {})
      data, _status_code, _headers = get_infra_segment_port_status_with_http_info(segments_id, port_id, opts)
      data
    end

    # Get infra segment port status information
    # Get infra segment port status information. 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [Array<(SegmentPortStatus, Fixnum, Hash)>] SegmentPortStatus data, response status code and response headers
    def get_infra_segment_port_status_with_http_info(segments_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.get_infra_segment_port_status ...'
      end
      # verify the required parameter 'segments_id' is set
      if @api_client.config.client_side_validation && segments_id.nil?
        fail ArgumentError, "Missing the required parameter 'segments_id' when calling PortsApi.get_infra_segment_port_status"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.get_infra_segment_port_status"
      end
      if @api_client.config.client_side_validation && opts[:'bgp_neighbor_type'] && !['INTER_SR', 'USER'].include?(opts[:'bgp_neighbor_type'])
        fail ArgumentError, 'invalid value for "bgp_neighbor_type", must be one of INTER_SR, USER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.get_infra_segment_port_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.get_infra_segment_port_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'stats_type'] && !['DATAPATH_STATS'].include?(opts[:'stats_type'])
        fail ArgumentError, 'invalid value for "stats_type", must be one of DATAPATH_STATS'
      end
      # resource path
      local_var_path = '/infra/segments/{segments-id}/ports/{port-id}/status'.sub('{' + 'segments-id' + '}', segments_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bgp_neighbor_type'] = opts[:'bgp_neighbor_type'] if !opts[:'bgp_neighbor_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'stats_type'] = opts[:'stats_type'] if !opts[:'stats_type'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#get_infra_segment_port_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tier-1 segment port statistics information
    # Get tier-1 segment port statistics information. 
    # @param tier_1_id 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [SegmentPortStatistics]
    def get_segment_port_statistics(tier_1_id, segments_id, port_id, opts = {})
      data, _status_code, _headers = get_segment_port_statistics_with_http_info(tier_1_id, segments_id, port_id, opts)
      data
    end

    # Get tier-1 segment port statistics information
    # Get tier-1 segment port statistics information. 
    # @param tier_1_id 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [Array<(SegmentPortStatistics, Fixnum, Hash)>] SegmentPortStatistics data, response status code and response headers
    def get_segment_port_statistics_with_http_info(tier_1_id, segments_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.get_segment_port_statistics ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.get_segment_port_statistics"
      end
      # verify the required parameter 'segments_id' is set
      if @api_client.config.client_side_validation && segments_id.nil?
        fail ArgumentError, "Missing the required parameter 'segments_id' when calling PortsApi.get_segment_port_statistics"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.get_segment_port_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'bgp_neighbor_type'] && !['INTER_SR', 'USER'].include?(opts[:'bgp_neighbor_type'])
        fail ArgumentError, 'invalid value for "bgp_neighbor_type", must be one of INTER_SR, USER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.get_segment_port_statistics, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.get_segment_port_statistics, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'stats_type'] && !['DATAPATH_STATS'].include?(opts[:'stats_type'])
        fail ArgumentError, 'invalid value for "stats_type", must be one of DATAPATH_STATS'
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segments-id}/ports/{port-id}/statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segments-id' + '}', segments_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bgp_neighbor_type'] = opts[:'bgp_neighbor_type'] if !opts[:'bgp_neighbor_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'stats_type'] = opts[:'stats_type'] if !opts[:'stats_type'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#get_segment_port_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get segment port status information
    # Get tier1 segment port status information. 
    # @param tier_1_id 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [SegmentPortStatus]
    def get_segment_port_status(tier_1_id, segments_id, port_id, opts = {})
      data, _status_code, _headers = get_segment_port_status_with_http_info(tier_1_id, segments_id, port_id, opts)
      data
    end

    # Get segment port status information
    # Get tier1 segment port status information. 
    # @param tier_1_id 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [Array<(SegmentPortStatus, Fixnum, Hash)>] SegmentPortStatus data, response status code and response headers
    def get_segment_port_status_with_http_info(tier_1_id, segments_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.get_segment_port_status ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.get_segment_port_status"
      end
      # verify the required parameter 'segments_id' is set
      if @api_client.config.client_side_validation && segments_id.nil?
        fail ArgumentError, "Missing the required parameter 'segments_id' when calling PortsApi.get_segment_port_status"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.get_segment_port_status"
      end
      if @api_client.config.client_side_validation && opts[:'bgp_neighbor_type'] && !['INTER_SR', 'USER'].include?(opts[:'bgp_neighbor_type'])
        fail ArgumentError, 'invalid value for "bgp_neighbor_type", must be one of INTER_SR, USER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.get_segment_port_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.get_segment_port_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'stats_type'] && !['DATAPATH_STATS'].include?(opts[:'stats_type'])
        fail ArgumentError, 'invalid value for "stats_type", must be one of DATAPATH_STATS'
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segments-id}/ports/{port-id}/status'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segments-id' + '}', segments_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bgp_neighbor_type'] = opts[:'bgp_neighbor_type'] if !opts[:'bgp_neighbor_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'stats_type'] = opts[:'stats_type'] if !opts[:'stats_type'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#get_segment_port_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tier-1 segment port by ID
    # Get detail information on a Tier-1 segment port by giving ID. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [SegmentPort]
    def get_tier1_segment_port(tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = get_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, opts)
      data
    end

    # Get Tier-1 segment port by ID
    # Get detail information on a Tier-1 segment port by giving ID. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentPort, Fixnum, Hash)>] SegmentPort data, response status code and response headers
    def get_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.get_tier1_segment_port ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.get_tier1_segment_port"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.get_tier1_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.get_tier1_segment_port"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#get_tier1_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get MAC table for tier-1 segment port
    # Returns MAC table for a segment port 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [SegmentPortMacAddressListResult]
    def get_tier1_segment_port_mac_table(tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = get_tier1_segment_port_mac_table_with_http_info(tier_1_id, segment_id, port_id, opts)
      data
    end

    # Get MAC table for tier-1 segment port
    # Returns MAC table for a segment port 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(SegmentPortMacAddressListResult, Fixnum, Hash)>] SegmentPortMacAddressListResult data, response status code and response headers
    def get_tier1_segment_port_mac_table_with_http_info(tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.get_tier1_segment_port_mac_table ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.get_tier1_segment_port_mac_table"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.get_tier1_segment_port_mac_table"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.get_tier1_segment_port_mac_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.get_tier1_segment_port_mac_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.get_tier1_segment_port_mac_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/mac-table'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortMacAddressListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#get_tier1_segment_port_mac_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tier-1 segment port MAC table in CSV
    # Returns MAC table for a segment port 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [SegmentPortMacAddressCsvListResult]
    def get_tier1_segment_port_mac_table_in_csv(tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = get_tier1_segment_port_mac_table_in_csv_with_http_info(tier_1_id, segment_id, port_id, opts)
      data
    end

    # Get tier-1 segment port MAC table in CSV
    # Returns MAC table for a segment port 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(SegmentPortMacAddressCsvListResult, Fixnum, Hash)>] SegmentPortMacAddressCsvListResult data, response status code and response headers
    def get_tier1_segment_port_mac_table_in_csv_with_http_info(tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.get_tier1_segment_port_mac_table_in_csv ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.get_tier1_segment_port_mac_table_in_csv"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.get_tier1_segment_port_mac_table_in_csv"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.get_tier1_segment_port_mac_table_in_csv"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/mac-table?format=csv'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortMacAddressCsvListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#get_tier1_segment_port_mac_table_in_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tier-1  segment port state
    # Returns tier-1 segment port state on enforcement point 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [SegmentPortState]
    def get_tier1_segment_port_state(tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = get_tier1_segment_port_state_with_http_info(tier_1_id, segment_id, port_id, opts)
      data
    end

    # Get tier-1  segment port state
    # Returns tier-1 segment port state on enforcement point 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(SegmentPortState, Fixnum, Hash)>] SegmentPortState data, response status code and response headers
    def get_tier1_segment_port_state_with_http_info(tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.get_tier1_segment_port_state ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.get_tier1_segment_port_state"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.get_tier1_segment_port_state"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.get_tier1_segment_port_state"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/state'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#get_tier1_segment_port_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update an infra segment port
    # Create an infra segment port if it does not exist based on the IDs, or update existing port information by replacing the port object already exists. 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [SegmentPort]
    def global_infra_create_or_replace_infra_segment_port(segment_id, port_id, segment_port, opts = {})
      data, _status_code, _headers = global_infra_create_or_replace_infra_segment_port_with_http_info(segment_id, port_id, segment_port, opts)
      data
    end

    # Create or update an infra segment port
    # Create an infra segment port if it does not exist based on the IDs, or update existing port information by replacing the port object already exists. 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentPort, Fixnum, Hash)>] SegmentPort data, response status code and response headers
    def global_infra_create_or_replace_infra_segment_port_with_http_info(segment_id, port_id, segment_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_create_or_replace_infra_segment_port ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.global_infra_create_or_replace_infra_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.global_infra_create_or_replace_infra_segment_port"
      end
      # verify the required parameter 'segment_port' is set
      if @api_client.config.client_side_validation && segment_port.nil?
        fail ArgumentError, "Missing the required parameter 'segment_port' when calling PortsApi.global_infra_create_or_replace_infra_segment_port"
      end
      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/ports/{port-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_create_or_replace_infra_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Tier-1 segment port
    # Create a Tier-1 segment port if it does not exist based on the IDs, or update existing port information by replacing the port object already exists. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [SegmentPort]
    def global_infra_create_or_replace_tier1_segment_port(tier_1_id, segment_id, port_id, segment_port, opts = {})
      data, _status_code, _headers = global_infra_create_or_replace_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, segment_port, opts)
      data
    end

    # Create or update a Tier-1 segment port
    # Create a Tier-1 segment port if it does not exist based on the IDs, or update existing port information by replacing the port object already exists. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentPort, Fixnum, Hash)>] SegmentPort data, response status code and response headers
    def global_infra_create_or_replace_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, segment_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_create_or_replace_tier1_segment_port ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.global_infra_create_or_replace_tier1_segment_port"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.global_infra_create_or_replace_tier1_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.global_infra_create_or_replace_tier1_segment_port"
      end
      # verify the required parameter 'segment_port' is set
      if @api_client.config.client_side_validation && segment_port.nil?
        fail ArgumentError, "Missing the required parameter 'segment_port' when calling PortsApi.global_infra_create_or_replace_tier1_segment_port"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_create_or_replace_tier1_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an infra segment port
    # Delete an infra segment port by giving ID. Please note that this operation will not delete the segment port from vCenter Server if the port was connected to a Virtual Machine. Please connect Virtual Machine to another network for the segment port to be deleted from vCenter Server. Do not provide any parameters to this call unless it is during VIF restore workflow by NSX container plugin(NCP). 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_delete_infra_segment_port(segment_id, port_id, opts = {})
      global_infra_delete_infra_segment_port_with_http_info(segment_id, port_id, opts)
      nil
    end

    # Delete an infra segment port
    # Delete an infra segment port by giving ID. Please note that this operation will not delete the segment port from vCenter Server if the port was connected to a Virtual Machine. Please connect Virtual Machine to another network for the segment port to be deleted from vCenter Server. Do not provide any parameters to this call unless it is during VIF restore workflow by NSX container plugin(NCP). 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_infra_segment_port_with_http_info(segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_delete_infra_segment_port ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.global_infra_delete_infra_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.global_infra_delete_infra_segment_port"
      end
      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/ports/{port-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_delete_infra_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Tier-1 segment port. Please note that this operation will not delete the segment port from vCenter Server if the port was connected to a Virtual Machine. Please connect Virtual Machine to another network for the segment port to be deleted from vCenter Server. 
    # Delete a Tier-1 segment port by giving ID. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_delete_tier1_segment_port(tier_1_id, segment_id, port_id, opts = {})
      global_infra_delete_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, opts)
      nil
    end

    # Delete a Tier-1 segment port. Please note that this operation will not delete the segment port from vCenter Server if the port was connected to a Virtual Machine. Please connect Virtual Machine to another network for the segment port to be deleted from vCenter Server. 
    # Delete a Tier-1 segment port by giving ID. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_delete_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_delete_tier1_segment_port ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.global_infra_delete_tier1_segment_port"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.global_infra_delete_tier1_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.global_infra_delete_tier1_segment_port"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_delete_tier1_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment port by ID
    # Get detail information on an infra segment port by giving ID. 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [SegmentPort]
    def global_infra_get_infra_segment_port(segment_id, port_id, opts = {})
      data, _status_code, _headers = global_infra_get_infra_segment_port_with_http_info(segment_id, port_id, opts)
      data
    end

    # Get infra segment port by ID
    # Get detail information on an infra segment port by giving ID. 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentPort, Fixnum, Hash)>] SegmentPort data, response status code and response headers
    def global_infra_get_infra_segment_port_with_http_info(segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_get_infra_segment_port ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.global_infra_get_infra_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.global_infra_get_infra_segment_port"
      end
      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/ports/{port-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_get_infra_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get MAC table for infra segment port
    # Returns MAC table for a segment port 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [SegmentPortMacAddressListResult]
    def global_infra_get_infra_segment_port_mac_table(segment_id, port_id, opts = {})
      data, _status_code, _headers = global_infra_get_infra_segment_port_mac_table_with_http_info(segment_id, port_id, opts)
      data
    end

    # Get MAC table for infra segment port
    # Returns MAC table for a segment port 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(SegmentPortMacAddressListResult, Fixnum, Hash)>] SegmentPortMacAddressListResult data, response status code and response headers
    def global_infra_get_infra_segment_port_mac_table_with_http_info(segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_get_infra_segment_port_mac_table ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.global_infra_get_infra_segment_port_mac_table"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.global_infra_get_infra_segment_port_mac_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.global_infra_get_infra_segment_port_mac_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.global_infra_get_infra_segment_port_mac_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/ports/{port-id}/mac-table'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortMacAddressListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_get_infra_segment_port_mac_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment port MAC table in CSV
    # Returns MAC table for a segment port 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [SegmentPortMacAddressCsvListResult]
    def global_infra_get_infra_segment_port_mac_table_in_csv(segment_id, port_id, opts = {})
      data, _status_code, _headers = global_infra_get_infra_segment_port_mac_table_in_csv_with_http_info(segment_id, port_id, opts)
      data
    end

    # Get infra segment port MAC table in CSV
    # Returns MAC table for a segment port 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(SegmentPortMacAddressCsvListResult, Fixnum, Hash)>] SegmentPortMacAddressCsvListResult data, response status code and response headers
    def global_infra_get_infra_segment_port_mac_table_in_csv_with_http_info(segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_get_infra_segment_port_mac_table_in_csv ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.global_infra_get_infra_segment_port_mac_table_in_csv"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.global_infra_get_infra_segment_port_mac_table_in_csv"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/ports/{port-id}/mac-table?format=csv'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortMacAddressCsvListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_get_infra_segment_port_mac_table_in_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment port state
    # Returns infra segment port state on enforcement point 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [SegmentPortState]
    def global_infra_get_infra_segment_port_state(segment_id, port_id, opts = {})
      data, _status_code, _headers = global_infra_get_infra_segment_port_state_with_http_info(segment_id, port_id, opts)
      data
    end

    # Get infra segment port state
    # Returns infra segment port state on enforcement point 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(SegmentPortState, Fixnum, Hash)>] SegmentPortState data, response status code and response headers
    def global_infra_get_infra_segment_port_state_with_http_info(segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_get_infra_segment_port_state ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.global_infra_get_infra_segment_port_state"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.global_infra_get_infra_segment_port_state"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/ports/{port-id}/state'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_get_infra_segment_port_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment port statistics information
    # Get infra segment port statistics information. 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [SegmentPortStatistics]
    def global_infra_get_infra_segment_port_statistics(segments_id, port_id, opts = {})
      data, _status_code, _headers = global_infra_get_infra_segment_port_statistics_with_http_info(segments_id, port_id, opts)
      data
    end

    # Get infra segment port statistics information
    # Get infra segment port statistics information. 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [Array<(SegmentPortStatistics, Fixnum, Hash)>] SegmentPortStatistics data, response status code and response headers
    def global_infra_get_infra_segment_port_statistics_with_http_info(segments_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_get_infra_segment_port_statistics ...'
      end
      # verify the required parameter 'segments_id' is set
      if @api_client.config.client_side_validation && segments_id.nil?
        fail ArgumentError, "Missing the required parameter 'segments_id' when calling PortsApi.global_infra_get_infra_segment_port_statistics"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.global_infra_get_infra_segment_port_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'bgp_neighbor_type'] && !['INTER_SR', 'USER'].include?(opts[:'bgp_neighbor_type'])
        fail ArgumentError, 'invalid value for "bgp_neighbor_type", must be one of INTER_SR, USER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.global_infra_get_infra_segment_port_statistics, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.global_infra_get_infra_segment_port_statistics, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'stats_type'] && !['DATAPATH_STATS'].include?(opts[:'stats_type'])
        fail ArgumentError, 'invalid value for "stats_type", must be one of DATAPATH_STATS'
      end
      # resource path
      local_var_path = '/global-infra/segments/{segments-id}/ports/{port-id}/statistics'.sub('{' + 'segments-id' + '}', segments_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bgp_neighbor_type'] = opts[:'bgp_neighbor_type'] if !opts[:'bgp_neighbor_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'stats_type'] = opts[:'stats_type'] if !opts[:'stats_type'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_get_infra_segment_port_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment port status information
    # Get infra segment port status information. 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [SegmentPortStatus]
    def global_infra_get_infra_segment_port_status(segments_id, port_id, opts = {})
      data, _status_code, _headers = global_infra_get_infra_segment_port_status_with_http_info(segments_id, port_id, opts)
      data
    end

    # Get infra segment port status information
    # Get infra segment port status information. 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [Array<(SegmentPortStatus, Fixnum, Hash)>] SegmentPortStatus data, response status code and response headers
    def global_infra_get_infra_segment_port_status_with_http_info(segments_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_get_infra_segment_port_status ...'
      end
      # verify the required parameter 'segments_id' is set
      if @api_client.config.client_side_validation && segments_id.nil?
        fail ArgumentError, "Missing the required parameter 'segments_id' when calling PortsApi.global_infra_get_infra_segment_port_status"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.global_infra_get_infra_segment_port_status"
      end
      if @api_client.config.client_side_validation && opts[:'bgp_neighbor_type'] && !['INTER_SR', 'USER'].include?(opts[:'bgp_neighbor_type'])
        fail ArgumentError, 'invalid value for "bgp_neighbor_type", must be one of INTER_SR, USER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.global_infra_get_infra_segment_port_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.global_infra_get_infra_segment_port_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'stats_type'] && !['DATAPATH_STATS'].include?(opts[:'stats_type'])
        fail ArgumentError, 'invalid value for "stats_type", must be one of DATAPATH_STATS'
      end
      # resource path
      local_var_path = '/global-infra/segments/{segments-id}/ports/{port-id}/status'.sub('{' + 'segments-id' + '}', segments_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bgp_neighbor_type'] = opts[:'bgp_neighbor_type'] if !opts[:'bgp_neighbor_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'stats_type'] = opts[:'stats_type'] if !opts[:'stats_type'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_get_infra_segment_port_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tier-1 segment port statistics information
    # Get tier-1 segment port statistics information. 
    # @param tier_1_id 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [SegmentPortStatistics]
    def global_infra_get_segment_port_statistics(tier_1_id, segments_id, port_id, opts = {})
      data, _status_code, _headers = global_infra_get_segment_port_statistics_with_http_info(tier_1_id, segments_id, port_id, opts)
      data
    end

    # Get tier-1 segment port statistics information
    # Get tier-1 segment port statistics information. 
    # @param tier_1_id 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [Array<(SegmentPortStatistics, Fixnum, Hash)>] SegmentPortStatistics data, response status code and response headers
    def global_infra_get_segment_port_statistics_with_http_info(tier_1_id, segments_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_get_segment_port_statistics ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.global_infra_get_segment_port_statistics"
      end
      # verify the required parameter 'segments_id' is set
      if @api_client.config.client_side_validation && segments_id.nil?
        fail ArgumentError, "Missing the required parameter 'segments_id' when calling PortsApi.global_infra_get_segment_port_statistics"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.global_infra_get_segment_port_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'bgp_neighbor_type'] && !['INTER_SR', 'USER'].include?(opts[:'bgp_neighbor_type'])
        fail ArgumentError, 'invalid value for "bgp_neighbor_type", must be one of INTER_SR, USER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.global_infra_get_segment_port_statistics, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.global_infra_get_segment_port_statistics, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'stats_type'] && !['DATAPATH_STATS'].include?(opts[:'stats_type'])
        fail ArgumentError, 'invalid value for "stats_type", must be one of DATAPATH_STATS'
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segments-id}/ports/{port-id}/statistics'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segments-id' + '}', segments_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bgp_neighbor_type'] = opts[:'bgp_neighbor_type'] if !opts[:'bgp_neighbor_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'stats_type'] = opts[:'stats_type'] if !opts[:'stats_type'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_get_segment_port_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get segment port status information
    # Get tier1 segment port status information. 
    # @param tier_1_id 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [SegmentPortStatus]
    def global_infra_get_segment_port_status(tier_1_id, segments_id, port_id, opts = {})
      data, _status_code, _headers = global_infra_get_segment_port_status_with_http_info(tier_1_id, segments_id, port_id, opts)
      data
    end

    # Get segment port status information
    # Get tier1 segment port status information. 
    # @param tier_1_id 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [Array<(SegmentPortStatus, Fixnum, Hash)>] SegmentPortStatus data, response status code and response headers
    def global_infra_get_segment_port_status_with_http_info(tier_1_id, segments_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_get_segment_port_status ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.global_infra_get_segment_port_status"
      end
      # verify the required parameter 'segments_id' is set
      if @api_client.config.client_side_validation && segments_id.nil?
        fail ArgumentError, "Missing the required parameter 'segments_id' when calling PortsApi.global_infra_get_segment_port_status"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.global_infra_get_segment_port_status"
      end
      if @api_client.config.client_side_validation && opts[:'bgp_neighbor_type'] && !['INTER_SR', 'USER'].include?(opts[:'bgp_neighbor_type'])
        fail ArgumentError, 'invalid value for "bgp_neighbor_type", must be one of INTER_SR, USER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.global_infra_get_segment_port_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.global_infra_get_segment_port_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'stats_type'] && !['DATAPATH_STATS'].include?(opts[:'stats_type'])
        fail ArgumentError, 'invalid value for "stats_type", must be one of DATAPATH_STATS'
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segments-id}/ports/{port-id}/status'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segments-id' + '}', segments_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bgp_neighbor_type'] = opts[:'bgp_neighbor_type'] if !opts[:'bgp_neighbor_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'stats_type'] = opts[:'stats_type'] if !opts[:'stats_type'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_get_segment_port_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tier-1 segment port by ID
    # Get detail information on a Tier-1 segment port by giving ID. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [SegmentPort]
    def global_infra_get_tier1_segment_port(tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, opts)
      data
    end

    # Get Tier-1 segment port by ID
    # Get detail information on a Tier-1 segment port by giving ID. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentPort, Fixnum, Hash)>] SegmentPort data, response status code and response headers
    def global_infra_get_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_get_tier1_segment_port ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.global_infra_get_tier1_segment_port"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.global_infra_get_tier1_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.global_infra_get_tier1_segment_port"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_get_tier1_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get MAC table for tier-1 segment port
    # Returns MAC table for a segment port 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [SegmentPortMacAddressListResult]
    def global_infra_get_tier1_segment_port_mac_table(tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier1_segment_port_mac_table_with_http_info(tier_1_id, segment_id, port_id, opts)
      data
    end

    # Get MAC table for tier-1 segment port
    # Returns MAC table for a segment port 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(SegmentPortMacAddressListResult, Fixnum, Hash)>] SegmentPortMacAddressListResult data, response status code and response headers
    def global_infra_get_tier1_segment_port_mac_table_with_http_info(tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_get_tier1_segment_port_mac_table ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.global_infra_get_tier1_segment_port_mac_table"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.global_infra_get_tier1_segment_port_mac_table"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.global_infra_get_tier1_segment_port_mac_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.global_infra_get_tier1_segment_port_mac_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.global_infra_get_tier1_segment_port_mac_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/mac-table'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortMacAddressListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_get_tier1_segment_port_mac_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tier-1 segment port MAC table in CSV
    # Returns MAC table for a segment port 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [SegmentPortMacAddressCsvListResult]
    def global_infra_get_tier1_segment_port_mac_table_in_csv(tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier1_segment_port_mac_table_in_csv_with_http_info(tier_1_id, segment_id, port_id, opts)
      data
    end

    # Get tier-1 segment port MAC table in CSV
    # Returns MAC table for a segment port 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(SegmentPortMacAddressCsvListResult, Fixnum, Hash)>] SegmentPortMacAddressCsvListResult data, response status code and response headers
    def global_infra_get_tier1_segment_port_mac_table_in_csv_with_http_info(tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_get_tier1_segment_port_mac_table_in_csv ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.global_infra_get_tier1_segment_port_mac_table_in_csv"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.global_infra_get_tier1_segment_port_mac_table_in_csv"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.global_infra_get_tier1_segment_port_mac_table_in_csv"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/mac-table?format=csv'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortMacAddressCsvListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_get_tier1_segment_port_mac_table_in_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tier-1  segment port state
    # Returns tier-1 segment port state on enforcement point 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [SegmentPortState]
    def global_infra_get_tier1_segment_port_state(tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = global_infra_get_tier1_segment_port_state_with_http_info(tier_1_id, segment_id, port_id, opts)
      data
    end

    # Get tier-1  segment port state
    # Returns tier-1 segment port state on enforcement point 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(SegmentPortState, Fixnum, Hash)>] SegmentPortState data, response status code and response headers
    def global_infra_get_tier1_segment_port_state_with_http_info(tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_get_tier1_segment_port_state ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.global_infra_get_tier1_segment_port_state"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.global_infra_get_tier1_segment_port_state"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.global_infra_get_tier1_segment_port_state"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/state'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_get_tier1_segment_port_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List infra segment ports
    # List all the ports for an infra. 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentPortListResult]
    def global_infra_list_infra_segment_ports(segment_id, opts = {})
      data, _status_code, _headers = global_infra_list_infra_segment_ports_with_http_info(segment_id, opts)
      data
    end

    # List infra segment ports
    # List all the ports for an infra. 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentPortListResult, Fixnum, Hash)>] SegmentPortListResult data, response status code and response headers
    def global_infra_list_infra_segment_ports_with_http_info(segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_list_infra_segment_ports ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.global_infra_list_infra_segment_ports"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.global_infra_list_infra_segment_ports, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.global_infra_list_infra_segment_ports, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/ports'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_list_infra_segment_ports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all effective profiles for infra segment port
    # List all effective profiles for this segment port on given enforcement point.
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [EffectiveProfilesResponse]
    def global_infra_list_infra_segment_ports_effective_profiles(segment_id, port_id, opts = {})
      data, _status_code, _headers = global_infra_list_infra_segment_ports_effective_profiles_with_http_info(segment_id, port_id, opts)
      data
    end

    # List all effective profiles for infra segment port
    # List all effective profiles for this segment port on given enforcement point.
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(EffectiveProfilesResponse, Fixnum, Hash)>] EffectiveProfilesResponse data, response status code and response headers
    def global_infra_list_infra_segment_ports_effective_profiles_with_http_info(segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_list_infra_segment_ports_effective_profiles ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.global_infra_list_infra_segment_ports_effective_profiles"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.global_infra_list_infra_segment_ports_effective_profiles"
      end
      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/ports/{port-id}/effective-profiles'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EffectiveProfilesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_list_infra_segment_ports_effective_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Tier-1 segment ports
    # List all the ports for a Tier-1 segment. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentPortListResult]
    def global_infra_list_tier1_segment_ports(tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = global_infra_list_tier1_segment_ports_with_http_info(tier_1_id, segment_id, opts)
      data
    end

    # List Tier-1 segment ports
    # List all the ports for a Tier-1 segment. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentPortListResult, Fixnum, Hash)>] SegmentPortListResult data, response status code and response headers
    def global_infra_list_tier1_segment_ports_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_list_tier1_segment_ports ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.global_infra_list_tier1_segment_ports"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.global_infra_list_tier1_segment_ports"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.global_infra_list_tier1_segment_ports, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.global_infra_list_tier1_segment_ports, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_list_tier1_segment_ports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all effective profiles for tier-1 segment port
    # List all effective profiles for this segment port on given enforcement point.
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [EffectiveProfilesResponse]
    def global_infra_list_tier1_segment_ports_effective_profiles(tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = global_infra_list_tier1_segment_ports_effective_profiles_with_http_info(tier_1_id, segment_id, port_id, opts)
      data
    end

    # List all effective profiles for tier-1 segment port
    # List all effective profiles for this segment port on given enforcement point.
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(EffectiveProfilesResponse, Fixnum, Hash)>] EffectiveProfilesResponse data, response status code and response headers
    def global_infra_list_tier1_segment_ports_effective_profiles_with_http_info(tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_list_tier1_segment_ports_effective_profiles ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.global_infra_list_tier1_segment_ports_effective_profiles"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.global_infra_list_tier1_segment_ports_effective_profiles"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.global_infra_list_tier1_segment_ports_effective_profiles"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/effective-profiles'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EffectiveProfilesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_list_tier1_segment_ports_effective_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch an infra segment port
    # Create an infra segment port if it does not exist based on the IDs, or update existing port information by replacing the port object fields which presents in the request body. 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_patch_infra_segment_port(segment_id, port_id, segment_port, opts = {})
      global_infra_patch_infra_segment_port_with_http_info(segment_id, port_id, segment_port, opts)
      nil
    end

    # Patch an infra segment port
    # Create an infra segment port if it does not exist based on the IDs, or update existing port information by replacing the port object fields which presents in the request body. 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_infra_segment_port_with_http_info(segment_id, port_id, segment_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_patch_infra_segment_port ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.global_infra_patch_infra_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.global_infra_patch_infra_segment_port"
      end
      # verify the required parameter 'segment_port' is set
      if @api_client.config.client_side_validation && segment_port.nil?
        fail ArgumentError, "Missing the required parameter 'segment_port' when calling PortsApi.global_infra_patch_infra_segment_port"
      end
      # resource path
      local_var_path = '/global-infra/segments/{segment-id}/ports/{port-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_patch_infra_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a Tier-1 segment port
    # Create a Tier-1 segment port if it does not exist based on the IDs, or update existing port information by replacing the port object fields which presents in the request body. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def global_infra_patch_tier1_segment_port(tier_1_id, segment_id, port_id, segment_port, opts = {})
      global_infra_patch_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, segment_port, opts)
      nil
    end

    # Patch a Tier-1 segment port
    # Create a Tier-1 segment port if it does not exist based on the IDs, or update existing port information by replacing the port object fields which presents in the request body. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def global_infra_patch_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, segment_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.global_infra_patch_tier1_segment_port ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.global_infra_patch_tier1_segment_port"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.global_infra_patch_tier1_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.global_infra_patch_tier1_segment_port"
      end
      # verify the required parameter 'segment_port' is set
      if @api_client.config.client_side_validation && segment_port.nil?
        fail ArgumentError, "Missing the required parameter 'segment_port' when calling PortsApi.global_infra_patch_tier1_segment_port"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#global_infra_patch_tier1_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List infra segment ports
    # List all the ports for an infra. 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentPortListResult]
    def list_infra_segment_ports(segment_id, opts = {})
      data, _status_code, _headers = list_infra_segment_ports_with_http_info(segment_id, opts)
      data
    end

    # List infra segment ports
    # List all the ports for an infra. 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentPortListResult, Fixnum, Hash)>] SegmentPortListResult data, response status code and response headers
    def list_infra_segment_ports_with_http_info(segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.list_infra_segment_ports ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.list_infra_segment_ports"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.list_infra_segment_ports, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.list_infra_segment_ports, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#list_infra_segment_ports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all effective profiles for infra segment port
    # List all effective profiles for this segment port on given enforcement point.
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [EffectiveProfilesResponse]
    def list_infra_segment_ports_effective_profiles(segment_id, port_id, opts = {})
      data, _status_code, _headers = list_infra_segment_ports_effective_profiles_with_http_info(segment_id, port_id, opts)
      data
    end

    # List all effective profiles for infra segment port
    # List all effective profiles for this segment port on given enforcement point.
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(EffectiveProfilesResponse, Fixnum, Hash)>] EffectiveProfilesResponse data, response status code and response headers
    def list_infra_segment_ports_effective_profiles_with_http_info(segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.list_infra_segment_ports_effective_profiles ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.list_infra_segment_ports_effective_profiles"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.list_infra_segment_ports_effective_profiles"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}/effective-profiles'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EffectiveProfilesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#list_infra_segment_ports_effective_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Tier-1 segment ports
    # List all the ports for a Tier-1 segment. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentPortListResult]
    def list_tier1_segment_ports(tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = list_tier1_segment_ports_with_http_info(tier_1_id, segment_id, opts)
      data
    end

    # List Tier-1 segment ports
    # List all the ports for a Tier-1 segment. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentPortListResult, Fixnum, Hash)>] SegmentPortListResult data, response status code and response headers
    def list_tier1_segment_ports_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.list_tier1_segment_ports ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.list_tier1_segment_ports"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.list_tier1_segment_ports"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.list_tier1_segment_ports, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.list_tier1_segment_ports, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#list_tier1_segment_ports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all effective profiles for tier-1 segment port
    # List all effective profiles for this segment port on given enforcement point.
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [EffectiveProfilesResponse]
    def list_tier1_segment_ports_effective_profiles(tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = list_tier1_segment_ports_effective_profiles_with_http_info(tier_1_id, segment_id, port_id, opts)
      data
    end

    # List all effective profiles for tier-1 segment port
    # List all effective profiles for this segment port on given enforcement point.
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(EffectiveProfilesResponse, Fixnum, Hash)>] EffectiveProfilesResponse data, response status code and response headers
    def list_tier1_segment_ports_effective_profiles_with_http_info(tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.list_tier1_segment_ports_effective_profiles ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.list_tier1_segment_ports_effective_profiles"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.list_tier1_segment_ports_effective_profiles"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.list_tier1_segment_ports_effective_profiles"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/effective-profiles'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EffectiveProfilesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#list_tier1_segment_ports_effective_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update an infra segment port
    # Create an infra segment port if it does not exist based on the IDs, or update existing port information by replacing the port object already exists. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [SegmentPort]
    def orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_port(org_id, project_id, segment_id, port_id, segment_port, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_port_with_http_info(org_id, project_id, segment_id, port_id, segment_port, opts)
      data
    end

    # Create or update an infra segment port
    # Create an infra segment port if it does not exist based on the IDs, or update existing port information by replacing the port object already exists. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentPort, Fixnum, Hash)>] SegmentPort data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_port_with_http_info(org_id, project_id, segment_id, port_id, segment_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_port ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_port"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_port"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_port"
      end
      # verify the required parameter 'segment_port' is set
      if @api_client.config.client_side_validation && segment_port.nil?
        fail ArgumentError, "Missing the required parameter 'segment_port' when calling PortsApi.orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_port"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/ports/{port-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_create_or_replace_infra_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a Tier-1 segment port
    # Create a Tier-1 segment port if it does not exist based on the IDs, or update existing port information by replacing the port object already exists. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [SegmentPort]
    def orgs_org_id_projects_project_id_infra_create_or_replace_tier1_segment_port(org_id, project_id, tier_1_id, segment_id, port_id, segment_port, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_tier1_segment_port_with_http_info(org_id, project_id, tier_1_id, segment_id, port_id, segment_port, opts)
      data
    end

    # Create or update a Tier-1 segment port
    # Create a Tier-1 segment port if it does not exist based on the IDs, or update existing port information by replacing the port object already exists. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentPort, Fixnum, Hash)>] SegmentPort data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_tier1_segment_port_with_http_info(org_id, project_id, tier_1_id, segment_id, port_id, segment_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_create_or_replace_tier1_segment_port ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_create_or_replace_tier1_segment_port"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_create_or_replace_tier1_segment_port"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_create_or_replace_tier1_segment_port"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_create_or_replace_tier1_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_create_or_replace_tier1_segment_port"
      end
      # verify the required parameter 'segment_port' is set
      if @api_client.config.client_side_validation && segment_port.nil?
        fail ArgumentError, "Missing the required parameter 'segment_port' when calling PortsApi.orgs_org_id_projects_project_id_infra_create_or_replace_tier1_segment_port"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_create_or_replace_tier1_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an infra segment port
    # Delete an infra segment port by giving ID. Please note that this operation will not delete the segment port from vCenter Server if the port was connected to a Virtual Machine. Please connect Virtual Machine to another network for the segment port to be deleted from vCenter Server. Do not provide any parameters to this call unless it is during VIF restore workflow by NSX container plugin(NCP). 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_infra_segment_port(org_id, project_id, segment_id, port_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_infra_segment_port_with_http_info(org_id, project_id, segment_id, port_id, opts)
      nil
    end

    # Delete an infra segment port
    # Delete an infra segment port by giving ID. Please note that this operation will not delete the segment port from vCenter Server if the port was connected to a Virtual Machine. Please connect Virtual Machine to another network for the segment port to be deleted from vCenter Server. Do not provide any parameters to this call unless it is during VIF restore workflow by NSX container plugin(NCP). 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_infra_segment_port_with_http_info(org_id, project_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_delete_infra_segment_port ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_delete_infra_segment_port"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_delete_infra_segment_port"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_delete_infra_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_delete_infra_segment_port"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/ports/{port-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_delete_infra_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Tier-1 segment port. Please note that this operation will not delete the segment port from vCenter Server if the port was connected to a Virtual Machine. Please connect Virtual Machine to another network for the segment port to be deleted from vCenter Server. 
    # Delete a Tier-1 segment port by giving ID. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_tier1_segment_port(org_id, project_id, tier_1_id, segment_id, port_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_tier1_segment_port_with_http_info(org_id, project_id, tier_1_id, segment_id, port_id, opts)
      nil
    end

    # Delete a Tier-1 segment port. Please note that this operation will not delete the segment port from vCenter Server if the port was connected to a Virtual Machine. Please connect Virtual Machine to another network for the segment port to be deleted from vCenter Server. 
    # Delete a Tier-1 segment port by giving ID. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_tier1_segment_port_with_http_info(org_id, project_id, tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_delete_tier1_segment_port ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_delete_tier1_segment_port"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_delete_tier1_segment_port"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_delete_tier1_segment_port"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_delete_tier1_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_delete_tier1_segment_port"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_delete_tier1_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment port by ID
    # Get detail information on an infra segment port by giving ID. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [SegmentPort]
    def orgs_org_id_projects_project_id_infra_get_infra_segment_port(org_id, project_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_infra_segment_port_with_http_info(org_id, project_id, segment_id, port_id, opts)
      data
    end

    # Get infra segment port by ID
    # Get detail information on an infra segment port by giving ID. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentPort, Fixnum, Hash)>] SegmentPort data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_infra_segment_port_with_http_info(org_id, project_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/ports/{port-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_get_infra_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get MAC table for infra segment port
    # Returns MAC table for a segment port 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [SegmentPortMacAddressListResult]
    def orgs_org_id_projects_project_id_infra_get_infra_segment_port_mac_table(org_id, project_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_infra_segment_port_mac_table_with_http_info(org_id, project_id, segment_id, port_id, opts)
      data
    end

    # Get MAC table for infra segment port
    # Returns MAC table for a segment port 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(SegmentPortMacAddressListResult, Fixnum, Hash)>] SegmentPortMacAddressListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_infra_segment_port_mac_table_with_http_info(org_id, project_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_mac_table ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_mac_table"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_mac_table"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_mac_table"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_mac_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_mac_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_mac_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/ports/{port-id}/mac-table'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortMacAddressListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_get_infra_segment_port_mac_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment port MAC table in CSV
    # Returns MAC table for a segment port 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [SegmentPortMacAddressCsvListResult]
    def orgs_org_id_projects_project_id_infra_get_infra_segment_port_mac_table_in_csv(org_id, project_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_infra_segment_port_mac_table_in_csv_with_http_info(org_id, project_id, segment_id, port_id, opts)
      data
    end

    # Get infra segment port MAC table in CSV
    # Returns MAC table for a segment port 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(SegmentPortMacAddressCsvListResult, Fixnum, Hash)>] SegmentPortMacAddressCsvListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_infra_segment_port_mac_table_in_csv_with_http_info(org_id, project_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_mac_table_in_csv ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_mac_table_in_csv"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_mac_table_in_csv"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_mac_table_in_csv"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_mac_table_in_csv"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/ports/{port-id}/mac-table?format=csv'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortMacAddressCsvListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_get_infra_segment_port_mac_table_in_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment port state
    # Returns infra segment port state on enforcement point 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [SegmentPortState]
    def orgs_org_id_projects_project_id_infra_get_infra_segment_port_state(org_id, project_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_infra_segment_port_state_with_http_info(org_id, project_id, segment_id, port_id, opts)
      data
    end

    # Get infra segment port state
    # Returns infra segment port state on enforcement point 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(SegmentPortState, Fixnum, Hash)>] SegmentPortState data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_infra_segment_port_state_with_http_info(org_id, project_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_state ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_state"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_state"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_state"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_state"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/ports/{port-id}/state'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_get_infra_segment_port_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment port statistics information
    # Get infra segment port statistics information. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [SegmentPortStatistics]
    def orgs_org_id_projects_project_id_infra_get_infra_segment_port_statistics(org_id, project_id, segments_id, port_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_infra_segment_port_statistics_with_http_info(org_id, project_id, segments_id, port_id, opts)
      data
    end

    # Get infra segment port statistics information
    # Get infra segment port statistics information. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [Array<(SegmentPortStatistics, Fixnum, Hash)>] SegmentPortStatistics data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_infra_segment_port_statistics_with_http_info(org_id, project_id, segments_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_statistics"
      end
      # verify the required parameter 'segments_id' is set
      if @api_client.config.client_side_validation && segments_id.nil?
        fail ArgumentError, "Missing the required parameter 'segments_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_statistics"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'bgp_neighbor_type'] && !['INTER_SR', 'USER'].include?(opts[:'bgp_neighbor_type'])
        fail ArgumentError, 'invalid value for "bgp_neighbor_type", must be one of INTER_SR, USER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_statistics, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_statistics, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'stats_type'] && !['DATAPATH_STATS'].include?(opts[:'stats_type'])
        fail ArgumentError, 'invalid value for "stats_type", must be one of DATAPATH_STATS'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segments-id}/ports/{port-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segments-id' + '}', segments_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bgp_neighbor_type'] = opts[:'bgp_neighbor_type'] if !opts[:'bgp_neighbor_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'stats_type'] = opts[:'stats_type'] if !opts[:'stats_type'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_get_infra_segment_port_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get infra segment port status information
    # Get infra segment port status information. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [SegmentPortStatus]
    def orgs_org_id_projects_project_id_infra_get_infra_segment_port_status(org_id, project_id, segments_id, port_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_infra_segment_port_status_with_http_info(org_id, project_id, segments_id, port_id, opts)
      data
    end

    # Get infra segment port status information
    # Get infra segment port status information. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [Array<(SegmentPortStatus, Fixnum, Hash)>] SegmentPortStatus data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_infra_segment_port_status_with_http_info(org_id, project_id, segments_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_status"
      end
      # verify the required parameter 'segments_id' is set
      if @api_client.config.client_side_validation && segments_id.nil?
        fail ArgumentError, "Missing the required parameter 'segments_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_status"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_status"
      end
      if @api_client.config.client_side_validation && opts[:'bgp_neighbor_type'] && !['INTER_SR', 'USER'].include?(opts[:'bgp_neighbor_type'])
        fail ArgumentError, 'invalid value for "bgp_neighbor_type", must be one of INTER_SR, USER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.orgs_org_id_projects_project_id_infra_get_infra_segment_port_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'stats_type'] && !['DATAPATH_STATS'].include?(opts[:'stats_type'])
        fail ArgumentError, 'invalid value for "stats_type", must be one of DATAPATH_STATS'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segments-id}/ports/{port-id}/status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segments-id' + '}', segments_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bgp_neighbor_type'] = opts[:'bgp_neighbor_type'] if !opts[:'bgp_neighbor_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'stats_type'] = opts[:'stats_type'] if !opts[:'stats_type'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_get_infra_segment_port_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tier-1 segment port statistics information
    # Get tier-1 segment port statistics information. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [SegmentPortStatistics]
    def orgs_org_id_projects_project_id_infra_get_segment_port_statistics(org_id, project_id, tier_1_id, segments_id, port_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_segment_port_statistics_with_http_info(org_id, project_id, tier_1_id, segments_id, port_id, opts)
      data
    end

    # Get tier-1 segment port statistics information
    # Get tier-1 segment port statistics information. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [Array<(SegmentPortStatistics, Fixnum, Hash)>] SegmentPortStatistics data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_segment_port_statistics_with_http_info(org_id, project_id, tier_1_id, segments_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_get_segment_port_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_segment_port_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_segment_port_statistics"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_segment_port_statistics"
      end
      # verify the required parameter 'segments_id' is set
      if @api_client.config.client_side_validation && segments_id.nil?
        fail ArgumentError, "Missing the required parameter 'segments_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_segment_port_statistics"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_segment_port_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'bgp_neighbor_type'] && !['INTER_SR', 'USER'].include?(opts[:'bgp_neighbor_type'])
        fail ArgumentError, 'invalid value for "bgp_neighbor_type", must be one of INTER_SR, USER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.orgs_org_id_projects_project_id_infra_get_segment_port_statistics, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.orgs_org_id_projects_project_id_infra_get_segment_port_statistics, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'stats_type'] && !['DATAPATH_STATS'].include?(opts[:'stats_type'])
        fail ArgumentError, 'invalid value for "stats_type", must be one of DATAPATH_STATS'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segments-id}/ports/{port-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segments-id' + '}', segments_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bgp_neighbor_type'] = opts[:'bgp_neighbor_type'] if !opts[:'bgp_neighbor_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'stats_type'] = opts[:'stats_type'] if !opts[:'stats_type'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_get_segment_port_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get segment port status information
    # Get tier1 segment port status information. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [SegmentPortStatus]
    def orgs_org_id_projects_project_id_infra_get_segment_port_status(org_id, project_id, tier_1_id, segments_id, port_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_segment_port_status_with_http_info(org_id, project_id, tier_1_id, segments_id, port_id, opts)
      data
    end

    # Get segment port status information
    # Get tier1 segment port status information. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segments_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [Array<(SegmentPortStatus, Fixnum, Hash)>] SegmentPortStatus data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_segment_port_status_with_http_info(org_id, project_id, tier_1_id, segments_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_get_segment_port_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_segment_port_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_segment_port_status"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_segment_port_status"
      end
      # verify the required parameter 'segments_id' is set
      if @api_client.config.client_side_validation && segments_id.nil?
        fail ArgumentError, "Missing the required parameter 'segments_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_segment_port_status"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_segment_port_status"
      end
      if @api_client.config.client_side_validation && opts[:'bgp_neighbor_type'] && !['INTER_SR', 'USER'].include?(opts[:'bgp_neighbor_type'])
        fail ArgumentError, 'invalid value for "bgp_neighbor_type", must be one of INTER_SR, USER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.orgs_org_id_projects_project_id_infra_get_segment_port_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.orgs_org_id_projects_project_id_infra_get_segment_port_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'stats_type'] && !['DATAPATH_STATS'].include?(opts[:'stats_type'])
        fail ArgumentError, 'invalid value for "stats_type", must be one of DATAPATH_STATS'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segments-id}/ports/{port-id}/status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segments-id' + '}', segments_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bgp_neighbor_type'] = opts[:'bgp_neighbor_type'] if !opts[:'bgp_neighbor_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'stats_type'] = opts[:'stats_type'] if !opts[:'stats_type'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_get_segment_port_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tier-1 segment port by ID
    # Get detail information on a Tier-1 segment port by giving ID. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [SegmentPort]
    def orgs_org_id_projects_project_id_infra_get_tier1_segment_port(org_id, project_id, tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_segment_port_with_http_info(org_id, project_id, tier_1_id, segment_id, port_id, opts)
      data
    end

    # Get Tier-1 segment port by ID
    # Get detail information on a Tier-1 segment port by giving ID. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentPort, Fixnum, Hash)>] SegmentPort data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_segment_port_with_http_info(org_id, project_id, tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_get_tier1_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get MAC table for tier-1 segment port
    # Returns MAC table for a segment port 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [SegmentPortMacAddressListResult]
    def orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table(org_id, project_id, tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table_with_http_info(org_id, project_id, tier_1_id, segment_id, port_id, opts)
      data
    end

    # Get MAC table for tier-1 segment port
    # Returns MAC table for a segment port 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(SegmentPortMacAddressListResult, Fixnum, Hash)>] SegmentPortMacAddressListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table_with_http_info(org_id, project_id, tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/mac-table'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortMacAddressListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tier-1 segment port MAC table in CSV
    # Returns MAC table for a segment port 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [SegmentPortMacAddressCsvListResult]
    def orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table_in_csv(org_id, project_id, tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table_in_csv_with_http_info(org_id, project_id, tier_1_id, segment_id, port_id, opts)
      data
    end

    # Get tier-1 segment port MAC table in CSV
    # Returns MAC table for a segment port 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_id TransportNode Id
    # @return [Array<(SegmentPortMacAddressCsvListResult, Fixnum, Hash)>] SegmentPortMacAddressCsvListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table_in_csv_with_http_info(org_id, project_id, tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table_in_csv ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table_in_csv"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table_in_csv"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table_in_csv"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table_in_csv"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table_in_csv"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/mac-table?format=csv'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortMacAddressCsvListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_get_tier1_segment_port_mac_table_in_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tier-1  segment port state
    # Returns tier-1 segment port state on enforcement point 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [SegmentPortState]
    def orgs_org_id_projects_project_id_infra_get_tier1_segment_port_state(org_id, project_id, tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_tier1_segment_port_state_with_http_info(org_id, project_id, tier_1_id, segment_id, port_id, opts)
      data
    end

    # Get tier-1  segment port state
    # Returns tier-1 segment port state on enforcement point 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(SegmentPortState, Fixnum, Hash)>] SegmentPortState data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_tier1_segment_port_state_with_http_info(org_id, project_id, tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port_state ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port_state"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port_state"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port_state"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port_state"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_get_tier1_segment_port_state"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/state'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_get_tier1_segment_port_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List infra segment ports
    # List all the ports for an infra. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentPortListResult]
    def orgs_org_id_projects_project_id_infra_list_infra_segment_ports(org_id, project_id, segment_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_infra_segment_ports_with_http_info(org_id, project_id, segment_id, opts)
      data
    end

    # List infra segment ports
    # List all the ports for an infra. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentPortListResult, Fixnum, Hash)>] SegmentPortListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_infra_segment_ports_with_http_info(org_id, project_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_list_infra_segment_ports ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_list_infra_segment_ports"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_list_infra_segment_ports"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_list_infra_segment_ports"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.orgs_org_id_projects_project_id_infra_list_infra_segment_ports, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.orgs_org_id_projects_project_id_infra_list_infra_segment_ports, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/ports'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_list_infra_segment_ports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all effective profiles for infra segment port
    # List all effective profiles for this segment port on given enforcement point.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [EffectiveProfilesResponse]
    def orgs_org_id_projects_project_id_infra_list_infra_segment_ports_effective_profiles(org_id, project_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_infra_segment_ports_effective_profiles_with_http_info(org_id, project_id, segment_id, port_id, opts)
      data
    end

    # List all effective profiles for infra segment port
    # List all effective profiles for this segment port on given enforcement point.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(EffectiveProfilesResponse, Fixnum, Hash)>] EffectiveProfilesResponse data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_infra_segment_ports_effective_profiles_with_http_info(org_id, project_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_list_infra_segment_ports_effective_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_list_infra_segment_ports_effective_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_list_infra_segment_ports_effective_profiles"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_list_infra_segment_ports_effective_profiles"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_list_infra_segment_ports_effective_profiles"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/ports/{port-id}/effective-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EffectiveProfilesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_list_infra_segment_ports_effective_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Tier-1 segment ports
    # List all the ports for a Tier-1 segment. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentPortListResult]
    def orgs_org_id_projects_project_id_infra_list_tier1_segment_ports(org_id, project_id, tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_tier1_segment_ports_with_http_info(org_id, project_id, tier_1_id, segment_id, opts)
      data
    end

    # List Tier-1 segment ports
    # List all the ports for a Tier-1 segment. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentPortListResult, Fixnum, Hash)>] SegmentPortListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_tier1_segment_ports_with_http_info(org_id, project_id, tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_list_tier1_segment_ports ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_list_tier1_segment_ports"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_list_tier1_segment_ports"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_list_tier1_segment_ports"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_list_tier1_segment_ports"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.orgs_org_id_projects_project_id_infra_list_tier1_segment_ports, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PortsApi.orgs_org_id_projects_project_id_infra_list_tier1_segment_ports, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentPortListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_list_tier1_segment_ports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all effective profiles for tier-1 segment port
    # List all effective profiles for this segment port on given enforcement point.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [EffectiveProfilesResponse]
    def orgs_org_id_projects_project_id_infra_list_tier1_segment_ports_effective_profiles(org_id, project_id, tier_1_id, segment_id, port_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_tier1_segment_ports_effective_profiles_with_http_info(org_id, project_id, tier_1_id, segment_id, port_id, opts)
      data
    end

    # List all effective profiles for tier-1 segment port
    # List all effective profiles for this segment port on given enforcement point.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @return [Array<(EffectiveProfilesResponse, Fixnum, Hash)>] EffectiveProfilesResponse data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_tier1_segment_ports_effective_profiles_with_http_info(org_id, project_id, tier_1_id, segment_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_list_tier1_segment_ports_effective_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_list_tier1_segment_ports_effective_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_list_tier1_segment_ports_effective_profiles"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_list_tier1_segment_ports_effective_profiles"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_list_tier1_segment_ports_effective_profiles"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_list_tier1_segment_ports_effective_profiles"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/effective-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EffectiveProfilesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_list_tier1_segment_ports_effective_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch an infra segment port
    # Create an infra segment port if it does not exist based on the IDs, or update existing port information by replacing the port object fields which presents in the request body. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_infra_segment_port(org_id, project_id, segment_id, port_id, segment_port, opts = {})
      orgs_org_id_projects_project_id_infra_patch_infra_segment_port_with_http_info(org_id, project_id, segment_id, port_id, segment_port, opts)
      nil
    end

    # Patch an infra segment port
    # Create an infra segment port if it does not exist based on the IDs, or update existing port information by replacing the port object fields which presents in the request body. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_infra_segment_port_with_http_info(org_id, project_id, segment_id, port_id, segment_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_port ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_port"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_port"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_port"
      end
      # verify the required parameter 'segment_port' is set
      if @api_client.config.client_side_validation && segment_port.nil?
        fail ArgumentError, "Missing the required parameter 'segment_port' when calling PortsApi.orgs_org_id_projects_project_id_infra_patch_infra_segment_port"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/segments/{segment-id}/ports/{port-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_patch_infra_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a Tier-1 segment port
    # Create a Tier-1 segment port if it does not exist based on the IDs, or update existing port information by replacing the port object fields which presents in the request body. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_tier1_segment_port(org_id, project_id, tier_1_id, segment_id, port_id, segment_port, opts = {})
      orgs_org_id_projects_project_id_infra_patch_tier1_segment_port_with_http_info(org_id, project_id, tier_1_id, segment_id, port_id, segment_port, opts)
      nil
    end

    # Patch a Tier-1 segment port
    # Create a Tier-1 segment port if it does not exist based on the IDs, or update existing port information by replacing the port object fields which presents in the request body. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_tier1_segment_port_with_http_info(org_id, project_id, tier_1_id, segment_id, port_id, segment_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.orgs_org_id_projects_project_id_infra_patch_tier1_segment_port ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_patch_tier1_segment_port"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_patch_tier1_segment_port"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_patch_tier1_segment_port"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_patch_tier1_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.orgs_org_id_projects_project_id_infra_patch_tier1_segment_port"
      end
      # verify the required parameter 'segment_port' is set
      if @api_client.config.client_side_validation && segment_port.nil?
        fail ArgumentError, "Missing the required parameter 'segment_port' when calling PortsApi.orgs_org_id_projects_project_id_infra_patch_tier1_segment_port"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#orgs_org_id_projects_project_id_infra_patch_tier1_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch an infra segment port
    # Create an infra segment port if it does not exist based on the IDs, or update existing port information by replacing the port object fields which presents in the request body. 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_infra_segment_port(segment_id, port_id, segment_port, opts = {})
      patch_infra_segment_port_with_http_info(segment_id, port_id, segment_port, opts)
      nil
    end

    # Patch an infra segment port
    # Create an infra segment port if it does not exist based on the IDs, or update existing port information by replacing the port object fields which presents in the request body. 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_infra_segment_port_with_http_info(segment_id, port_id, segment_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.patch_infra_segment_port ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.patch_infra_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.patch_infra_segment_port"
      end
      # verify the required parameter 'segment_port' is set
      if @api_client.config.client_side_validation && segment_port.nil?
        fail ArgumentError, "Missing the required parameter 'segment_port' when calling PortsApi.patch_infra_segment_port"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/ports/{port-id}'.sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#patch_infra_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a Tier-1 segment port
    # Create a Tier-1 segment port if it does not exist based on the IDs, or update existing port information by replacing the port object fields which presents in the request body. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tier1_segment_port(tier_1_id, segment_id, port_id, segment_port, opts = {})
      patch_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, segment_port, opts)
      nil
    end

    # Patch a Tier-1 segment port
    # Create a Tier-1 segment port if it does not exist based on the IDs, or update existing port information by replacing the port object fields which presents in the request body. 
    # @param tier_1_id 
    # @param segment_id 
    # @param port_id 
    # @param segment_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tier1_segment_port_with_http_info(tier_1_id, segment_id, port_id, segment_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortsApi.patch_tier1_segment_port ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling PortsApi.patch_tier1_segment_port"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling PortsApi.patch_tier1_segment_port"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling PortsApi.patch_tier1_segment_port"
      end
      # verify the required parameter 'segment_port' is set
      if @api_client.config.client_side_validation && segment_port.nil?
        fail ArgumentError, "Missing the required parameter 'segment_port' when calling PortsApi.patch_tier1_segment_port"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s).sub('{' + 'port-id' + '}', port_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortsApi#patch_tier1_segment_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
