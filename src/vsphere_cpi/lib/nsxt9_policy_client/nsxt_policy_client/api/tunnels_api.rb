=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class TunnelsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or Update Tunnel(GRE as of now)
    # Create or Update Tunnel(GRE as of now)
    # @param tier_0_id tier0 id
    # @param locale_svc_id locale service id
    # @param tunnel_id tunnel id
    # @param tunnel 
    # @param [Hash] opts the optional parameters
    # @return [Tunnel]
    def create_or_update_tunnel(tier_0_id, locale_svc_id, tunnel_id, tunnel, opts = {})
      data, _status_code, _headers = create_or_update_tunnel_with_http_info(tier_0_id, locale_svc_id, tunnel_id, tunnel, opts)
      data
    end

    # Create or Update Tunnel(GRE as of now)
    # Create or Update Tunnel(GRE as of now)
    # @param tier_0_id tier0 id
    # @param locale_svc_id locale service id
    # @param tunnel_id tunnel id
    # @param tunnel 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tunnel, Fixnum, Hash)>] Tunnel data, response status code and response headers
    def create_or_update_tunnel_with_http_info(tier_0_id, locale_svc_id, tunnel_id, tunnel, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TunnelsApi.create_or_update_tunnel ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling TunnelsApi.create_or_update_tunnel"
      end
      # verify the required parameter 'locale_svc_id' is set
      if @api_client.config.client_side_validation && locale_svc_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_svc_id' when calling TunnelsApi.create_or_update_tunnel"
      end
      # verify the required parameter 'tunnel_id' is set
      if @api_client.config.client_side_validation && tunnel_id.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel_id' when calling TunnelsApi.create_or_update_tunnel"
      end
      # verify the required parameter 'tunnel' is set
      if @api_client.config.client_side_validation && tunnel.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel' when calling TunnelsApi.create_or_update_tunnel"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-svc-id}/tunnels/{tunnel-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-svc-id' + '}', locale_svc_id.to_s).sub('{' + 'tunnel-id' + '}', tunnel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tunnel)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tunnel')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TunnelsApi#create_or_update_tunnel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Tunnel(GRE as of now) by given tunnel Id
    # Delete Tunnel(GRE as of now) by given tunnel Id
    # @param tier_0_id tier0 id
    # @param locale_svc_id locale service id
    # @param tunnel_id tunnel id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tunnel(tier_0_id, locale_svc_id, tunnel_id, opts = {})
      delete_tunnel_with_http_info(tier_0_id, locale_svc_id, tunnel_id, opts)
      nil
    end

    # Delete Tunnel(GRE as of now) by given tunnel Id
    # Delete Tunnel(GRE as of now) by given tunnel Id
    # @param tier_0_id tier0 id
    # @param locale_svc_id locale service id
    # @param tunnel_id tunnel id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tunnel_with_http_info(tier_0_id, locale_svc_id, tunnel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TunnelsApi.delete_tunnel ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling TunnelsApi.delete_tunnel"
      end
      # verify the required parameter 'locale_svc_id' is set
      if @api_client.config.client_side_validation && locale_svc_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_svc_id' when calling TunnelsApi.delete_tunnel"
      end
      # verify the required parameter 'tunnel_id' is set
      if @api_client.config.client_side_validation && tunnel_id.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel_id' when calling TunnelsApi.delete_tunnel"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-svc-id}/tunnels/{tunnel-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-svc-id' + '}', locale_svc_id.to_s).sub('{' + 'tunnel-id' + '}', tunnel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TunnelsApi#delete_tunnel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Policy Tunnel(GRE as of now)
    # Get Policy Tunnel(GRE as of now)
    # @param tier_0_id tier0 id
    # @param locale_svc_id locale service id
    # @param tunnel_id tunnel id
    # @param [Hash] opts the optional parameters
    # @return [Tunnel]
    def get_policy_tunnel(tier_0_id, locale_svc_id, tunnel_id, opts = {})
      data, _status_code, _headers = get_policy_tunnel_with_http_info(tier_0_id, locale_svc_id, tunnel_id, opts)
      data
    end

    # Get Policy Tunnel(GRE as of now)
    # Get Policy Tunnel(GRE as of now)
    # @param tier_0_id tier0 id
    # @param locale_svc_id locale service id
    # @param tunnel_id tunnel id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tunnel, Fixnum, Hash)>] Tunnel data, response status code and response headers
    def get_policy_tunnel_with_http_info(tier_0_id, locale_svc_id, tunnel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TunnelsApi.get_policy_tunnel ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling TunnelsApi.get_policy_tunnel"
      end
      # verify the required parameter 'locale_svc_id' is set
      if @api_client.config.client_side_validation && locale_svc_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_svc_id' when calling TunnelsApi.get_policy_tunnel"
      end
      # verify the required parameter 'tunnel_id' is set
      if @api_client.config.client_side_validation && tunnel_id.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel_id' when calling TunnelsApi.get_policy_tunnel"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-svc-id}/tunnels/{tunnel-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-svc-id' + '}', locale_svc_id.to_s).sub('{' + 'tunnel-id' + '}', tunnel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tunnel')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TunnelsApi#get_policy_tunnel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get policy Tunnel(GRE as of now) statistics for given tunnel-id
    # Get policy Tunnel(GRE as of now) statistics for given tunnel-id
    # @param tier_0_id 
    # @param locale_svc_id 
    # @param tunnel_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [TunnelTrafficStatistics]
    def get_policy_tunnel_statistics(tier_0_id, locale_svc_id, tunnel_id, opts = {})
      data, _status_code, _headers = get_policy_tunnel_statistics_with_http_info(tier_0_id, locale_svc_id, tunnel_id, opts)
      data
    end

    # Get policy Tunnel(GRE as of now) statistics for given tunnel-id
    # Get policy Tunnel(GRE as of now) statistics for given tunnel-id
    # @param tier_0_id 
    # @param locale_svc_id 
    # @param tunnel_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [Array<(TunnelTrafficStatistics, Fixnum, Hash)>] TunnelTrafficStatistics data, response status code and response headers
    def get_policy_tunnel_statistics_with_http_info(tier_0_id, locale_svc_id, tunnel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TunnelsApi.get_policy_tunnel_statistics ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling TunnelsApi.get_policy_tunnel_statistics"
      end
      # verify the required parameter 'locale_svc_id' is set
      if @api_client.config.client_side_validation && locale_svc_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_svc_id' when calling TunnelsApi.get_policy_tunnel_statistics"
      end
      # verify the required parameter 'tunnel_id' is set
      if @api_client.config.client_side_validation && tunnel_id.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel_id' when calling TunnelsApi.get_policy_tunnel_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'bgp_neighbor_type'] && !['INTER_SR', 'USER'].include?(opts[:'bgp_neighbor_type'])
        fail ArgumentError, 'invalid value for "bgp_neighbor_type", must be one of INTER_SR, USER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TunnelsApi.get_policy_tunnel_statistics, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TunnelsApi.get_policy_tunnel_statistics, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'stats_type'] && !['DATAPATH_STATS'].include?(opts[:'stats_type'])
        fail ArgumentError, 'invalid value for "stats_type", must be one of DATAPATH_STATS'
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-svc-id}/tunnels/{tunnel-id}/statistics'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-svc-id' + '}', locale_svc_id.to_s).sub('{' + 'tunnel-id' + '}', tunnel_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bgp_neighbor_type'] = opts[:'bgp_neighbor_type'] if !opts[:'bgp_neighbor_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'stats_type'] = opts[:'stats_type'] if !opts[:'stats_type'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TunnelTrafficStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TunnelsApi#get_policy_tunnel_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get policy Tunnel(GRE as of now) statistics summary for given tunnel-id
    # Get policy Tunnel(GRE as of now) statistics summary for given tunnel-id
    # @param tier_0_id 
    # @param locale_svc_id 
    # @param tunnel_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [AggregateTunnelTrafficStatistics]
    def get_policy_tunnel_statistics_summary(tier_0_id, locale_svc_id, tunnel_id, opts = {})
      data, _status_code, _headers = get_policy_tunnel_statistics_summary_with_http_info(tier_0_id, locale_svc_id, tunnel_id, opts)
      data
    end

    # Get policy Tunnel(GRE as of now) statistics summary for given tunnel-id
    # Get policy Tunnel(GRE as of now) statistics summary for given tunnel-id
    # @param tier_0_id 
    # @param locale_svc_id 
    # @param tunnel_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :enforcement_point_path Enforcement point path
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(AggregateTunnelTrafficStatistics, Fixnum, Hash)>] AggregateTunnelTrafficStatistics data, response status code and response headers
    def get_policy_tunnel_statistics_summary_with_http_info(tier_0_id, locale_svc_id, tunnel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TunnelsApi.get_policy_tunnel_statistics_summary ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling TunnelsApi.get_policy_tunnel_statistics_summary"
      end
      # verify the required parameter 'locale_svc_id' is set
      if @api_client.config.client_side_validation && locale_svc_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_svc_id' when calling TunnelsApi.get_policy_tunnel_statistics_summary"
      end
      # verify the required parameter 'tunnel_id' is set
      if @api_client.config.client_side_validation && tunnel_id.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel_id' when calling TunnelsApi.get_policy_tunnel_statistics_summary"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TunnelsApi.get_policy_tunnel_statistics_summary, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TunnelsApi.get_policy_tunnel_statistics_summary, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-svc-id}/tunnels/{tunnel-id}/statistics/summary'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-svc-id' + '}', locale_svc_id.to_s).sub('{' + 'tunnel-id' + '}', tunnel_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateTunnelTrafficStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TunnelsApi#get_policy_tunnel_statistics_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get policy Tunnel(GRE as of now) status for given tunnel-id
    # Get policy Tunnel(GRE as of now) status for given tunnel-id
    # @param tier_0_id 
    # @param locale_svc_id 
    # @param tunnel_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [TunnelStatus]
    def get_policy_tunnel_status(tier_0_id, locale_svc_id, tunnel_id, opts = {})
      data, _status_code, _headers = get_policy_tunnel_status_with_http_info(tier_0_id, locale_svc_id, tunnel_id, opts)
      data
    end

    # Get policy Tunnel(GRE as of now) status for given tunnel-id
    # Get policy Tunnel(GRE as of now) status for given tunnel-id
    # @param tier_0_id 
    # @param locale_svc_id 
    # @param tunnel_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bgp_neighbor_type Bgp neighbor type
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :edge_path Policy path of edge node
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :source Data source type.
    # @option opts [String] :stats_type Segment statistics type
    # @option opts [String] :transport_node_id Transport Node Id
    # @return [Array<(TunnelStatus, Fixnum, Hash)>] TunnelStatus data, response status code and response headers
    def get_policy_tunnel_status_with_http_info(tier_0_id, locale_svc_id, tunnel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TunnelsApi.get_policy_tunnel_status ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling TunnelsApi.get_policy_tunnel_status"
      end
      # verify the required parameter 'locale_svc_id' is set
      if @api_client.config.client_side_validation && locale_svc_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_svc_id' when calling TunnelsApi.get_policy_tunnel_status"
      end
      # verify the required parameter 'tunnel_id' is set
      if @api_client.config.client_side_validation && tunnel_id.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel_id' when calling TunnelsApi.get_policy_tunnel_status"
      end
      if @api_client.config.client_side_validation && opts[:'bgp_neighbor_type'] && !['INTER_SR', 'USER'].include?(opts[:'bgp_neighbor_type'])
        fail ArgumentError, 'invalid value for "bgp_neighbor_type", must be one of INTER_SR, USER'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TunnelsApi.get_policy_tunnel_status, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TunnelsApi.get_policy_tunnel_status, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      if @api_client.config.client_side_validation && opts[:'stats_type'] && !['DATAPATH_STATS'].include?(opts[:'stats_type'])
        fail ArgumentError, 'invalid value for "stats_type", must be one of DATAPATH_STATS'
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-svc-id}/tunnels/{tunnel-id}/status'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-svc-id' + '}', locale_svc_id.to_s).sub('{' + 'tunnel-id' + '}', tunnel_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'bgp_neighbor_type'] = opts[:'bgp_neighbor_type'] if !opts[:'bgp_neighbor_type'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'edge_path'] = opts[:'edge_path'] if !opts[:'edge_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'stats_type'] = opts[:'stats_type'] if !opts[:'stats_type'].nil?
      query_params[:'transport_node_id'] = opts[:'transport_node_id'] if !opts[:'transport_node_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TunnelStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TunnelsApi#get_policy_tunnel_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Tunnel
    # List all policy tunnels(GRE as of now)
    # @param tier_0_id tier0 id
    # @param locale_svc_id locale service id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyTunnelListResult]
    def list_tunnel(tier_0_id, locale_svc_id, opts = {})
      data, _status_code, _headers = list_tunnel_with_http_info(tier_0_id, locale_svc_id, opts)
      data
    end

    # List Tunnel
    # List all policy tunnels(GRE as of now)
    # @param tier_0_id tier0 id
    # @param locale_svc_id locale service id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyTunnelListResult, Fixnum, Hash)>] PolicyTunnelListResult data, response status code and response headers
    def list_tunnel_with_http_info(tier_0_id, locale_svc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TunnelsApi.list_tunnel ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling TunnelsApi.list_tunnel"
      end
      # verify the required parameter 'locale_svc_id' is set
      if @api_client.config.client_side_validation && locale_svc_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_svc_id' when calling TunnelsApi.list_tunnel"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TunnelsApi.list_tunnel, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling TunnelsApi.list_tunnel, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-svc-id}/tunnels'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-svc-id' + '}', locale_svc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyTunnelListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TunnelsApi#list_tunnel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Tunnel(GRE as of now)
    # Patch Tunnel(GRE as of now)
    # @param tier_0_id tier0 id
    # @param locale_svc_id locale service id
    # @param tunnel_id tunnel id
    # @param tunnel 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_tunnel(tier_0_id, locale_svc_id, tunnel_id, tunnel, opts = {})
      patch_tunnel_with_http_info(tier_0_id, locale_svc_id, tunnel_id, tunnel, opts)
      nil
    end

    # Patch Tunnel(GRE as of now)
    # Patch Tunnel(GRE as of now)
    # @param tier_0_id tier0 id
    # @param locale_svc_id locale service id
    # @param tunnel_id tunnel id
    # @param tunnel 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_tunnel_with_http_info(tier_0_id, locale_svc_id, tunnel_id, tunnel, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TunnelsApi.patch_tunnel ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling TunnelsApi.patch_tunnel"
      end
      # verify the required parameter 'locale_svc_id' is set
      if @api_client.config.client_side_validation && locale_svc_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_svc_id' when calling TunnelsApi.patch_tunnel"
      end
      # verify the required parameter 'tunnel_id' is set
      if @api_client.config.client_side_validation && tunnel_id.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel_id' when calling TunnelsApi.patch_tunnel"
      end
      # verify the required parameter 'tunnel' is set
      if @api_client.config.client_side_validation && tunnel.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel' when calling TunnelsApi.patch_tunnel"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-svc-id}/tunnels/{tunnel-id}'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-svc-id' + '}', locale_svc_id.to_s).sub('{' + 'tunnel-id' + '}', tunnel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tunnel)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TunnelsApi#patch_tunnel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
