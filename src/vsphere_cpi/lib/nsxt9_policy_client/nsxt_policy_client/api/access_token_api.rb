=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class AccessTokenApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create registration access token
    # The privileges of the registration token will be the same as the caller.
    # @param [Hash] opts the optional parameters
    # @return [RegistrationToken]
    def create_registration_token(opts = {})
      data, _status_code, _headers = create_registration_token_with_http_info(opts)
      data
    end

    # Create registration access token
    # The privileges of the registration token will be the same as the caller.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationToken, Fixnum, Hash)>] RegistrationToken data, response status code and response headers
    def create_registration_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessTokenApi.create_registration_token ...'
      end
      # resource path
      local_var_path = '/aaa/registration-token'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessTokenApi#create_registration_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create sensor registration access token
    # The privileges of the registration token will be user with sensor role.
    # @param [Hash] opts the optional parameters
    # @return [RegistrationToken]
    def create_sensor_registration_token(opts = {})
      data, _status_code, _headers = create_sensor_registration_token_with_http_info(opts)
      data
    end

    # Create sensor registration access token
    # The privileges of the registration token will be user with sensor role.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationToken, Fixnum, Hash)>] RegistrationToken data, response status code and response headers
    def create_sensor_registration_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessTokenApi.create_sensor_registration_token ...'
      end
      # resource path
      local_var_path = '/security/sensor-registration-token'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessTokenApi#create_sensor_registration_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete registration access token
    # Delete registration access token <br> Use API POST /api/v1/aaa/registration-token/delete
    # @param token Registration token
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registration_token(token, opts = {})
      delete_registration_token_with_http_info(token, opts)
      nil
    end

    # Delete registration access token
    # Delete registration access token &lt;br&gt; Use API POST /api/v1/aaa/registration-token/delete
    # @param token Registration token
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registration_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessTokenApi.delete_registration_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AccessTokenApi.delete_registration_token"
      end
      # resource path
      local_var_path = '/aaa/registration-token/{token}'.sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessTokenApi#delete_registration_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get registration access token
    # Get registration access token <br> Use API POST /api/v1/aaa/registration-token/retrieve
    # @param token Registration token
    # @param [Hash] opts the optional parameters
    # @return [RegistrationToken]
    def get_registration_token(token, opts = {})
      data, _status_code, _headers = get_registration_token_with_http_info(token, opts)
      data
    end

    # Get registration access token
    # Get registration access token &lt;br&gt; Use API POST /api/v1/aaa/registration-token/retrieve
    # @param token Registration token
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationToken, Fixnum, Hash)>] RegistrationToken data, response status code and response headers
    def get_registration_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessTokenApi.get_registration_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AccessTokenApi.get_registration_token"
      end
      # resource path
      local_var_path = '/aaa/registration-token/{token}'.sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessTokenApi#get_registration_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete registration access token
    # Delete registration access token
    # @param reg_token_query 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_registration_token(reg_token_query, opts = {})
      remove_registration_token_with_http_info(reg_token_query, opts)
      nil
    end

    # Delete registration access token
    # Delete registration access token
    # @param reg_token_query 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_registration_token_with_http_info(reg_token_query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessTokenApi.remove_registration_token ...'
      end
      # verify the required parameter 'reg_token_query' is set
      if @api_client.config.client_side_validation && reg_token_query.nil?
        fail ArgumentError, "Missing the required parameter 'reg_token_query' when calling AccessTokenApi.remove_registration_token"
      end
      # resource path
      local_var_path = '/aaa/registration-token/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(reg_token_query)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessTokenApi#remove_registration_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get registration access token
    # Get the roles associated with the given registration token
    # @param reg_token_query 
    # @param [Hash] opts the optional parameters
    # @return [RegistrationToken]
    def retrieve_registration_token(reg_token_query, opts = {})
      data, _status_code, _headers = retrieve_registration_token_with_http_info(reg_token_query, opts)
      data
    end

    # Get registration access token
    # Get the roles associated with the given registration token
    # @param reg_token_query 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationToken, Fixnum, Hash)>] RegistrationToken data, response status code and response headers
    def retrieve_registration_token_with_http_info(reg_token_query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessTokenApi.retrieve_registration_token ...'
      end
      # verify the required parameter 'reg_token_query' is set
      if @api_client.config.client_side_validation && reg_token_query.nil?
        fail ArgumentError, "Missing the required parameter 'reg_token_query' when calling AccessTokenApi.retrieve_registration_token"
      end
      # resource path
      local_var_path = '/aaa/registration-token/retrieve'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(reg_token_query)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessTokenApi#retrieve_registration_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
