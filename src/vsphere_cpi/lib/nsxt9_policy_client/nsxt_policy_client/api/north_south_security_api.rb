=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class NorthSouthSecurityApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def create_or_replace_gateway_policy_for_domain(domain_id, gateway_policy_id, gateway_policy, opts = {})
      data, _status_code, _headers = create_or_replace_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts)
      data
    end

    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def create_or_replace_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.create_or_replace_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.create_or_replace_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.create_or_replace_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling NorthSouthSecurityApi.create_or_replace_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#create_or_replace_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/gateway-policies/&lt;gateway-policy-id&gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def create_or_replace_gateway_rule(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = create_or_replace_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts)
      data
    end

    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/gateway-policies/&amp;lt;gateway-policy-id&amp;gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def create_or_replace_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.create_or_replace_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.create_or_replace_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.create_or_replace_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling NorthSouthSecurityApi.create_or_replace_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling NorthSouthSecurityApi.create_or_replace_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#create_or_replace_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update TLS policy
    # Update the TLS policy. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a TLS policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param policy_id Firewall TLS inspection poicy id
    # @param tls_policy 
    # @param [Hash] opts the optional parameters
    # @return [TlsPolicy]
    def create_or_replace_tls_policy(policy_id, tls_policy, opts = {})
      data, _status_code, _headers = create_or_replace_tls_policy_with_http_info(policy_id, tls_policy, opts)
      data
    end

    # Update TLS policy
    # Update the TLS policy. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a TLS policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param policy_id Firewall TLS inspection poicy id
    # @param tls_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsPolicy, Fixnum, Hash)>] TlsPolicy data, response status code and response headers
    def create_or_replace_tls_policy_with_http_info(policy_id, tls_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.create_or_replace_tls_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling NorthSouthSecurityApi.create_or_replace_tls_policy"
      end
      # verify the required parameter 'tls_policy' is set
      if @api_client.config.client_side_validation && tls_policy.nil?
        fail ArgumentError, "Missing the required parameter 'tls_policy' when calling NorthSouthSecurityApi.create_or_replace_tls_policy"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#create_or_replace_tls_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update TLS rule
    # Update the TLS rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a TLS policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/tls-inspection-policies/&lt;policy-id&gt; 
    # @param policy_id 
    # @param rule_id 
    # @param tls_rule 
    # @param [Hash] opts the optional parameters
    # @return [TlsRule]
    def create_or_replace_tls_rule(policy_id, rule_id, tls_rule, opts = {})
      data, _status_code, _headers = create_or_replace_tls_rule_with_http_info(policy_id, rule_id, tls_rule, opts)
      data
    end

    # Update TLS rule
    # Update the TLS rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a TLS policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/tls-inspection-policies/&amp;lt;policy-id&amp;gt; 
    # @param policy_id 
    # @param rule_id 
    # @param tls_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsRule, Fixnum, Hash)>] TlsRule data, response status code and response headers
    def create_or_replace_tls_rule_with_http_info(policy_id, rule_id, tls_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.create_or_replace_tls_rule ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling NorthSouthSecurityApi.create_or_replace_tls_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling NorthSouthSecurityApi.create_or_replace_tls_rule"
      end
      # verify the required parameter 'tls_rule' is set
      if @api_client.config.client_side_validation && tls_rule.nil?
        fail ArgumentError, "Missing the required parameter 'tls_rule' when calling NorthSouthSecurityApi.create_or_replace_tls_rule"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#create_or_replace_tls_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration for Segment
    # Create a Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityFeatures]
    def create_or_update_infra_segment_security_feature(segment_id, segment_security_features, opts = {})
      data, _status_code, _headers = create_or_update_infra_segment_security_feature_with_http_info(segment_id, segment_security_features, opts)
      data
    end

    # Create or Update security configuration for Segment
    # Create a Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def create_or_update_infra_segment_security_feature_with_http_info(segment_id, segment_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.create_or_update_infra_segment_security_feature ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling NorthSouthSecurityApi.create_or_update_infra_segment_security_feature"
      end
      # verify the required parameter 'segment_security_features' is set
      if @api_client.config.client_side_validation && segment_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_features' when calling NorthSouthSecurityApi.create_or_update_infra_segment_security_feature"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/security-config'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#create_or_update_infra_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create or update security configuration. 
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [SecurityFeatures]
    def create_or_update_security_feature(tier_1_id, security_features, opts = {})
      data, _status_code, _headers = create_or_update_security_feature_with_http_info(tier_1_id, security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create or update security configuration. 
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def create_or_update_security_feature_with_http_info(tier_1_id, security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.create_or_update_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NorthSouthSecurityApi.create_or_update_security_feature"
      end
      # verify the required parameter 'security_features' is set
      if @api_client.config.client_side_validation && security_features.nil?
        fail ArgumentError, "Missing the required parameter 'security_features' when calling NorthSouthSecurityApi.create_or_update_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#create_or_update_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create or update security configuration. 
    # @param tier_0_id tier0 id
    # @param tier0_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Tier0SecurityFeatures]
    def create_or_update_tier0_security_feature(tier_0_id, tier0_security_features, opts = {})
      data, _status_code, _headers = create_or_update_tier0_security_feature_with_http_info(tier_0_id, tier0_security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create or update security configuration. 
    # @param tier_0_id tier0 id
    # @param tier0_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tier0SecurityFeatures, Fixnum, Hash)>] Tier0SecurityFeatures data, response status code and response headers
    def create_or_update_tier0_security_feature_with_http_info(tier_0_id, tier0_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.create_or_update_tier0_security_feature ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NorthSouthSecurityApi.create_or_update_tier0_security_feature"
      end
      # verify the required parameter 'tier0_security_features' is set
      if @api_client.config.client_side_validation && tier0_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_security_features' when calling NorthSouthSecurityApi.create_or_update_tier0_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/security-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tier0_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tier0SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#create_or_update_tier0_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration for Tier1 Segment
    # Create a Tier1 Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityFeatures]
    def create_or_update_tier1_segment_security_feature(tier_1_id, segment_id, segment_security_features, opts = {})
      data, _status_code, _headers = create_or_update_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, segment_security_features, opts)
      data
    end

    # Create or Update security configuration for Tier1 Segment
    # Create a Tier1 Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def create_or_update_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, segment_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.create_or_update_tier1_segment_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NorthSouthSecurityApi.create_or_update_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling NorthSouthSecurityApi.create_or_update_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_security_features' is set
      if @api_client.config.client_side_validation && segment_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_features' when calling NorthSouthSecurityApi.create_or_update_tier1_segment_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#create_or_update_tier1_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Tls profile.
    # Update user configurable properties of Tls profile. Each action profile supports the following 3 pre-defined config setting defaults:     Balanced, High Fidelity and High Security.  1 - External Profile Balanced (default) Sample intent path: /infra/tls-inspection-action-profiles/external-balanced-profile API payload: <pre> {     \"tls_config_setting\": \"BALANCED\",     \"resource_type\": \"TlsInspectionExternalProfile\",     \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",     \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\" } </pre> Profile with default settings: <pre> {     \"tls_config_setting\": \"BALANCED\",     \"invalid_cert_action\": \"ALLOW\",     \"decryption_fail_action\": \"BYPASS\",     \"crypto_enforcement\": \"ENFORCE\",     \"client_min_tls_version\": \"TLS_V1_1\",     \"client_max_tls_version\": \"TLS_V1_2\",     \"server_min_tls_version\": \"TLS_V1_1\",     \"server_max_tls_version\": \"TLS_V1_2\",     \"client_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",         \"TLS_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_RSA_WITH_AES_256_CBC_SHA256\"     ],     \"server_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",         \"TLS_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_RSA_WITH_AES_256_CBC_SHA256\"     ],     \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",     \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\",     \"ocsp_must_staple\": false,     \"resource_type\": \"TlsInspectionExternalProfile\",     \"id\": \"external-balanced-profile\",     \"display_name\": \"external-balanced-profile\",     \"path\": \"/infra/tls-inspection-action-profiles/external-balanced-profile\",     \"relative_path\": \"external-balanced-profile\",     \"parent_path\": \"/infra\",     \"unique_id\": \"bb236080-e49d-4475-9eb3-b749b075164a\",     \"marked_for_delete\": false,     \"overridden\": false,     \"trusted_ca_bundles\": [         \"/infra/cabundles/default_trusted_public_ca_bundle\"     ],     \"crls\": [         \"/infra/crls/nsx_default_public_crl\"     ],     \"idle_connection_timeout\": 5400,     \"_system_owned\": false,     \"_protection\": \"NOT_PROTECTED\",     \"_create_user\": \"admin\",     \"_create_time\": 1622225641015,     \"_last_modified_user\": \"admin\",     \"_last_modified_time\": 1622225641015,     \"_revision\": 0 } </pre>  2 - External Profile High Fidelity Sample intent path: /infra/tls-inspection-action-profiles/external-high-fidelity-profile Sample intent path: <pre> {     \"tls_config_setting\": \"HIGH_FIDELITY\",     \"resource_type\": \"TlsInspectionExternalProfile\",     \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",     \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\" } </pre> Profile with default settings: <pre> {     \"tls_config_setting\": \"HIGH_FIDELITY\",     \"invalid_cert_action\": \"ALLOW\",     \"decryption_fail_action\": \"BYPASS\",     \"crypto_enforcement\": \"TRANSPARENT\",     \"client_min_tls_version\": \"\",     \"client_max_tls_version\": \"\",     \"server_min_tls_version\": \"\",     \"server_max_tls_version\": \"\",     \"client_cipher_suite\": [],     \"server_cipher_suite\": [],     \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",     \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\",     \"ocsp_must_staple\": false,     \"resource_type\": \"TlsInspectionExternalProfile\",     \"id\": \"external-high-fidelity-profile\",     \"display_name\": \"external-high-fidelity-profile\",     \"path\": \"/infra/tls-inspection-action-profiles/external-high-fidelity-profile\",     \"relative_path\": \"external-high-fidelity-profile\",     \"parent_path\": \"/infra\",     \"unique_id\": \"bb6c8604-c8eb-44dd-aded-7407e0ca887c\",     \"marked_for_delete\": false,     \"overridden\": false,     \"trusted_ca_bundles\": [         \"/infra/cabundles/default_trusted_public_ca_bundle\"     ],     \"crls\": [         \"/infra/crls/nsx_default_public_crl\"     ],     \"idle_connection_timeout\": 5400,     \"_system_owned\": false,     \"_protection\": \"NOT_PROTECTED\",     \"_create_user\": \"admin\",     \"_create_time\": 1622225537386,     \"_last_modified_user\": \"admin\",     \"_last_modified_time\": 1622225537386,     \"_revision\": 0 } </pre>  3 - External Profile High Security Sample intent path:/infra/tls-inspection-action-profiles/external-high-security-profile Sample intent path: <pre> {     \"tls_config_setting\": \"HIGH_SECURITY\",     \"resource_type\": \"TlsInspectionExternalProfile\",     \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",     \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\" } </pre> Profile with default settings: <pre> {    \"tls_config_setting\": \"HIGH_SECURITY\",    \"invalid_cert_action\": \"BLOCK\",    \"decryption_fail_action\": \"BLOCK\",    \"crypto_enforcement\": \"ENFORCE\",    \"client_min_tls_version\": \"TLS_V1_2\",    \"client_max_tls_version\": \"TLS_V1_2\",    \"server_min_tls_version\": \"TLS_V1_2\",    \"server_max_tls_version\": \"TLS_V1_2\",    \"client_cipher_suite\": [        \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",        \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\"    ],    \"server_cipher_suite\": [        \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",        \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\"    ],    \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",    \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\",    \"ocsp_must_staple\": false,    \"resource_type\": \"TlsInspectionExternalProfile\",    \"id\": \"external-high-security-profile\",    \"display_name\": \"external-high-security-profile\",    \"path\": \"/infra/tls-inspection-action-profiles/external-high-security-profile\",    \"relative_path\": \"external-high-security-profile\",    \"parent_path\": \"/infra\",    \"unique_id\": \"e19cbc40-c679-4f32-9e40-aa5eedf7f254\",    \"marked_for_delete\": false,    \"overridden\": false,    \"trusted_ca_bundles\": [        \"/infra/cabundles/default_trusted_public_ca_bundle\"    ],    \"crls\": [        \"/infra/crls/nsx_default_public_crl\"    ],    \"idle_connection_timeout\": 5400,    \"_system_owned\": false,    \"_protection\": \"NOT_PROTECTED\",    \"_create_user\": \"admin\",    \"_create_time\": 1622141786963,    \"_last_modified_user\": \"admin\",    \"_last_modified_time\": 1622225387352,    \"_revision\": 4 } </pre>  4 - Internal Profile Balanced Sample intent path:/infra/tls-inspection-action-profiles/internal-balanced-profile Sample intent path: <pre> {     \"tls_config_setting\": \"BALANCED\",     \"resource_type\": \"TlsInspectionInternalProfile\",     \"server_certs_key\": [\"/infra/certificates/server-cert-1\"],     \"default_cert_key\": \"/infra/certificates/server-cert-1\" } </pre> Profile with default settings: <pre> {     \"tls_config_setting\": \"BALANCED\",     \"decryption_fail_action\": \"BYPASS\",     \"crypto_enforcement\": \"ENFORCE\",     \"client_min_tls_version\": \"TLS_V1_1\",     \"client_max_tls_version\": \"TLS_V1_2\",     \"server_min_tls_version\": \"TLS_V1_1\",     \"server_max_tls_version\": \"TLS_V1_2\",     \"client_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",         \"TLS_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_RSA_WITH_AES_256_CBC_SHA256\"     ],     \"server_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",         \"TLS_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_RSA_WITH_AES_256_CBC_SHA256\"     ],     \"server_certs_key\": [         \"/infra/certificates/server-cert-1\"     ],     \"default_cert_key\": \"/infra/certificates/server-cert-1\",     \"ocsp_must_staple\": false,     \"certificate_validation\": false,     \"resource_type\": \"TlsInspectionInternalProfile\",     \"id\": \"internal-balanced-profile\",     \"display_name\": \"internal-balanced-profile\",     \"path\": \"/infra/tls-inspection-action-profiles/internal-balanced-profile\",     \"relative_path\": \"internal-balanced-profile\",     \"parent_path\": \"/infra\",     \"unique_id\": \"b8486763-843a-4894-8dfd-5bceebb10cd3\",     \"marked_for_delete\": false,     \"overridden\": false,     \"trusted_ca_bundles\": [         \"/infra/cabundles/default_trusted_public_ca_bundle\"     ],     \"crls\": [         \"/infra/crls/nsx_default_public_crl\"     ],     \"idle_connection_timeout\": 5400,     \"_system_owned\": false,     \"_protection\": \"NOT_PROTECTED\",     \"_create_user\": \"admin\",     \"_create_time\": 1622071598527,     \"_last_modified_user\": \"admin\",     \"_last_modified_time\": 1622071598527,     \"_revision\": 0 } </pre>  5 - Internal Profile High Fidelity Sample intent path:/infra/tls-inspection-action-profiles/internal-high-fidelity-profile Sample intent path: <pre> {     \"tls_config_setting\": \"HIGH_FIDELITY\",     \"resource_type\": \"TlsInspectionInternalProfile\",     \"server_certs_key\": [\"/infra/certificates/server-cert-1\"],     \"default_cert_key\": \"/infra/certificates/server-cert-1\" } </pre> Profile with default settings: <pre> {     \"tls_config_setting\": \"HIGH_FIDELITY\",     \"decryption_fail_action\": \"BYPASS\",     \"crypto_enforcement\": \"TRANSPARENT\",     \"client_min_tls_version\": \"\",     \"client_max_tls_version\": \"\",     \"server_min_tls_version\": \"\",     \"server_max_tls_version\": \"\",     \"client_cipher_suite\": [],     \"server_cipher_suite\": [],     \"server_certs_key\": [         \"/infra/certificates/server-cert-1\"     ],     \"default_cert_key\": \"/infra/certificates/server-cert-1\",     \"ocsp_must_staple\": false,     \"certificate_validation\": false,     \"resource_type\": \"TlsInspectionInternalProfile\",     \"id\": \"internal-high-fidelity-profile\",     \"display_name\": \"internal-high-fidelity-profile\",     \"path\": \"/infra/tls-inspection-action-profiles/internal-high-fidelity-profile\",     \"relative_path\": \"internal-high-fidelity-profile\",     \"parent_path\": \"/infra\",     \"unique_id\": \"27609d17-e642-4a7a-b414-176b3f7eca8d\",     \"marked_for_delete\": false,     \"overridden\": false,     \"trusted_ca_bundles\": [         \"/infra/cabundles/default_trusted_public_ca_bundle\"     ],     \"crls\": [         \"/infra/crls/nsx_default_public_crl\"     ],     \"idle_connection_timeout\": 5400,     \"_system_owned\": false,     \"_protection\": \"NOT_PROTECTED\",     \"_create_user\": \"admin\",     \"_create_time\": 1622071452299,     \"_last_modified_user\": \"admin\",     \"_last_modified_time\": 1622071452299,     \"_revision\": 0 } </pre>  6 - Internal Profile High Security Sample intent path:/infra/tls-inspection-action-profiles/internal-high-security-profile Sample intent path: <pre> {     \"tls_config_setting\": \"HIGH_SECURITY\",     \"resource_type\": \"TlsInspectionInternalProfile\",     \"server_certs_key\": [\"/infra/certificates/server-cert-1\"],     \"default_cert_key\": \"/infra/certificates/server-cert-1\" } </pre>  Profile with default settings: <pre> {     \"tls_config_setting\": \"HIGH_SECURITY\",     \"decryption_fail_action\": \"BLOCK\",     \"crypto_enforcement\": \"ENFORCE\",     \"client_min_tls_version\": \"TLS_V1_2\",     \"client_max_tls_version\": \"TLS_V1_2\",     \"server_min_tls_version\": \"TLS_V1_2\",     \"server_max_tls_version\": \"TLS_V1_2\",     \"client_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\"     ],     \"server_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\"     ],     \"server_certs_key\": [         \"/infra/certificates/server-cert-1\"     ],     \"default_cert_key\": \"/infra/certificates/server-cert-1\",     \"ocsp_must_staple\": false,     \"certificate_validation\": false,     \"resource_type\": \"TlsInspectionInternalProfile\",     \"id\": \"internal-high-security-profile\",     \"display_name\": \"internal-high-security-profile\",     \"path\": \"/infra/tls-inspection-action-profiles/internal-high-security-profile\",     \"relative_path\": \"internal-high-security-profile\",     \"parent_path\": \"/infra\",     \"unique_id\": \"52e3e7e8-718d-4eaf-a177-501f196c421a\",     \"marked_for_delete\": false,     \"overridden\": false,     \"trusted_ca_bundles\": [         \"/infra/cabundles/default_trusted_public_ca_bundle\"     ],     \"crls\": [         \"/infra/crls/nsx_default_public_crl\"     ],     \"idle_connection_timeout\": 5400,     \"_system_owned\": false,     \"_protection\": \"NOT_PROTECTED\",     \"_create_user\": \"admin\",     \"_create_time\": 1622071359539,     \"_last_modified_user\": \"admin\",     \"_last_modified_time\": 1622071359539,     \"_revision\": 0 } </pre> 
    # @param action_profile_id 
    # @param tls_profile 
    # @param [Hash] opts the optional parameters
    # @return [TlsProfile]
    def create_or_update_tls_profile(action_profile_id, tls_profile, opts = {})
      data, _status_code, _headers = create_or_update_tls_profile_with_http_info(action_profile_id, tls_profile, opts)
      data
    end

    # Update a Tls profile.
    # Update user configurable properties of Tls profile. Each action profile supports the following 3 pre-defined config setting defaults:     Balanced, High Fidelity and High Security.  1 - External Profile Balanced (default) Sample intent path: /infra/tls-inspection-action-profiles/external-balanced-profile API payload: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;BALANCED\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,     \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,     \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot; } &lt;/pre&gt; Profile with default settings: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;BALANCED\&quot;,     \&quot;invalid_cert_action\&quot;: \&quot;ALLOW\&quot;,     \&quot;decryption_fail_action\&quot;: \&quot;BYPASS\&quot;,     \&quot;crypto_enforcement\&quot;: \&quot;ENFORCE\&quot;,     \&quot;client_min_tls_version\&quot;: \&quot;TLS_V1_1\&quot;,     \&quot;client_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;server_min_tls_version\&quot;: \&quot;TLS_V1_1\&quot;,     \&quot;server_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;client_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_256_CBC_SHA256\&quot;     ],     \&quot;server_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_256_CBC_SHA256\&quot;     ],     \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,     \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot;,     \&quot;ocsp_must_staple\&quot;: false,     \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,     \&quot;id\&quot;: \&quot;external-balanced-profile\&quot;,     \&quot;display_name\&quot;: \&quot;external-balanced-profile\&quot;,     \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/external-balanced-profile\&quot;,     \&quot;relative_path\&quot;: \&quot;external-balanced-profile\&quot;,     \&quot;parent_path\&quot;: \&quot;/infra\&quot;,     \&quot;unique_id\&quot;: \&quot;bb236080-e49d-4475-9eb3-b749b075164a\&quot;,     \&quot;marked_for_delete\&quot;: false,     \&quot;overridden\&quot;: false,     \&quot;trusted_ca_bundles\&quot;: [         \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;     ],     \&quot;crls\&quot;: [         \&quot;/infra/crls/nsx_default_public_crl\&quot;     ],     \&quot;idle_connection_timeout\&quot;: 5400,     \&quot;_system_owned\&quot;: false,     \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,     \&quot;_create_user\&quot;: \&quot;admin\&quot;,     \&quot;_create_time\&quot;: 1622225641015,     \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,     \&quot;_last_modified_time\&quot;: 1622225641015,     \&quot;_revision\&quot;: 0 } &lt;/pre&gt;  2 - External Profile High Fidelity Sample intent path: /infra/tls-inspection-action-profiles/external-high-fidelity-profile Sample intent path: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_FIDELITY\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,     \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,     \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot; } &lt;/pre&gt; Profile with default settings: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_FIDELITY\&quot;,     \&quot;invalid_cert_action\&quot;: \&quot;ALLOW\&quot;,     \&quot;decryption_fail_action\&quot;: \&quot;BYPASS\&quot;,     \&quot;crypto_enforcement\&quot;: \&quot;TRANSPARENT\&quot;,     \&quot;client_min_tls_version\&quot;: \&quot;\&quot;,     \&quot;client_max_tls_version\&quot;: \&quot;\&quot;,     \&quot;server_min_tls_version\&quot;: \&quot;\&quot;,     \&quot;server_max_tls_version\&quot;: \&quot;\&quot;,     \&quot;client_cipher_suite\&quot;: [],     \&quot;server_cipher_suite\&quot;: [],     \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,     \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot;,     \&quot;ocsp_must_staple\&quot;: false,     \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,     \&quot;id\&quot;: \&quot;external-high-fidelity-profile\&quot;,     \&quot;display_name\&quot;: \&quot;external-high-fidelity-profile\&quot;,     \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/external-high-fidelity-profile\&quot;,     \&quot;relative_path\&quot;: \&quot;external-high-fidelity-profile\&quot;,     \&quot;parent_path\&quot;: \&quot;/infra\&quot;,     \&quot;unique_id\&quot;: \&quot;bb6c8604-c8eb-44dd-aded-7407e0ca887c\&quot;,     \&quot;marked_for_delete\&quot;: false,     \&quot;overridden\&quot;: false,     \&quot;trusted_ca_bundles\&quot;: [         \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;     ],     \&quot;crls\&quot;: [         \&quot;/infra/crls/nsx_default_public_crl\&quot;     ],     \&quot;idle_connection_timeout\&quot;: 5400,     \&quot;_system_owned\&quot;: false,     \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,     \&quot;_create_user\&quot;: \&quot;admin\&quot;,     \&quot;_create_time\&quot;: 1622225537386,     \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,     \&quot;_last_modified_time\&quot;: 1622225537386,     \&quot;_revision\&quot;: 0 } &lt;/pre&gt;  3 - External Profile High Security Sample intent path:/infra/tls-inspection-action-profiles/external-high-security-profile Sample intent path: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_SECURITY\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,     \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,     \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot; } &lt;/pre&gt; Profile with default settings: &lt;pre&gt; {    \&quot;tls_config_setting\&quot;: \&quot;HIGH_SECURITY\&quot;,    \&quot;invalid_cert_action\&quot;: \&quot;BLOCK\&quot;,    \&quot;decryption_fail_action\&quot;: \&quot;BLOCK\&quot;,    \&quot;crypto_enforcement\&quot;: \&quot;ENFORCE\&quot;,    \&quot;client_min_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,    \&quot;client_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,    \&quot;server_min_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,    \&quot;server_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,    \&quot;client_cipher_suite\&quot;: [        \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,        \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;    ],    \&quot;server_cipher_suite\&quot;: [        \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,        \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;    ],    \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,    \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot;,    \&quot;ocsp_must_staple\&quot;: false,    \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,    \&quot;id\&quot;: \&quot;external-high-security-profile\&quot;,    \&quot;display_name\&quot;: \&quot;external-high-security-profile\&quot;,    \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/external-high-security-profile\&quot;,    \&quot;relative_path\&quot;: \&quot;external-high-security-profile\&quot;,    \&quot;parent_path\&quot;: \&quot;/infra\&quot;,    \&quot;unique_id\&quot;: \&quot;e19cbc40-c679-4f32-9e40-aa5eedf7f254\&quot;,    \&quot;marked_for_delete\&quot;: false,    \&quot;overridden\&quot;: false,    \&quot;trusted_ca_bundles\&quot;: [        \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;    ],    \&quot;crls\&quot;: [        \&quot;/infra/crls/nsx_default_public_crl\&quot;    ],    \&quot;idle_connection_timeout\&quot;: 5400,    \&quot;_system_owned\&quot;: false,    \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,    \&quot;_create_user\&quot;: \&quot;admin\&quot;,    \&quot;_create_time\&quot;: 1622141786963,    \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,    \&quot;_last_modified_time\&quot;: 1622225387352,    \&quot;_revision\&quot;: 4 } &lt;/pre&gt;  4 - Internal Profile Balanced Sample intent path:/infra/tls-inspection-action-profiles/internal-balanced-profile Sample intent path: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;BALANCED\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;server_certs_key\&quot;: [\&quot;/infra/certificates/server-cert-1\&quot;],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot; } &lt;/pre&gt; Profile with default settings: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;BALANCED\&quot;,     \&quot;decryption_fail_action\&quot;: \&quot;BYPASS\&quot;,     \&quot;crypto_enforcement\&quot;: \&quot;ENFORCE\&quot;,     \&quot;client_min_tls_version\&quot;: \&quot;TLS_V1_1\&quot;,     \&quot;client_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;server_min_tls_version\&quot;: \&quot;TLS_V1_1\&quot;,     \&quot;server_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;client_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_256_CBC_SHA256\&quot;     ],     \&quot;server_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_256_CBC_SHA256\&quot;     ],     \&quot;server_certs_key\&quot;: [         \&quot;/infra/certificates/server-cert-1\&quot;     ],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot;,     \&quot;ocsp_must_staple\&quot;: false,     \&quot;certificate_validation\&quot;: false,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;id\&quot;: \&quot;internal-balanced-profile\&quot;,     \&quot;display_name\&quot;: \&quot;internal-balanced-profile\&quot;,     \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/internal-balanced-profile\&quot;,     \&quot;relative_path\&quot;: \&quot;internal-balanced-profile\&quot;,     \&quot;parent_path\&quot;: \&quot;/infra\&quot;,     \&quot;unique_id\&quot;: \&quot;b8486763-843a-4894-8dfd-5bceebb10cd3\&quot;,     \&quot;marked_for_delete\&quot;: false,     \&quot;overridden\&quot;: false,     \&quot;trusted_ca_bundles\&quot;: [         \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;     ],     \&quot;crls\&quot;: [         \&quot;/infra/crls/nsx_default_public_crl\&quot;     ],     \&quot;idle_connection_timeout\&quot;: 5400,     \&quot;_system_owned\&quot;: false,     \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,     \&quot;_create_user\&quot;: \&quot;admin\&quot;,     \&quot;_create_time\&quot;: 1622071598527,     \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,     \&quot;_last_modified_time\&quot;: 1622071598527,     \&quot;_revision\&quot;: 0 } &lt;/pre&gt;  5 - Internal Profile High Fidelity Sample intent path:/infra/tls-inspection-action-profiles/internal-high-fidelity-profile Sample intent path: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_FIDELITY\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;server_certs_key\&quot;: [\&quot;/infra/certificates/server-cert-1\&quot;],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot; } &lt;/pre&gt; Profile with default settings: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_FIDELITY\&quot;,     \&quot;decryption_fail_action\&quot;: \&quot;BYPASS\&quot;,     \&quot;crypto_enforcement\&quot;: \&quot;TRANSPARENT\&quot;,     \&quot;client_min_tls_version\&quot;: \&quot;\&quot;,     \&quot;client_max_tls_version\&quot;: \&quot;\&quot;,     \&quot;server_min_tls_version\&quot;: \&quot;\&quot;,     \&quot;server_max_tls_version\&quot;: \&quot;\&quot;,     \&quot;client_cipher_suite\&quot;: [],     \&quot;server_cipher_suite\&quot;: [],     \&quot;server_certs_key\&quot;: [         \&quot;/infra/certificates/server-cert-1\&quot;     ],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot;,     \&quot;ocsp_must_staple\&quot;: false,     \&quot;certificate_validation\&quot;: false,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;id\&quot;: \&quot;internal-high-fidelity-profile\&quot;,     \&quot;display_name\&quot;: \&quot;internal-high-fidelity-profile\&quot;,     \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/internal-high-fidelity-profile\&quot;,     \&quot;relative_path\&quot;: \&quot;internal-high-fidelity-profile\&quot;,     \&quot;parent_path\&quot;: \&quot;/infra\&quot;,     \&quot;unique_id\&quot;: \&quot;27609d17-e642-4a7a-b414-176b3f7eca8d\&quot;,     \&quot;marked_for_delete\&quot;: false,     \&quot;overridden\&quot;: false,     \&quot;trusted_ca_bundles\&quot;: [         \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;     ],     \&quot;crls\&quot;: [         \&quot;/infra/crls/nsx_default_public_crl\&quot;     ],     \&quot;idle_connection_timeout\&quot;: 5400,     \&quot;_system_owned\&quot;: false,     \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,     \&quot;_create_user\&quot;: \&quot;admin\&quot;,     \&quot;_create_time\&quot;: 1622071452299,     \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,     \&quot;_last_modified_time\&quot;: 1622071452299,     \&quot;_revision\&quot;: 0 } &lt;/pre&gt;  6 - Internal Profile High Security Sample intent path:/infra/tls-inspection-action-profiles/internal-high-security-profile Sample intent path: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_SECURITY\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;server_certs_key\&quot;: [\&quot;/infra/certificates/server-cert-1\&quot;],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot; } &lt;/pre&gt;  Profile with default settings: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_SECURITY\&quot;,     \&quot;decryption_fail_action\&quot;: \&quot;BLOCK\&quot;,     \&quot;crypto_enforcement\&quot;: \&quot;ENFORCE\&quot;,     \&quot;client_min_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;client_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;server_min_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;server_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;client_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;     ],     \&quot;server_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;     ],     \&quot;server_certs_key\&quot;: [         \&quot;/infra/certificates/server-cert-1\&quot;     ],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot;,     \&quot;ocsp_must_staple\&quot;: false,     \&quot;certificate_validation\&quot;: false,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;id\&quot;: \&quot;internal-high-security-profile\&quot;,     \&quot;display_name\&quot;: \&quot;internal-high-security-profile\&quot;,     \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/internal-high-security-profile\&quot;,     \&quot;relative_path\&quot;: \&quot;internal-high-security-profile\&quot;,     \&quot;parent_path\&quot;: \&quot;/infra\&quot;,     \&quot;unique_id\&quot;: \&quot;52e3e7e8-718d-4eaf-a177-501f196c421a\&quot;,     \&quot;marked_for_delete\&quot;: false,     \&quot;overridden\&quot;: false,     \&quot;trusted_ca_bundles\&quot;: [         \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;     ],     \&quot;crls\&quot;: [         \&quot;/infra/crls/nsx_default_public_crl\&quot;     ],     \&quot;idle_connection_timeout\&quot;: 5400,     \&quot;_system_owned\&quot;: false,     \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,     \&quot;_create_user\&quot;: \&quot;admin\&quot;,     \&quot;_create_time\&quot;: 1622071359539,     \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,     \&quot;_last_modified_time\&quot;: 1622071359539,     \&quot;_revision\&quot;: 0 } &lt;/pre&gt; 
    # @param action_profile_id 
    # @param tls_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsProfile, Fixnum, Hash)>] TlsProfile data, response status code and response headers
    def create_or_update_tls_profile_with_http_info(action_profile_id, tls_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.create_or_update_tls_profile ...'
      end
      # verify the required parameter 'action_profile_id' is set
      if @api_client.config.client_side_validation && action_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'action_profile_id' when calling NorthSouthSecurityApi.create_or_update_tls_profile"
      end
      # verify the required parameter 'tls_profile' is set
      if @api_client.config.client_side_validation && tls_profile.nil?
        fail ArgumentError, "Missing the required parameter 'tls_profile' when calling NorthSouthSecurityApi.create_or_update_tls_profile"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-action-profiles/{action-profile-id}'.sub('{' + 'action-profile-id' + '}', action_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#create_or_update_tls_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete FqdnAnalysisConfig
    # Delete FqdnAnalysisConfig from the passed edge cluser node. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_fqdn_analysis_config(site_id, enforcement_point_id, edge_cluster_id, opts = {})
      delete_fqdn_analysis_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, opts)
      nil
    end

    # Delete FqdnAnalysisConfig
    # Delete FqdnAnalysisConfig from the passed edge cluser node. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_fqdn_analysis_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.delete_fqdn_analysis_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NorthSouthSecurityApi.delete_fqdn_analysis_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling NorthSouthSecurityApi.delete_fqdn_analysis_config"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling NorthSouthSecurityApi.delete_fqdn_analysis_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/fqdn-analysis-config'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#delete_fqdn_analysis_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete GatewayPolicy
    # Delete GatewayPolicy
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_gateway_policy(domain_id, gateway_policy_id, opts = {})
      delete_gateway_policy_with_http_info(domain_id, gateway_policy_id, opts)
      nil
    end

    # Delete GatewayPolicy
    # Delete GatewayPolicy
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_gateway_policy_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.delete_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.delete_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.delete_gateway_policy"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#delete_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete rule
    # Delete rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_gateway_rule(domain_id, gateway_policy_id, rule_id, opts = {})
      delete_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts)
      nil
    end

    # Delete rule
    # Delete rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.delete_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.delete_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.delete_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling NorthSouthSecurityApi.delete_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#delete_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete PolicyUrlCategorizationConfig
    # Delete PolicyUrlCategorizationConfig. If deleted, the URL categorization will be deactivated for that edge cluster. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_url_categorization_config(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts = {})
      delete_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts)
      nil
    end

    # Delete PolicyUrlCategorizationConfig
    # Delete PolicyUrlCategorizationConfig. If deleted, the URL categorization will be deactivated for that edge cluster. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.delete_policy_url_categorization_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NorthSouthSecurityApi.delete_policy_url_categorization_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling NorthSouthSecurityApi.delete_policy_url_categorization_config"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling NorthSouthSecurityApi.delete_policy_url_categorization_config"
      end
      # verify the required parameter 'url_categorization_config_id' is set
      if @api_client.config.client_side_validation && url_categorization_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'url_categorization_config_id' when calling NorthSouthSecurityApi.delete_policy_url_categorization_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'url-categorization-config-id' + '}', url_categorization_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#delete_policy_url_categorization_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete security config
    # API has been deprecated as the delete of Tier0SecurityConfig is linked with the deletion of T0. To remove a particular feature from T0SecurityConfig please use PUT/PATCH.  <br> Use the following API PUT/PATCH  /infra/tier-0s/<tier-0-id>/security-config 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [nil]
    def delete_tier0_security_feature(tier_0_id, opts = {})
      delete_tier0_security_feature_with_http_info(tier_0_id, opts)
      nil
    end

    # Delete security config
    # API has been deprecated as the delete of Tier0SecurityConfig is linked with the deletion of T0. To remove a particular feature from T0SecurityConfig please use PUT/PATCH.  &lt;br&gt; Use the following API PUT/PATCH  /infra/tier-0s/&lt;tier-0-id&gt;/security-config 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tier0_security_feature_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.delete_tier0_security_feature ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NorthSouthSecurityApi.delete_tier0_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['IDFW', 'IDPS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of IDFW, IDPS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.delete_tier0_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.delete_tier0_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/security-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#delete_tier0_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete TlsPolicy
    # Delete TlsPolicy
    # @param policy_id Firewall TLS inspection poicy id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tls_policy(policy_id, opts = {})
      delete_tls_policy_with_http_info(policy_id, opts)
      nil
    end

    # Delete TlsPolicy
    # Delete TlsPolicy
    # @param policy_id Firewall TLS inspection poicy id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tls_policy_with_http_info(policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.delete_tls_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling NorthSouthSecurityApi.delete_tls_policy"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#delete_tls_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Tls profile.
    # Deletes a Tls profile. 
    # @param action_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tls_profile(action_profile_id, opts = {})
      delete_tls_profile_with_http_info(action_profile_id, opts)
      nil
    end

    # Delete a Tls profile.
    # Deletes a Tls profile. 
    # @param action_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tls_profile_with_http_info(action_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.delete_tls_profile ...'
      end
      # verify the required parameter 'action_profile_id' is set
      if @api_client.config.client_side_validation && action_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'action_profile_id' when calling NorthSouthSecurityApi.delete_tls_profile"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-action-profiles/{action-profile-id}'.sub('{' + 'action-profile-id' + '}', action_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#delete_tls_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete rule
    # Delete rule
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tls_rule(policy_id, rule_id, opts = {})
      delete_tls_rule_with_http_info(policy_id, rule_id, opts)
      nil
    end

    # Delete rule
    # Delete rule
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tls_rule_with_http_info(policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.delete_tls_rule ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling NorthSouthSecurityApi.delete_tls_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling NorthSouthSecurityApi.delete_tls_rule"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#delete_tls_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download Latest Geo IP Bundle
    # Using this API, with request parameter download_now - User can request on demand to download latest Geo IP bundle to be used on the edge nodes.  This will try to get latest bundle regardless auto_download is ON or OFF.  If new bundle available, it will download the latest bundle.  If no new bundle, it will indicate in message. check_latest - User can check the latest Geo IP bundle available. 
    # @param action Geo IP Bundle Action
    # @param [Hash] opts the optional parameters
    # @return [GeoIpBundleInfo]
    def geo_ip_bundle_action(action, opts = {})
      data, _status_code, _headers = geo_ip_bundle_action_with_http_info(action, opts)
      data
    end

    # Download Latest Geo IP Bundle
    # Using this API, with request parameter download_now - User can request on demand to download latest Geo IP bundle to be used on the edge nodes.  This will try to get latest bundle regardless auto_download is ON or OFF.  If new bundle available, it will download the latest bundle.  If no new bundle, it will indicate in message. check_latest - User can check the latest Geo IP bundle available. 
    # @param action Geo IP Bundle Action
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeoIpBundleInfo, Fixnum, Hash)>] GeoIpBundleInfo data, response status code and response headers
    def geo_ip_bundle_action_with_http_info(action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.geo_ip_bundle_action ...'
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling NorthSouthSecurityApi.geo_ip_bundle_action"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['download_now', 'check_latest'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of download_now, check_latest"
      end
      # resource path
      local_var_path = '/infra/geo-ip/bundle'

      # query parameters
      query_params = {}
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpBundleInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#geo_ip_bundle_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get FqdnAnalysisConfig
    # Gets a FqdnAnalysisConfig. This returns the details of the config like whether the FQDN Analysis is activated or deactivated for the given edge cluster. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [FqdnAnalysisConfig]
    def get_fqdn_analysis_config(site_id, enforcement_point_id, edge_cluster_id, opts = {})
      data, _status_code, _headers = get_fqdn_analysis_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, opts)
      data
    end

    # Get FqdnAnalysisConfig
    # Gets a FqdnAnalysisConfig. This returns the details of the config like whether the FQDN Analysis is activated or deactivated for the given edge cluster. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FqdnAnalysisConfig, Fixnum, Hash)>] FqdnAnalysisConfig data, response status code and response headers
    def get_fqdn_analysis_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.get_fqdn_analysis_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NorthSouthSecurityApi.get_fqdn_analysis_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling NorthSouthSecurityApi.get_fqdn_analysis_config"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling NorthSouthSecurityApi.get_fqdn_analysis_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/fqdn-analysis-config'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FqdnAnalysisConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#get_fqdn_analysis_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of gateway firewall dependent services
    # Get the list of gateway firewall dependent services 
    # @param [Hash] opts the optional parameters
    # @return [DependentServices]
    def get_gateway_firewall_dependent_services(opts = {})
      data, _status_code, _headers = get_gateway_firewall_dependent_services_with_http_info(opts)
      data
    end

    # Get the list of gateway firewall dependent services
    # Get the list of gateway firewall dependent services 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DependentServices, Fixnum, Hash)>] DependentServices data, response status code and response headers
    def get_gateway_firewall_dependent_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.get_gateway_firewall_dependent_services ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/gateway/dependent-services'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DependentServices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#get_gateway_firewall_dependent_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get gateway policy statistics
    # Get statistics of a gateay policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [SecurityPolicyStatisticsListResult]
    def get_gateway_policy_statistics(domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = get_gateway_policy_statistics_with_http_info(domain_id, gateway_policy_id, opts)
      data
    end

    # Get gateway policy statistics
    # Get statistics of a gateay policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(SecurityPolicyStatisticsListResult, Fixnum, Hash)>] SecurityPolicyStatisticsListResult data, response status code and response headers
    def get_gateway_policy_statistics_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.get_gateway_policy_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.get_gateway_policy_statistics"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.get_gateway_policy_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#get_gateway_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get gateway rule statistics
    # Get statistics of a gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [RuleStatisticsListResult]
    def get_gateway_rule_statistics(domain_id, gateway_policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_gateway_rule_statistics_with_http_info(domain_id, gateway_policy_id, rule_id, opts)
      data
    end

    # Get gateway rule statistics
    # Get statistics of a gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(RuleStatisticsListResult, Fixnum, Hash)>] RuleStatisticsListResult data, response status code and response headers
    def get_gateway_rule_statistics_with_http_info(domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.get_gateway_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.get_gateway_rule_statistics"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.get_gateway_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling NorthSouthSecurityApi.get_gateway_rule_statistics"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#get_gateway_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Geo IP Blocked Events
    # Get Geo IP Blocked Events. The system will return the latest 25k events stored. User can use optional request parameters like source_country_code or source_ip_address to filter the response. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for getting next page of records
    # @option opts [String] :destination_country_code Comma Separated Destination Country Codes of Geo IP Blocked Event
    # @option opts [String] :destination_ip_address Comma Separated Destination IP Addresses of Geo IP Blocked Event
    # @option opts [String] :direction Comma Separated Directions of Traffic
    # @option opts [BOOLEAN] :include_all_projects  (default to false)
    # @option opts [Integer] :page_size Maximum number of results to return in this page (default to 500)
    # @option opts [String] :rule_id Comma Separated Gateway Firewall Rule Ids of Geo IP Blocked Event
    # @option opts [String] :source_country_code Comma Separated Source Country Codes of Geo IP Blocked Event
    # @option opts [String] :source_ip_address Comma Separated Source IP Addresses of Geo IP Blocked Event
    # @return [GeoIpBlockedEventsList]
    def get_geo_ip_blocked_events(opts = {})
      data, _status_code, _headers = get_geo_ip_blocked_events_with_http_info(opts)
      data
    end

    # Get Geo IP Blocked Events
    # Get Geo IP Blocked Events. The system will return the latest 25k events stored. User can use optional request parameters like source_country_code or source_ip_address to filter the response. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for getting next page of records
    # @option opts [String] :destination_country_code Comma Separated Destination Country Codes of Geo IP Blocked Event
    # @option opts [String] :destination_ip_address Comma Separated Destination IP Addresses of Geo IP Blocked Event
    # @option opts [String] :direction Comma Separated Directions of Traffic
    # @option opts [BOOLEAN] :include_all_projects 
    # @option opts [Integer] :page_size Maximum number of results to return in this page
    # @option opts [String] :rule_id Comma Separated Gateway Firewall Rule Ids of Geo IP Blocked Event
    # @option opts [String] :source_country_code Comma Separated Source Country Codes of Geo IP Blocked Event
    # @option opts [String] :source_ip_address Comma Separated Source IP Addresses of Geo IP Blocked Event
    # @return [Array<(GeoIpBlockedEventsList, Fixnum, Hash)>] GeoIpBlockedEventsList data, response status code and response headers
    def get_geo_ip_blocked_events_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.get_geo_ip_blocked_events ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.get_geo_ip_blocked_events, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.get_geo_ip_blocked_events, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/geo-ip/blocked-events'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'destination_country_code'] = opts[:'destination_country_code'] if !opts[:'destination_country_code'].nil?
      query_params[:'destination_ip_address'] = opts[:'destination_ip_address'] if !opts[:'destination_ip_address'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'include_all_projects'] = opts[:'include_all_projects'] if !opts[:'include_all_projects'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'rule_id'] = opts[:'rule_id'] if !opts[:'rule_id'].nil?
      query_params[:'source_country_code'] = opts[:'source_country_code'] if !opts[:'source_country_code'].nil?
      query_params[:'source_ip_address'] = opts[:'source_ip_address'] if !opts[:'source_ip_address'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpBlockedEventsList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#get_geo_ip_blocked_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Current Geo IP Bundle Information
    # Get current Geo IP Bundle information that is downloaded in the system. 
    # @param [Hash] opts the optional parameters
    # @return [GeoIpBundleInfo]
    def get_geo_ip_bundle_info(opts = {})
      data, _status_code, _headers = get_geo_ip_bundle_info_with_http_info(opts)
      data
    end

    # Get Current Geo IP Bundle Information
    # Get current Geo IP Bundle information that is downloaded in the system. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeoIpBundleInfo, Fixnum, Hash)>] GeoIpBundleInfo data, response status code and response headers
    def get_geo_ip_bundle_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.get_geo_ip_bundle_info ...'
      end
      # resource path
      local_var_path = '/infra/geo-ip/bundle'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpBundleInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#get_geo_ip_bundle_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Geo IP Look Up
    # Gets Country Code for the IP Address provided. 
    # @param ip_address IPv4 or IPv6 address
    # @param [Hash] opts the optional parameters
    # @return [GeoIpLookUp]
    def get_geo_ip_look_up(ip_address, opts = {})
      data, _status_code, _headers = get_geo_ip_look_up_with_http_info(ip_address, opts)
      data
    end

    # Get Geo IP Look Up
    # Gets Country Code for the IP Address provided. 
    # @param ip_address IPv4 or IPv6 address
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeoIpLookUp, Fixnum, Hash)>] GeoIpLookUp data, response status code and response headers
    def get_geo_ip_look_up_with_http_info(ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.get_geo_ip_look_up ...'
      end
      # verify the required parameter 'ip_address' is set
      if @api_client.config.client_side_validation && ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address' when calling NorthSouthSecurityApi.get_geo_ip_look_up"
      end
      # resource path
      local_var_path = '/infra/geo-ip/look-up'

      # query parameters
      query_params = {}
      query_params[:'ip_address'] = ip_address

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpLookUp')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#get_geo_ip_look_up\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Geo IP Setting Configuration
    # API to retrieve the current Geo IP Setting Configuration. 
    # @param [Hash] opts the optional parameters
    # @return [GeoIpSetting]
    def get_geo_ip_setting(opts = {})
      data, _status_code, _headers = get_geo_ip_setting_with_http_info(opts)
      data
    end

    # Get Geo IP Setting Configuration
    # API to retrieve the current Geo IP Setting Configuration. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeoIpSetting, Fixnum, Hash)>] GeoIpSetting data, response status code and response headers
    def get_geo_ip_setting_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.get_geo_ip_setting ...'
      end
      # resource path
      local_var_path = '/infra/geo-ip/setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpSetting')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#get_geo_ip_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyUrlCategorizationConfig
    # Gets a PolicyUrlCategorizationConfig. This returns the details of the config like whether the URL categorization is activated or deactivated, the id of the context profiles which are used to filter the categories, and the update frequency of the data from the cloud. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyUrlCategorizationConfig]
    def get_policy_url_categorization_config(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts = {})
      data, _status_code, _headers = get_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts)
      data
    end

    # Get PolicyUrlCategorizationConfig
    # Gets a PolicyUrlCategorizationConfig. This returns the details of the config like whether the URL categorization is activated or deactivated, the id of the context profiles which are used to filter the categories, and the update frequency of the data from the cloud. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyUrlCategorizationConfig, Fixnum, Hash)>] PolicyUrlCategorizationConfig data, response status code and response headers
    def get_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.get_policy_url_categorization_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NorthSouthSecurityApi.get_policy_url_categorization_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling NorthSouthSecurityApi.get_policy_url_categorization_config"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling NorthSouthSecurityApi.get_policy_url_categorization_config"
      end
      # verify the required parameter 'url_categorization_config_id' is set
      if @api_client.config.client_side_validation && url_categorization_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'url_categorization_config_id' when calling NorthSouthSecurityApi.get_policy_url_categorization_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'url-categorization-config-id' + '}', url_categorization_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyUrlCategorizationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#get_policy_url_categorization_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get TLS profile with id.
    # Return Tls profile. 
    # @param action_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [TlsProfile]
    def get_tls_profile(action_profile_id, opts = {})
      data, _status_code, _headers = get_tls_profile_with_http_info(action_profile_id, opts)
      data
    end

    # Get TLS profile with id.
    # Return Tls profile. 
    # @param action_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsProfile, Fixnum, Hash)>] TlsProfile data, response status code and response headers
    def get_tls_profile_with_http_info(action_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.get_tls_profile ...'
      end
      # verify the required parameter 'action_profile_id' is set
      if @api_client.config.client_side_validation && action_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'action_profile_id' when calling NorthSouthSecurityApi.get_tls_profile"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-action-profiles/{action-profile-id}'.sub('{' + 'action-profile-id' + '}', action_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#get_tls_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get TLS inspection FQDN state
    # Get TLS inspection FQDN state
    # @param tier_1_id 
    # @param fqdn_id 
    # @param [Hash] opts the optional parameters
    # @return [TlsStateObject]
    def get_tls_state_fqdn(tier_1_id, fqdn_id, opts = {})
      data, _status_code, _headers = get_tls_state_fqdn_with_http_info(tier_1_id, fqdn_id, opts)
      data
    end

    # Get TLS inspection FQDN state
    # Get TLS inspection FQDN state
    # @param tier_1_id 
    # @param fqdn_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsStateObject, Fixnum, Hash)>] TlsStateObject data, response status code and response headers
    def get_tls_state_fqdn_with_http_info(tier_1_id, fqdn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.get_tls_state_fqdn ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NorthSouthSecurityApi.get_tls_state_fqdn"
      end
      # verify the required parameter 'fqdn_id' is set
      if @api_client.config.client_side_validation && fqdn_id.nil?
        fail ArgumentError, "Missing the required parameter 'fqdn_id' when calling NorthSouthSecurityApi.get_tls_state_fqdn"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/tls-inspection-state/fqdns/{fqdn-id}'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'fqdn-id' + '}', fqdn_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsStateObject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#get_tls_state_fqdn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get gateway policy statistics
    # Get statistics of a gateay policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [SecurityPolicyStatisticsListResult]
    def global_infra_get_gateway_policy_statistics(domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = global_infra_get_gateway_policy_statistics_with_http_info(domain_id, gateway_policy_id, opts)
      data
    end

    # Get gateway policy statistics
    # Get statistics of a gateay policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(SecurityPolicyStatisticsListResult, Fixnum, Hash)>] SecurityPolicyStatisticsListResult data, response status code and response headers
    def global_infra_get_gateway_policy_statistics_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.global_infra_get_gateway_policy_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.global_infra_get_gateway_policy_statistics"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.global_infra_get_gateway_policy_statistics"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#global_infra_get_gateway_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get gateway rule statistics
    # Get statistics of a gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [RuleStatisticsListResult]
    def global_infra_get_gateway_rule_statistics(domain_id, gateway_policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_get_gateway_rule_statistics_with_http_info(domain_id, gateway_policy_id, rule_id, opts)
      data
    end

    # Get gateway rule statistics
    # Get statistics of a gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(RuleStatisticsListResult, Fixnum, Hash)>] RuleStatisticsListResult data, response status code and response headers
    def global_infra_get_gateway_rule_statistics_with_http_info(domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.global_infra_get_gateway_rule_statistics ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.global_infra_get_gateway_rule_statistics"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.global_infra_get_gateway_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling NorthSouthSecurityApi.global_infra_get_gateway_rule_statistics"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#global_infra_get_gateway_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List gateway policies
    # List all gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GatewayPolicyListResult]
    def global_infra_list_gateway_policies_for_domain(domain_id, opts = {})
      data, _status_code, _headers = global_infra_list_gateway_policies_for_domain_with_http_info(domain_id, opts)
      data
    end

    # List gateway policies
    # List all gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def global_infra_list_gateway_policies_for_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.global_infra_list_gateway_policies_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.global_infra_list_gateway_policies_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.global_infra_list_gateway_policies_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.global_infra_list_gateway_policies_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/gateway-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#global_infra_list_gateway_policies_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def global_infra_list_gateway_rules(domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = global_infra_list_gateway_rules_with_http_info(domain_id, gateway_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def global_infra_list_gateway_rules_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.global_infra_list_gateway_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.global_infra_list_gateway_rules"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.global_infra_list_gateway_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.global_infra_list_gateway_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.global_infra_list_gateway_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#global_infra_list_gateway_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read gateway policy
    # Read gateway policy for a domain. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def global_infra_read_gateway_policy_for_domain(domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = global_infra_read_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, opts)
      data
    end

    # Read gateway policy
    # Read gateway policy for a domain. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def global_infra_read_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.global_infra_read_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.global_infra_read_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.global_infra_read_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#global_infra_read_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def global_infra_read_gateway_rule(domain_id, gateway_policy_id, rule_id, opts = {})
      data, _status_code, _headers = global_infra_read_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def global_infra_read_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.global_infra_read_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.global_infra_read_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.global_infra_read_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling NorthSouthSecurityApi.global_infra_read_gateway_rule"
      end
      # resource path
      local_var_path = '/global-infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#global_infra_read_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Security Feature
    # Read Security Feature. 
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityFeatures]
    def global_infra_read_security_feature(tier_1_id, opts = {})
      data, _status_code, _headers = global_infra_read_security_feature_with_http_info(tier_1_id, opts)
      data
    end

    # Read Security Feature
    # Read Security Feature. 
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def global_infra_read_security_feature_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.global_infra_read_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NorthSouthSecurityApi.global_infra_read_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['MALWAREPREVENTION', 'IDFW', 'IDPS', 'TLS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of MALWAREPREVENTION, IDFW, IDPS, TLS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.global_infra_read_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.global_infra_read_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#global_infra_read_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Security Feature
    # Read Security Feature. 
    # @param tier_0_id tier0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Tier0SecurityFeatures]
    def global_infra_read_tier0_security_feature(tier_0_id, opts = {})
      data, _status_code, _headers = global_infra_read_tier0_security_feature_with_http_info(tier_0_id, opts)
      data
    end

    # Read Security Feature
    # Read Security Feature. 
    # @param tier_0_id tier0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(Tier0SecurityFeatures, Fixnum, Hash)>] Tier0SecurityFeatures data, response status code and response headers
    def global_infra_read_tier0_security_feature_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.global_infra_read_tier0_security_feature ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NorthSouthSecurityApi.global_infra_read_tier0_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['IDFW', 'IDPS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of IDFW, IDPS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.global_infra_read_tier0_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.global_infra_read_tier0_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/security-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tier0SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#global_infra_read_tier0_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-0 logical router. 
    # Get filtered view of gateway rules associated with the Tier-0. The gateay policies are returned in the order of category and precedence. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def global_infra_view_tier0_gateway_firewall(tier_0_id, opts = {})
      data, _status_code, _headers = global_infra_view_tier0_gateway_firewall_with_http_info(tier_0_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-0 logical router. 
    # Get filtered view of gateway rules associated with the Tier-0. The gateay policies are returned in the order of category and precedence. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def global_infra_view_tier0_gateway_firewall_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.global_infra_view_tier0_gateway_firewall ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NorthSouthSecurityApi.global_infra_view_tier0_gateway_firewall"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/gateway-firewall'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#global_infra_view_tier0_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-0 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-0 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_0_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def global_infra_view_tier0_locale_services_gateway_firewall(tier_0_id, locale_services_id, opts = {})
      data, _status_code, _headers = global_infra_view_tier0_locale_services_gateway_firewall_with_http_info(tier_0_id, locale_services_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-0 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-0 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_0_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def global_infra_view_tier0_locale_services_gateway_firewall_with_http_info(tier_0_id, locale_services_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.global_infra_view_tier0_locale_services_gateway_firewall ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NorthSouthSecurityApi.global_infra_view_tier0_locale_services_gateway_firewall"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling NorthSouthSecurityApi.global_infra_view_tier0_locale_services_gateway_firewall"
      end
      # resource path
      local_var_path = '/global-infra/tier-0s/{tier-0-id}/locale-services/{locale-services-id}/gateway-firewall'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#global_infra_view_tier0_locale_services_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-1. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def global_infra_view_tier1_gateway_firewall(tier_1_id, opts = {})
      data, _status_code, _headers = global_infra_view_tier1_gateway_firewall_with_http_info(tier_1_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-1. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def global_infra_view_tier1_gateway_firewall_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.global_infra_view_tier1_gateway_firewall ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NorthSouthSecurityApi.global_infra_view_tier1_gateway_firewall"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/gateway-firewall'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#global_infra_view_tier1_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-1 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def global_infra_view_tier1_locale_services_gateway_firewall(tier_1_id, locale_services_id, opts = {})
      data, _status_code, _headers = global_infra_view_tier1_locale_services_gateway_firewall_with_http_info(tier_1_id, locale_services_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-1 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def global_infra_view_tier1_locale_services_gateway_firewall_with_http_info(tier_1_id, locale_services_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.global_infra_view_tier1_locale_services_gateway_firewall ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NorthSouthSecurityApi.global_infra_view_tier1_locale_services_gateway_firewall"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling NorthSouthSecurityApi.global_infra_view_tier1_locale_services_gateway_firewall"
      end
      # resource path
      local_var_path = '/global-infra/tier-1s/{tier-1-id}/locale-services/{locale-services-id}/gateway-firewall'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#global_infra_view_tier1_locale_services_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List gateway policies
    # List all gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GatewayPolicyListResult]
    def list_gateway_policies_for_domain(domain_id, opts = {})
      data, _status_code, _headers = list_gateway_policies_for_domain_with_http_info(domain_id, opts)
      data
    end

    # List gateway policies
    # List all gateway policies for specified Domain.
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def list_gateway_policies_for_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.list_gateway_policies_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.list_gateway_policies_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.list_gateway_policies_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.list_gateway_policies_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#list_gateway_policies_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def list_gateway_rules(domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = list_gateway_rules_with_http_info(domain_id, gateway_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def list_gateway_rules_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.list_gateway_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.list_gateway_rules"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.list_gateway_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.list_gateway_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.list_gateway_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#list_gateway_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of URL categories.
    # Gets the list of categories. This will provide all the supported categories along with their ids. Few examples of these categories are Shopping, Social Networks, Streaming sites, etc. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyUrlCategoryListResult]
    def list_policy_url_categories(opts = {})
      data, _status_code, _headers = list_policy_url_categories_with_http_info(opts)
      data
    end

    # Get the list of URL categories.
    # Gets the list of categories. This will provide all the supported categories along with their ids. Few examples of these categories are Shopping, Social Networks, Streaming sites, etc. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyUrlCategoryListResult, Fixnum, Hash)>] PolicyUrlCategoryListResult data, response status code and response headers
    def list_policy_url_categories_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.list_policy_url_categories ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.list_policy_url_categories, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.list_policy_url_categories, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/url-categories'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyUrlCategoryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#list_policy_url_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of reputation severity
    # Gets the list of reputation severities. This will provide all the supported severities along with their ids, min and max reputaitons. The min_reputation and max_reputation specify the range of the reputations which belong to a particular severity. For instance, any reputation between 1 to 20 belongs to the severity 'High Risk'. Similary a reputation between 81 to 100 belong to the severity 'Trustworthy'. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyUrlReputationSeverityListResult]
    def list_policy_url_reputation_severities(opts = {})
      data, _status_code, _headers = list_policy_url_reputation_severities_with_http_info(opts)
      data
    end

    # Get the list of reputation severity
    # Gets the list of reputation severities. This will provide all the supported severities along with their ids, min and max reputaitons. The min_reputation and max_reputation specify the range of the reputations which belong to a particular severity. For instance, any reputation between 1 to 20 belongs to the severity &#39;High Risk&#39;. Similary a reputation between 81 to 100 belong to the severity &#39;Trustworthy&#39;. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyUrlReputationSeverityListResult, Fixnum, Hash)>] PolicyUrlReputationSeverityListResult data, response status code and response headers
    def list_policy_url_reputation_severities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.list_policy_url_reputation_severities ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.list_policy_url_reputation_severities, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.list_policy_url_reputation_severities, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/url-reputation-severities'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyUrlReputationSeverityListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#list_policy_url_reputation_severities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List TLS policies
    # List all TLS policies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TlsPolicyListResult]
    def list_tls_policies(opts = {})
      data, _status_code, _headers = list_tls_policies_with_http_info(opts)
      data
    end

    # List TLS policies
    # List all TLS policies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TlsPolicyListResult, Fixnum, Hash)>] TlsPolicyListResult data, response status code and response headers
    def list_tls_policies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.list_tls_policies ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.list_tls_policies, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.list_tls_policies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tls-inspection-policies'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#list_tls_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tls profiles available.
    # List all the Tls profiles available by requested resource_type. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TlsProfileListResult]
    def list_tls_profiles(opts = {})
      data, _status_code, _headers = list_tls_profiles_with_http_info(opts)
      data
    end

    # Get Tls profiles available.
    # List all the Tls profiles available by requested resource_type. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TlsProfileListResult, Fixnum, Hash)>] TlsProfileListResult data, response status code and response headers
    def list_tls_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.list_tls_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.list_tls_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.list_tls_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tls-inspection-action-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#list_tls_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List TLS rules
    # List TLS rules
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TlsRuleListResult]
    def list_tls_rules(policy_id, opts = {})
      data, _status_code, _headers = list_tls_rules_with_http_info(policy_id, opts)
      data
    end

    # List TLS rules
    # List TLS rules
    # @param policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TlsRuleListResult, Fixnum, Hash)>] TlsRuleListResult data, response status code and response headers
    def list_tls_rules_with_http_info(policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.list_tls_rules ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling NorthSouthSecurityApi.list_tls_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.list_tls_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.list_tls_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}/rules'.sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#list_tls_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # TLS inspection execution state details for the tier1
    # TLS inspection execution state details for the tier1 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :failed_domains TLS inspection failed domain filter (default to true)
    # @option opts [String] :fqdn Fully Qualified Domain Name
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TlsStateObjectListResult]
    def list_tls_state(tier_1_id, opts = {})
      data, _status_code, _headers = list_tls_state_with_http_info(tier_1_id, opts)
      data
    end

    # TLS inspection execution state details for the tier1
    # TLS inspection execution state details for the tier1 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :failed_domains TLS inspection failed domain filter
    # @option opts [String] :fqdn Fully Qualified Domain Name
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TlsStateObjectListResult, Fixnum, Hash)>] TlsStateObjectListResult data, response status code and response headers
    def list_tls_state_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.list_tls_state ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NorthSouthSecurityApi.list_tls_state"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.list_tls_state, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.list_tls_state, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/tls-inspection-state'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'failed_domains'] = opts[:'failed_domains'] if !opts[:'failed_domains'].nil?
      query_params[:'fqdn'] = opts[:'fqdn'] if !opts[:'fqdn'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsStateObjectListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#list_tls_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # TLS inspection execution state fqdn details for the tier1
    # TLS inspection execution state fqdn details for the tier1 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :failed_domains TLS inspection failed domain filter (default to true)
    # @option opts [String] :fqdn Fully Qualified Domain Name
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [TlsStateObjectListResult]
    def list_tls_state_fqdns(tier_1_id, opts = {})
      data, _status_code, _headers = list_tls_state_fqdns_with_http_info(tier_1_id, opts)
      data
    end

    # TLS inspection execution state fqdn details for the tier1
    # TLS inspection execution state fqdn details for the tier1 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :failed_domains TLS inspection failed domain filter
    # @option opts [String] :fqdn Fully Qualified Domain Name
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(TlsStateObjectListResult, Fixnum, Hash)>] TlsStateObjectListResult data, response status code and response headers
    def list_tls_state_fqdns_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.list_tls_state_fqdns ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NorthSouthSecurityApi.list_tls_state_fqdns"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.list_tls_state_fqdns, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.list_tls_state_fqdns, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/tls-inspection-state/fqdns'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'failed_domains'] = opts[:'failed_domains'] if !opts[:'failed_domains'].nil?
      query_params[:'fqdn'] = opts[:'fqdn'] if !opts[:'fqdn'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsStateObjectListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#list_tls_state_fqdns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain_with_http_info(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts)
      data
    end

    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy, use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain_with_http_info(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_create_or_replace_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/gateway-policies/&lt;gateway-policy-id&gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts)
      data
    end

    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/gateway-policies/&amp;lt;gateway-policy-id&amp;gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_create_or_replace_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create or update security configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [SecurityFeatures]
    def orgs_org_id_projects_project_id_infra_create_or_update_security_feature(org_id, project_id, tier_1_id, security_features, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_create_or_update_security_feature_with_http_info(org_id, project_id, tier_1_id, security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create or update security configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_create_or_update_security_feature_with_http_info(org_id, project_id, tier_1_id, security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_security_feature ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_security_feature"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_security_feature"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_security_feature"
      end
      # verify the required parameter 'security_features' is set
      if @api_client.config.client_side_validation && security_features.nil?
        fail ArgumentError, "Missing the required parameter 'security_features' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_create_or_update_security_feature"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_create_or_update_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete GatewayPolicy
    # Delete GatewayPolicy
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_gateway_policy(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_gateway_policy_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts)
      nil
    end

    # Delete GatewayPolicy
    # Delete GatewayPolicy
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_gateway_policy_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_policy"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_delete_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete rule
    # Delete rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_delete_gateway_rule(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts = {})
      orgs_org_id_projects_project_id_infra_delete_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts)
      nil
    end

    # Delete rule
    # Delete rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_delete_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_delete_gateway_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_delete_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get gateway policy statistics
    # Get statistics of a gateay policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [SecurityPolicyStatisticsListResult]
    def orgs_org_id_projects_project_id_infra_get_gateway_policy_statistics(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_gateway_policy_statistics_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts)
      data
    end

    # Get gateway policy statistics
    # Get statistics of a gateay policy. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(SecurityPolicyStatisticsListResult, Fixnum, Hash)>] SecurityPolicyStatisticsListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_gateway_policy_statistics_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_policy_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_policy_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_policy_statistics"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_policy_statistics"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_policy_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_get_gateway_policy_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get gateway rule statistics
    # Get statistics of a gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [RuleStatisticsListResult]
    def orgs_org_id_projects_project_id_infra_get_gateway_rule_statistics(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_gateway_rule_statistics_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts)
      data
    end

    # Get gateway rule statistics
    # Get statistics of a gateway rule. - no enforcement point path specified: Stats will be evaluated on each enforcement. point. - {enforcement_point_path}: Stats are evaluated only on the given enforcement point. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container_cluster_path String Path of the Container Cluster entity
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @return [Array<(RuleStatisticsListResult, Fixnum, Hash)>] RuleStatisticsListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_gateway_rule_statistics_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_rule_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_rule_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_rule_statistics"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_rule_statistics"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_rule_statistics"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_get_gateway_rule_statistics"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'container_cluster_path'] = opts[:'container_cluster_path'] if !opts[:'container_cluster_path'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_get_gateway_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Geo IP Blocked Events
    # Get Geo IP Blocked Events. The system will return the latest 25k events stored. User can use optional request parameters like source_country_code or source_ip_address to filter the response. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for getting next page of records
    # @option opts [String] :destination_country_code Comma Separated Destination Country Codes of Geo IP Blocked Event
    # @option opts [String] :destination_ip_address Comma Separated Destination IP Addresses of Geo IP Blocked Event
    # @option opts [String] :direction Comma Separated Directions of Traffic
    # @option opts [BOOLEAN] :include_all_projects  (default to false)
    # @option opts [Integer] :page_size Maximum number of results to return in this page (default to 500)
    # @option opts [String] :rule_id Comma Separated Gateway Firewall Rule Ids of Geo IP Blocked Event
    # @option opts [String] :source_country_code Comma Separated Source Country Codes of Geo IP Blocked Event
    # @option opts [String] :source_ip_address Comma Separated Source IP Addresses of Geo IP Blocked Event
    # @return [GeoIpBlockedEventsList]
    def orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events_with_http_info(org_id, project_id, opts)
      data
    end

    # Get Geo IP Blocked Events
    # Get Geo IP Blocked Events. The system will return the latest 25k events stored. User can use optional request parameters like source_country_code or source_ip_address to filter the response. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for getting next page of records
    # @option opts [String] :destination_country_code Comma Separated Destination Country Codes of Geo IP Blocked Event
    # @option opts [String] :destination_ip_address Comma Separated Destination IP Addresses of Geo IP Blocked Event
    # @option opts [String] :direction Comma Separated Directions of Traffic
    # @option opts [BOOLEAN] :include_all_projects 
    # @option opts [Integer] :page_size Maximum number of results to return in this page
    # @option opts [String] :rule_id Comma Separated Gateway Firewall Rule Ids of Geo IP Blocked Event
    # @option opts [String] :source_country_code Comma Separated Source Country Codes of Geo IP Blocked Event
    # @option opts [String] :source_ip_address Comma Separated Source IP Addresses of Geo IP Blocked Event
    # @return [Array<(GeoIpBlockedEventsList, Fixnum, Hash)>] GeoIpBlockedEventsList data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/geo-ip/blocked-events'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'destination_country_code'] = opts[:'destination_country_code'] if !opts[:'destination_country_code'].nil?
      query_params[:'destination_ip_address'] = opts[:'destination_ip_address'] if !opts[:'destination_ip_address'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'include_all_projects'] = opts[:'include_all_projects'] if !opts[:'include_all_projects'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'rule_id'] = opts[:'rule_id'] if !opts[:'rule_id'].nil?
      query_params[:'source_country_code'] = opts[:'source_country_code'] if !opts[:'source_country_code'].nil?
      query_params[:'source_ip_address'] = opts[:'source_ip_address'] if !opts[:'source_ip_address'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpBlockedEventsList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_get_geo_ip_blocked_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Geo IP Look Up
    # Gets Country Code for the IP Address provided. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_address IPv4 or IPv6 address
    # @param [Hash] opts the optional parameters
    # @return [GeoIpLookUp]
    def orgs_org_id_projects_project_id_infra_get_geo_ip_look_up(org_id, project_id, ip_address, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_get_geo_ip_look_up_with_http_info(org_id, project_id, ip_address, opts)
      data
    end

    # Get Geo IP Look Up
    # Gets Country Code for the IP Address provided. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ip_address IPv4 or IPv6 address
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeoIpLookUp, Fixnum, Hash)>] GeoIpLookUp data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_get_geo_ip_look_up_with_http_info(org_id, project_id, ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_get_geo_ip_look_up ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_get_geo_ip_look_up"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_get_geo_ip_look_up"
      end
      # verify the required parameter 'ip_address' is set
      if @api_client.config.client_side_validation && ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'ip_address' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_get_geo_ip_look_up"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/geo-ip/look-up'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ip_address'] = ip_address

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpLookUp')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_get_geo_ip_look_up\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List gateway policies
    # List all gateway policies for specified Domain.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GatewayPolicyListResult]
    def orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain(org_id, project_id, domain_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain_with_http_info(org_id, project_id, domain_id, opts)
      data
    end

    # List gateway policies
    # List all gateway policies for specified Domain.
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [BOOLEAN] :include_rule_count Include the count of rules in policy
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain_with_http_info(org_id, project_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'include_rule_count'] = opts[:'include_rule_count'] if !opts[:'include_rule_count'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_list_gateway_policies_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def orgs_org_id_projects_project_id_infra_list_gateway_rules(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_list_gateway_rules_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_list_gateway_rules_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_rules ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_rules"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_rules"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_rules"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_list_gateway_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_list_gateway_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts = {})
      orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain_with_http_info(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts)
      nil
    end

    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain_with_http_info(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_patch_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/gateway-policies/&lt;gateway-policy-id&gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_gateway_rule(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts = {})
      orgs_org_id_projects_project_id_infra_patch_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts)
      nil
    end

    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/gateway-policies/&amp;lt;gateway-policy-id&amp;gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_patch_gateway_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_patch_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create a security configuration if it is not already present, otherwise update the security configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [SecurityFeatures]
    def orgs_org_id_projects_project_id_infra_patch_security_feature(org_id, project_id, tier_1_id, security_features, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_patch_security_feature_with_http_info(org_id, project_id, tier_1_id, security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create a security configuration if it is not already present, otherwise update the security configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_security_feature_with_http_info(org_id, project_id, tier_1_id, security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_patch_security_feature ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_patch_security_feature"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_patch_security_feature"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_patch_security_feature"
      end
      # verify the required parameter 'security_features' is set
      if @api_client.config.client_side_validation && security_features.nil?
        fail ArgumentError, "Missing the required parameter 'security_features' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_patch_security_feature"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_patch_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read gateway policy
    # Read gateway policy for a domain. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts)
      data
    end

    # Read gateway policy
    # Read gateway policy for a domain. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain_with_http_info(org_id, project_id, domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_read_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def orgs_org_id_projects_project_id_infra_read_gateway_rule(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_read_gateway_rule"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_read_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Security Feature
    # Read Security Feature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityFeatures]
    def orgs_org_id_projects_project_id_infra_read_security_feature(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_security_feature_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # Read Security Feature
    # Read Security Feature. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_security_feature_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_read_security_feature ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_read_security_feature"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_read_security_feature"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_read_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['MALWAREPREVENTION', 'IDFW', 'IDPS', 'TLS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of MALWAREPREVENTION, IDFW, IDPS, TLS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_read_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_read_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_read_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of gateway policy
    # This is used to set a precedence of a gateway policy w.r.t others. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [GatewayPolicy]
    def orgs_org_id_projects_project_id_infra_revise_gateway_policy(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_revise_gateway_policy_with_http_info(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts)
      data
    end

    # Revise the positioning of gateway policy
    # This is used to set a precedence of a gateway policy w.r.t others. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_revise_gateway_policy_with_http_info(org_id, project_id, domain_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_policy ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_policy"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_policy"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_policy"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_policy"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_revise_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of gateway rule
    # This is used to re-order a gateway rule within a gateway policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [Rule]
    def orgs_org_id_projects_project_id_infra_revise_gateway_rule(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_revise_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of gateway rule
    # This is used to re-order a gateway rule within a gateway policy. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_revise_gateway_rule_with_http_info(org_id, project_id, domain_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_revise_gateway_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_revise_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-1. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1. The gateway policies are returned in the order of category and sequence number. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def orgs_org_id_projects_project_id_infra_view_tier1_gateway_firewall(org_id, project_id, tier_1_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_view_tier1_gateway_firewall_with_http_info(org_id, project_id, tier_1_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-1. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1. The gateway policies are returned in the order of category and sequence number. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_view_tier1_gateway_firewall_with_http_info(org_id, project_id, tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_view_tier1_gateway_firewall ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_view_tier1_gateway_firewall"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_view_tier1_gateway_firewall"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_view_tier1_gateway_firewall"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/gateway-firewall'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_view_tier1_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-1 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def orgs_org_id_projects_project_id_infra_view_tier1_locale_services_gateway_firewall(org_id, project_id, tier_1_id, locale_services_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_view_tier1_locale_services_gateway_firewall_with_http_info(org_id, project_id, tier_1_id, locale_services_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-1 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param tier_1_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_view_tier1_locale_services_gateway_firewall_with_http_info(org_id, project_id, tier_1_id, locale_services_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_view_tier1_locale_services_gateway_firewall ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_view_tier1_locale_services_gateway_firewall"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_view_tier1_locale_services_gateway_firewall"
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_view_tier1_locale_services_gateway_firewall"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling NorthSouthSecurityApi.orgs_org_id_projects_project_id_infra_view_tier1_locale_services_gateway_firewall"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/tier-1s/{tier-1-id}/locale-services/{locale-services-id}/gateway-firewall'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#orgs_org_id_projects_project_id_infra_view_tier1_locale_services_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update FqdnAnalysisConfig
    # Creates/Updates a FqdnAnalysisConfig object. If FqdnAnalysisConfig object does not exists for the passed edge-cluster node, create a new FqdnAnalysisConfig object. If it already exists, patch it. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param fqdn_analysis_config 
    # @param [Hash] opts the optional parameters
    # @return [FqdnAnalysisConfig]
    def patch_fqdn_analysis_config(site_id, enforcement_point_id, edge_cluster_id, fqdn_analysis_config, opts = {})
      data, _status_code, _headers = patch_fqdn_analysis_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, fqdn_analysis_config, opts)
      data
    end

    # Create or Update FqdnAnalysisConfig
    # Creates/Updates a FqdnAnalysisConfig object. If FqdnAnalysisConfig object does not exists for the passed edge-cluster node, create a new FqdnAnalysisConfig object. If it already exists, patch it. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param fqdn_analysis_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FqdnAnalysisConfig, Fixnum, Hash)>] FqdnAnalysisConfig data, response status code and response headers
    def patch_fqdn_analysis_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, fqdn_analysis_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.patch_fqdn_analysis_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NorthSouthSecurityApi.patch_fqdn_analysis_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling NorthSouthSecurityApi.patch_fqdn_analysis_config"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling NorthSouthSecurityApi.patch_fqdn_analysis_config"
      end
      # verify the required parameter 'fqdn_analysis_config' is set
      if @api_client.config.client_side_validation && fqdn_analysis_config.nil?
        fail ArgumentError, "Missing the required parameter 'fqdn_analysis_config' when calling NorthSouthSecurityApi.patch_fqdn_analysis_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/fqdn-analysis-config'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(fqdn_analysis_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FqdnAnalysisConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#patch_fqdn_analysis_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_gateway_policy_for_domain(domain_id, gateway_policy_id, gateway_policy, opts = {})
      patch_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts)
      nil
    end

    # Update gateway policy
    # Update the gateway policy for a domain. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a gateway policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.patch_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.patch_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.patch_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling NorthSouthSecurityApi.patch_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#patch_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&lt;domain-id&gt;/gateway-policies/&lt;gateway-policy-id&gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_gateway_rule(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      patch_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts)
      nil
    end

    # Update gateway rule
    # Update the gateway rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a gateway policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/domains/&amp;lt;domain-id&amp;gt;/gateway-policies/&amp;lt;gateway-policy-id&amp;gt;  Concurrency Note: Concurrent firewall rule creation is not supported under the same Gateway Policy. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.patch_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.patch_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.patch_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling NorthSouthSecurityApi.patch_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling NorthSouthSecurityApi.patch_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#patch_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Geo IP Setting Configuration
    # This API can be used to activate or deactivate auto-download of Geo IP Bundle. Once auto-download is activated, Geo IP Bundle will be downloaded at regular intervals of 720 minutes (12 hrs). 
    # @param geo_ip_setting 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_geo_ip_setting(geo_ip_setting, opts = {})
      patch_geo_ip_setting_with_http_info(geo_ip_setting, opts)
      nil
    end

    # Patch Geo IP Setting Configuration
    # This API can be used to activate or deactivate auto-download of Geo IP Bundle. Once auto-download is activated, Geo IP Bundle will be downloaded at regular intervals of 720 minutes (12 hrs). 
    # @param geo_ip_setting 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_geo_ip_setting_with_http_info(geo_ip_setting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.patch_geo_ip_setting ...'
      end
      # verify the required parameter 'geo_ip_setting' is set
      if @api_client.config.client_side_validation && geo_ip_setting.nil?
        fail ArgumentError, "Missing the required parameter 'geo_ip_setting' when calling NorthSouthSecurityApi.patch_geo_ip_setting"
      end
      # resource path
      local_var_path = '/infra/geo-ip/setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(geo_ip_setting)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#patch_geo_ip_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration for Segment
    # Create a Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityFeatures]
    def patch_infra_segment_security_feature(segment_id, segment_security_features, opts = {})
      data, _status_code, _headers = patch_infra_segment_security_feature_with_http_info(segment_id, segment_security_features, opts)
      data
    end

    # Create or Update security configuration for Segment
    # Create a Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def patch_infra_segment_security_feature_with_http_info(segment_id, segment_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.patch_infra_segment_security_feature ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling NorthSouthSecurityApi.patch_infra_segment_security_feature"
      end
      # verify the required parameter 'segment_security_features' is set
      if @api_client.config.client_side_validation && segment_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_features' when calling NorthSouthSecurityApi.patch_infra_segment_security_feature"
      end
      # resource path
      local_var_path = '/infra/segments/{segment-id}/security-config'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#patch_infra_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyUrlCategorizationConfig
    # Creates/Updates a PolicyUrlCategorizationConfig. Creating or updating the PolicyUrlCategorizationConfig will activate or deactivate URL categorization for the given edge cluster. If the context_profiles field is empty, the edge cluster will detect all the categories of URLs. If context_profiles field has any context profiles, the edge cluster will detect only the categories listed within those context profiles. The context profiles should have attribute type URL_CATEGORY. The update_frequency specifies how frequently in minutes, the edge cluster will get updates about the URL data from the URL categorization cloud service. If the update_frequency is not specified, the default update frequency will be 30 min. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param policy_url_categorization_config 
    # @param [Hash] opts the optional parameters
    # @return [PolicyUrlCategorizationConfig]
    def patch_policy_url_categorization_config(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts = {})
      data, _status_code, _headers = patch_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts)
      data
    end

    # Create or Update PolicyUrlCategorizationConfig
    # Creates/Updates a PolicyUrlCategorizationConfig. Creating or updating the PolicyUrlCategorizationConfig will activate or deactivate URL categorization for the given edge cluster. If the context_profiles field is empty, the edge cluster will detect all the categories of URLs. If context_profiles field has any context profiles, the edge cluster will detect only the categories listed within those context profiles. The context profiles should have attribute type URL_CATEGORY. The update_frequency specifies how frequently in minutes, the edge cluster will get updates about the URL data from the URL categorization cloud service. If the update_frequency is not specified, the default update frequency will be 30 min. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param policy_url_categorization_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyUrlCategorizationConfig, Fixnum, Hash)>] PolicyUrlCategorizationConfig data, response status code and response headers
    def patch_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.patch_policy_url_categorization_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NorthSouthSecurityApi.patch_policy_url_categorization_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling NorthSouthSecurityApi.patch_policy_url_categorization_config"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling NorthSouthSecurityApi.patch_policy_url_categorization_config"
      end
      # verify the required parameter 'url_categorization_config_id' is set
      if @api_client.config.client_side_validation && url_categorization_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'url_categorization_config_id' when calling NorthSouthSecurityApi.patch_policy_url_categorization_config"
      end
      # verify the required parameter 'policy_url_categorization_config' is set
      if @api_client.config.client_side_validation && policy_url_categorization_config.nil?
        fail ArgumentError, "Missing the required parameter 'policy_url_categorization_config' when calling NorthSouthSecurityApi.patch_policy_url_categorization_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'url-categorization-config-id' + '}', url_categorization_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_url_categorization_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyUrlCategorizationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#patch_policy_url_categorization_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create a security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [SecurityFeatures]
    def patch_security_feature(tier_1_id, security_features, opts = {})
      data, _status_code, _headers = patch_security_feature_with_http_info(tier_1_id, security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create a security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id tier1 id
    # @param security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def patch_security_feature_with_http_info(tier_1_id, security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.patch_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NorthSouthSecurityApi.patch_security_feature"
      end
      # verify the required parameter 'security_features' is set
      if @api_client.config.client_side_validation && security_features.nil?
        fail ArgumentError, "Missing the required parameter 'security_features' when calling NorthSouthSecurityApi.patch_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#patch_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration
    # Create a T0 security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_0_id tier0 id
    # @param tier0_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Tier0SecurityFeatures]
    def patch_tier0_security_feature(tier_0_id, tier0_security_features, opts = {})
      data, _status_code, _headers = patch_tier0_security_feature_with_http_info(tier_0_id, tier0_security_features, opts)
      data
    end

    # Create or Update security configuration
    # Create a T0 security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_0_id tier0 id
    # @param tier0_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tier0SecurityFeatures, Fixnum, Hash)>] Tier0SecurityFeatures data, response status code and response headers
    def patch_tier0_security_feature_with_http_info(tier_0_id, tier0_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.patch_tier0_security_feature ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NorthSouthSecurityApi.patch_tier0_security_feature"
      end
      # verify the required parameter 'tier0_security_features' is set
      if @api_client.config.client_side_validation && tier0_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'tier0_security_features' when calling NorthSouthSecurityApi.patch_tier0_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/security-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tier0_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tier0SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#patch_tier0_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security configuration for Tier1 Segment
    # Create a Tier1 Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [SegmentSecurityFeatures]
    def patch_tier1_segment_security_feature(tier_1_id, segment_id, segment_security_features, opts = {})
      data, _status_code, _headers = patch_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, segment_security_features, opts)
      data
    end

    # Create or Update security configuration for Tier1 Segment
    # Create a Tier1 Segment security configuration if it is not already present, otherwise update the security configuration. 
    # @param tier_1_id 
    # @param segment_id 
    # @param segment_security_features 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def patch_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, segment_security_features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.patch_tier1_segment_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NorthSouthSecurityApi.patch_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling NorthSouthSecurityApi.patch_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_security_features' is set
      if @api_client.config.client_side_validation && segment_security_features.nil?
        fail ArgumentError, "Missing the required parameter 'segment_security_features' when calling NorthSouthSecurityApi.patch_tier1_segment_security_feature"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(segment_security_features)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#patch_tier1_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update TLS policy
    # Update the TLS policy. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a TLS policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param policy_id Firewall TLS inspection poicy id
    # @param tls_policy 
    # @param [Hash] opts the optional parameters
    # @return [TlsPolicy]
    def patch_tls_policy(policy_id, tls_policy, opts = {})
      data, _status_code, _headers = patch_tls_policy_with_http_info(policy_id, tls_policy, opts)
      data
    end

    # Update TLS policy
    # Update the TLS policy. This is a full replace. All the rules are replaced. Performance Note: If you want to edit several rules in a TLS policy use this API. It will perform better than several individual rule APIs. Just pass all the rules which you wish to edit as embedded rules to it. 
    # @param policy_id Firewall TLS inspection poicy id
    # @param tls_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsPolicy, Fixnum, Hash)>] TlsPolicy data, response status code and response headers
    def patch_tls_policy_with_http_info(policy_id, tls_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.patch_tls_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling NorthSouthSecurityApi.patch_tls_policy"
      end
      # verify the required parameter 'tls_policy' is set
      if @api_client.config.client_side_validation && tls_policy.nil?
        fail ArgumentError, "Missing the required parameter 'tls_policy' when calling NorthSouthSecurityApi.patch_tls_policy"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#patch_tls_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Tls profile.
    # Create a Tls profile with values provided. It creates profile based on the resource_type in the payload. Each action profile supports the following 3 pre-defined config setting defaults:     Balanced, High Fidelity and High Security.  1 - External Profile Balanced (default) Sample intent path: /infra/tls-inspection-action-profiles/external-balanced-profile API payload: <pre> {     \"tls_config_setting\": \"BALANCED\",     \"resource_type\": \"TlsInspectionExternalProfile\",     \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",     \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\" } </pre> Profile with default settings: <pre> {     \"tls_config_setting\": \"BALANCED\",     \"invalid_cert_action\": \"ALLOW\",     \"decryption_fail_action\": \"BYPASS\",     \"crypto_enforcement\": \"ENFORCE\",     \"client_min_tls_version\": \"TLS_V1_1\",     \"client_max_tls_version\": \"TLS_V1_2\",     \"server_min_tls_version\": \"TLS_V1_1\",     \"server_max_tls_version\": \"TLS_V1_2\",     \"client_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",         \"TLS_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_RSA_WITH_AES_256_CBC_SHA256\"     ],     \"server_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",         \"TLS_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_RSA_WITH_AES_256_CBC_SHA256\"     ],     \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",     \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\",     \"ocsp_must_staple\": false,     \"resource_type\": \"TlsInspectionExternalProfile\",     \"id\": \"external-balanced-profile\",     \"display_name\": \"external-balanced-profile\",     \"path\": \"/infra/tls-inspection-action-profiles/external-balanced-profile\",     \"relative_path\": \"external-balanced-profile\",     \"parent_path\": \"/infra\",     \"unique_id\": \"bb236080-e49d-4475-9eb3-b749b075164a\",     \"marked_for_delete\": false,     \"overridden\": false,     \"trusted_ca_bundles\": [         \"/infra/cabundles/default_trusted_public_ca_bundle\"     ],     \"crls\": [         \"/infra/crls/nsx_default_public_crl\"     ],     \"idle_connection_timeout\": 5400,     \"_system_owned\": false,     \"_protection\": \"NOT_PROTECTED\",     \"_create_user\": \"admin\",     \"_create_time\": 1622225641015,     \"_last_modified_user\": \"admin\",     \"_last_modified_time\": 1622225641015,     \"_revision\": 0 } </pre>  2 - External Profile High Fidelity Sample intent path: /infra/tls-inspection-action-profiles/external-high-fidelity-profile Sample intent path: <pre> {     \"tls_config_setting\": \"HIGH_FIDELITY\",     \"resource_type\": \"TlsInspectionExternalProfile\",     \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",     \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\" } </pre> Profile with default settings: <pre> {     \"tls_config_setting\": \"HIGH_FIDELITY\",     \"invalid_cert_action\": \"ALLOW\",     \"decryption_fail_action\": \"BYPASS\",     \"crypto_enforcement\": \"TRANSPARENT\",     \"client_min_tls_version\": \"\",     \"client_max_tls_version\": \"\",     \"server_min_tls_version\": \"\",     \"server_max_tls_version\": \"\",     \"client_cipher_suite\": [],     \"server_cipher_suite\": [],     \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",     \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\",     \"ocsp_must_staple\": false,     \"resource_type\": \"TlsInspectionExternalProfile\",     \"id\": \"external-high-fidelity-profile\",     \"display_name\": \"external-high-fidelity-profile\",     \"path\": \"/infra/tls-inspection-action-profiles/external-high-fidelity-profile\",     \"relative_path\": \"external-high-fidelity-profile\",     \"parent_path\": \"/infra\",     \"unique_id\": \"bb6c8604-c8eb-44dd-aded-7407e0ca887c\",     \"marked_for_delete\": false,     \"overridden\": false,     \"trusted_ca_bundles\": [         \"/infra/cabundles/default_trusted_public_ca_bundle\"     ],     \"crls\": [         \"/infra/crls/nsx_default_public_crl\"     ],     \"idle_connection_timeout\": 5400,     \"_system_owned\": false,     \"_protection\": \"NOT_PROTECTED\",     \"_create_user\": \"admin\",     \"_create_time\": 1622225537386,     \"_last_modified_user\": \"admin\",     \"_last_modified_time\": 1622225537386,     \"_revision\": 0 } </pre>  3 - External Profile High Security Sample intent path:/infra/tls-inspection-action-profiles/external-high-security-profile Sample intent path: <pre> {     \"tls_config_setting\": \"HIGH_SECURITY\",     \"resource_type\": \"TlsInspectionExternalProfile\",     \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",     \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\" } </pre> Profile with default settings: <pre> {    \"tls_config_setting\": \"HIGH_SECURITY\",    \"invalid_cert_action\": \"BLOCK\",    \"decryption_fail_action\": \"BLOCK\",    \"crypto_enforcement\": \"ENFORCE\",    \"client_min_tls_version\": \"TLS_V1_2\",    \"client_max_tls_version\": \"TLS_V1_2\",    \"server_min_tls_version\": \"TLS_V1_2\",    \"server_max_tls_version\": \"TLS_V1_2\",    \"client_cipher_suite\": [        \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",        \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\"    ],    \"server_cipher_suite\": [        \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",        \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\"    ],    \"proxy_trusted_ca_cert\": \"/infra/certificates/caCert1\",    \"proxy_untrusted_ca_cert\": \"/infra/certificates/caCert2\",    \"ocsp_must_staple\": false,    \"resource_type\": \"TlsInspectionExternalProfile\",    \"id\": \"external-high-security-profile\",    \"display_name\": \"external-high-security-profile\",    \"path\": \"/infra/tls-inspection-action-profiles/external-high-security-profile\",    \"relative_path\": \"external-high-security-profile\",    \"parent_path\": \"/infra\",    \"unique_id\": \"e19cbc40-c679-4f32-9e40-aa5eedf7f254\",    \"marked_for_delete\": false,    \"overridden\": false,    \"trusted_ca_bundles\": [        \"/infra/cabundles/default_trusted_public_ca_bundle\"    ],    \"crls\": [        \"/infra/crls/nsx_default_public_crl\"    ],    \"idle_connection_timeout\": 5400,    \"_system_owned\": false,    \"_protection\": \"NOT_PROTECTED\",    \"_create_user\": \"admin\",    \"_create_time\": 1622141786963,    \"_last_modified_user\": \"admin\",    \"_last_modified_time\": 1622225387352,    \"_revision\": 4 } </pre>  4 - Internal Profile Balanced Sample intent path:/infra/tls-inspection-action-profiles/internal-balanced-profile Sample intent path: <pre> {     \"tls_config_setting\": \"BALANCED\",     \"resource_type\": \"TlsInspectionInternalProfile\",     \"server_certs_key\": [\"/infra/certificates/server-cert-1\"],     \"default_cert_key\": \"/infra/certificates/server-cert-1\" } </pre> Profile with default settings: <pre> {     \"tls_config_setting\": \"BALANCED\",     \"decryption_fail_action\": \"BYPASS\",     \"crypto_enforcement\": \"ENFORCE\",     \"client_min_tls_version\": \"TLS_V1_1\",     \"client_max_tls_version\": \"TLS_V1_2\",     \"server_min_tls_version\": \"TLS_V1_1\",     \"server_max_tls_version\": \"TLS_V1_2\",     \"client_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",         \"TLS_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_RSA_WITH_AES_256_CBC_SHA256\"     ],     \"server_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",         \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",         \"TLS_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_RSA_WITH_AES_128_CBC_SHA256\",         \"TLS_RSA_WITH_AES_256_GCM_SHA384\",         \"TLS_RSA_WITH_AES_256_CBC_SHA256\"     ],     \"server_certs_key\": [         \"/infra/certificates/server-cert-1\"     ],     \"default_cert_key\": \"/infra/certificates/server-cert-1\",     \"ocsp_must_staple\": false,     \"certificate_validation\": false,     \"resource_type\": \"TlsInspectionInternalProfile\",     \"id\": \"internal-balanced-profile\",     \"display_name\": \"internal-balanced-profile\",     \"path\": \"/infra/tls-inspection-action-profiles/internal-balanced-profile\",     \"relative_path\": \"internal-balanced-profile\",     \"parent_path\": \"/infra\",     \"unique_id\": \"b8486763-843a-4894-8dfd-5bceebb10cd3\",     \"marked_for_delete\": false,     \"overridden\": false,     \"trusted_ca_bundles\": [         \"/infra/cabundles/default_trusted_public_ca_bundle\"     ],     \"crls\": [         \"/infra/crls/nsx_default_public_crl\"     ],     \"idle_connection_timeout\": 5400,     \"_system_owned\": false,     \"_protection\": \"NOT_PROTECTED\",     \"_create_user\": \"admin\",     \"_create_time\": 1622071598527,     \"_last_modified_user\": \"admin\",     \"_last_modified_time\": 1622071598527,     \"_revision\": 0 } </pre>  5 - Internal Profile High Fidelity Sample intent path:/infra/tls-inspection-action-profiles/internal-high-fidelity-profile Sample intent path: <pre> {     \"tls_config_setting\": \"HIGH_FIDELITY\",     \"resource_type\": \"TlsInspectionInternalProfile\",     \"server_certs_key\": [\"/infra/certificates/server-cert-1\"],     \"default_cert_key\": \"/infra/certificates/server-cert-1\" } </pre> Profile with default settings: <pre> {     \"tls_config_setting\": \"HIGH_FIDELITY\",     \"decryption_fail_action\": \"BYPASS\",     \"crypto_enforcement\": \"TRANSPARENT\",     \"client_min_tls_version\": \"\",     \"client_max_tls_version\": \"\",     \"server_min_tls_version\": \"\",     \"server_max_tls_version\": \"\",     \"client_cipher_suite\": [],     \"server_cipher_suite\": [],     \"server_certs_key\": [         \"/infra/certificates/server-cert-1\"     ],     \"default_cert_key\": \"/infra/certificates/server-cert-1\",     \"ocsp_must_staple\": false,     \"certificate_validation\": false,     \"resource_type\": \"TlsInspectionInternalProfile\",     \"id\": \"internal-high-fidelity-profile\",     \"display_name\": \"internal-high-fidelity-profile\",     \"path\": \"/infra/tls-inspection-action-profiles/internal-high-fidelity-profile\",     \"relative_path\": \"internal-high-fidelity-profile\",     \"parent_path\": \"/infra\",     \"unique_id\": \"27609d17-e642-4a7a-b414-176b3f7eca8d\",     \"marked_for_delete\": false,     \"overridden\": false,     \"trusted_ca_bundles\": [         \"/infra/cabundles/default_trusted_public_ca_bundle\"     ],     \"crls\": [         \"/infra/crls/nsx_default_public_crl\"     ],     \"idle_connection_timeout\": 5400,     \"_system_owned\": false,     \"_protection\": \"NOT_PROTECTED\",     \"_create_user\": \"admin\",     \"_create_time\": 1622071452299,     \"_last_modified_user\": \"admin\",     \"_last_modified_time\": 1622071452299,     \"_revision\": 0 } </pre>  6 - Internal Profile High Security Sample intent path:/infra/tls-inspection-action-profiles/internal-high-security-profile Sample intent path: <pre> {     \"tls_config_setting\": \"HIGH_SECURITY\",     \"resource_type\": \"TlsInspectionInternalProfile\",     \"server_certs_key\": [\"/infra/certificates/server-cert-1\"],     \"default_cert_key\": \"/infra/certificates/server-cert-1\" } </pre>  Profile with default settings: <pre> {     \"tls_config_setting\": \"HIGH_SECURITY\",     \"decryption_fail_action\": \"BLOCK\",     \"crypto_enforcement\": \"ENFORCE\",     \"client_min_tls_version\": \"TLS_V1_2\",     \"client_max_tls_version\": \"TLS_V1_2\",     \"server_min_tls_version\": \"TLS_V1_2\",     \"server_max_tls_version\": \"TLS_V1_2\",     \"client_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\"     ],     \"server_cipher_suite\": [         \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",         \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\"     ],     \"server_certs_key\": [         \"/infra/certificates/server-cert-1\"     ],     \"default_cert_key\": \"/infra/certificates/server-cert-1\",     \"ocsp_must_staple\": false,     \"certificate_validation\": false,     \"resource_type\": \"TlsInspectionInternalProfile\",     \"id\": \"internal-high-security-profile\",     \"display_name\": \"internal-high-security-profile\",     \"path\": \"/infra/tls-inspection-action-profiles/internal-high-security-profile\",     \"relative_path\": \"internal-high-security-profile\",     \"parent_path\": \"/infra\",     \"unique_id\": \"52e3e7e8-718d-4eaf-a177-501f196c421a\",     \"marked_for_delete\": false,     \"overridden\": false,     \"trusted_ca_bundles\": [         \"/infra/cabundles/default_trusted_public_ca_bundle\"     ],     \"crls\": [         \"/infra/crls/nsx_default_public_crl\"     ],     \"idle_connection_timeout\": 5400,     \"_system_owned\": false,     \"_protection\": \"NOT_PROTECTED\",     \"_create_user\": \"admin\",     \"_create_time\": 1622071359539,     \"_last_modified_user\": \"admin\",     \"_last_modified_time\": 1622071359539,     \"_revision\": 0 } </pre> 
    # @param action_profile_id 
    # @param tls_profile 
    # @param [Hash] opts the optional parameters
    # @return [TlsProfile]
    def patch_tls_profile(action_profile_id, tls_profile, opts = {})
      data, _status_code, _headers = patch_tls_profile_with_http_info(action_profile_id, tls_profile, opts)
      data
    end

    # Create a Tls profile.
    # Create a Tls profile with values provided. It creates profile based on the resource_type in the payload. Each action profile supports the following 3 pre-defined config setting defaults:     Balanced, High Fidelity and High Security.  1 - External Profile Balanced (default) Sample intent path: /infra/tls-inspection-action-profiles/external-balanced-profile API payload: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;BALANCED\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,     \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,     \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot; } &lt;/pre&gt; Profile with default settings: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;BALANCED\&quot;,     \&quot;invalid_cert_action\&quot;: \&quot;ALLOW\&quot;,     \&quot;decryption_fail_action\&quot;: \&quot;BYPASS\&quot;,     \&quot;crypto_enforcement\&quot;: \&quot;ENFORCE\&quot;,     \&quot;client_min_tls_version\&quot;: \&quot;TLS_V1_1\&quot;,     \&quot;client_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;server_min_tls_version\&quot;: \&quot;TLS_V1_1\&quot;,     \&quot;server_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;client_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_256_CBC_SHA256\&quot;     ],     \&quot;server_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_256_CBC_SHA256\&quot;     ],     \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,     \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot;,     \&quot;ocsp_must_staple\&quot;: false,     \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,     \&quot;id\&quot;: \&quot;external-balanced-profile\&quot;,     \&quot;display_name\&quot;: \&quot;external-balanced-profile\&quot;,     \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/external-balanced-profile\&quot;,     \&quot;relative_path\&quot;: \&quot;external-balanced-profile\&quot;,     \&quot;parent_path\&quot;: \&quot;/infra\&quot;,     \&quot;unique_id\&quot;: \&quot;bb236080-e49d-4475-9eb3-b749b075164a\&quot;,     \&quot;marked_for_delete\&quot;: false,     \&quot;overridden\&quot;: false,     \&quot;trusted_ca_bundles\&quot;: [         \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;     ],     \&quot;crls\&quot;: [         \&quot;/infra/crls/nsx_default_public_crl\&quot;     ],     \&quot;idle_connection_timeout\&quot;: 5400,     \&quot;_system_owned\&quot;: false,     \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,     \&quot;_create_user\&quot;: \&quot;admin\&quot;,     \&quot;_create_time\&quot;: 1622225641015,     \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,     \&quot;_last_modified_time\&quot;: 1622225641015,     \&quot;_revision\&quot;: 0 } &lt;/pre&gt;  2 - External Profile High Fidelity Sample intent path: /infra/tls-inspection-action-profiles/external-high-fidelity-profile Sample intent path: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_FIDELITY\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,     \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,     \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot; } &lt;/pre&gt; Profile with default settings: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_FIDELITY\&quot;,     \&quot;invalid_cert_action\&quot;: \&quot;ALLOW\&quot;,     \&quot;decryption_fail_action\&quot;: \&quot;BYPASS\&quot;,     \&quot;crypto_enforcement\&quot;: \&quot;TRANSPARENT\&quot;,     \&quot;client_min_tls_version\&quot;: \&quot;\&quot;,     \&quot;client_max_tls_version\&quot;: \&quot;\&quot;,     \&quot;server_min_tls_version\&quot;: \&quot;\&quot;,     \&quot;server_max_tls_version\&quot;: \&quot;\&quot;,     \&quot;client_cipher_suite\&quot;: [],     \&quot;server_cipher_suite\&quot;: [],     \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,     \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot;,     \&quot;ocsp_must_staple\&quot;: false,     \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,     \&quot;id\&quot;: \&quot;external-high-fidelity-profile\&quot;,     \&quot;display_name\&quot;: \&quot;external-high-fidelity-profile\&quot;,     \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/external-high-fidelity-profile\&quot;,     \&quot;relative_path\&quot;: \&quot;external-high-fidelity-profile\&quot;,     \&quot;parent_path\&quot;: \&quot;/infra\&quot;,     \&quot;unique_id\&quot;: \&quot;bb6c8604-c8eb-44dd-aded-7407e0ca887c\&quot;,     \&quot;marked_for_delete\&quot;: false,     \&quot;overridden\&quot;: false,     \&quot;trusted_ca_bundles\&quot;: [         \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;     ],     \&quot;crls\&quot;: [         \&quot;/infra/crls/nsx_default_public_crl\&quot;     ],     \&quot;idle_connection_timeout\&quot;: 5400,     \&quot;_system_owned\&quot;: false,     \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,     \&quot;_create_user\&quot;: \&quot;admin\&quot;,     \&quot;_create_time\&quot;: 1622225537386,     \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,     \&quot;_last_modified_time\&quot;: 1622225537386,     \&quot;_revision\&quot;: 0 } &lt;/pre&gt;  3 - External Profile High Security Sample intent path:/infra/tls-inspection-action-profiles/external-high-security-profile Sample intent path: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_SECURITY\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,     \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,     \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot; } &lt;/pre&gt; Profile with default settings: &lt;pre&gt; {    \&quot;tls_config_setting\&quot;: \&quot;HIGH_SECURITY\&quot;,    \&quot;invalid_cert_action\&quot;: \&quot;BLOCK\&quot;,    \&quot;decryption_fail_action\&quot;: \&quot;BLOCK\&quot;,    \&quot;crypto_enforcement\&quot;: \&quot;ENFORCE\&quot;,    \&quot;client_min_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,    \&quot;client_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,    \&quot;server_min_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,    \&quot;server_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,    \&quot;client_cipher_suite\&quot;: [        \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,        \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;    ],    \&quot;server_cipher_suite\&quot;: [        \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,        \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;    ],    \&quot;proxy_trusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert1\&quot;,    \&quot;proxy_untrusted_ca_cert\&quot;: \&quot;/infra/certificates/caCert2\&quot;,    \&quot;ocsp_must_staple\&quot;: false,    \&quot;resource_type\&quot;: \&quot;TlsInspectionExternalProfile\&quot;,    \&quot;id\&quot;: \&quot;external-high-security-profile\&quot;,    \&quot;display_name\&quot;: \&quot;external-high-security-profile\&quot;,    \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/external-high-security-profile\&quot;,    \&quot;relative_path\&quot;: \&quot;external-high-security-profile\&quot;,    \&quot;parent_path\&quot;: \&quot;/infra\&quot;,    \&quot;unique_id\&quot;: \&quot;e19cbc40-c679-4f32-9e40-aa5eedf7f254\&quot;,    \&quot;marked_for_delete\&quot;: false,    \&quot;overridden\&quot;: false,    \&quot;trusted_ca_bundles\&quot;: [        \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;    ],    \&quot;crls\&quot;: [        \&quot;/infra/crls/nsx_default_public_crl\&quot;    ],    \&quot;idle_connection_timeout\&quot;: 5400,    \&quot;_system_owned\&quot;: false,    \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,    \&quot;_create_user\&quot;: \&quot;admin\&quot;,    \&quot;_create_time\&quot;: 1622141786963,    \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,    \&quot;_last_modified_time\&quot;: 1622225387352,    \&quot;_revision\&quot;: 4 } &lt;/pre&gt;  4 - Internal Profile Balanced Sample intent path:/infra/tls-inspection-action-profiles/internal-balanced-profile Sample intent path: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;BALANCED\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;server_certs_key\&quot;: [\&quot;/infra/certificates/server-cert-1\&quot;],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot; } &lt;/pre&gt; Profile with default settings: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;BALANCED\&quot;,     \&quot;decryption_fail_action\&quot;: \&quot;BYPASS\&quot;,     \&quot;crypto_enforcement\&quot;: \&quot;ENFORCE\&quot;,     \&quot;client_min_tls_version\&quot;: \&quot;TLS_V1_1\&quot;,     \&quot;client_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;server_min_tls_version\&quot;: \&quot;TLS_V1_1\&quot;,     \&quot;server_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;client_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_256_CBC_SHA256\&quot;     ],     \&quot;server_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_128_CBC_SHA256\&quot;,         \&quot;TLS_RSA_WITH_AES_256_GCM_SHA384\&quot;,         \&quot;TLS_RSA_WITH_AES_256_CBC_SHA256\&quot;     ],     \&quot;server_certs_key\&quot;: [         \&quot;/infra/certificates/server-cert-1\&quot;     ],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot;,     \&quot;ocsp_must_staple\&quot;: false,     \&quot;certificate_validation\&quot;: false,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;id\&quot;: \&quot;internal-balanced-profile\&quot;,     \&quot;display_name\&quot;: \&quot;internal-balanced-profile\&quot;,     \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/internal-balanced-profile\&quot;,     \&quot;relative_path\&quot;: \&quot;internal-balanced-profile\&quot;,     \&quot;parent_path\&quot;: \&quot;/infra\&quot;,     \&quot;unique_id\&quot;: \&quot;b8486763-843a-4894-8dfd-5bceebb10cd3\&quot;,     \&quot;marked_for_delete\&quot;: false,     \&quot;overridden\&quot;: false,     \&quot;trusted_ca_bundles\&quot;: [         \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;     ],     \&quot;crls\&quot;: [         \&quot;/infra/crls/nsx_default_public_crl\&quot;     ],     \&quot;idle_connection_timeout\&quot;: 5400,     \&quot;_system_owned\&quot;: false,     \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,     \&quot;_create_user\&quot;: \&quot;admin\&quot;,     \&quot;_create_time\&quot;: 1622071598527,     \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,     \&quot;_last_modified_time\&quot;: 1622071598527,     \&quot;_revision\&quot;: 0 } &lt;/pre&gt;  5 - Internal Profile High Fidelity Sample intent path:/infra/tls-inspection-action-profiles/internal-high-fidelity-profile Sample intent path: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_FIDELITY\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;server_certs_key\&quot;: [\&quot;/infra/certificates/server-cert-1\&quot;],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot; } &lt;/pre&gt; Profile with default settings: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_FIDELITY\&quot;,     \&quot;decryption_fail_action\&quot;: \&quot;BYPASS\&quot;,     \&quot;crypto_enforcement\&quot;: \&quot;TRANSPARENT\&quot;,     \&quot;client_min_tls_version\&quot;: \&quot;\&quot;,     \&quot;client_max_tls_version\&quot;: \&quot;\&quot;,     \&quot;server_min_tls_version\&quot;: \&quot;\&quot;,     \&quot;server_max_tls_version\&quot;: \&quot;\&quot;,     \&quot;client_cipher_suite\&quot;: [],     \&quot;server_cipher_suite\&quot;: [],     \&quot;server_certs_key\&quot;: [         \&quot;/infra/certificates/server-cert-1\&quot;     ],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot;,     \&quot;ocsp_must_staple\&quot;: false,     \&quot;certificate_validation\&quot;: false,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;id\&quot;: \&quot;internal-high-fidelity-profile\&quot;,     \&quot;display_name\&quot;: \&quot;internal-high-fidelity-profile\&quot;,     \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/internal-high-fidelity-profile\&quot;,     \&quot;relative_path\&quot;: \&quot;internal-high-fidelity-profile\&quot;,     \&quot;parent_path\&quot;: \&quot;/infra\&quot;,     \&quot;unique_id\&quot;: \&quot;27609d17-e642-4a7a-b414-176b3f7eca8d\&quot;,     \&quot;marked_for_delete\&quot;: false,     \&quot;overridden\&quot;: false,     \&quot;trusted_ca_bundles\&quot;: [         \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;     ],     \&quot;crls\&quot;: [         \&quot;/infra/crls/nsx_default_public_crl\&quot;     ],     \&quot;idle_connection_timeout\&quot;: 5400,     \&quot;_system_owned\&quot;: false,     \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,     \&quot;_create_user\&quot;: \&quot;admin\&quot;,     \&quot;_create_time\&quot;: 1622071452299,     \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,     \&quot;_last_modified_time\&quot;: 1622071452299,     \&quot;_revision\&quot;: 0 } &lt;/pre&gt;  6 - Internal Profile High Security Sample intent path:/infra/tls-inspection-action-profiles/internal-high-security-profile Sample intent path: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_SECURITY\&quot;,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;server_certs_key\&quot;: [\&quot;/infra/certificates/server-cert-1\&quot;],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot; } &lt;/pre&gt;  Profile with default settings: &lt;pre&gt; {     \&quot;tls_config_setting\&quot;: \&quot;HIGH_SECURITY\&quot;,     \&quot;decryption_fail_action\&quot;: \&quot;BLOCK\&quot;,     \&quot;crypto_enforcement\&quot;: \&quot;ENFORCE\&quot;,     \&quot;client_min_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;client_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;server_min_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;server_max_tls_version\&quot;: \&quot;TLS_V1_2\&quot;,     \&quot;client_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;     ],     \&quot;server_cipher_suite\&quot;: [         \&quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\&quot;,         \&quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\&quot;     ],     \&quot;server_certs_key\&quot;: [         \&quot;/infra/certificates/server-cert-1\&quot;     ],     \&quot;default_cert_key\&quot;: \&quot;/infra/certificates/server-cert-1\&quot;,     \&quot;ocsp_must_staple\&quot;: false,     \&quot;certificate_validation\&quot;: false,     \&quot;resource_type\&quot;: \&quot;TlsInspectionInternalProfile\&quot;,     \&quot;id\&quot;: \&quot;internal-high-security-profile\&quot;,     \&quot;display_name\&quot;: \&quot;internal-high-security-profile\&quot;,     \&quot;path\&quot;: \&quot;/infra/tls-inspection-action-profiles/internal-high-security-profile\&quot;,     \&quot;relative_path\&quot;: \&quot;internal-high-security-profile\&quot;,     \&quot;parent_path\&quot;: \&quot;/infra\&quot;,     \&quot;unique_id\&quot;: \&quot;52e3e7e8-718d-4eaf-a177-501f196c421a\&quot;,     \&quot;marked_for_delete\&quot;: false,     \&quot;overridden\&quot;: false,     \&quot;trusted_ca_bundles\&quot;: [         \&quot;/infra/cabundles/default_trusted_public_ca_bundle\&quot;     ],     \&quot;crls\&quot;: [         \&quot;/infra/crls/nsx_default_public_crl\&quot;     ],     \&quot;idle_connection_timeout\&quot;: 5400,     \&quot;_system_owned\&quot;: false,     \&quot;_protection\&quot;: \&quot;NOT_PROTECTED\&quot;,     \&quot;_create_user\&quot;: \&quot;admin\&quot;,     \&quot;_create_time\&quot;: 1622071359539,     \&quot;_last_modified_user\&quot;: \&quot;admin\&quot;,     \&quot;_last_modified_time\&quot;: 1622071359539,     \&quot;_revision\&quot;: 0 } &lt;/pre&gt; 
    # @param action_profile_id 
    # @param tls_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsProfile, Fixnum, Hash)>] TlsProfile data, response status code and response headers
    def patch_tls_profile_with_http_info(action_profile_id, tls_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.patch_tls_profile ...'
      end
      # verify the required parameter 'action_profile_id' is set
      if @api_client.config.client_side_validation && action_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'action_profile_id' when calling NorthSouthSecurityApi.patch_tls_profile"
      end
      # verify the required parameter 'tls_profile' is set
      if @api_client.config.client_side_validation && tls_profile.nil?
        fail ArgumentError, "Missing the required parameter 'tls_profile' when calling NorthSouthSecurityApi.patch_tls_profile"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-action-profiles/{action-profile-id}'.sub('{' + 'action-profile-id' + '}', action_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#patch_tls_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update TLS rule
    # Update the TLS rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a TLS policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/tls-inspection-policies/&lt;policy-id&gt; 
    # @param policy_id 
    # @param rule_id 
    # @param tls_rule 
    # @param [Hash] opts the optional parameters
    # @return [TlsRule]
    def patch_tls_rule(policy_id, rule_id, tls_rule, opts = {})
      data, _status_code, _headers = patch_tls_rule_with_http_info(policy_id, rule_id, tls_rule, opts)
      data
    end

    # Update TLS rule
    # Update the TLS rule. Create new rule if a rule with the rule-id is not already present. Performance Note: If you want to edit several rules in a TLS policy, prefer below mentioned API for optimal performance. Pass all the rules which you wish to edit as embedded rules to it. Use this API - PATCH (or PUT) /infra/tls-inspection-policies/&amp;lt;policy-id&amp;gt; 
    # @param policy_id 
    # @param rule_id 
    # @param tls_rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsRule, Fixnum, Hash)>] TlsRule data, response status code and response headers
    def patch_tls_rule_with_http_info(policy_id, rule_id, tls_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.patch_tls_rule ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling NorthSouthSecurityApi.patch_tls_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling NorthSouthSecurityApi.patch_tls_rule"
      end
      # verify the required parameter 'tls_rule' is set
      if @api_client.config.client_side_validation && tls_rule.nil?
        fail ArgumentError, "Missing the required parameter 'tls_rule' when calling NorthSouthSecurityApi.patch_tls_rule"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tls_rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#patch_tls_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update FqdnAnalysisConfig
    # Creates/Updates FqdnAnalysisConfig Object for the given edge cluster. If FqdnAnalysisConfig object is not already present, creates it. If it already exists, replace with this object. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param fqdn_analysis_config 
    # @param [Hash] opts the optional parameters
    # @return [FqdnAnalysisConfig]
    def put_fqdn_analysis_config(site_id, enforcement_point_id, edge_cluster_id, fqdn_analysis_config, opts = {})
      data, _status_code, _headers = put_fqdn_analysis_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, fqdn_analysis_config, opts)
      data
    end

    # Create or Update FqdnAnalysisConfig
    # Creates/Updates FqdnAnalysisConfig Object for the given edge cluster. If FqdnAnalysisConfig object is not already present, creates it. If it already exists, replace with this object. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param fqdn_analysis_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FqdnAnalysisConfig, Fixnum, Hash)>] FqdnAnalysisConfig data, response status code and response headers
    def put_fqdn_analysis_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, fqdn_analysis_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.put_fqdn_analysis_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NorthSouthSecurityApi.put_fqdn_analysis_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling NorthSouthSecurityApi.put_fqdn_analysis_config"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling NorthSouthSecurityApi.put_fqdn_analysis_config"
      end
      # verify the required parameter 'fqdn_analysis_config' is set
      if @api_client.config.client_side_validation && fqdn_analysis_config.nil?
        fail ArgumentError, "Missing the required parameter 'fqdn_analysis_config' when calling NorthSouthSecurityApi.put_fqdn_analysis_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/fqdn-analysis-config'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(fqdn_analysis_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FqdnAnalysisConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#put_fqdn_analysis_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update PolicyUrlCategorizationConfig
    # Creates/Updates a PolicyUrlCategorizationConfig. Creating or updating the PolicyUrlCategorizationConfig will activate or deactivate URL categorization for the given edge cluster. If the context_profiles field is empty, the edge cluster will detect all the categories of URLs. If context_profiles field has any context profiles, the edge cluster will detect only the categories listed within those context profiles. The context profiles should have attribute type URL_CATEGORY. The update_frequency specifies how frequently in minutes, the edge cluster will get updates about the URL data from the URL categorization cloud service. If the update_frequency is not specified, the default update frequency will be 30 min. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param policy_url_categorization_config 
    # @param [Hash] opts the optional parameters
    # @return [PolicyUrlCategorizationConfig]
    def put_policy_url_categorization_config(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts = {})
      data, _status_code, _headers = put_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts)
      data
    end

    # Create or Update PolicyUrlCategorizationConfig
    # Creates/Updates a PolicyUrlCategorizationConfig. Creating or updating the PolicyUrlCategorizationConfig will activate or deactivate URL categorization for the given edge cluster. If the context_profiles field is empty, the edge cluster will detect all the categories of URLs. If context_profiles field has any context profiles, the edge cluster will detect only the categories listed within those context profiles. The context profiles should have attribute type URL_CATEGORY. The update_frequency specifies how frequently in minutes, the edge cluster will get updates about the URL data from the URL categorization cloud service. If the update_frequency is not specified, the default update frequency will be 30 min. 
    # @param site_id 
    # @param enforcement_point_id 
    # @param edge_cluster_id 
    # @param url_categorization_config_id 
    # @param policy_url_categorization_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyUrlCategorizationConfig, Fixnum, Hash)>] PolicyUrlCategorizationConfig data, response status code and response headers
    def put_policy_url_categorization_config_with_http_info(site_id, enforcement_point_id, edge_cluster_id, url_categorization_config_id, policy_url_categorization_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.put_policy_url_categorization_config ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling NorthSouthSecurityApi.put_policy_url_categorization_config"
      end
      # verify the required parameter 'enforcement_point_id' is set
      if @api_client.config.client_side_validation && enforcement_point_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_id' when calling NorthSouthSecurityApi.put_policy_url_categorization_config"
      end
      # verify the required parameter 'edge_cluster_id' is set
      if @api_client.config.client_side_validation && edge_cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_cluster_id' when calling NorthSouthSecurityApi.put_policy_url_categorization_config"
      end
      # verify the required parameter 'url_categorization_config_id' is set
      if @api_client.config.client_side_validation && url_categorization_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'url_categorization_config_id' when calling NorthSouthSecurityApi.put_policy_url_categorization_config"
      end
      # verify the required parameter 'policy_url_categorization_config' is set
      if @api_client.config.client_side_validation && policy_url_categorization_config.nil?
        fail ArgumentError, "Missing the required parameter 'policy_url_categorization_config' when calling NorthSouthSecurityApi.put_policy_url_categorization_config"
      end
      # resource path
      local_var_path = '/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}'.sub('{' + 'site-id' + '}', site_id.to_s).sub('{' + 'enforcement-point-id' + '}', enforcement_point_id.to_s).sub('{' + 'edge-cluster-id' + '}', edge_cluster_id.to_s).sub('{' + 'url-categorization-config-id' + '}', url_categorization_config_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_url_categorization_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyUrlCategorizationConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#put_policy_url_categorization_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read gateway policy
    # Read gateway policy for a domain. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicy]
    def read_gateway_policy_for_domain(domain_id, gateway_policy_id, opts = {})
      data, _status_code, _headers = read_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, opts)
      data
    end

    # Read gateway policy
    # Read gateway policy for a domain. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def read_gateway_policy_for_domain_with_http_info(domain_id, gateway_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.read_gateway_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.read_gateway_policy_for_domain"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.read_gateway_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#read_gateway_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def read_gateway_rule(domain_id, gateway_policy_id, rule_id, opts = {})
      data, _status_code, _headers = read_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def read_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.read_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.read_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.read_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling NorthSouthSecurityApi.read_gateway_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#read_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security configuration for Segment
    # Read security configuration for Segment. 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of Segment supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentSecurityFeatures]
    def read_infra_segment_security_feature(segment_id, opts = {})
      data, _status_code, _headers = read_infra_segment_security_feature_with_http_info(segment_id, opts)
      data
    end

    # Read security configuration for Segment
    # Read security configuration for Segment. 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of Segment supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def read_infra_segment_security_feature_with_http_info(segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.read_infra_segment_security_feature ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling NorthSouthSecurityApi.read_infra_segment_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['BRIDGE_FIREWALL'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of BRIDGE_FIREWALL'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.read_infra_segment_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.read_infra_segment_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/segments/{segment-id}/security-config'.sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#read_infra_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Security Feature
    # Read Security Feature. 
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityFeatures]
    def read_security_feature(tier_1_id, opts = {})
      data, _status_code, _headers = read_security_feature_with_http_info(tier_1_id, opts)
      data
    end

    # Read Security Feature
    # Read Security Feature. 
    # @param tier_1_id tier1 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T1 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityFeatures, Fixnum, Hash)>] SecurityFeatures data, response status code and response headers
    def read_security_feature_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.read_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NorthSouthSecurityApi.read_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['MALWAREPREVENTION', 'IDFW', 'IDPS', 'TLS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of MALWAREPREVENTION, IDFW, IDPS, TLS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.read_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.read_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#read_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read Security Feature
    # Read Security Feature. 
    # @param tier_0_id tier0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Tier0SecurityFeatures]
    def read_tier0_security_feature(tier_0_id, opts = {})
      data, _status_code, _headers = read_tier0_security_feature_with_http_info(tier_0_id, opts)
      data
    end

    # Read Security Feature
    # Read Security Feature. 
    # @param tier_0_id tier0 id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of T0 supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(Tier0SecurityFeatures, Fixnum, Hash)>] Tier0SecurityFeatures data, response status code and response headers
    def read_tier0_security_feature_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.read_tier0_security_feature ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NorthSouthSecurityApi.read_tier0_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['IDFW', 'IDPS', 'GEOIP_MONITORING'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of IDFW, IDPS, GEOIP_MONITORING'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.read_tier0_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.read_tier0_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/security-config'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tier0SecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#read_tier0_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security configuration for Segment
    # Read security configuration for Segment. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of Segment supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SegmentSecurityFeatures]
    def read_tier1_segment_security_feature(tier_1_id, segment_id, opts = {})
      data, _status_code, _headers = read_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, opts)
      data
    end

    # Read security configuration for Segment
    # Read security configuration for Segment. 
    # @param tier_1_id 
    # @param segment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :feature Collection of Segment supported security features
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SegmentSecurityFeatures, Fixnum, Hash)>] SegmentSecurityFeatures data, response status code and response headers
    def read_tier1_segment_security_feature_with_http_info(tier_1_id, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.read_tier1_segment_security_feature ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NorthSouthSecurityApi.read_tier1_segment_security_feature"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling NorthSouthSecurityApi.read_tier1_segment_security_feature"
      end
      if @api_client.config.client_side_validation && opts[:'feature'] && !['BRIDGE_FIREWALL'].include?(opts[:'feature'])
        fail ArgumentError, 'invalid value for "feature", must be one of BRIDGE_FIREWALL'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.read_tier1_segment_security_feature, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NorthSouthSecurityApi.read_tier1_segment_security_feature, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/segments/{segment-id}/security-config'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'segment-id' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'feature'] = opts[:'feature'] if !opts[:'feature'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentSecurityFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#read_tier1_segment_security_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read tls policy
    # Read TLS policy. 
    # @param policy_id Firewall TLS inspection poicy id
    # @param [Hash] opts the optional parameters
    # @return [TlsPolicy]
    def read_tls_policy(policy_id, opts = {})
      data, _status_code, _headers = read_tls_policy_with_http_info(policy_id, opts)
      data
    end

    # Read tls policy
    # Read TLS policy. 
    # @param policy_id Firewall TLS inspection poicy id
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsPolicy, Fixnum, Hash)>] TlsPolicy data, response status code and response headers
    def read_tls_policy_with_http_info(policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.read_tls_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling NorthSouthSecurityApi.read_tls_policy"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#read_tls_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [TlsRule]
    def read_tls_rule(policy_id, rule_id, opts = {})
      data, _status_code, _headers = read_tls_rule_with_http_info(policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TlsRule, Fixnum, Hash)>] TlsRule data, response status code and response headers
    def read_tls_rule_with_http_info(policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.read_tls_rule ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling NorthSouthSecurityApi.read_tls_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling NorthSouthSecurityApi.read_tls_rule"
      end
      # resource path
      local_var_path = '/infra/tls-inspection-policies/{policy-id}/rules/{rule-id}'.sub('{' + 'policy-id' + '}', policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TlsRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#read_tls_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of gateway policy
    # This is used to set a precedence of a gateway policy w.r.t others. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [GatewayPolicy]
    def revise_gateway_policy(domain_id, gateway_policy_id, gateway_policy, opts = {})
      data, _status_code, _headers = revise_gateway_policy_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts)
      data
    end

    # Revise the positioning of gateway policy
    # This is used to set a precedence of a gateway policy w.r.t others. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param gateway_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(GatewayPolicy, Fixnum, Hash)>] GatewayPolicy data, response status code and response headers
    def revise_gateway_policy_with_http_info(domain_id, gateway_policy_id, gateway_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.revise_gateway_policy ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.revise_gateway_policy"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.revise_gateway_policy"
      end
      # verify the required parameter 'gateway_policy' is set
      if @api_client.config.client_side_validation && gateway_policy.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy' when calling NorthSouthSecurityApi.revise_gateway_policy"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(gateway_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#revise_gateway_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of gateway rule
    # This is used to re-order a gateway rule within a gateway policy. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [Rule]
    def revise_gateway_rule(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = revise_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of gateway rule
    # This is used to re-order a gateway rule within a gateway policy. 
    # @param domain_id 
    # @param gateway_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def revise_gateway_rule_with_http_info(domain_id, gateway_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.revise_gateway_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling NorthSouthSecurityApi.revise_gateway_rule"
      end
      # verify the required parameter 'gateway_policy_id' is set
      if @api_client.config.client_side_validation && gateway_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_policy_id' when calling NorthSouthSecurityApi.revise_gateway_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling NorthSouthSecurityApi.revise_gateway_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling NorthSouthSecurityApi.revise_gateway_rule"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/gateway-policies/{gateway-policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'gateway-policy-id' + '}', gateway_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#revise_gateway_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Geo IP Setting Configuration
    # This API can be used to activate or deactivate auto-download of Geo IP Bundle. Once auto-download is activated, Geo IP Bundle will be downloaded at regular intervals of 720 minutes (12 hrs). 
    # @param geo_ip_setting 
    # @param [Hash] opts the optional parameters
    # @return [GeoIpSetting]
    def update_geo_ip_setting(geo_ip_setting, opts = {})
      data, _status_code, _headers = update_geo_ip_setting_with_http_info(geo_ip_setting, opts)
      data
    end

    # Update Geo IP Setting Configuration
    # This API can be used to activate or deactivate auto-download of Geo IP Bundle. Once auto-download is activated, Geo IP Bundle will be downloaded at regular intervals of 720 minutes (12 hrs). 
    # @param geo_ip_setting 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeoIpSetting, Fixnum, Hash)>] GeoIpSetting data, response status code and response headers
    def update_geo_ip_setting_with_http_info(geo_ip_setting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.update_geo_ip_setting ...'
      end
      # verify the required parameter 'geo_ip_setting' is set
      if @api_client.config.client_side_validation && geo_ip_setting.nil?
        fail ArgumentError, "Missing the required parameter 'geo_ip_setting' when calling NorthSouthSecurityApi.update_geo_ip_setting"
      end
      # resource path
      local_var_path = '/infra/geo-ip/setting'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(geo_ip_setting)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeoIpSetting')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#update_geo_ip_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-0 logical router. 
    # Get filtered view of gateway rules associated with the Tier-0. The gateay policies are returned in the order of category and precedence. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def view_tier0_gateway_firewall(tier_0_id, opts = {})
      data, _status_code, _headers = view_tier0_gateway_firewall_with_http_info(tier_0_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-0 logical router. 
    # Get filtered view of gateway rules associated with the Tier-0. The gateay policies are returned in the order of category and precedence. 
    # @param tier_0_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def view_tier0_gateway_firewall_with_http_info(tier_0_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.view_tier0_gateway_firewall ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NorthSouthSecurityApi.view_tier0_gateway_firewall"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/gateway-firewall'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#view_tier0_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-0 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-0 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_0_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def view_tier0_locale_services_gateway_firewall(tier_0_id, locale_services_id, opts = {})
      data, _status_code, _headers = view_tier0_locale_services_gateway_firewall_with_http_info(tier_0_id, locale_services_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-0 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-0 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_0_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def view_tier0_locale_services_gateway_firewall_with_http_info(tier_0_id, locale_services_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.view_tier0_locale_services_gateway_firewall ...'
      end
      # verify the required parameter 'tier_0_id' is set
      if @api_client.config.client_side_validation && tier_0_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_0_id' when calling NorthSouthSecurityApi.view_tier0_locale_services_gateway_firewall"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling NorthSouthSecurityApi.view_tier0_locale_services_gateway_firewall"
      end
      # resource path
      local_var_path = '/infra/tier-0s/{tier-0-id}/locale-services/{locale-services-id}/gateway-firewall'.sub('{' + 'tier-0-id' + '}', tier_0_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#view_tier0_locale_services_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-1. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def view_tier1_gateway_firewall(tier_1_id, opts = {})
      data, _status_code, _headers = view_tier1_gateway_firewall_with_http_info(tier_1_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-1. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def view_tier1_gateway_firewall_with_http_info(tier_1_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.view_tier1_gateway_firewall ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NorthSouthSecurityApi.view_tier1_gateway_firewall"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/gateway-firewall'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#view_tier1_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of gateway policies with rules that belong to the specific Tier-1 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [GatewayPolicyListResult]
    def view_tier1_locale_services_gateway_firewall(tier_1_id, locale_services_id, opts = {})
      data, _status_code, _headers = view_tier1_locale_services_gateway_firewall_with_http_info(tier_1_id, locale_services_id, opts)
      data
    end

    # Get list of gateway policies with rules that belong to the specific Tier-1 LocalServices. 
    # Get filtered view of Gateway Firewall rules associated with the Tier-1 Locale Services. The gateway policies are returned in the order of category and sequence number. 
    # @param tier_1_id 
    # @param locale_services_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayPolicyListResult, Fixnum, Hash)>] GatewayPolicyListResult data, response status code and response headers
    def view_tier1_locale_services_gateway_firewall_with_http_info(tier_1_id, locale_services_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NorthSouthSecurityApi.view_tier1_locale_services_gateway_firewall ...'
      end
      # verify the required parameter 'tier_1_id' is set
      if @api_client.config.client_side_validation && tier_1_id.nil?
        fail ArgumentError, "Missing the required parameter 'tier_1_id' when calling NorthSouthSecurityApi.view_tier1_locale_services_gateway_firewall"
      end
      # verify the required parameter 'locale_services_id' is set
      if @api_client.config.client_side_validation && locale_services_id.nil?
        fail ArgumentError, "Missing the required parameter 'locale_services_id' when calling NorthSouthSecurityApi.view_tier1_locale_services_gateway_firewall"
      end
      # resource path
      local_var_path = '/infra/tier-1s/{tier-1-id}/locale-services/{locale-services-id}/gateway-firewall'.sub('{' + 'tier-1-id' + '}', tier_1_id.to_s).sub('{' + 'locale-services-id' + '}', locale_services_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NorthSouthSecurityApi#view_tier1_locale_services_gateway_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
