=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class IntrusionServicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get IDS custom signature settings
    # IDS custom signatures settings. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignatureSettings]
    def get_ids_custom_signature_settings(version_id, opts = {})
      data, _status_code, _headers = get_ids_custom_signature_settings_with_http_info(version_id, opts)
      data
    end

    # Get IDS custom signature settings
    # IDS custom signatures settings. 
    # @param version_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignatureSettings, Fixnum, Hash)>] IdsCustomSignatureSettings data, response status code and response headers
    def get_ids_custom_signature_settings_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntrusionServicesApi.get_ids_custom_signature_settings ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IntrusionServicesApi.get_ids_custom_signature_settings"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/settings'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntrusionServicesApi#get_ids_custom_signature_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IDS system settings
    # Intrusion detection system settings. 
    # @param [Hash] opts the optional parameters
    # @return [IdsSettings]
    def get_ids_settings(opts = {})
      data, _status_code, _headers = get_ids_settings_with_http_info(opts)
      data
    end

    # Get IDS system settings
    # Intrusion detection system settings. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSettings, Fixnum, Hash)>] IdsSettings data, response status code and response headers
    def get_ids_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntrusionServicesApi.get_ids_settings ...'
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntrusionServicesApi#get_ids_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch IDS custom signature settings
    # Patch IDS custom signature settings. 
    # @param version_id 
    # @param ids_custom_signature_settings 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_custom_signature_settings(version_id, ids_custom_signature_settings, opts = {})
      patch_ids_custom_signature_settings_with_http_info(version_id, ids_custom_signature_settings, opts)
      nil
    end

    # Patch IDS custom signature settings
    # Patch IDS custom signature settings. 
    # @param version_id 
    # @param ids_custom_signature_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_custom_signature_settings_with_http_info(version_id, ids_custom_signature_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntrusionServicesApi.patch_ids_custom_signature_settings ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IntrusionServicesApi.patch_ids_custom_signature_settings"
      end
      # verify the required parameter 'ids_custom_signature_settings' is set
      if @api_client.config.client_side_validation && ids_custom_signature_settings.nil?
        fail ArgumentError, "Missing the required parameter 'ids_custom_signature_settings' when calling IntrusionServicesApi.patch_ids_custom_signature_settings"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/settings'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_custom_signature_settings)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntrusionServicesApi#patch_ids_custom_signature_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch Intrusion detection system settings
    # Intrusion detection system settings. 
    # @param ids_settings 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_ids_settings(ids_settings, opts = {})
      patch_ids_settings_with_http_info(ids_settings, opts)
      nil
    end

    # Patch Intrusion detection system settings
    # Intrusion detection system settings. 
    # @param ids_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ids_settings_with_http_info(ids_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntrusionServicesApi.patch_ids_settings ...'
      end
      # verify the required parameter 'ids_settings' is set
      if @api_client.config.client_side_validation && ids_settings.nil?
        fail ArgumentError, "Missing the required parameter 'ids_settings' when calling IntrusionServicesApi.patch_ids_settings"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_settings)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntrusionServicesApi#patch_ids_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update IDS custom signature settings
    # Update IDS custom signature settings. 
    # @param version_id 
    # @param ids_custom_signature_settings 
    # @param [Hash] opts the optional parameters
    # @return [IdsCustomSignatureSettings]
    def update_ids_custom_signature_settings(version_id, ids_custom_signature_settings, opts = {})
      data, _status_code, _headers = update_ids_custom_signature_settings_with_http_info(version_id, ids_custom_signature_settings, opts)
      data
    end

    # Update IDS custom signature settings
    # Update IDS custom signature settings. 
    # @param version_id 
    # @param ids_custom_signature_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsCustomSignatureSettings, Fixnum, Hash)>] IdsCustomSignatureSettings data, response status code and response headers
    def update_ids_custom_signature_settings_with_http_info(version_id, ids_custom_signature_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntrusionServicesApi.update_ids_custom_signature_settings ...'
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling IntrusionServicesApi.update_ids_custom_signature_settings"
      end
      # verify the required parameter 'ids_custom_signature_settings' is set
      if @api_client.config.client_side_validation && ids_custom_signature_settings.nil?
        fail ArgumentError, "Missing the required parameter 'ids_custom_signature_settings' when calling IntrusionServicesApi.update_ids_custom_signature_settings"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services/custom-signature-versions/{version-id}/settings'.sub('{' + 'version-id' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_custom_signature_settings)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsCustomSignatureSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntrusionServicesApi#update_ids_custom_signature_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Intrusion detection system settings
    # Intrusion detection system settings. 
    # @param ids_settings 
    # @param [Hash] opts the optional parameters
    # @return [IdsSettings]
    def update_ids_settings(ids_settings, opts = {})
      data, _status_code, _headers = update_ids_settings_with_http_info(ids_settings, opts)
      data
    end

    # Update Intrusion detection system settings
    # Intrusion detection system settings. 
    # @param ids_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdsSettings, Fixnum, Hash)>] IdsSettings data, response status code and response headers
    def update_ids_settings_with_http_info(ids_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntrusionServicesApi.update_ids_settings ...'
      end
      # verify the required parameter 'ids_settings' is set
      if @api_client.config.client_side_validation && ids_settings.nil?
        fail ArgumentError, "Missing the required parameter 'ids_settings' when calling IntrusionServicesApi.update_ids_settings"
      end
      # resource path
      local_var_path = '/infra/settings/firewall/security/intrusion-services'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ids_settings)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdsSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntrusionServicesApi#update_ids_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
