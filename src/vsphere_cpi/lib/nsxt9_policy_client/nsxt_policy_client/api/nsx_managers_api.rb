=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class NSXManagersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or update deployment information.
    # This is an API called by VCF to store or update deployment information. 
    # @param nsx_manager_deployment_info 
    # @param [Hash] opts the optional parameters
    # @return [NSXManagerDeploymentInfo]
    def create_deployment_info(nsx_manager_deployment_info, opts = {})
      data, _status_code, _headers = create_deployment_info_with_http_info(nsx_manager_deployment_info, opts)
      data
    end

    # Create or update deployment information.
    # This is an API called by VCF to store or update deployment information. 
    # @param nsx_manager_deployment_info 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NSXManagerDeploymentInfo, Fixnum, Hash)>] NSXManagerDeploymentInfo data, response status code and response headers
    def create_deployment_info_with_http_info(nsx_manager_deployment_info, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXManagersApi.create_deployment_info ...'
      end
      # verify the required parameter 'nsx_manager_deployment_info' is set
      if @api_client.config.client_side_validation && nsx_manager_deployment_info.nil?
        fail ArgumentError, "Missing the required parameter 'nsx_manager_deployment_info' when calling NSXManagersApi.create_deployment_info"
      end
      # resource path
      local_var_path = '/watermark'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(nsx_manager_deployment_info)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSXManagerDeploymentInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXManagersApi#create_deployment_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update deployment information.
    # This is an API called by VCF to update stored deployment information. 
    # @param nsx_manager_deployment_info 
    # @param [Hash] opts the optional parameters
    # @return [NSXManagerDeploymentInfo]
    def create_or_update_deployment_info(nsx_manager_deployment_info, opts = {})
      data, _status_code, _headers = create_or_update_deployment_info_with_http_info(nsx_manager_deployment_info, opts)
      data
    end

    # Create or update deployment information.
    # This is an API called by VCF to update stored deployment information. 
    # @param nsx_manager_deployment_info 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NSXManagerDeploymentInfo, Fixnum, Hash)>] NSXManagerDeploymentInfo data, response status code and response headers
    def create_or_update_deployment_info_with_http_info(nsx_manager_deployment_info, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXManagersApi.create_or_update_deployment_info ...'
      end
      # verify the required parameter 'nsx_manager_deployment_info' is set
      if @api_client.config.client_side_validation && nsx_manager_deployment_info.nil?
        fail ArgumentError, "Missing the required parameter 'nsx_manager_deployment_info' when calling NSXManagersApi.create_or_update_deployment_info"
      end
      # resource path
      local_var_path = '/watermark'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(nsx_manager_deployment_info)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSXManagerDeploymentInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXManagersApi#create_or_update_deployment_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete deployment information.
    # This is an API called by VCF to delete deployment information. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_deployment_info(opts = {})
      delete_deployment_info_with_http_info(opts)
      nil
    end

    # Delete deployment information.
    # This is an API called by VCF to delete deployment information. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_deployment_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXManagersApi.delete_deployment_info ...'
      end
      # resource path
      local_var_path = '/watermark'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXManagersApi#delete_deployment_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read API service properties
    # Read the configuration of the NSX API service. 
    # @param [Hash] opts the optional parameters
    # @return [ApiServiceConfig]
    def get_api_service_config(opts = {})
      data, _status_code, _headers = get_api_service_config_with_http_info(opts)
      data
    end

    # Read API service properties
    # Read the configuration of the NSX API service. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiServiceConfig, Fixnum, Hash)>] ApiServiceConfig data, response status code and response headers
    def get_api_service_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXManagersApi.get_api_service_config ...'
      end
      # resource path
      local_var_path = '/cluster/api-service'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiServiceConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXManagersApi#get_api_service_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get deployment information.
    # This is an API called by VCF to get deployment information. 
    # @param [Hash] opts the optional parameters
    # @return [NSXManagerDeploymentInfo]
    def get_deployment_info(opts = {})
      data, _status_code, _headers = get_deployment_info_with_http_info(opts)
      data
    end

    # Get deployment information.
    # This is an API called by VCF to get deployment information. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NSXManagerDeploymentInfo, Fixnum, Hash)>] NSXManagerDeploymentInfo data, response status code and response headers
    def get_deployment_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXManagersApi.get_deployment_info ...'
      end
      # resource path
      local_var_path = '/watermark'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NSXManagerDeploymentInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXManagersApi#get_deployment_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information about all tasks
    # Get information about all tasks
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [String] :request_uri Request URI(s) to include in query result
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :status Status(es) to include in query result
    # @option opts [String] :user Names of users to include in query result
    # @return [TaskListResult]
    def list_tasks(opts = {})
      data, _status_code, _headers = list_tasks_with_http_info(opts)
      data
    end

    # Get information about all tasks
    # Get information about all tasks
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [String] :request_uri Request URI(s) to include in query result
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :status Status(es) to include in query result
    # @option opts [String] :user Names of users to include in query result
    # @return [Array<(TaskListResult, Fixnum, Hash)>] TaskListResult data, response status code and response headers
    def list_tasks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXManagersApi.list_tasks ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NSXManagersApi.list_tasks, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling NSXManagersApi.list_tasks, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/tasks'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'request_uri'] = opts[:'request_uri'] if !opts[:'request_uri'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaskListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXManagersApi#list_tasks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read NSX Management nodes global configuration.
    # Returns the NSX Management nodes global configuration. 
    # @param [Hash] opts the optional parameters
    # @return [ManagementConfig]
    def read_management_config(opts = {})
      data, _status_code, _headers = read_management_config_with_http_info(opts)
      data
    end

    # Read NSX Management nodes global configuration.
    # Returns the NSX Management nodes global configuration. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManagementConfig, Fixnum, Hash)>] ManagementConfig data, response status code and response headers
    def read_management_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXManagersApi.read_management_config ...'
      end
      # resource path
      local_var_path = '/configs/management'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ManagementConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXManagersApi#read_management_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information about the specified task
    # Get information about the specified task
    # @param task_id ID of task to read
    # @param [Hash] opts the optional parameters
    # @return [TaskProperties]
    def read_task_properties(task_id, opts = {})
      data, _status_code, _headers = read_task_properties_with_http_info(task_id, opts)
      data
    end

    # Get information about the specified task
    # Get information about the specified task
    # @param task_id ID of task to read
    # @param [Hash] opts the optional parameters
    # @return [Array<(TaskProperties, Fixnum, Hash)>] TaskProperties data, response status code and response headers
    def read_task_properties_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXManagersApi.read_task_properties ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling NSXManagersApi.read_task_properties"
      end
      # resource path
      local_var_path = '/tasks/{task-id}'.sub('{' + 'task-id' + '}', task_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaskProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXManagersApi#read_task_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the response of a task
    # Get the response of a task
    # @param task_id ID of task to read
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def read_task_result(task_id, opts = {})
      data, _status_code, _headers = read_task_result_with_http_info(task_id, opts)
      data
    end

    # Get the response of a task
    # Get the response of a task
    # @param task_id ID of task to read
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def read_task_result_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXManagersApi.read_task_result ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling NSXManagersApi.read_task_result"
      end
      # resource path
      local_var_path = '/tasks/{task-id}/response'.sub('{' + 'task-id' + '}', task_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXManagersApi#read_task_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Register a Collection of API Calls at a Single End Point
    # Enables you to make multiple API requests using a single request. The batch API takes in an array of logical HTTP requests represented as JSON arrays. Each request has a method (GET, PUT, POST, or DELETE), a relative_url (the portion of the URL after https://&lt;nsx-mgr&gt;/api/), optional headers array (corresponding to HTTP headers) and an optional body (for POST and PUT requests). The batch API returns an array of logical HTTP responses represented as JSON arrays. Each response has a status code, an optional headers array and an optional body (which is a JSON-encoded string). The batch API is not supported for any of the policy multi-tenancy related APIs. The multi-tenancy APIs start with the path /orgs/<org-id>/projects/<project-id>/ This API is deprecated. Instead, use the hierarchical API in the NSX-T policy API.  <br> Support for batched operations will be removed from a future NSX release. For policy APIs, use the hierarchical API to submit a set of updates as a single operation. For other APIs, submit the operations as individual REST API calls.
    # @param batch_request 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :atomic Ignored (transactional atomicity flag) (default to false)
    # @return [BatchResponse]
    def register_batch_request(batch_request, opts = {})
      data, _status_code, _headers = register_batch_request_with_http_info(batch_request, opts)
      data
    end

    # Register a Collection of API Calls at a Single End Point
    # Enables you to make multiple API requests using a single request. The batch API takes in an array of logical HTTP requests represented as JSON arrays. Each request has a method (GET, PUT, POST, or DELETE), a relative_url (the portion of the URL after https://&amp;lt;nsx-mgr&amp;gt;/api/), optional headers array (corresponding to HTTP headers) and an optional body (for POST and PUT requests). The batch API returns an array of logical HTTP responses represented as JSON arrays. Each response has a status code, an optional headers array and an optional body (which is a JSON-encoded string). The batch API is not supported for any of the policy multi-tenancy related APIs. The multi-tenancy APIs start with the path /orgs/&lt;org-id&gt;/projects/&lt;project-id&gt;/ This API is deprecated. Instead, use the hierarchical API in the NSX-T policy API.  &lt;br&gt; Support for batched operations will be removed from a future NSX release. For policy APIs, use the hierarchical API to submit a set of updates as a single operation. For other APIs, submit the operations as individual REST API calls.
    # @param batch_request 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :atomic Ignored (transactional atomicity flag)
    # @return [Array<(BatchResponse, Fixnum, Hash)>] BatchResponse data, response status code and response headers
    def register_batch_request_with_http_info(batch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXManagersApi.register_batch_request ...'
      end
      # verify the required parameter 'batch_request' is set
      if @api_client.config.client_side_validation && batch_request.nil?
        fail ArgumentError, "Missing the required parameter 'batch_request' when calling NSXManagersApi.register_batch_request"
      end
      # resource path
      local_var_path = '/batch'

      # query parameters
      query_params = {}
      query_params[:'atomic'] = opts[:'atomic'] if !opts[:'atomic'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(batch_request)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXManagersApi#register_batch_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update API service properties
    # Update the configuration of the NSX API service. Changes are applied to all nodes in the cluster. The API service on each node will restart after it is updated using this API. There may be a delay of up to a minute or so between the time this API call completes and when the new configuration goes into effect.
    # @param api_service_config 
    # @param [Hash] opts the optional parameters
    # @return [ApiServiceConfig]
    def update_api_service_config(api_service_config, opts = {})
      data, _status_code, _headers = update_api_service_config_with_http_info(api_service_config, opts)
      data
    end

    # Update API service properties
    # Update the configuration of the NSX API service. Changes are applied to all nodes in the cluster. The API service on each node will restart after it is updated using this API. There may be a delay of up to a minute or so between the time this API call completes and when the new configuration goes into effect.
    # @param api_service_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiServiceConfig, Fixnum, Hash)>] ApiServiceConfig data, response status code and response headers
    def update_api_service_config_with_http_info(api_service_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXManagersApi.update_api_service_config ...'
      end
      # verify the required parameter 'api_service_config' is set
      if @api_client.config.client_side_validation && api_service_config.nil?
        fail ArgumentError, "Missing the required parameter 'api_service_config' when calling NSXManagersApi.update_api_service_config"
      end
      # resource path
      local_var_path = '/cluster/api-service'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(api_service_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiServiceConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXManagersApi#update_api_service_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update NSX Management nodes global configuration
    # Modifies the NSX Management nodes global configuration.
    # @param management_config 
    # @param [Hash] opts the optional parameters
    # @return [ManagementConfig]
    def update_management_config(management_config, opts = {})
      data, _status_code, _headers = update_management_config_with_http_info(management_config, opts)
      data
    end

    # Update NSX Management nodes global configuration
    # Modifies the NSX Management nodes global configuration.
    # @param management_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManagementConfig, Fixnum, Hash)>] ManagementConfig data, response status code and response headers
    def update_management_config_with_http_info(management_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NSXManagersApi.update_management_config ...'
      end
      # verify the required parameter 'management_config' is set
      if @api_client.config.client_side_validation && management_config.nil?
        fail ArgumentError, "Missing the required parameter 'management_config' when calling NSXManagersApi.update_management_config"
      end
      # resource path
      local_var_path = '/configs/management'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(management_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ManagementConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NSXManagersApi#update_management_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
