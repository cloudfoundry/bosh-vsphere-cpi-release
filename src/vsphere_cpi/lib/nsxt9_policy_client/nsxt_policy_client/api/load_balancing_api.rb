=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class LoadBalancingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete LBAppProfile and all the entities contained by this LBAppProfile
    # Delete the LBAppProfile along with all the entities contained by this LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_app_profile(lb_app_profile_id, opts = {})
      delete_lb_app_profile_with_http_info(lb_app_profile_id, opts)
      nil
    end

    # Delete LBAppProfile and all the entities contained by this LBAppProfile
    # Delete the LBAppProfile along with all the entities contained by this LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_app_profile_with_http_info(lb_app_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.delete_lb_app_profile ...'
      end
      # verify the required parameter 'lb_app_profile_id' is set
      if @api_client.config.client_side_validation && lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile_id' when calling LoadBalancingApi.delete_lb_app_profile"
      end
      # resource path
      local_var_path = '/infra/lb-app-profiles/{lb-app-profile-id}'.sub('{' + 'lb-app-profile-id' + '}', lb_app_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#delete_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBClientSslProfile and all the entities contained by this LBClientSslProfile 
    # Delete the LBClientSslProfile along with all the entities contained by this LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_client_ssl_profile(lb_client_ssl_profile_id, opts = {})
      delete_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, opts)
      nil
    end

    # Delete LBClientSslProfile and all the entities contained by this LBClientSslProfile 
    # Delete the LBClientSslProfile along with all the entities contained by this LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.delete_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile_id' when calling LoadBalancingApi.delete_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-client-ssl-profiles/{lb-client-ssl-profile-id}'.sub('{' + 'lb-client-ssl-profile-id' + '}', lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#delete_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBMonitorProfile and all the entities contained by this LBMonitorProfile
    # Delete the LBMonitorProfile along with all the entities contained by this LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_monitor_profile(lb_monitor_profile_id, opts = {})
      delete_lb_monitor_profile_with_http_info(lb_monitor_profile_id, opts)
      nil
    end

    # Delete LBMonitorProfile and all the entities contained by this LBMonitorProfile
    # Delete the LBMonitorProfile along with all the entities contained by this LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_monitor_profile_with_http_info(lb_monitor_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.delete_lb_monitor_profile ...'
      end
      # verify the required parameter 'lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile_id' when calling LoadBalancingApi.delete_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/infra/lb-monitor-profiles/{lb-monitor-profile-id}'.sub('{' + 'lb-monitor-profile-id' + '}', lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#delete_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBPersistenceProfile and all the entities contained by this LBPersistenceProfile
    # Delete the LBPersistenceProfile along with all the entities contained by this LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_persistence_profile(lb_persistence_profile_id, opts = {})
      delete_lb_persistence_profile_with_http_info(lb_persistence_profile_id, opts)
      nil
    end

    # Delete LBPersistenceProfile and all the entities contained by this LBPersistenceProfile
    # Delete the LBPersistenceProfile along with all the entities contained by this LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_persistence_profile_with_http_info(lb_persistence_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.delete_lb_persistence_profile ...'
      end
      # verify the required parameter 'lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile_id' when calling LoadBalancingApi.delete_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/infra/lb-persistence-profiles/{lb-persistence-profile-id}'.sub('{' + 'lb-persistence-profile-id' + '}', lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#delete_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBPool and all the entities contained by this LBPool
    # Delete the LBPool along with all the entities contained by this LBPool.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_pool_id LBPool ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_pool(lb_pool_id, opts = {})
      delete_lb_pool_with_http_info(lb_pool_id, opts)
      nil
    end

    # Delete LBPool and all the entities contained by this LBPool
    # Delete the LBPool along with all the entities contained by this LBPool.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_pool_id LBPool ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_pool_with_http_info(lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.delete_lb_pool ...'
      end
      # verify the required parameter 'lb_pool_id' is set
      if @api_client.config.client_side_validation && lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool_id' when calling LoadBalancingApi.delete_lb_pool"
      end
      # resource path
      local_var_path = '/infra/lb-pools/{lb-pool-id}'.sub('{' + 'lb-pool-id' + '}', lb_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#delete_lb_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBServerSslProfile and all the entities contained by this LBServerSslProfile 
    # Delete the LBServerSslProfile along with all the entities contained by this LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_server_ssl_profile(lb_server_ssl_profile_id, opts = {})
      delete_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, opts)
      nil
    end

    # Delete LBServerSslProfile and all the entities contained by this LBServerSslProfile 
    # Delete the LBServerSslProfile along with all the entities contained by this LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.delete_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile_id' when calling LoadBalancingApi.delete_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-server-ssl-profiles/{lb-server-ssl-profile-id}'.sub('{' + 'lb-server-ssl-profile-id' + '}', lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#delete_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBService and all the entities contained by this LBService
    # Delete the LBService along with all the entities contained by this LBService.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_service(lb_service_id, opts = {})
      delete_lb_service_with_http_info(lb_service_id, opts)
      nil
    end

    # Delete LBService and all the entities contained by this LBService
    # Delete the LBService along with all the entities contained by this LBService.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_service_with_http_info(lb_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.delete_lb_service ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling LoadBalancingApi.delete_lb_service"
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#delete_lb_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBVirtualServer and all the entities contained by this LBVirtualServer.
    # Delete the LBVirtualServer along with all the entities contained by this LBVirtualServer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_virtual_server_id LBVirtualServer ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_lb_virtual_server(lb_virtual_server_id, opts = {})
      delete_lb_virtual_server_with_http_info(lb_virtual_server_id, opts)
      nil
    end

    # Delete LBVirtualServer and all the entities contained by this LBVirtualServer.
    # Delete the LBVirtualServer along with all the entities contained by this LBVirtualServer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_virtual_server_id LBVirtualServer ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_lb_virtual_server_with_http_info(lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.delete_lb_virtual_server ...'
      end
      # verify the required parameter 'lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server_id' when calling LoadBalancingApi.delete_lb_virtual_server"
      end
      # resource path
      local_var_path = '/infra/lb-virtual-servers/{lb-virtual-server-id}'.sub('{' + 'lb-virtual-server-id' + '}', lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#delete_lb_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBAppProfile and all the entities contained by this LBAppProfile
    # Delete the LBAppProfile along with all the entities contained by this LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_app_profile(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts = {})
      delete_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts)
      nil
    end

    # Delete LBAppProfile and all the entities contained by this LBAppProfile
    # Delete the LBAppProfile along with all the entities contained by this LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.delete_vpc_lb_app_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.delete_vpc_lb_app_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.delete_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.delete_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_lb_app_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_app_profile_id' when calling LoadBalancingApi.delete_vpc_lb_app_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-app-profiles/{vpc-lb-app-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-app-profile-id' + '}', vpc_lb_app_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#delete_vpc_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBClientSslProfile and all the entities contained by this LBClientSslProfile 
    # Delete the LBClientSslProfile along with all the entities contained by this LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_client_ssl_profile(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts = {})
      delete_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts)
      nil
    end

    # Delete LBClientSslProfile and all the entities contained by this LBClientSslProfile 
    # Delete the LBClientSslProfile along with all the entities contained by this LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.delete_vpc_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.delete_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.delete_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.delete_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_client_ssl_profile_id' when calling LoadBalancingApi.delete_vpc_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-client-ssl-profiles/{vpc-lb-client-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-client-ssl-profile-id' + '}', vpc_lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#delete_vpc_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBMonitorProfile and all the entities contained by this LBMonitorProfile
    # Delete the LBMonitorProfile along with all the entities contained by this LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_monitor_profile(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts = {})
      delete_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts)
      nil
    end

    # Delete LBMonitorProfile and all the entities contained by this LBMonitorProfile
    # Delete the LBMonitorProfile along with all the entities contained by this LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.delete_vpc_lb_monitor_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.delete_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.delete_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.delete_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_monitor_profile_id' when calling LoadBalancingApi.delete_vpc_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-monitor-profiles/{vpc-lb-monitor-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-monitor-profile-id' + '}', vpc_lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#delete_vpc_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBPersistenceProfile and all the entities contained by this LBPersistenceProfile
    # Delete the LBPersistenceProfile along with all the entities contained by this LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_persistence_profile(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts = {})
      delete_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts)
      nil
    end

    # Delete LBPersistenceProfile and all the entities contained by this LBPersistenceProfile
    # Delete the LBPersistenceProfile along with all the entities contained by this LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.delete_vpc_lb_persistence_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.delete_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.delete_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.delete_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_persistence_profile_id' when calling LoadBalancingApi.delete_vpc_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-persistence-profiles/{vpc-lb-persistence-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-persistence-profile-id' + '}', vpc_lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#delete_vpc_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBPool and all the entities contained by this LBPool
    # Delete the LBPool along with all the entities contained by this LBPool.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_pool(org_id, project_id, vpc_id, vpc_lb_pool_id, opts = {})
      delete_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, opts)
      nil
    end

    # Delete LBPool and all the entities contained by this LBPool
    # Delete the LBPool along with all the entities contained by this LBPool.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.delete_vpc_lb_pool ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.delete_vpc_lb_pool"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.delete_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.delete_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_lb_pool_id' is set
      if @api_client.config.client_side_validation && vpc_lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_pool_id' when calling LoadBalancingApi.delete_vpc_lb_pool"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-pools/{vpc-lb-pool-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-pool-id' + '}', vpc_lb_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#delete_vpc_lb_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBServerSslProfile and all the entities contained by this LBServerSslProfile 
    # Delete the LBServerSslProfile along with all the entities contained by this LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_server_ssl_profile(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts = {})
      delete_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts)
      nil
    end

    # Delete LBServerSslProfile and all the entities contained by this LBServerSslProfile 
    # Delete the LBServerSslProfile along with all the entities contained by this LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.delete_vpc_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.delete_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.delete_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.delete_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_server_ssl_profile_id' when calling LoadBalancingApi.delete_vpc_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-server-ssl-profiles/{vpc-lb-server-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-server-ssl-profile-id' + '}', vpc_lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#delete_vpc_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the load balancer and all the entities contained by this load balancer 
    # Delete the load balancer and all the entities contained by this load balancer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_service(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      delete_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts)
      nil
    end

    # Delete the load balancer and all the entities contained by this load balancer 
    # Delete the load balancer and all the entities contained by this load balancer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.delete_vpc_lb_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.delete_vpc_lb_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.delete_vpc_lb_service"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.delete_vpc_lb_service"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling LoadBalancingApi.delete_vpc_lb_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#delete_vpc_lb_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete LBVirtualServer and all the entities contained by this LBVirtualServer.
    # Delete the LBVirtualServer along with all the entities contained by this LBVirtualServer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_vpc_lb_virtual_server(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, opts = {})
      delete_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, opts)
      nil
    end

    # Delete LBVirtualServer and all the entities contained by this LBVirtualServer.
    # Delete the LBVirtualServer along with all the entities contained by this LBVirtualServer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.delete_vpc_lb_virtual_server ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.delete_vpc_lb_virtual_server"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.delete_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.delete_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && vpc_lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_virtual_server_id' when calling LoadBalancingApi.delete_vpc_lb_virtual_server"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-virtual-servers/{vpc-lb-virtual-server-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-virtual-server-id' + '}', vpc_lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#delete_vpc_lb_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read load balancer usage for the given node
    # API is used to retrieve node usage for load balancer which contains basic information, LB entity usages and capacities for the given node. Currently only edge node is supported. The parameter ?node_path=&lt;node-path&gt; is required. For example, ?node_path= /infra/sites/default/enforcement-points/default/edge-clusters/ 85175e0b-4d74-461d-83e1-f3b785adef9c/edge-nodes/0.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param node_path The node path for load balancer node usage
    # @param [Hash] opts the optional parameters
    # @return [LBNodeUsage]
    def get_lb_node_usage(node_path, opts = {})
      data, _status_code, _headers = get_lb_node_usage_with_http_info(node_path, opts)
      data
    end

    # Read load balancer usage for the given node
    # API is used to retrieve node usage for load balancer which contains basic information, LB entity usages and capacities for the given node. Currently only edge node is supported. The parameter ?node_path&#x3D;&amp;lt;node-path&amp;gt; is required. For example, ?node_path&#x3D; /infra/sites/default/enforcement-points/default/edge-clusters/ 85175e0b-4d74-461d-83e1-f3b785adef9c/edge-nodes/0.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param node_path The node path for load balancer node usage
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBNodeUsage, Fixnum, Hash)>] LBNodeUsage data, response status code and response headers
    def get_lb_node_usage_with_http_info(node_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.get_lb_node_usage ...'
      end
      # verify the required parameter 'node_path' is set
      if @api_client.config.client_side_validation && node_path.nil?
        fail ArgumentError, "Missing the required parameter 'node_path' when calling LoadBalancingApi.get_lb_node_usage"
      end
      # resource path
      local_var_path = '/infra/lb-node-usage'

      # query parameters
      query_params = {}
      query_params[:'node_path'] = node_path

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBNodeUsage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#get_lb_node_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read load balancer node usage summary
    # The API is used to retrieve the load balancer node usage summary of all nodes for every enforcement point. - If the parameter ?include_usages=true exists, the property node_usages are included in response. By default, the property node_usages is not included in response. - If parameter ?enforcement_point_path=&lt;enforcement-point-path&gt; exists, only node usage summary from specific enforcement point is included in response. If no enforcement point path is specified, information will be aggregated from each enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path enforcement point path
    # @option opts [BOOLEAN] :include_usages Whether to include usages
    # @return [AggregateLBNodeUsageSummary]
    def get_lb_node_usage_summary(opts = {})
      data, _status_code, _headers = get_lb_node_usage_summary_with_http_info(opts)
      data
    end

    # Read load balancer node usage summary
    # The API is used to retrieve the load balancer node usage summary of all nodes for every enforcement point. - If the parameter ?include_usages&#x3D;true exists, the property node_usages are included in response. By default, the property node_usages is not included in response. - If parameter ?enforcement_point_path&#x3D;&amp;lt;enforcement-point-path&amp;gt; exists, only node usage summary from specific enforcement point is included in response. If no enforcement point path is specified, information will be aggregated from each enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path enforcement point path
    # @option opts [BOOLEAN] :include_usages Whether to include usages
    # @return [Array<(AggregateLBNodeUsageSummary, Fixnum, Hash)>] AggregateLBNodeUsageSummary data, response status code and response headers
    def get_lb_node_usage_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.get_lb_node_usage_summary ...'
      end
      # resource path
      local_var_path = '/infra/lb-node-usage-summary'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_usages'] = opts[:'include_usages'] if !opts[:'include_usages'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBNodeUsageSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#get_lb_node_usage_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBPool statistics information
    # Get LBPoolStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBPoolStatistics]
    def get_lb_pool_statistics(lb_service_id, lb_pool_id, opts = {})
      data, _status_code, _headers = get_lb_pool_statistics_with_http_info(lb_service_id, lb_pool_id, opts)
      data
    end

    # Get LBPool statistics information
    # Get LBPoolStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBPoolStatistics, Fixnum, Hash)>] AggregateLBPoolStatistics data, response status code and response headers
    def get_lb_pool_statistics_with_http_info(lb_service_id, lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.get_lb_pool_statistics ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling LoadBalancingApi.get_lb_pool_statistics"
      end
      # verify the required parameter 'lb_pool_id' is set
      if @api_client.config.client_side_validation && lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool_id' when calling LoadBalancingApi.get_lb_pool_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/lb-pools/{lb-pool-id}/statistics'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s).sub('{' + 'lb-pool-id' + '}', lb_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBPoolStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#get_lb_pool_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBPool status information
    # Get LBPool detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBPoolStatus]
    def get_lb_pool_status(lb_service_id, lb_pool_id, opts = {})
      data, _status_code, _headers = get_lb_pool_status_with_http_info(lb_service_id, lb_pool_id, opts)
      data
    end

    # Get LBPool status information
    # Get LBPool detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBPoolStatus, Fixnum, Hash)>] AggregateLBPoolStatus data, response status code and response headers
    def get_lb_pool_status_with_http_info(lb_service_id, lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.get_lb_pool_status ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling LoadBalancingApi.get_lb_pool_status"
      end
      # verify the required parameter 'lb_pool_id' is set
      if @api_client.config.client_side_validation && lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool_id' when calling LoadBalancingApi.get_lb_pool_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/lb-pools/{lb-pool-id}/detailed-status'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s).sub('{' + 'lb-pool-id' + '}', lb_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBPoolStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#get_lb_pool_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBService statistics information
    # Get LBServiceStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBServiceStatistics]
    def get_lb_service_statistics(lb_service_id, opts = {})
      data, _status_code, _headers = get_lb_service_statistics_with_http_info(lb_service_id, opts)
      data
    end

    # Get LBService statistics information
    # Get LBServiceStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBServiceStatistics, Fixnum, Hash)>] AggregateLBServiceStatistics data, response status code and response headers
    def get_lb_service_statistics_with_http_info(lb_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.get_lb_service_statistics ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling LoadBalancingApi.get_lb_service_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/statistics'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBServiceStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#get_lb_service_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBService status information
    # Get LBService detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_instance_details Flag to indicate whether include detail information (default to false)
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_ids The UUIDs of transport nodes
    # @return [AggregateLBServiceStatus]
    def get_lb_service_status(lb_service_id, opts = {})
      data, _status_code, _headers = get_lb_service_status_with_http_info(lb_service_id, opts)
      data
    end

    # Get LBService status information
    # Get LBService detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_instance_details Flag to indicate whether include detail information
    # @option opts [String] :source Data source type.
    # @option opts [String] :transport_node_ids The UUIDs of transport nodes
    # @return [Array<(AggregateLBServiceStatus, Fixnum, Hash)>] AggregateLBServiceStatus data, response status code and response headers
    def get_lb_service_status_with_http_info(lb_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.get_lb_service_status ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling LoadBalancingApi.get_lb_service_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/detailed-status'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_instance_details'] = opts[:'include_instance_details'] if !opts[:'include_instance_details'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'transport_node_ids'] = opts[:'transport_node_ids'] if !opts[:'transport_node_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBServiceStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#get_lb_service_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBService usage information
    # Get LBServiceUsage information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBServiceUsage]
    def get_lb_service_usage(lb_service_id, opts = {})
      data, _status_code, _headers = get_lb_service_usage_with_http_info(lb_service_id, opts)
      data
    end

    # Get LBService usage information
    # Get LBServiceUsage information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBServiceUsage, Fixnum, Hash)>] AggregateLBServiceUsage data, response status code and response headers
    def get_lb_service_usage_with_http_info(lb_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.get_lb_service_usage ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling LoadBalancingApi.get_lb_service_usage"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/service-usage'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBServiceUsage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#get_lb_service_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read load balancer service usage summary
    # API is used to retrieve the load balancer usage summary for all load balancer services. If the parameter ?include_usages=true exists, the property service-usages is included in the response. By default, service-usages is not included in the response.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_usages Whether to include usages
    # @return [LBServiceUsageSummary]
    def get_lb_service_usage_summary(opts = {})
      data, _status_code, _headers = get_lb_service_usage_summary_with_http_info(opts)
      data
    end

    # Read load balancer service usage summary
    # API is used to retrieve the load balancer usage summary for all load balancer services. If the parameter ?include_usages&#x3D;true exists, the property service-usages is included in the response. By default, service-usages is not included in the response.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_usages Whether to include usages
    # @return [Array<(LBServiceUsageSummary, Fixnum, Hash)>] LBServiceUsageSummary data, response status code and response headers
    def get_lb_service_usage_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.get_lb_service_usage_summary ...'
      end
      # resource path
      local_var_path = '/infra/lb-service-usage-summary'

      # query parameters
      query_params = {}
      query_params[:'include_usages'] = opts[:'include_usages'] if !opts[:'include_usages'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServiceUsageSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#get_lb_service_usage_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBVirtualServer statistics information
    # Get LBVirtualServerStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBVirtualServerStatistics]
    def get_lb_virtual_server_statistics(lb_service_id, lb_virtual_server_id, opts = {})
      data, _status_code, _headers = get_lb_virtual_server_statistics_with_http_info(lb_service_id, lb_virtual_server_id, opts)
      data
    end

    # Get LBVirtualServer statistics information
    # Get LBVirtualServerStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBVirtualServerStatistics, Fixnum, Hash)>] AggregateLBVirtualServerStatistics data, response status code and response headers
    def get_lb_virtual_server_statistics_with_http_info(lb_service_id, lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.get_lb_virtual_server_statistics ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling LoadBalancingApi.get_lb_virtual_server_statistics"
      end
      # verify the required parameter 'lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server_id' when calling LoadBalancingApi.get_lb_virtual_server_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/lb-virtual-servers/{lb-virtual-server-id}/statistics'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s).sub('{' + 'lb-virtual-server-id' + '}', lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBVirtualServerStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#get_lb_virtual_server_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBVirtualServer status information
    # Get LBVirtualServer detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBVirtualServerStatus]
    def get_lb_virtual_server_status(lb_service_id, lb_virtual_server_id, opts = {})
      data, _status_code, _headers = get_lb_virtual_server_status_with_http_info(lb_service_id, lb_virtual_server_id, opts)
      data
    end

    # Get LBVirtualServer status information
    # Get LBVirtualServer detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService id
    # @param lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBVirtualServerStatus, Fixnum, Hash)>] AggregateLBVirtualServerStatus data, response status code and response headers
    def get_lb_virtual_server_status_with_http_info(lb_service_id, lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.get_lb_virtual_server_status ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling LoadBalancingApi.get_lb_virtual_server_status"
      end
      # verify the required parameter 'lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server_id' when calling LoadBalancingApi.get_lb_virtual_server_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/lb-virtual-servers/{lb-virtual-server-id}/detailed-status'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s).sub('{' + 'lb-virtual-server-id' + '}', lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBVirtualServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#get_lb_virtual_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LB node capacity
    # API is used to retrieve available load balancer capacity status for all service clusters shared with Project. Currently Edge cluster is supported as service cluster. If the parameter ?service_cluster_path=&lt;service-cluster-path&gt; exists, then API only shows the available load balancer capacity status for this specific service cluster.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :service_cluster_path The service cluster path
    # @option opts [String] :source Data source type.
    # @return [AggregateLBNodeCapacitySummary]
    def get_project_lb_node_capacity_status(org_id, project_id, opts = {})
      data, _status_code, _headers = get_project_lb_node_capacity_status_with_http_info(org_id, project_id, opts)
      data
    end

    # Get LB node capacity
    # API is used to retrieve available load balancer capacity status for all service clusters shared with Project. Currently Edge cluster is supported as service cluster. If the parameter ?service_cluster_path&#x3D;&amp;lt;service-cluster-path&amp;gt; exists, then API only shows the available load balancer capacity status for this specific service cluster.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :service_cluster_path The service cluster path
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBNodeCapacitySummary, Fixnum, Hash)>] AggregateLBNodeCapacitySummary data, response status code and response headers
    def get_project_lb_node_capacity_status_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.get_project_lb_node_capacity_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.get_project_lb_node_capacity_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.get_project_lb_node_capacity_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/lb-node-capacity-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'service_cluster_path'] = opts[:'service_cluster_path'] if !opts[:'service_cluster_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBNodeCapacitySummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#get_project_lb_node_capacity_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LB node capacity
    # API is used to retrieve available load balancer capacity status for all service clusters shared with VPC. Currently Edge cluster is supported as service cluster. If the parameter ?service_cluster_path=&lt;service-cluster-path&gt; exists, then API only shows the available load balancer capacity status for this specific service cluster.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :service_cluster_path The service cluster path
    # @option opts [String] :source Data source type.
    # @return [AggregateLBNodeCapacitySummary]
    def get_vpc_lb_node_capacity_status(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_node_capacity_status_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # Get LB node capacity
    # API is used to retrieve available load balancer capacity status for all service clusters shared with VPC. Currently Edge cluster is supported as service cluster. If the parameter ?service_cluster_path&#x3D;&amp;lt;service-cluster-path&amp;gt; exists, then API only shows the available load balancer capacity status for this specific service cluster.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :service_cluster_path The service cluster path
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBNodeCapacitySummary, Fixnum, Hash)>] AggregateLBNodeCapacitySummary data, response status code and response headers
    def get_vpc_lb_node_capacity_status_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.get_vpc_lb_node_capacity_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.get_vpc_lb_node_capacity_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.get_vpc_lb_node_capacity_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.get_vpc_lb_node_capacity_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-node-capacity-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'service_cluster_path'] = opts[:'service_cluster_path'] if !opts[:'service_cluster_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBNodeCapacitySummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#get_vpc_lb_node_capacity_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBPool statistics information
    # Get LBPoolStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBPoolStatistics]
    def get_vpc_lb_pool_statistics(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_pool_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_pool_statistics_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_pool_id, opts)
      data
    end

    # Get LBPool statistics information
    # Get LBPoolStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBPoolStatistics, Fixnum, Hash)>] AggregateLBPoolStatistics data, response status code and response headers
    def get_vpc_lb_pool_statistics_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.get_vpc_lb_pool_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.get_vpc_lb_pool_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.get_vpc_lb_pool_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.get_vpc_lb_pool_statistics"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling LoadBalancingApi.get_vpc_lb_pool_statistics"
      end
      # verify the required parameter 'vpc_lb_pool_id' is set
      if @api_client.config.client_side_validation && vpc_lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_pool_id' when calling LoadBalancingApi.get_vpc_lb_pool_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/vpc-lb-pools/{vpc-lb-pool-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s).sub('{' + 'vpc-lb-pool-id' + '}', vpc_lb_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBPoolStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#get_vpc_lb_pool_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBPool status information
    # Get LBPool detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBPoolStatus]
    def get_vpc_lb_pool_status(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_pool_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_pool_status_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_pool_id, opts)
      data
    end

    # Get LBPool status information
    # Get LBPool detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBPoolStatus, Fixnum, Hash)>] AggregateLBPoolStatus data, response status code and response headers
    def get_vpc_lb_pool_status_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.get_vpc_lb_pool_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.get_vpc_lb_pool_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.get_vpc_lb_pool_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.get_vpc_lb_pool_status"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling LoadBalancingApi.get_vpc_lb_pool_status"
      end
      # verify the required parameter 'vpc_lb_pool_id' is set
      if @api_client.config.client_side_validation && vpc_lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_pool_id' when calling LoadBalancingApi.get_vpc_lb_pool_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/vpc-lb-pools/{vpc-lb-pool-id}/detailed-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s).sub('{' + 'vpc-lb-pool-id' + '}', vpc_lb_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBPoolStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#get_vpc_lb_pool_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get load balancer statistics information
    # Get load balancer statistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBServiceStatistics]
    def get_vpc_lb_service_statistics(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_service_statistics_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts)
      data
    end

    # Get load balancer statistics information
    # Get load balancer statistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBServiceStatistics, Fixnum, Hash)>] AggregateLBServiceStatistics data, response status code and response headers
    def get_vpc_lb_service_statistics_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.get_vpc_lb_service_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.get_vpc_lb_service_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.get_vpc_lb_service_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.get_vpc_lb_service_statistics"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling LoadBalancingApi.get_vpc_lb_service_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBServiceStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#get_vpc_lb_service_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get load balancer status information
    # Get load balancer detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBServiceStatus]
    def get_vpc_lb_service_status(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_service_status_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts)
      data
    end

    # Get load balancer status information
    # Get load balancer detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBServiceStatus, Fixnum, Hash)>] AggregateLBServiceStatus data, response status code and response headers
    def get_vpc_lb_service_status_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.get_vpc_lb_service_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.get_vpc_lb_service_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.get_vpc_lb_service_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.get_vpc_lb_service_status"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling LoadBalancingApi.get_vpc_lb_service_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/detailed-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBServiceStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#get_vpc_lb_service_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get load balancer usage information
    # Get load balancer usage information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBServiceUsage]
    def get_vpc_lb_service_usage(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_service_usage_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts)
      data
    end

    # Get load balancer usage information
    # Get load balancer usage information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBServiceUsage, Fixnum, Hash)>] AggregateLBServiceUsage data, response status code and response headers
    def get_vpc_lb_service_usage_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.get_vpc_lb_service_usage ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.get_vpc_lb_service_usage"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.get_vpc_lb_service_usage"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.get_vpc_lb_service_usage"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling LoadBalancingApi.get_vpc_lb_service_usage"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/usage'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBServiceUsage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#get_vpc_lb_service_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBVirtualServer statistics information
    # Get LBVirtualServerStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBVirtualServerStatistics]
    def get_vpc_lb_virtual_server_statistics(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_virtual_server_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_virtual_server_statistics_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_virtual_server_id, opts)
      data
    end

    # Get LBVirtualServer statistics information
    # Get LBVirtualServerStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBVirtualServerStatistics, Fixnum, Hash)>] AggregateLBVirtualServerStatistics data, response status code and response headers
    def get_vpc_lb_virtual_server_statistics_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.get_vpc_lb_virtual_server_statistics ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.get_vpc_lb_virtual_server_statistics"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.get_vpc_lb_virtual_server_statistics"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.get_vpc_lb_virtual_server_statistics"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling LoadBalancingApi.get_vpc_lb_virtual_server_statistics"
      end
      # verify the required parameter 'vpc_lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && vpc_lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_virtual_server_id' when calling LoadBalancingApi.get_vpc_lb_virtual_server_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/vpc-lb-virtual-servers/{vpc-lb-virtual-server-id}/statistics'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s).sub('{' + 'vpc-lb-virtual-server-id' + '}', vpc_lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBVirtualServerStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#get_vpc_lb_virtual_server_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBVirtualServer status information
    # Get LBVirtualServer detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBVirtualServerStatus]
    def get_vpc_lb_virtual_server_status(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_virtual_server_id, opts = {})
      data, _status_code, _headers = get_vpc_lb_virtual_server_status_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_virtual_server_id, opts)
      data
    end

    # Get LBVirtualServer status information
    # Get LBVirtualServer detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param vpc_lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBVirtualServerStatus, Fixnum, Hash)>] AggregateLBVirtualServerStatus data, response status code and response headers
    def get_vpc_lb_virtual_server_status_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, vpc_lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.get_vpc_lb_virtual_server_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.get_vpc_lb_virtual_server_status"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.get_vpc_lb_virtual_server_status"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.get_vpc_lb_virtual_server_status"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling LoadBalancingApi.get_vpc_lb_virtual_server_status"
      end
      # verify the required parameter 'vpc_lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && vpc_lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_virtual_server_id' when calling LoadBalancingApi.get_vpc_lb_virtual_server_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}/vpc-lb-virtual-servers/{vpc-lb-virtual-server-id}/detailed-status'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s).sub('{' + 'vpc-lb-virtual-server-id' + '}', vpc_lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBVirtualServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#get_vpc_lb_virtual_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBAppProfiles
    # Paginated list of all LBAppProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBAppProfileListResult]
    def list_lb_app_profiles(opts = {})
      data, _status_code, _headers = list_lb_app_profiles_with_http_info(opts)
      data
    end

    # List LBAppProfiles
    # Paginated list of all LBAppProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBAppProfileListResult, Fixnum, Hash)>] LBAppProfileListResult data, response status code and response headers
    def list_lb_app_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.list_lb_app_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_lb_app_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_lb_app_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-app-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#list_lb_app_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBClientSslProfiles
    # Paginated list of all LBClientSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBClientSslProfileListResult]
    def list_lb_client_ssl_profiles(opts = {})
      data, _status_code, _headers = list_lb_client_ssl_profiles_with_http_info(opts)
      data
    end

    # List LBClientSslProfiles
    # Paginated list of all LBClientSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBClientSslProfileListResult, Fixnum, Hash)>] LBClientSslProfileListResult data, response status code and response headers
    def list_lb_client_ssl_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.list_lb_client_ssl_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_lb_client_ssl_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_lb_client_ssl_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-client-ssl-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#list_lb_client_ssl_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBMonitorProfiles for infra
    # Paginated list of all LBMonitorProfiles for infra.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBMonitorProfileListResult]
    def list_lb_monitor_profiles(opts = {})
      data, _status_code, _headers = list_lb_monitor_profiles_with_http_info(opts)
      data
    end

    # List LBMonitorProfiles for infra
    # Paginated list of all LBMonitorProfiles for infra.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBMonitorProfileListResult, Fixnum, Hash)>] LBMonitorProfileListResult data, response status code and response headers
    def list_lb_monitor_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.list_lb_monitor_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_lb_monitor_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_lb_monitor_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-monitor-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#list_lb_monitor_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBPersistenceProfiles for infra
    # Paginated list of all LBPersistenceProfiles for infra.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBPersistenceProfileListResult]
    def list_lb_persistence_profiles(opts = {})
      data, _status_code, _headers = list_lb_persistence_profiles_with_http_info(opts)
      data
    end

    # List LBPersistenceProfiles for infra
    # Paginated list of all LBPersistenceProfiles for infra.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBPersistenceProfileListResult, Fixnum, Hash)>] LBPersistenceProfileListResult data, response status code and response headers
    def list_lb_persistence_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.list_lb_persistence_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_lb_persistence_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_lb_persistence_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-persistence-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#list_lb_persistence_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBPools
    # Paginated list of all LBPools.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBPoolListResult]
    def list_lb_pools(opts = {})
      data, _status_code, _headers = list_lb_pools_with_http_info(opts)
      data
    end

    # List LBPools
    # Paginated list of all LBPools.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBPoolListResult, Fixnum, Hash)>] LBPoolListResult data, response status code and response headers
    def list_lb_pools_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.list_lb_pools ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_lb_pools, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_lb_pools, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-pools'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPoolListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#list_lb_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBServerSslProfiles
    # Paginated list of all LBServerSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBServerSslProfileListResult]
    def list_lb_server_ssl_profiles(opts = {})
      data, _status_code, _headers = list_lb_server_ssl_profiles_with_http_info(opts)
      data
    end

    # List LBServerSslProfiles
    # Paginated list of all LBServerSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBServerSslProfileListResult, Fixnum, Hash)>] LBServerSslProfileListResult data, response status code and response headers
    def list_lb_server_ssl_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.list_lb_server_ssl_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_lb_server_ssl_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_lb_server_ssl_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-server-ssl-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#list_lb_server_ssl_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBService
    # Paginated list of all LBService.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBServiceListResult]
    def list_lb_services(opts = {})
      data, _status_code, _headers = list_lb_services_with_http_info(opts)
      data
    end

    # List LBService
    # Paginated list of all LBService.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBServiceListResult, Fixnum, Hash)>] LBServiceListResult data, response status code and response headers
    def list_lb_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.list_lb_services ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_lb_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_lb_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-services'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#list_lb_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBVirtualServers
    # Paginated list of all LBVirtualServers.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBVirtualServerListResult]
    def list_lb_virtual_servers(opts = {})
      data, _status_code, _headers = list_lb_virtual_servers_with_http_info(opts)
      data
    end

    # List LBVirtualServers
    # Paginated list of all LBVirtualServers.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBVirtualServerListResult, Fixnum, Hash)>] LBVirtualServerListResult data, response status code and response headers
    def list_lb_virtual_servers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.list_lb_virtual_servers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_lb_virtual_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_lb_virtual_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-virtual-servers'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBVirtualServerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#list_lb_virtual_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a list of supported SSL ciphers and protocols
    # Retrieve a list of supported SSL ciphers and protocols.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LbSslCipherAndProtocolListResult]
    def list_ssl_ciphers_and_protocols(opts = {})
      data, _status_code, _headers = list_ssl_ciphers_and_protocols_with_http_info(opts)
      data
    end

    # Retrieve a list of supported SSL ciphers and protocols
    # Retrieve a list of supported SSL ciphers and protocols.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LbSslCipherAndProtocolListResult, Fixnum, Hash)>] LbSslCipherAndProtocolListResult data, response status code and response headers
    def list_ssl_ciphers_and_protocols_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.list_ssl_ciphers_and_protocols ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_ssl_ciphers_and_protocols, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_ssl_ciphers_and_protocols, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/lb-ssl-ciphers-and-protocols'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LbSslCipherAndProtocolListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#list_ssl_ciphers_and_protocols\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBAppProfiles
    # Paginated list of all LBAppProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBAppProfileListResult]
    def list_vpc_lb_app_profiles(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_app_profiles_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBAppProfiles
    # Paginated list of all LBAppProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBAppProfileListResult, Fixnum, Hash)>] LBAppProfileListResult data, response status code and response headers
    def list_vpc_lb_app_profiles_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.list_vpc_lb_app_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.list_vpc_lb_app_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.list_vpc_lb_app_profiles"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.list_vpc_lb_app_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_vpc_lb_app_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_vpc_lb_app_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-app-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#list_vpc_lb_app_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBClientSslProfiles
    # Paginated list of all LBClientSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBClientSslProfileListResult]
    def list_vpc_lb_client_ssl_profiles(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_client_ssl_profiles_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBClientSslProfiles
    # Paginated list of all LBClientSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBClientSslProfileListResult, Fixnum, Hash)>] LBClientSslProfileListResult data, response status code and response headers
    def list_vpc_lb_client_ssl_profiles_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.list_vpc_lb_client_ssl_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.list_vpc_lb_client_ssl_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.list_vpc_lb_client_ssl_profiles"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.list_vpc_lb_client_ssl_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_vpc_lb_client_ssl_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_vpc_lb_client_ssl_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-client-ssl-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#list_vpc_lb_client_ssl_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBMonitorProfiles specified Vpc
    # Paginated list of all LBMonitorProfiles specified Vpc.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBMonitorProfileListResult]
    def list_vpc_lb_monitor_profiles(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_monitor_profiles_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBMonitorProfiles specified Vpc
    # Paginated list of all LBMonitorProfiles specified Vpc.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBMonitorProfileListResult, Fixnum, Hash)>] LBMonitorProfileListResult data, response status code and response headers
    def list_vpc_lb_monitor_profiles_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.list_vpc_lb_monitor_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.list_vpc_lb_monitor_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.list_vpc_lb_monitor_profiles"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.list_vpc_lb_monitor_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_vpc_lb_monitor_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_vpc_lb_monitor_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-monitor-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#list_vpc_lb_monitor_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBPersistenceProfiles for the specified Vpc
    # Paginated list of all LBPersistenceProfiles specified Vpc.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBPersistenceProfileListResult]
    def list_vpc_lb_persistence_profiles(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_persistence_profiles_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBPersistenceProfiles for the specified Vpc
    # Paginated list of all LBPersistenceProfiles specified Vpc.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBPersistenceProfileListResult, Fixnum, Hash)>] LBPersistenceProfileListResult data, response status code and response headers
    def list_vpc_lb_persistence_profiles_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.list_vpc_lb_persistence_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.list_vpc_lb_persistence_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.list_vpc_lb_persistence_profiles"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.list_vpc_lb_persistence_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_vpc_lb_persistence_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_vpc_lb_persistence_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-persistence-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#list_vpc_lb_persistence_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBPools
    # Paginated list of all LBPools.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBPoolListResult]
    def list_vpc_lb_pools(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_pools_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBPools
    # Paginated list of all LBPools.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBPoolListResult, Fixnum, Hash)>] LBPoolListResult data, response status code and response headers
    def list_vpc_lb_pools_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.list_vpc_lb_pools ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.list_vpc_lb_pools"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.list_vpc_lb_pools"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.list_vpc_lb_pools"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_vpc_lb_pools, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_vpc_lb_pools, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-pools'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPoolListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#list_vpc_lb_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBServerSslProfiles
    # Paginated list of all LBServerSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBServerSslProfileListResult]
    def list_vpc_lb_server_ssl_profiles(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_server_ssl_profiles_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBServerSslProfiles
    # Paginated list of all LBServerSslProfiles.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBServerSslProfileListResult, Fixnum, Hash)>] LBServerSslProfileListResult data, response status code and response headers
    def list_vpc_lb_server_ssl_profiles_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.list_vpc_lb_server_ssl_profiles ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.list_vpc_lb_server_ssl_profiles"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.list_vpc_lb_server_ssl_profiles"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.list_vpc_lb_server_ssl_profiles"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_vpc_lb_server_ssl_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_vpc_lb_server_ssl_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-server-ssl-profiles'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#list_vpc_lb_server_ssl_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List load balancers
    # Paginated list of all load balancers.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBServiceListResult]
    def list_vpc_lb_services(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_services_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List load balancers
    # Paginated list of all load balancers.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBServiceListResult, Fixnum, Hash)>] LBServiceListResult data, response status code and response headers
    def list_vpc_lb_services_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.list_vpc_lb_services ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.list_vpc_lb_services"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.list_vpc_lb_services"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.list_vpc_lb_services"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_vpc_lb_services, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_vpc_lb_services, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#list_vpc_lb_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List LBVirtualServers
    # Paginated list of all LBVirtualServers.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [LBVirtualServerListResult]
    def list_vpc_lb_virtual_servers(org_id, project_id, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_lb_virtual_servers_with_http_info(org_id, project_id, vpc_id, opts)
      data
    end

    # List LBVirtualServers
    # Paginated list of all LBVirtualServers.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(LBVirtualServerListResult, Fixnum, Hash)>] LBVirtualServerListResult data, response status code and response headers
    def list_vpc_lb_virtual_servers_with_http_info(org_id, project_id, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.list_vpc_lb_virtual_servers ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.list_vpc_lb_virtual_servers"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.list_vpc_lb_virtual_servers"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.list_vpc_lb_virtual_servers"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_vpc_lb_virtual_servers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LoadBalancingApi.list_vpc_lb_virtual_servers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-virtual-servers'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBVirtualServerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#list_vpc_lb_virtual_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBAppProfile
    # If a LBAppProfile with the lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_app_profile(lb_app_profile_id, lb_app_profile, opts = {})
      patch_lb_app_profile_with_http_info(lb_app_profile_id, lb_app_profile, opts)
      nil
    end

    # Create or update a LBAppProfile
    # If a LBAppProfile with the lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_app_profile_with_http_info(lb_app_profile_id, lb_app_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.patch_lb_app_profile ...'
      end
      # verify the required parameter 'lb_app_profile_id' is set
      if @api_client.config.client_side_validation && lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile_id' when calling LoadBalancingApi.patch_lb_app_profile"
      end
      # verify the required parameter 'lb_app_profile' is set
      if @api_client.config.client_side_validation && lb_app_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile' when calling LoadBalancingApi.patch_lb_app_profile"
      end
      # resource path
      local_var_path = '/infra/lb-app-profiles/{lb-app-profile-id}'.sub('{' + 'lb-app-profile-id' + '}', lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_app_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#patch_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_client_ssl_profile(lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      patch_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, lb_client_ssl_profile, opts)
      nil
    end

    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.patch_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile_id' when calling LoadBalancingApi.patch_lb_client_ssl_profile"
      end
      # verify the required parameter 'lb_client_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile' when calling LoadBalancingApi.patch_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-client-ssl-profiles/{lb-client-ssl-profile-id}'.sub('{' + 'lb-client-ssl-profile-id' + '}', lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_client_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#patch_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_monitor_profile(lb_monitor_profile_id, lb_monitor_profile, opts = {})
      patch_lb_monitor_profile_with_http_info(lb_monitor_profile_id, lb_monitor_profile, opts)
      nil
    end

    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_monitor_profile_with_http_info(lb_monitor_profile_id, lb_monitor_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.patch_lb_monitor_profile ...'
      end
      # verify the required parameter 'lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile_id' when calling LoadBalancingApi.patch_lb_monitor_profile"
      end
      # verify the required parameter 'lb_monitor_profile' is set
      if @api_client.config.client_side_validation && lb_monitor_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile' when calling LoadBalancingApi.patch_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/infra/lb-monitor-profiles/{lb-monitor-profile-id}'.sub('{' + 'lb-monitor-profile-id' + '}', lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_monitor_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#patch_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_persistence_profile(lb_persistence_profile_id, lb_persistence_profile, opts = {})
      patch_lb_persistence_profile_with_http_info(lb_persistence_profile_id, lb_persistence_profile, opts)
      nil
    end

    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_persistence_profile_with_http_info(lb_persistence_profile_id, lb_persistence_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.patch_lb_persistence_profile ...'
      end
      # verify the required parameter 'lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile_id' when calling LoadBalancingApi.patch_lb_persistence_profile"
      end
      # verify the required parameter 'lb_persistence_profile' is set
      if @api_client.config.client_side_validation && lb_persistence_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile' when calling LoadBalancingApi.patch_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/infra/lb-persistence-profiles/{lb-persistence-profile-id}'.sub('{' + 'lb-persistence-profile-id' + '}', lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_persistence_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#patch_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPool
    # If a LBPool with the lb-pool-id is not already present, create a new LBPool. If it already exists, update the LBPool. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_pool_id LBPool ID
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_pool(lb_pool_id, lb_pool, opts = {})
      patch_lb_pool_with_http_info(lb_pool_id, lb_pool, opts)
      nil
    end

    # Create or update a LBPool
    # If a LBPool with the lb-pool-id is not already present, create a new LBPool. If it already exists, update the LBPool. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_pool_id LBPool ID
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_pool_with_http_info(lb_pool_id, lb_pool, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.patch_lb_pool ...'
      end
      # verify the required parameter 'lb_pool_id' is set
      if @api_client.config.client_side_validation && lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool_id' when calling LoadBalancingApi.patch_lb_pool"
      end
      # verify the required parameter 'lb_pool' is set
      if @api_client.config.client_side_validation && lb_pool.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool' when calling LoadBalancingApi.patch_lb_pool"
      end
      # resource path
      local_var_path = '/infra/lb-pools/{lb-pool-id}'.sub('{' + 'lb-pool-id' + '}', lb_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_pool)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#patch_lb_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_server_ssl_profile(lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      patch_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, lb_server_ssl_profile, opts)
      nil
    end

    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.patch_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile_id' when calling LoadBalancingApi.patch_lb_server_ssl_profile"
      end
      # verify the required parameter 'lb_server_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile' when calling LoadBalancingApi.patch_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-server-ssl-profiles/{lb-server-ssl-profile-id}'.sub('{' + 'lb-server-ssl-profile-id' + '}', lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_server_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#patch_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBVirtualServer
    # If a LBService with the lb-service-id is not already present, create a new LBService. If it already exists, update the LBService. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService ID
    # @param lb_service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_service(lb_service_id, lb_service, opts = {})
      patch_lb_service_with_http_info(lb_service_id, lb_service, opts)
      nil
    end

    # Create or update a LBVirtualServer
    # If a LBService with the lb-service-id is not already present, create a new LBService. If it already exists, update the LBService. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService ID
    # @param lb_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_service_with_http_info(lb_service_id, lb_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.patch_lb_service ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling LoadBalancingApi.patch_lb_service"
      end
      # verify the required parameter 'lb_service' is set
      if @api_client.config.client_side_validation && lb_service.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service' when calling LoadBalancingApi.patch_lb_service"
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#patch_lb_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBVirtualServer
    # If a LBVirtualServer with the lb-virtual-server-id is not already present, create a new LBVirtualServer. If it already exists, update the LBVirtualServer. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_virtual_server_id LBVirtualServer ID
    # @param lb_virtual_server 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_lb_virtual_server(lb_virtual_server_id, lb_virtual_server, opts = {})
      patch_lb_virtual_server_with_http_info(lb_virtual_server_id, lb_virtual_server, opts)
      nil
    end

    # Create or update a LBVirtualServer
    # If a LBVirtualServer with the lb-virtual-server-id is not already present, create a new LBVirtualServer. If it already exists, update the LBVirtualServer. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_virtual_server_id LBVirtualServer ID
    # @param lb_virtual_server 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_lb_virtual_server_with_http_info(lb_virtual_server_id, lb_virtual_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.patch_lb_virtual_server ...'
      end
      # verify the required parameter 'lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server_id' when calling LoadBalancingApi.patch_lb_virtual_server"
      end
      # verify the required parameter 'lb_virtual_server' is set
      if @api_client.config.client_side_validation && lb_virtual_server.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server' when calling LoadBalancingApi.patch_lb_virtual_server"
      end
      # resource path
      local_var_path = '/infra/lb-virtual-servers/{lb-virtual-server-id}'.sub('{' + 'lb-virtual-server-id' + '}', lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_virtual_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#patch_lb_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBAppProfile
    # If a LBAppProfile with the vpc-lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_app_profile(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts = {})
      patch_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts)
      nil
    end

    # Create or update a LBAppProfile
    # If a LBAppProfile with the vpc-lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.patch_vpc_lb_app_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.patch_vpc_lb_app_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.patch_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.patch_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_lb_app_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_app_profile_id' when calling LoadBalancingApi.patch_vpc_lb_app_profile"
      end
      # verify the required parameter 'lb_app_profile' is set
      if @api_client.config.client_side_validation && lb_app_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile' when calling LoadBalancingApi.patch_vpc_lb_app_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-app-profiles/{vpc-lb-app-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-app-profile-id' + '}', vpc_lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_app_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#patch_vpc_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the vpc-lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_client_ssl_profile(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      patch_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts)
      nil
    end

    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the vpc-lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.patch_vpc_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.patch_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.patch_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.patch_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_client_ssl_profile_id' when calling LoadBalancingApi.patch_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'lb_client_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile' when calling LoadBalancingApi.patch_vpc_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-client-ssl-profiles/{vpc-lb-client-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-client-ssl-profile-id' + '}', vpc_lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_client_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#patch_vpc_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the vpc-lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_monitor_profile(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts = {})
      patch_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts)
      nil
    end

    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the vpc-lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.patch_vpc_lb_monitor_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.patch_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.patch_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.patch_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_monitor_profile_id' when calling LoadBalancingApi.patch_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'lb_monitor_profile' is set
      if @api_client.config.client_side_validation && lb_monitor_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile' when calling LoadBalancingApi.patch_vpc_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-monitor-profiles/{vpc-lb-monitor-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-monitor-profile-id' + '}', vpc_lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_monitor_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#patch_vpc_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the vpc-lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_persistence_profile(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts = {})
      patch_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts)
      nil
    end

    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the vpc-lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.patch_vpc_lb_persistence_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.patch_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.patch_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.patch_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_persistence_profile_id' when calling LoadBalancingApi.patch_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'lb_persistence_profile' is set
      if @api_client.config.client_side_validation && lb_persistence_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile' when calling LoadBalancingApi.patch_vpc_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-persistence-profiles/{vpc-lb-persistence-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-persistence-profile-id' + '}', vpc_lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_persistence_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#patch_vpc_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPool
    # If a LBPool with the vpc-lb-pool-id is not already present, create a new LBPool. If it already exists, update the LBPool. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_pool(org_id, project_id, vpc_id, vpc_lb_pool_id, lb_pool, opts = {})
      patch_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, lb_pool, opts)
      nil
    end

    # Create or update a LBPool
    # If a LBPool with the vpc-lb-pool-id is not already present, create a new LBPool. If it already exists, update the LBPool. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, lb_pool, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.patch_vpc_lb_pool ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.patch_vpc_lb_pool"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.patch_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.patch_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_lb_pool_id' is set
      if @api_client.config.client_side_validation && vpc_lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_pool_id' when calling LoadBalancingApi.patch_vpc_lb_pool"
      end
      # verify the required parameter 'lb_pool' is set
      if @api_client.config.client_side_validation && lb_pool.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool' when calling LoadBalancingApi.patch_vpc_lb_pool"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-pools/{vpc-lb-pool-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-pool-id' + '}', vpc_lb_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_pool)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#patch_vpc_lb_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the vpc-lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_server_ssl_profile(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      patch_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts)
      nil
    end

    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the vpc-lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.patch_vpc_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.patch_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.patch_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.patch_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_server_ssl_profile_id' when calling LoadBalancingApi.patch_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'lb_server_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile' when calling LoadBalancingApi.patch_vpc_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-server-ssl-profiles/{vpc-lb-server-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-server-ssl-profile-id' + '}', vpc_lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_server_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#patch_vpc_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a load balancer
    # If a load balancer with the vpc-lb-id doesn't exist, create a new Load Balancer. If it has already existed, update the load balancer. This is a full replacement.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param lb_service 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Load Balancer Operation
    # @return [nil]
    def patch_vpc_lb_service(org_id, project_id, vpc_id, vpc_lb_id, lb_service, opts = {})
      patch_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, lb_service, opts)
      nil
    end

    # Create or update a load balancer
    # If a load balancer with the vpc-lb-id doesn&#39;t exist, create a new Load Balancer. If it has already existed, update the load balancer. This is a full replacement.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param lb_service 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Load Balancer Operation
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, lb_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.patch_vpc_lb_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.patch_vpc_lb_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.patch_vpc_lb_service"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.patch_vpc_lb_service"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling LoadBalancingApi.patch_vpc_lb_service"
      end
      # verify the required parameter 'lb_service' is set
      if @api_client.config.client_side_validation && lb_service.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service' when calling LoadBalancingApi.patch_vpc_lb_service"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['allow_auto_relocation'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of allow_auto_relocation'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#patch_vpc_lb_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBVirtualServer
    # If a LBVirtualServer with the vpc-lb-virtual-server-id is not already present, create a new LBVirtualServer. If it already exists, update the LBVirtualServer. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param lb_virtual_server 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_vpc_lb_virtual_server(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, lb_virtual_server, opts = {})
      patch_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, lb_virtual_server, opts)
      nil
    end

    # Create or update a LBVirtualServer
    # If a LBVirtualServer with the vpc-lb-virtual-server-id is not already present, create a new LBVirtualServer. If it already exists, update the LBVirtualServer. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param lb_virtual_server 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, lb_virtual_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.patch_vpc_lb_virtual_server ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.patch_vpc_lb_virtual_server"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.patch_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.patch_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && vpc_lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_virtual_server_id' when calling LoadBalancingApi.patch_vpc_lb_virtual_server"
      end
      # verify the required parameter 'lb_virtual_server' is set
      if @api_client.config.client_side_validation && lb_virtual_server.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server' when calling LoadBalancingApi.patch_vpc_lb_virtual_server"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-virtual-servers/{vpc-lb-virtual-server-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-virtual-server-id' + '}', vpc_lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_virtual_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#patch_vpc_lb_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBAppProfile
    # Read a LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBAppProfile]
    def read_lb_app_profile(lb_app_profile_id, opts = {})
      data, _status_code, _headers = read_lb_app_profile_with_http_info(lb_app_profile_id, opts)
      data
    end

    # Read LBAppProfile
    # Read a LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBAppProfile, Fixnum, Hash)>] LBAppProfile data, response status code and response headers
    def read_lb_app_profile_with_http_info(lb_app_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.read_lb_app_profile ...'
      end
      # verify the required parameter 'lb_app_profile_id' is set
      if @api_client.config.client_side_validation && lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile_id' when calling LoadBalancingApi.read_lb_app_profile"
      end
      # resource path
      local_var_path = '/infra/lb-app-profiles/{lb-app-profile-id}'.sub('{' + 'lb-app-profile-id' + '}', lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#read_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBClientSslProfile
    # Read a LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBClientSslProfile]
    def read_lb_client_ssl_profile(lb_client_ssl_profile_id, opts = {})
      data, _status_code, _headers = read_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, opts)
      data
    end

    # Read LBClientSslProfile
    # Read a LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBClientSslProfile, Fixnum, Hash)>] LBClientSslProfile data, response status code and response headers
    def read_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.read_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile_id' when calling LoadBalancingApi.read_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-client-ssl-profiles/{lb-client-ssl-profile-id}'.sub('{' + 'lb-client-ssl-profile-id' + '}', lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#read_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBMonitorProfile
    # Read a LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBMonitorProfile]
    def read_lb_monitor_profile(lb_monitor_profile_id, opts = {})
      data, _status_code, _headers = read_lb_monitor_profile_with_http_info(lb_monitor_profile_id, opts)
      data
    end

    # Read LBMonitorProfile
    # Read a LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBMonitorProfile, Fixnum, Hash)>] LBMonitorProfile data, response status code and response headers
    def read_lb_monitor_profile_with_http_info(lb_monitor_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.read_lb_monitor_profile ...'
      end
      # verify the required parameter 'lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile_id' when calling LoadBalancingApi.read_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/infra/lb-monitor-profiles/{lb-monitor-profile-id}'.sub('{' + 'lb-monitor-profile-id' + '}', lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#read_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBPersistenceProfile
    # Read a LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBPersistenceProfile]
    def read_lb_persistence_profile(lb_persistence_profile_id, opts = {})
      data, _status_code, _headers = read_lb_persistence_profile_with_http_info(lb_persistence_profile_id, opts)
      data
    end

    # Read LBPersistenceProfile
    # Read a LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPersistenceProfile, Fixnum, Hash)>] LBPersistenceProfile data, response status code and response headers
    def read_lb_persistence_profile_with_http_info(lb_persistence_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.read_lb_persistence_profile ...'
      end
      # verify the required parameter 'lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile_id' when calling LoadBalancingApi.read_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/infra/lb-persistence-profiles/{lb-persistence-profile-id}'.sub('{' + 'lb-persistence-profile-id' + '}', lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#read_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBPool
    # Read a LBPool.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_pool_id LBPool ID
    # @param [Hash] opts the optional parameters
    # @return [LBPool]
    def read_lb_pool(lb_pool_id, opts = {})
      data, _status_code, _headers = read_lb_pool_with_http_info(lb_pool_id, opts)
      data
    end

    # Read LBPool
    # Read a LBPool.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_pool_id LBPool ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPool, Fixnum, Hash)>] LBPool data, response status code and response headers
    def read_lb_pool_with_http_info(lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.read_lb_pool ...'
      end
      # verify the required parameter 'lb_pool_id' is set
      if @api_client.config.client_side_validation && lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool_id' when calling LoadBalancingApi.read_lb_pool"
      end
      # resource path
      local_var_path = '/infra/lb-pools/{lb-pool-id}'.sub('{' + 'lb-pool-id' + '}', lb_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#read_lb_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBServerSslProfile
    # Read a LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBServerSslProfile]
    def read_lb_server_ssl_profile(lb_server_ssl_profile_id, opts = {})
      data, _status_code, _headers = read_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, opts)
      data
    end

    # Read LBServerSslProfile
    # Read a LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBServerSslProfile, Fixnum, Hash)>] LBServerSslProfile data, response status code and response headers
    def read_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.read_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile_id' when calling LoadBalancingApi.read_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-server-ssl-profiles/{lb-server-ssl-profile-id}'.sub('{' + 'lb-server-ssl-profile-id' + '}', lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#read_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBService
    # Read an LBService.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService ID
    # @param [Hash] opts the optional parameters
    # @return [LBService]
    def read_lb_service(lb_service_id, opts = {})
      data, _status_code, _headers = read_lb_service_with_http_info(lb_service_id, opts)
      data
    end

    # Read LBService
    # Read an LBService.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBService, Fixnum, Hash)>] LBService data, response status code and response headers
    def read_lb_service_with_http_info(lb_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.read_lb_service ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling LoadBalancingApi.read_lb_service"
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#read_lb_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the debug information of the load balancer service
    # API to download below information which will be used for debugging and troubleshooting. 1) Load balancer service 2) Load balancer associated virtual servers 3) Load balancer associated pools 4) Load balancer associated profiles such as persistence, SSL, application. 5) Load balancer associated monitors  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService ID
    # @param [Hash] opts the optional parameters
    # @return [LBServiceDebugInfo]
    def read_lb_service_debug_info(lb_service_id, opts = {})
      data, _status_code, _headers = read_lb_service_debug_info_with_http_info(lb_service_id, opts)
      data
    end

    # Read the debug information of the load balancer service
    # API to download below information which will be used for debugging and troubleshooting. 1) Load balancer service 2) Load balancer associated virtual servers 3) Load balancer associated pools 4) Load balancer associated profiles such as persistence, SSL, application. 5) Load balancer associated monitors  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBServiceDebugInfo, Fixnum, Hash)>] LBServiceDebugInfo data, response status code and response headers
    def read_lb_service_debug_info_with_http_info(lb_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.read_lb_service_debug_info ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling LoadBalancingApi.read_lb_service_debug_info"
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/debug-info'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServiceDebugInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#read_lb_service_debug_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBVirtualServer
    # Read a LBVirtualServer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_virtual_server_id LBVirtualServer ID
    # @param [Hash] opts the optional parameters
    # @return [LBVirtualServer]
    def read_lb_virtual_server(lb_virtual_server_id, opts = {})
      data, _status_code, _headers = read_lb_virtual_server_with_http_info(lb_virtual_server_id, opts)
      data
    end

    # Read LBVirtualServer
    # Read a LBVirtualServer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_virtual_server_id LBVirtualServer ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBVirtualServer, Fixnum, Hash)>] LBVirtualServer data, response status code and response headers
    def read_lb_virtual_server_with_http_info(lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.read_lb_virtual_server ...'
      end
      # verify the required parameter 'lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server_id' when calling LoadBalancingApi.read_lb_virtual_server"
      end
      # resource path
      local_var_path = '/infra/lb-virtual-servers/{lb-virtual-server-id}'.sub('{' + 'lb-virtual-server-id' + '}', lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBVirtualServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#read_lb_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBAppProfile
    # Read a LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBAppProfile]
    def read_vpc_lb_app_profile(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts)
      data
    end

    # Read LBAppProfile
    # Read a LBAppProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBAppProfile, Fixnum, Hash)>] LBAppProfile data, response status code and response headers
    def read_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.read_vpc_lb_app_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.read_vpc_lb_app_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.read_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.read_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_lb_app_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_app_profile_id' when calling LoadBalancingApi.read_vpc_lb_app_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-app-profiles/{vpc-lb-app-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-app-profile-id' + '}', vpc_lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#read_vpc_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBClientSslProfile
    # Read a LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBClientSslProfile]
    def read_vpc_lb_client_ssl_profile(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts)
      data
    end

    # Read LBClientSslProfile
    # Read a LBClientSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBClientSslProfile, Fixnum, Hash)>] LBClientSslProfile data, response status code and response headers
    def read_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.read_vpc_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.read_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.read_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.read_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_client_ssl_profile_id' when calling LoadBalancingApi.read_vpc_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-client-ssl-profiles/{vpc-lb-client-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-client-ssl-profile-id' + '}', vpc_lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#read_vpc_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBMonitorProfile
    # Read a LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBMonitorProfile]
    def read_vpc_lb_monitor_profile(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts)
      data
    end

    # Read LBMonitorProfile
    # Read a LBMonitorProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBMonitorProfile, Fixnum, Hash)>] LBMonitorProfile data, response status code and response headers
    def read_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.read_vpc_lb_monitor_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.read_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.read_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.read_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_monitor_profile_id' when calling LoadBalancingApi.read_vpc_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-monitor-profiles/{vpc-lb-monitor-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-monitor-profile-id' + '}', vpc_lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#read_vpc_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBPersistenceProfile
    # Read a LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBPersistenceProfile]
    def read_vpc_lb_persistence_profile(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts)
      data
    end

    # Read LBPersistenceProfile
    # Read a LBPersistenceProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPersistenceProfile, Fixnum, Hash)>] LBPersistenceProfile data, response status code and response headers
    def read_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.read_vpc_lb_persistence_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.read_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.read_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.read_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_persistence_profile_id' when calling LoadBalancingApi.read_vpc_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-persistence-profiles/{vpc-lb-persistence-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-persistence-profile-id' + '}', vpc_lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#read_vpc_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBPool
    # Read a LBPool.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param [Hash] opts the optional parameters
    # @return [LBPool]
    def read_vpc_lb_pool(org_id, project_id, vpc_id, vpc_lb_pool_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, opts)
      data
    end

    # Read LBPool
    # Read a LBPool.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPool, Fixnum, Hash)>] LBPool data, response status code and response headers
    def read_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.read_vpc_lb_pool ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.read_vpc_lb_pool"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.read_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.read_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_lb_pool_id' is set
      if @api_client.config.client_side_validation && vpc_lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_pool_id' when calling LoadBalancingApi.read_vpc_lb_pool"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-pools/{vpc-lb-pool-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-pool-id' + '}', vpc_lb_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#read_vpc_lb_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBServerSslProfile
    # Read a LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [LBServerSslProfile]
    def read_vpc_lb_server_ssl_profile(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts)
      data
    end

    # Read LBServerSslProfile
    # Read a LBServerSslProfile.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBServerSslProfile, Fixnum, Hash)>] LBServerSslProfile data, response status code and response headers
    def read_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.read_vpc_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.read_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.read_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.read_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_server_ssl_profile_id' when calling LoadBalancingApi.read_vpc_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-server-ssl-profiles/{vpc-lb-server-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-server-ssl-profile-id' + '}', vpc_lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#read_vpc_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read a load balancer
    # Read a load balancer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @return [LBService]
    def read_vpc_lb_service(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts)
      data
    end

    # Read a load balancer
    # Read a load balancer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBService, Fixnum, Hash)>] LBService data, response status code and response headers
    def read_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.read_vpc_lb_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.read_vpc_lb_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.read_vpc_lb_service"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.read_vpc_lb_service"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling LoadBalancingApi.read_vpc_lb_service"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#read_vpc_lb_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read LBVirtualServer
    # Read a LBVirtualServer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param [Hash] opts the optional parameters
    # @return [LBVirtualServer]
    def read_vpc_lb_virtual_server(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, opts = {})
      data, _status_code, _headers = read_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, opts)
      data
    end

    # Read LBVirtualServer
    # Read a LBVirtualServer.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBVirtualServer, Fixnum, Hash)>] LBVirtualServer data, response status code and response headers
    def read_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.read_vpc_lb_virtual_server ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.read_vpc_lb_virtual_server"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.read_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.read_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && vpc_lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_virtual_server_id' when calling LoadBalancingApi.read_vpc_lb_virtual_server"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-virtual-servers/{vpc-lb-virtual-server-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-virtual-server-id' + '}', vpc_lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBVirtualServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#read_vpc_lb_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBAppProfile
    # If a LBAppProfile with the lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBAppProfile]
    def update_lb_app_profile(lb_app_profile_id, lb_app_profile, opts = {})
      data, _status_code, _headers = update_lb_app_profile_with_http_info(lb_app_profile_id, lb_app_profile, opts)
      data
    end

    # Create or update a LBAppProfile
    # If a LBAppProfile with the lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBAppProfile, Fixnum, Hash)>] LBAppProfile data, response status code and response headers
    def update_lb_app_profile_with_http_info(lb_app_profile_id, lb_app_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.update_lb_app_profile ...'
      end
      # verify the required parameter 'lb_app_profile_id' is set
      if @api_client.config.client_side_validation && lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile_id' when calling LoadBalancingApi.update_lb_app_profile"
      end
      # verify the required parameter 'lb_app_profile' is set
      if @api_client.config.client_side_validation && lb_app_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile' when calling LoadBalancingApi.update_lb_app_profile"
      end
      # resource path
      local_var_path = '/infra/lb-app-profiles/{lb-app-profile-id}'.sub('{' + 'lb-app-profile-id' + '}', lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_app_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#update_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBClientSslProfile]
    def update_lb_client_ssl_profile(lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      data, _status_code, _headers = update_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, lb_client_ssl_profile, opts)
      data
    end

    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBClientSslProfile, Fixnum, Hash)>] LBClientSslProfile data, response status code and response headers
    def update_lb_client_ssl_profile_with_http_info(lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.update_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile_id' when calling LoadBalancingApi.update_lb_client_ssl_profile"
      end
      # verify the required parameter 'lb_client_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile' when calling LoadBalancingApi.update_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-client-ssl-profiles/{lb-client-ssl-profile-id}'.sub('{' + 'lb-client-ssl-profile-id' + '}', lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_client_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#update_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBMonitorProfile]
    def update_lb_monitor_profile(lb_monitor_profile_id, lb_monitor_profile, opts = {})
      data, _status_code, _headers = update_lb_monitor_profile_with_http_info(lb_monitor_profile_id, lb_monitor_profile, opts)
      data
    end

    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBMonitorProfile, Fixnum, Hash)>] LBMonitorProfile data, response status code and response headers
    def update_lb_monitor_profile_with_http_info(lb_monitor_profile_id, lb_monitor_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.update_lb_monitor_profile ...'
      end
      # verify the required parameter 'lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile_id' when calling LoadBalancingApi.update_lb_monitor_profile"
      end
      # verify the required parameter 'lb_monitor_profile' is set
      if @api_client.config.client_side_validation && lb_monitor_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile' when calling LoadBalancingApi.update_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/infra/lb-monitor-profiles/{lb-monitor-profile-id}'.sub('{' + 'lb-monitor-profile-id' + '}', lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_monitor_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#update_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBPersistenceProfile]
    def update_lb_persistence_profile(lb_persistence_profile_id, lb_persistence_profile, opts = {})
      data, _status_code, _headers = update_lb_persistence_profile_with_http_info(lb_persistence_profile_id, lb_persistence_profile, opts)
      data
    end

    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPersistenceProfile, Fixnum, Hash)>] LBPersistenceProfile data, response status code and response headers
    def update_lb_persistence_profile_with_http_info(lb_persistence_profile_id, lb_persistence_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.update_lb_persistence_profile ...'
      end
      # verify the required parameter 'lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile_id' when calling LoadBalancingApi.update_lb_persistence_profile"
      end
      # verify the required parameter 'lb_persistence_profile' is set
      if @api_client.config.client_side_validation && lb_persistence_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile' when calling LoadBalancingApi.update_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/infra/lb-persistence-profiles/{lb-persistence-profile-id}'.sub('{' + 'lb-persistence-profile-id' + '}', lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_persistence_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#update_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPool
    # If a LBPool with the lb-pool-id is not already present, create a new LBPool. If it already exists, update the LBPool. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_pool_id LBPool ID
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [LBPool]
    def update_lb_pool(lb_pool_id, lb_pool, opts = {})
      data, _status_code, _headers = update_lb_pool_with_http_info(lb_pool_id, lb_pool, opts)
      data
    end

    # Create or update a LBPool
    # If a LBPool with the lb-pool-id is not already present, create a new LBPool. If it already exists, update the LBPool. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_pool_id LBPool ID
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPool, Fixnum, Hash)>] LBPool data, response status code and response headers
    def update_lb_pool_with_http_info(lb_pool_id, lb_pool, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.update_lb_pool ...'
      end
      # verify the required parameter 'lb_pool_id' is set
      if @api_client.config.client_side_validation && lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool_id' when calling LoadBalancingApi.update_lb_pool"
      end
      # verify the required parameter 'lb_pool' is set
      if @api_client.config.client_side_validation && lb_pool.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool' when calling LoadBalancingApi.update_lb_pool"
      end
      # resource path
      local_var_path = '/infra/lb-pools/{lb-pool-id}'.sub('{' + 'lb-pool-id' + '}', lb_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_pool)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#update_lb_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBServerSslProfile]
    def update_lb_server_ssl_profile(lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      data, _status_code, _headers = update_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, lb_server_ssl_profile, opts)
      data
    end

    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBServerSslProfile, Fixnum, Hash)>] LBServerSslProfile data, response status code and response headers
    def update_lb_server_ssl_profile_with_http_info(lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.update_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile_id' when calling LoadBalancingApi.update_lb_server_ssl_profile"
      end
      # verify the required parameter 'lb_server_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile' when calling LoadBalancingApi.update_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/infra/lb-server-ssl-profiles/{lb-server-ssl-profile-id}'.sub('{' + 'lb-server-ssl-profile-id' + '}', lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_server_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#update_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBService
    # If a LBService with the lb-service-id is not already present, create a new LBService. If it already exists, update the LBService. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService ID
    # @param lb_service 
    # @param [Hash] opts the optional parameters
    # @return [LBService]
    def update_lb_service(lb_service_id, lb_service, opts = {})
      data, _status_code, _headers = update_lb_service_with_http_info(lb_service_id, lb_service, opts)
      data
    end

    # Create or update a LBService
    # If a LBService with the lb-service-id is not already present, create a new LBService. If it already exists, update the LBService. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_service_id LBService ID
    # @param lb_service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBService, Fixnum, Hash)>] LBService data, response status code and response headers
    def update_lb_service_with_http_info(lb_service_id, lb_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.update_lb_service ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling LoadBalancingApi.update_lb_service"
      end
      # verify the required parameter 'lb_service' is set
      if @api_client.config.client_side_validation && lb_service.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service' when calling LoadBalancingApi.update_lb_service"
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#update_lb_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBVirtualServer
    # If a LBVirtualServer with the lb-virtual-server-id is not already present, create a new LBVirtualServer. If it already exists, update the LBVirtualServer. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_virtual_server_id LBVirtualServer ID
    # @param lb_virtual_server 
    # @param [Hash] opts the optional parameters
    # @return [LBVirtualServer]
    def update_lb_virtual_server(lb_virtual_server_id, lb_virtual_server, opts = {})
      data, _status_code, _headers = update_lb_virtual_server_with_http_info(lb_virtual_server_id, lb_virtual_server, opts)
      data
    end

    # Create or update a LBVirtualServer
    # If a LBVirtualServer with the lb-virtual-server-id is not already present, create a new LBVirtualServer. If it already exists, update the LBVirtualServer. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param lb_virtual_server_id LBVirtualServer ID
    # @param lb_virtual_server 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBVirtualServer, Fixnum, Hash)>] LBVirtualServer data, response status code and response headers
    def update_lb_virtual_server_with_http_info(lb_virtual_server_id, lb_virtual_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.update_lb_virtual_server ...'
      end
      # verify the required parameter 'lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server_id' when calling LoadBalancingApi.update_lb_virtual_server"
      end
      # verify the required parameter 'lb_virtual_server' is set
      if @api_client.config.client_side_validation && lb_virtual_server.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server' when calling LoadBalancingApi.update_lb_virtual_server"
      end
      # resource path
      local_var_path = '/infra/lb-virtual-servers/{lb-virtual-server-id}'.sub('{' + 'lb-virtual-server-id' + '}', lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_virtual_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBVirtualServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#update_lb_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBAppProfile
    # If a LBAppProfile with the vpc-lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBAppProfile]
    def update_vpc_lb_app_profile(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts = {})
      data, _status_code, _headers = update_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts)
      data
    end

    # Create or update a LBAppProfile
    # If a LBAppProfile with the vpc-lb-app-profile-id is not already present, create a new LBAppProfile. If it already exists, update the LBAppProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_app_profile_id LBAppProfile ID
    # @param lb_app_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBAppProfile, Fixnum, Hash)>] LBAppProfile data, response status code and response headers
    def update_vpc_lb_app_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_app_profile_id, lb_app_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.update_vpc_lb_app_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.update_vpc_lb_app_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.update_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.update_vpc_lb_app_profile"
      end
      # verify the required parameter 'vpc_lb_app_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_app_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_app_profile_id' when calling LoadBalancingApi.update_vpc_lb_app_profile"
      end
      # verify the required parameter 'lb_app_profile' is set
      if @api_client.config.client_side_validation && lb_app_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_app_profile' when calling LoadBalancingApi.update_vpc_lb_app_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-app-profiles/{vpc-lb-app-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-app-profile-id' + '}', vpc_lb_app_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_app_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBAppProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#update_vpc_lb_app_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the vpc-lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBClientSslProfile]
    def update_vpc_lb_client_ssl_profile(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      data, _status_code, _headers = update_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts)
      data
    end

    # Create or update a LBClientSslProfile
    # If a LBClientSslProfile with the vpc-lb-client-ssl-profile-id is not already present, create a new LBClientSslProfile. If it already exists, update the LBClientSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_client_ssl_profile_id LBClientSslProfile ID
    # @param lb_client_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBClientSslProfile, Fixnum, Hash)>] LBClientSslProfile data, response status code and response headers
    def update_vpc_lb_client_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_client_ssl_profile_id, lb_client_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.update_vpc_lb_client_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.update_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.update_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.update_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_client_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_client_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_client_ssl_profile_id' when calling LoadBalancingApi.update_vpc_lb_client_ssl_profile"
      end
      # verify the required parameter 'lb_client_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_client_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_client_ssl_profile' when calling LoadBalancingApi.update_vpc_lb_client_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-client-ssl-profiles/{vpc-lb-client-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-client-ssl-profile-id' + '}', vpc_lb_client_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_client_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBClientSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#update_vpc_lb_client_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the vpc-lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBMonitorProfile]
    def update_vpc_lb_monitor_profile(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts = {})
      data, _status_code, _headers = update_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts)
      data
    end

    # Create or update a LBMonitorProfile
    # If a LBMonitorProfile with the vpc-lb-monitor-profile-id is not already present, create a new LBMonitorProfile. If it already exists, update the LBMonitorProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_monitor_profile_id LBMonitorProfile ID
    # @param lb_monitor_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBMonitorProfile, Fixnum, Hash)>] LBMonitorProfile data, response status code and response headers
    def update_vpc_lb_monitor_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_monitor_profile_id, lb_monitor_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.update_vpc_lb_monitor_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.update_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.update_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.update_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'vpc_lb_monitor_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_monitor_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_monitor_profile_id' when calling LoadBalancingApi.update_vpc_lb_monitor_profile"
      end
      # verify the required parameter 'lb_monitor_profile' is set
      if @api_client.config.client_side_validation && lb_monitor_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_monitor_profile' when calling LoadBalancingApi.update_vpc_lb_monitor_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-monitor-profiles/{vpc-lb-monitor-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-monitor-profile-id' + '}', vpc_lb_monitor_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_monitor_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBMonitorProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#update_vpc_lb_monitor_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the vpc-lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBPersistenceProfile]
    def update_vpc_lb_persistence_profile(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts = {})
      data, _status_code, _headers = update_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts)
      data
    end

    # Create or update a LBPersistenceProfile
    # If a LBPersistenceProfile with the vpc-lb-persistence-profile-id is not already present, create a new LBPersistenceProfile. If it already exists, update the LBPersistenceProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_persistence_profile_id LBPersistenceProfile ID
    # @param lb_persistence_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPersistenceProfile, Fixnum, Hash)>] LBPersistenceProfile data, response status code and response headers
    def update_vpc_lb_persistence_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_persistence_profile_id, lb_persistence_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.update_vpc_lb_persistence_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.update_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.update_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.update_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'vpc_lb_persistence_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_persistence_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_persistence_profile_id' when calling LoadBalancingApi.update_vpc_lb_persistence_profile"
      end
      # verify the required parameter 'lb_persistence_profile' is set
      if @api_client.config.client_side_validation && lb_persistence_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_persistence_profile' when calling LoadBalancingApi.update_vpc_lb_persistence_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-persistence-profiles/{vpc-lb-persistence-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-persistence-profile-id' + '}', vpc_lb_persistence_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_persistence_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPersistenceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#update_vpc_lb_persistence_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBPool
    # If a LBPool with the vpc-lb-pool-id is not already present, create a new LBPool. If it already exists, update the LBPool. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [LBPool]
    def update_vpc_lb_pool(org_id, project_id, vpc_id, vpc_lb_pool_id, lb_pool, opts = {})
      data, _status_code, _headers = update_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, lb_pool, opts)
      data
    end

    # Create or update a LBPool
    # If a LBPool with the vpc-lb-pool-id is not already present, create a new LBPool. If it already exists, update the LBPool. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_pool_id LBPool ID
    # @param lb_pool 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBPool, Fixnum, Hash)>] LBPool data, response status code and response headers
    def update_vpc_lb_pool_with_http_info(org_id, project_id, vpc_id, vpc_lb_pool_id, lb_pool, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.update_vpc_lb_pool ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.update_vpc_lb_pool"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.update_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.update_vpc_lb_pool"
      end
      # verify the required parameter 'vpc_lb_pool_id' is set
      if @api_client.config.client_side_validation && vpc_lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_pool_id' when calling LoadBalancingApi.update_vpc_lb_pool"
      end
      # verify the required parameter 'lb_pool' is set
      if @api_client.config.client_side_validation && lb_pool.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool' when calling LoadBalancingApi.update_vpc_lb_pool"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-pools/{vpc-lb-pool-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-pool-id' + '}', vpc_lb_pool_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_pool)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBPool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#update_vpc_lb_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the vpc-lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [LBServerSslProfile]
    def update_vpc_lb_server_ssl_profile(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      data, _status_code, _headers = update_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts)
      data
    end

    # Create or update a LBServerSslProfile
    # If a LBServerSslProfile with the vpc-lb-server-ssl-profile-id is not already present, create a new LBServerSslProfile. If it already exists, update the LBServerSslProfile. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_server_ssl_profile_id LBServerSslProfile ID
    # @param lb_server_ssl_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBServerSslProfile, Fixnum, Hash)>] LBServerSslProfile data, response status code and response headers
    def update_vpc_lb_server_ssl_profile_with_http_info(org_id, project_id, vpc_id, vpc_lb_server_ssl_profile_id, lb_server_ssl_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.update_vpc_lb_server_ssl_profile ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.update_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.update_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.update_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'vpc_lb_server_ssl_profile_id' is set
      if @api_client.config.client_side_validation && vpc_lb_server_ssl_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_server_ssl_profile_id' when calling LoadBalancingApi.update_vpc_lb_server_ssl_profile"
      end
      # verify the required parameter 'lb_server_ssl_profile' is set
      if @api_client.config.client_side_validation && lb_server_ssl_profile.nil?
        fail ArgumentError, "Missing the required parameter 'lb_server_ssl_profile' when calling LoadBalancingApi.update_vpc_lb_server_ssl_profile"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-server-ssl-profiles/{vpc-lb-server-ssl-profile-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-server-ssl-profile-id' + '}', vpc_lb_server_ssl_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_server_ssl_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServerSslProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#update_vpc_lb_server_ssl_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a load balancer
    # If a load balancer with the vpc-lb-id doesn't exist, create a new Load Balancer. If it has already existed, update the load balancer. This is a full replacement.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param lb_service 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Load Balancer Operation
    # @return [LBService]
    def update_vpc_lb_service(org_id, project_id, vpc_id, vpc_lb_id, lb_service, opts = {})
      data, _status_code, _headers = update_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, lb_service, opts)
      data
    end

    # Create or update a load balancer
    # If a load balancer with the vpc-lb-id doesn&#39;t exist, create a new Load Balancer. If it has already existed, update the load balancer. This is a full replacement.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_id Load Balancer ID
    # @param lb_service 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Load Balancer Operation
    # @return [Array<(LBService, Fixnum, Hash)>] LBService data, response status code and response headers
    def update_vpc_lb_service_with_http_info(org_id, project_id, vpc_id, vpc_lb_id, lb_service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.update_vpc_lb_service ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.update_vpc_lb_service"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.update_vpc_lb_service"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.update_vpc_lb_service"
      end
      # verify the required parameter 'vpc_lb_id' is set
      if @api_client.config.client_side_validation && vpc_lb_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_id' when calling LoadBalancingApi.update_vpc_lb_service"
      end
      # verify the required parameter 'lb_service' is set
      if @api_client.config.client_side_validation && lb_service.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service' when calling LoadBalancingApi.update_vpc_lb_service"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['allow_auto_relocation'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of allow_auto_relocation'
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lbs/{vpc-lb-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-id' + '}', vpc_lb_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#update_vpc_lb_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a LBVirtualServer
    # If a LBVirtualServer with the vpc-lb-virtual-server-id is not already present, create a new LBVirtualServer. If it already exists, update the LBVirtualServer. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param lb_virtual_server 
    # @param [Hash] opts the optional parameters
    # @return [LBVirtualServer]
    def update_vpc_lb_virtual_server(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, lb_virtual_server, opts = {})
      data, _status_code, _headers = update_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, lb_virtual_server, opts)
      data
    end

    # Create or update a LBVirtualServer
    # If a LBVirtualServer with the vpc-lb-virtual-server-id is not already present, create a new LBVirtualServer. If it already exists, update the LBVirtualServer. This is a full replace.  NSX Load Balancer availability in terms of use-cases and editions is specified in NSX Feature and Edition Guide. Please review before consuming those APIs. 
    # @param org_id Org ID
    # @param project_id Project ID
    # @param vpc_id VPC ID
    # @param vpc_lb_virtual_server_id LBVirtualServer ID
    # @param lb_virtual_server 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBVirtualServer, Fixnum, Hash)>] LBVirtualServer data, response status code and response headers
    def update_vpc_lb_virtual_server_with_http_info(org_id, project_id, vpc_id, vpc_lb_virtual_server_id, lb_virtual_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancingApi.update_vpc_lb_virtual_server ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling LoadBalancingApi.update_vpc_lb_virtual_server"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancingApi.update_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling LoadBalancingApi.update_vpc_lb_virtual_server"
      end
      # verify the required parameter 'vpc_lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && vpc_lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_lb_virtual_server_id' when calling LoadBalancingApi.update_vpc_lb_virtual_server"
      end
      # verify the required parameter 'lb_virtual_server' is set
      if @api_client.config.client_side_validation && lb_virtual_server.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server' when calling LoadBalancingApi.update_vpc_lb_virtual_server"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/vpcs/{vpc-id}/vpc-lb-virtual-servers/{vpc-lb-virtual-server-id}'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s).sub('{' + 'vpc-id' + '}', vpc_id.to_s).sub('{' + 'vpc-lb-virtual-server-id' + '}', vpc_lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lb_virtual_server)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBVirtualServer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancingApi#update_vpc_lb_virtual_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
