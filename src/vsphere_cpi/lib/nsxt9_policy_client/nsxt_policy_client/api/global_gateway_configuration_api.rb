=begin
#NSX Policy API

#VMware NSX Policy REST API

OpenAPI spec version: 9.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.46

=end

require 'uri'

module Nsxt9PolicyClient
  class GlobalGatewayConfigurationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Read security global configuration
    # This reads the security-global-config used for NSX Manager appliance certificates. These properties are not sent to the hosts. 
    # @param [Hash] opts the optional parameters
    # @return [InfraSecurityConfig]
    def global_infra_read_security_global_config(opts = {})
      data, _status_code, _headers = global_infra_read_security_global_config_with_http_info(opts)
      data
    end

    # Read security global configuration
    # This reads the security-global-config used for NSX Manager appliance certificates. These properties are not sent to the hosts. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InfraSecurityConfig, Fixnum, Hash)>] InfraSecurityConfig data, response status code and response headers
    def global_infra_read_security_global_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.global_infra_read_security_global_config ...'
      end
      # resource path
      local_var_path = '/global-infra/security-global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InfraSecurityConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#global_infra_read_security_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the security global configuration
    # This updates the security-global-config used for NSX Manager appliance certificates. These properties are not sent to the hosts. 
    # @param infra_security_config 
    # @param [Hash] opts the optional parameters
    # @return [InfraSecurityConfig]
    def global_infra_update_security_global_config(infra_security_config, opts = {})
      data, _status_code, _headers = global_infra_update_security_global_config_with_http_info(infra_security_config, opts)
      data
    end

    # Update the security global configuration
    # This updates the security-global-config used for NSX Manager appliance certificates. These properties are not sent to the hosts. 
    # @param infra_security_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InfraSecurityConfig, Fixnum, Hash)>] InfraSecurityConfig data, response status code and response headers
    def global_infra_update_security_global_config_with_http_info(infra_security_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.global_infra_update_security_global_config ...'
      end
      # verify the required parameter 'infra_security_config' is set
      if @api_client.config.client_side_validation && infra_security_config.nil?
        fail ArgumentError, "Missing the required parameter 'infra_security_config' when calling GlobalGatewayConfigurationApi.global_infra_update_security_global_config"
      end
      # resource path
      local_var_path = '/global-infra/security-global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra_security_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InfraSecurityConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#global_infra_update_security_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the connectivity global configuration
    # Update the connectivity global configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_connectivity_global_config(org_id, project_id, global_config, opts = {})
      orgs_org_id_projects_project_id_infra_patch_connectivity_global_config_with_http_info(org_id, project_id, global_config, opts)
      nil
    end

    # Update the connectivity global configuration
    # Update the connectivity global configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_connectivity_global_config_with_http_info(org_id, project_id, global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_patch_connectivity_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_patch_connectivity_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_patch_connectivity_global_config"
      end
      # verify the required parameter 'global_config' is set
      if @api_client.config.client_side_validation && global_config.nil?
        fail ArgumentError, "Missing the required parameter 'global_config' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_patch_connectivity_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/connectivity-global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#orgs_org_id_projects_project_id_infra_patch_connectivity_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the global configuration
    # Update the global configuration.  <br> This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infra_patch_global_config(org_id, project_id, global_config, opts = {})
      orgs_org_id_projects_project_id_infra_patch_global_config_with_http_info(org_id, project_id, global_config, opts)
      nil
    end

    # Update the global configuration
    # Update the global configuration.  &lt;br&gt; This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infra_patch_global_config_with_http_info(org_id, project_id, global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_patch_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_patch_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_patch_global_config"
      end
      # verify the required parameter 'global_config' is set
      if @api_client.config.client_side_validation && global_config.nil?
        fail ArgumentError, "Missing the required parameter 'global_config' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_patch_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#orgs_org_id_projects_project_id_infra_patch_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the connectivity global configuration
    # Read the connectivity global configuration 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [GlobalConfig]
    def orgs_org_id_projects_project_id_infra_read_connectivity_global_config(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_connectivity_global_config_with_http_info(org_id, project_id, opts)
      data
    end

    # Read the connectivity global configuration
    # Read the connectivity global configuration 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(GlobalConfig, Fixnum, Hash)>] GlobalConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_connectivity_global_config_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_read_connectivity_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_read_connectivity_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_read_connectivity_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/connectivity-global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#orgs_org_id_projects_project_id_infra_read_connectivity_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read global configuration
    # This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. Read global configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [GlobalConfig]
    def orgs_org_id_projects_project_id_infra_read_global_config(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_read_global_config_with_http_info(org_id, project_id, opts)
      data
    end

    # Read global configuration
    # This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. Read global configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(GlobalConfig, Fixnum, Hash)>] GlobalConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_read_global_config_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_read_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_read_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_read_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#orgs_org_id_projects_project_id_infra_read_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the connectivity global configuration
    # Update the connectivity global configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [GlobalConfig]
    def orgs_org_id_projects_project_id_infra_update_connectivity_global_config(org_id, project_id, global_config, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_connectivity_global_config_with_http_info(org_id, project_id, global_config, opts)
      data
    end

    # Update the connectivity global configuration
    # Update the connectivity global configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(GlobalConfig, Fixnum, Hash)>] GlobalConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_connectivity_global_config_with_http_info(org_id, project_id, global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_update_connectivity_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_update_connectivity_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_update_connectivity_global_config"
      end
      # verify the required parameter 'global_config' is set
      if @api_client.config.client_side_validation && global_config.nil?
        fail ArgumentError, "Missing the required parameter 'global_config' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_update_connectivity_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/connectivity-global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#orgs_org_id_projects_project_id_infra_update_connectivity_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the global configuration
    # This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. Update the global configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [GlobalConfig]
    def orgs_org_id_projects_project_id_infra_update_global_config(org_id, project_id, global_config, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infra_update_global_config_with_http_info(org_id, project_id, global_config, opts)
      data
    end

    # Update the global configuration
    # This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. Update the global configuration. 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(GlobalConfig, Fixnum, Hash)>] GlobalConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infra_update_global_config_with_http_info(org_id, project_id, global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_update_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_update_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_update_global_config"
      end
      # verify the required parameter 'global_config' is set
      if @api_client.config.client_side_validation && global_config.nil?
        fail ArgumentError, "Missing the required parameter 'global_config' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infra_update_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#orgs_org_id_projects_project_id_infra_update_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the global Operationconfiguration
    # Update the global Operationconfiguration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ops_global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [nil]
    def orgs_org_id_projects_project_id_infrapatch_ops_global_config(org_id, project_id, ops_global_config, opts = {})
      orgs_org_id_projects_project_id_infrapatch_ops_global_config_with_http_info(org_id, project_id, ops_global_config, opts)
      nil
    end

    # Update the global Operationconfiguration
    # Update the global Operationconfiguration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ops_global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def orgs_org_id_projects_project_id_infrapatch_ops_global_config_with_http_info(org_id, project_id, ops_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infrapatch_ops_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infrapatch_ops_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infrapatch_ops_global_config"
      end
      # verify the required parameter 'ops_global_config' is set
      if @api_client.config.client_side_validation && ops_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'ops_global_config' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infrapatch_ops_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ops-global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ops_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#orgs_org_id_projects_project_id_infrapatch_ops_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the global Operations Configuration
    # Update the global Operations Configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ops_global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [OpsGlobalConfig]
    def orgs_org_id_projects_project_id_infraput_ops_global_config(org_id, project_id, ops_global_config, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infraput_ops_global_config_with_http_info(org_id, project_id, ops_global_config, opts)
      data
    end

    # Update the global Operations Configuration
    # Update the global Operations Configuration
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param ops_global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(OpsGlobalConfig, Fixnum, Hash)>] OpsGlobalConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infraput_ops_global_config_with_http_info(org_id, project_id, ops_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infraput_ops_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infraput_ops_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infraput_ops_global_config"
      end
      # verify the required parameter 'ops_global_config' is set
      if @api_client.config.client_side_validation && ops_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'ops_global_config' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infraput_ops_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ops-global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ops_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OpsGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#orgs_org_id_projects_project_id_infraput_ops_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read global Operations Configuration
    # Read global Operations Configuration 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [OpsGlobalConfig]
    def orgs_org_id_projects_project_id_infraread_ops_global_config(org_id, project_id, opts = {})
      data, _status_code, _headers = orgs_org_id_projects_project_id_infraread_ops_global_config_with_http_info(org_id, project_id, opts)
      data
    end

    # Read global Operations Configuration
    # Read global Operations Configuration 
    # @param org_id The organization ID
    # @param project_id The project ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(OpsGlobalConfig, Fixnum, Hash)>] OpsGlobalConfig data, response status code and response headers
    def orgs_org_id_projects_project_id_infraread_ops_global_config_with_http_info(org_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infraread_ops_global_config ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infraread_ops_global_config"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling GlobalGatewayConfigurationApi.orgs_org_id_projects_project_id_infraread_ops_global_config"
      end
      # resource path
      local_var_path = '/orgs/{org-id}/projects/{project-id}/infra/ops-global-config'.sub('{' + 'org-id' + '}', org_id.to_s).sub('{' + 'project-id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OpsGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#orgs_org_id_projects_project_id_infraread_ops_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the connectivity global configuration
    # Update the connectivity global configuration
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [nil]
    def patch_connectivity_global_config(global_config, opts = {})
      patch_connectivity_global_config_with_http_info(global_config, opts)
      nil
    end

    # Update the connectivity global configuration
    # Update the connectivity global configuration
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_connectivity_global_config_with_http_info(global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.patch_connectivity_global_config ...'
      end
      # verify the required parameter 'global_config' is set
      if @api_client.config.client_side_validation && global_config.nil?
        fail ArgumentError, "Missing the required parameter 'global_config' when calling GlobalGatewayConfigurationApi.patch_connectivity_global_config"
      end
      # resource path
      local_var_path = '/infra/connectivity-global-config'

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#patch_connectivity_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the global configuration
    # Update the global configuration.  <br> This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. 
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [nil]
    def patch_global_config(global_config, opts = {})
      patch_global_config_with_http_info(global_config, opts)
      nil
    end

    # Update the global configuration
    # Update the global configuration.  &lt;br&gt; This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. 
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_global_config_with_http_info(global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.patch_global_config ...'
      end
      # verify the required parameter 'global_config' is set
      if @api_client.config.client_side_validation && global_config.nil?
        fail ArgumentError, "Missing the required parameter 'global_config' when calling GlobalGatewayConfigurationApi.patch_global_config"
      end
      # resource path
      local_var_path = '/infra/global-config'

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#patch_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the global Operationconfiguration
    # Update the global Operationconfiguration
    # @param ops_global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [nil]
    def patch_ops_global_config(ops_global_config, opts = {})
      patch_ops_global_config_with_http_info(ops_global_config, opts)
      nil
    end

    # Update the global Operationconfiguration
    # Update the global Operationconfiguration
    # @param ops_global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_ops_global_config_with_http_info(ops_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.patch_ops_global_config ...'
      end
      # verify the required parameter 'ops_global_config' is set
      if @api_client.config.client_side_validation && ops_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'ops_global_config' when calling GlobalGatewayConfigurationApi.patch_ops_global_config"
      end
      # resource path
      local_var_path = '/infra/ops-global-config'

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ops_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#patch_ops_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the global Operations Configuration
    # Update the global Operations Configuration
    # @param ops_global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [OpsGlobalConfig]
    def put_ops_global_config(ops_global_config, opts = {})
      data, _status_code, _headers = put_ops_global_config_with_http_info(ops_global_config, opts)
      data
    end

    # Update the global Operations Configuration
    # Update the global Operations Configuration
    # @param ops_global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(OpsGlobalConfig, Fixnum, Hash)>] OpsGlobalConfig data, response status code and response headers
    def put_ops_global_config_with_http_info(ops_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.put_ops_global_config ...'
      end
      # verify the required parameter 'ops_global_config' is set
      if @api_client.config.client_side_validation && ops_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'ops_global_config' when calling GlobalGatewayConfigurationApi.put_ops_global_config"
      end
      # resource path
      local_var_path = '/infra/ops-global-config'

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ops_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OpsGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#put_ops_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read the connectivity global configuration
    # Read the connectivity global configuration 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [GlobalConfig]
    def read_connectivity_global_config(opts = {})
      data, _status_code, _headers = read_connectivity_global_config_with_http_info(opts)
      data
    end

    # Read the connectivity global configuration
    # Read the connectivity global configuration 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(GlobalConfig, Fixnum, Hash)>] GlobalConfig data, response status code and response headers
    def read_connectivity_global_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.read_connectivity_global_config ...'
      end
      # resource path
      local_var_path = '/infra/connectivity-global-config'

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#read_connectivity_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read global configuration
    # This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. Read global configuration. 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [GlobalConfig]
    def read_global_config(opts = {})
      data, _status_code, _headers = read_global_config_with_http_info(opts)
      data
    end

    # Read global configuration
    # This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. Read global configuration. 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(GlobalConfig, Fixnum, Hash)>] GlobalConfig data, response status code and response headers
    def read_global_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.read_global_config ...'
      end
      # resource path
      local_var_path = '/infra/global-config'

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#read_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read global Operations Configuration
    # Read global Operations Configuration 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [OpsGlobalConfig]
    def read_ops_global_config(opts = {})
      data, _status_code, _headers = read_ops_global_config_with_http_info(opts)
      data
    end

    # Read global Operations Configuration
    # Read global Operations Configuration 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(OpsGlobalConfig, Fixnum, Hash)>] OpsGlobalConfig data, response status code and response headers
    def read_ops_global_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.read_ops_global_config ...'
      end
      # resource path
      local_var_path = '/infra/ops-global-config'

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OpsGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#read_ops_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security global configuration
    # This reads the security-global-config used for NSX Manager appliance certificates. These properties are not sent to the hosts. 
    # @param [Hash] opts the optional parameters
    # @return [InfraSecurityConfig]
    def read_security_global_config(opts = {})
      data, _status_code, _headers = read_security_global_config_with_http_info(opts)
      data
    end

    # Read security global configuration
    # This reads the security-global-config used for NSX Manager appliance certificates. These properties are not sent to the hosts. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InfraSecurityConfig, Fixnum, Hash)>] InfraSecurityConfig data, response status code and response headers
    def read_security_global_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.read_security_global_config ...'
      end
      # resource path
      local_var_path = '/infra/security-global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InfraSecurityConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#read_security_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the connectivity global configuration
    # Update the connectivity global configuration
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [GlobalConfig]
    def update_connectivity_global_config(global_config, opts = {})
      data, _status_code, _headers = update_connectivity_global_config_with_http_info(global_config, opts)
      data
    end

    # Update the connectivity global configuration
    # Update the connectivity global configuration
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(GlobalConfig, Fixnum, Hash)>] GlobalConfig data, response status code and response headers
    def update_connectivity_global_config_with_http_info(global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.update_connectivity_global_config ...'
      end
      # verify the required parameter 'global_config' is set
      if @api_client.config.client_side_validation && global_config.nil?
        fail ArgumentError, "Missing the required parameter 'global_config' when calling GlobalGatewayConfigurationApi.update_connectivity_global_config"
      end
      # resource path
      local_var_path = '/infra/connectivity-global-config'

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#update_connectivity_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the global configuration
    # This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. Update the global configuration. 
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource (default to false)
    # @return [GlobalConfig]
    def update_global_config(global_config, opts = {})
      data, _status_code, _headers = update_global_config_with_http_info(global_config, opts)
      data
    end

    # Update the global configuration
    # This rest routine is deprecated. Use /infra/connectivity-global-config for Connectivity global config and /infra/ops-global-config for Operations global config. Update the global configuration. 
    # @param global_config 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :apply_locally Flag to check reaching NSX+ or LM resource
    # @return [Array<(GlobalConfig, Fixnum, Hash)>] GlobalConfig data, response status code and response headers
    def update_global_config_with_http_info(global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.update_global_config ...'
      end
      # verify the required parameter 'global_config' is set
      if @api_client.config.client_side_validation && global_config.nil?
        fail ArgumentError, "Missing the required parameter 'global_config' when calling GlobalGatewayConfigurationApi.update_global_config"
      end
      # resource path
      local_var_path = '/infra/global-config'

      # query parameters
      query_params = {}
      query_params[:'apply_locally'] = opts[:'apply_locally'] if !opts[:'apply_locally'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#update_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the security global configuration
    # This updates the security-global-config used for NSX Manager appliance certificates. These properties are not sent to the hosts. 
    # @param infra_security_config 
    # @param [Hash] opts the optional parameters
    # @return [InfraSecurityConfig]
    def update_security_global_config(infra_security_config, opts = {})
      data, _status_code, _headers = update_security_global_config_with_http_info(infra_security_config, opts)
      data
    end

    # Update the security global configuration
    # This updates the security-global-config used for NSX Manager appliance certificates. These properties are not sent to the hosts. 
    # @param infra_security_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InfraSecurityConfig, Fixnum, Hash)>] InfraSecurityConfig data, response status code and response headers
    def update_security_global_config_with_http_info(infra_security_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalGatewayConfigurationApi.update_security_global_config ...'
      end
      # verify the required parameter 'infra_security_config' is set
      if @api_client.config.client_side_validation && infra_security_config.nil?
        fail ArgumentError, "Missing the required parameter 'infra_security_config' when calling GlobalGatewayConfigurationApi.update_security_global_config"
      end
      # resource path
      local_var_path = '/infra/security-global-config'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra_security_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InfraSecurityConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalGatewayConfigurationApi#update_security_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
